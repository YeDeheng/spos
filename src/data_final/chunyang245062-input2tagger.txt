What's	N
the	N
difference	N
between	N
JavaScript	N
and	N
Java	N
?	N

What's	N
the	N
difference	N
between	N
JavaScript	N
and	N
Java	N
?	N

Everything	N
.	N
They're	N
unrelated	N
languages	N
.	N

Everything	N
.	N
Snap	N
!	N

*	N
Punches	N
in	N
the	N
arm*	N
.	N
According	N
to	N
wikipedia	N
,	N
I	N
am	N
required	N
to	N
do	N
so	N
after	N
you	N
jinxed	N
me	N
and	N
before	N
I	N
can	N
speak	N
again	N
.	N
http://en.wikipedia.org/wiki/Jinx	N

You	N
misread	N
that	N
-	N
I	N
get	N
to	N
punch	N
you	N
now	N
.	N
And	N
get	N
me	N
my	N
Coke	N
.	N

Everything	N
.	N
JavaScript	N
was	N
named	N
this	N
way	N
by	N
Netscape	N
to	N
confuse	N
the	N
unwary	N
into	N
thinking	N
it	N
had	N
something	N
to	N
do	N
with	N
Java	N
,	N
the	N
buzzword	N
of	N
the	N
day	N
,	N
and	N
it	N
succeeded	N
.	N
The	N
two	N
languages	N
are	N
entirely	N
distinct	N
.	N

Javascript	N
was	N
originally	N
called	N
Livescript	N
,	N
and	N
the	N
world	N
would	N
probably	N
be	N
a	N
better	N
place	N
today	N
if	N
they	N
hadn't	N
renamed	N
it	N
!	N

I	N
doubt	N
it	N
was	N
to	N
cause	N
confusion	N
-	N
what's	N
the	N
benefit	N
to	N
the	N
company	N
of	N
that	N
?	N
I	N
suspect	N
the	N
_intent_	N
was	N
to	N
ride	N
on	N
the	N
success	N
of	N
Java	N
,	N
although	N
the	N
_effect_	N
was	N
what	N
you	N
stated	N
.	N

"	N
ride	N
the	N
success	N
of	N
java	N
"	N
by	N
calling	N
something	N
unrelated	N
with	N
a	N
similar	N
name	N
?	N
That	N
sounds	N
very	N
much	N
like	N
"	N
causing	N
confusion	N
for	N
marketing	N
purposes	N
"	N
to	N
me	N
.	N

Sun	N
tried	N
this	N
naming	N
trick	N
again	N
with	N
the	N
"	N
Sun	N
Java	N
Desktop	N
"	N
,	N
which	N
was	N
essentially	N
a	N
branded	N
version	N
of	N
Gnome	N
and	N
had	N
nothing	N
to	N
do	N
with	N
Java	N
.	N

@Pax	N
-	N
Put	N
another	N
way	N
,	N
it	N
confused	N
the	N
unwary	N
into	N
thinking	N
it	N
had	N
something	N
to	N
do	N
with	N
Java	N
,	N
the	N
buzzword	N
of	N
the	N
day	N
.	N

Yeah	N
,	N
and	N
it	N
worked	N
.	N
@Greg	N
Hewgill	N
,	N
the	N
world	N
might	N
be	N
a	N
better	N
place	N
,	N
but	N
Javascript	N
probably	N
wouldn't	N
be	N
where	N
it	N
is	N
today	N
.	N

@Just	N
Some	N
Guy	N
-	N
Well	N
said	N
.	N
I	N
improved	N
my	N
answer	N
by	N
adding	N
some	N
of	N
your	N
wit	N
.	N

The	N
reason	N
they	N
changed	N
the	N
name	N
was	N
to	N
in	N
some	N
way	N
pacify	N
Sun	N
who	N
at	N
that	N
point	N
were	N
involved	N
with	N
Netscape	N

Java	N
and	N
Javascript	N
are	N
similar	N
like	N
Car	N
and	N
Carpet	N
are	N
similar	N
.	N

Awesome	N
answer	N
.	N
I	N
need	N
to	N
remember	N
it	N
!	N

from	N
ddaa	N
import	N
wit	N
#	N
I	N
wish	N
I	N
had	N
come	N
up	N
with	N
that	N
one	N
!	N

That	N
is	N
the	N
best	N
answer	N
ever	N
.	N
If	N
it	N
is	N
original	N
(	N
i.e.	N
you	N
hadn't	N
heard	N
it	N
from	N
somewhere	N
else	N
)	N
you	N
are	N
a	N
genius	N
.	N
I	N
am	N
going	N
to	N
start	N
quoting	N
this	N
...	N

Unfortunately	N
,	N
I	N
can't	N
claim	N
originality	N
.	N
I	N
don't	N
recall	N
where	N
I	N
first	N
heard	N
it	N
,	N
however	N
.	N

Damn	N
,	N
this	N
answer	N
earned	N
you	N
690	N
rep	N
atleast	N
.	N
It	N
is	N
a	N
great	N
answer	N
still	N
.	N

Great	N
answer	N
.	N
Simple	N
and	N
lets	N
you	N
get	N
the	N
idea	N
.	N

He	N
didn't	N
.	N
200	N
max	N
per	N
day	N
.	N

i	N
don't	N
think	N
it's	N
a	N
flaw	N
.	N
he	N
deserved	N
his	N
points	N
.	N
this	N
is	N
a	N
short	N
answer	N
,	N
and	N
all	N
he	N
needs	N
to	N
know	N
.	N

lol	N
,	N
very	N
nice	N
comparison	N
.	N

I	N
would	N
vote	N
this	N
up	N
twice	N
if	N
I	N
could	N
.	N
Great	N
analogy	N
!	N

+1	N
(	N
just	N
to	N
help	N
Tim	N
!	N
)	N

I	N
would	N
have	N
said	N
car	N
and	N
bus	N
.	N

@Ian	N
Quigley	N
:	N
Ah	N
,	N
that	N
must	N
have	N
been	N
where	N
I	N
saw	N
it	N
!	N
Thanks	N
.	N

Greg	N
Hewgil	N
,	N
you're	N
my	N
new	N
hero	N
man	N
!	N

I	N
prefer	N
the	N
version	N
about	N
ham	N
and	N
hamster	N
.	N

This	N
is	N
a	N
bad	N
answer	N
.	N
Javascript	N
and	N
Java	N
are	N
both	N
languages	N
for	N
writing	N
code	N
,	N
but	N
they	N
are	N
used	N
in	N
different	N
contexts	N
.	N
Car	N
and	N
Carpet	N
are	N
nothing	N
at	N
all	N
like	N
each	N
other	N
.	N
Javascript	N
and	N
Java	N
are	N
easy	N
to	N
confuse	N
for	N
a	N
beginner	N

Here	N
are	N
some	N
differences	N
between	N
the	N
two	N
languages	N
:	N
Java	N
is	N
a	N
statically	N
typed	N
language	N
;	N
JavaScript	N
is	N
dynamic	N
.	N
Java	N
is	N
class-based	N
;	N
JavaScript	N
is	N
prototype-based	N
.	N
Java	N
constructors	N
are	N
special	N
functions	N
that	N
can	N
only	N
be	N
called	N
at	N
object	N
creation	N
;	N
JavaScript	N
"	N
constructors	N
"	N
are	N
just	N
standard	N
functions	N
.	N
Java	N
requires	N
all	N
non-block	N
statements	N
to	N
end	N
with	N
a	N
semicolon	N
;	N
JavaScript	N
inserts	N
semicolons	N
at	N
the	N
ends	N
of	N
certain	N
lines	N
.	N
Java	N
uses	N
block-based	N
scoping	N
;	N
JavaScript	N
uses	N
function-based	N
scoping	N
.	N
Java	N
has	N
an	N
implicit	N
this	N
scope	N
for	N
non-static	N
methods	N
,	N
and	N
implicit	N
class	N
scope	N
;	N
JavaScript	N
has	N
implicit	N
global	N
scope	N
.	N
Here	N
are	N
some	N
features	N
that	N
I	N
think	N
are	N
particular	N
strengths	N
of	N
JavaScript	N
:	N
JavaScript	N
supports	N
closures	N
;	N
Java	N
can	N
simulate	N
sort-of	N
"	N
closures	N
"	N
using	N
anonymous	N
classes	N
.	N
(	N
Real	N
closures	N
may	N
be	N
supported	N
in	N
a	N
future	N
version	N
of	N
Java	N
.	N
)	N
All	N
JavaScript	N
functions	N
are	N
variadic	N
;	N
Java	N
functions	N
are	N
only	N
variadic	N
if	N
explicitly	N
marked	N
.	N
JavaScript	N
prototypes	N
can	N
be	N
redefined	N
at	N
runtime	N
,	N
and	N
has	N
immediate	N
effect	N
for	N
all	N
referring	N
objects	N
.	N
Java	N
classes	N
cannot	N
be	N
redefined	N
in	N
a	N
way	N
that	N
affects	N
any	N
existing	N
object	N
instances	N
.	N
JavaScript	N
allows	N
methods	N
in	N
an	N
object	N
to	N
be	N
redefined	N
independently	N
of	N
its	N
prototype	N
(	N
think	N
eigenclasses	N
in	N
Ruby	N
,	N
but	N
on	N
steroids	N
);	N
methods	N
in	N
a	N
Java	N
object	N
are	N
tied	N
to	N
its	N
class	N
,	N
and	N
cannot	N
be	N
redefined	N
at	N
runtime	N
.	N

2	N
years	N
late	N
,	N
but	N
thank	N
you	N
so	N
much	N
for	N
this	N
thoughtful	N
explanation	N
.	N
It's	N
way	N
more	N
useful	N
and	N
informative	N
than	N
the	N
selected	N
answer	N
,	N
and	N
deserves	N
far	N
more	N
votes	N
IMO	N

I	N
upvote	N
both	N
in	N
such	N
cases	N
.	N
We	N
need	N
the	N
right	N
answer	N
,	N
but	N
holy	N
shmoly	N
,	N
geeks	N
like	N
us	N
we	N
really	N
need	N
more	N
of	N
this	N
humor	N

You	N
might	N
also	N
here	N
strongly-typed	N
and	N
loosely-typed	N
instead	N
of	N
statically-typed	N
and	N
dynamically-typed	N
.	N

One	N
is	N
essentially	N
a	N
toy	N
,	N
designed	N
for	N
writing	N
small	N
pieces	N
of	N
code	N
,	N
and	N
traditionally	N
used	N
and	N
abused	N
by	N
inexperienced	N
programmers	N
.	N
The	N
other	N
is	N
a	N
scripting	N
language	N
for	N
web	N
browsers	N
.	N

Overtly	N
trollish	N
,	N
but	N
somewhat	N
funny	N
.	N

Gave	N
me	N
a	N
chuckle	N
.	N
Enough	N
for	N
+1	N

If	N
we	N
could	N
do	N
categorical	N
votes	N
,	N
I'd	N
vote	N
+1	N
funny	N
,	N
but	N
otherwise	N
,	N
meh	N
.	N

I	N
was	N
about	N
to	N
berate	N
you	N
for	N
dissing	N
Javascript	N
when	N
it	N
had	N
come	N
so	N
far	N
in	N
the	N
last	N
few	N
years	N
.	N
Then	N
I	N
rid	N
the	N
second	N
paragraph	N
and	N
L'dOL	N
.	N
But	N
,	N
hang	N
on	N
a	N
mo	N
,	N
Java	N
is	N
my	N
main	N
income	N
earner	N
...	N
:-)	N

I	N
downvoted	N
this	N
,	N
then	N
read	N
it	N
properly	N
,	N
then	N
upvoted	N
it	N
.	N

Poetry	N
,	N
Shog	N
.	N
Sheer	N
poetry	N
.	N

Perfect	N
-	N
+1	N
for	N
humor	N
,	N
as	N
someone	N
else	N
said	N
,	N
but	N
-1	N
for	N
actually	N
answering	N
the	N
question	N
.	N

downvoted	N
for	N
dissing	N
Javascript	N
,	N
then	N
noticing	N
you	N
were	N
talking	N
about	N
JAVA	N
and	N
upvoted	N
(	N
and	N
lol'ed	N
alot	N
)	N
.	N

-1	N
factually	N
incorrect	N
and	N
not	N
that	N
funny	N
.	N

It's	N
sad	N
that	N
I	N
can	N
only	N
upvote	N
once	N
.	N
This	N
is	N
going	N
on	N
my	N
Facebook	N
profile	N
somewhere	N
...	N

ROFL	N
...	N
That	N
was	N
funny	N
.	N

But	N
which	N
language	N
goes	N
with	N
which	N
description(wasn't	N
java	N
meant	N
to	N
be	N
used	N
as	N
a	N
well	N
not	N
quite	N
scripting	N
but	N
everything	N
else	N
for	N
the	N
net	N
during	N
some	N
point	N
in	N
the	N
90s-by	N
sun	N
and	N
netscape	N
)	N
?	N
Also	N
who	N
writes	N
small	N
pieces	N
of	N
code	N
in	N
java	N
?	N

@Roman	N
well	N
of	N
course	N
,	N
the	N
proper	N
Java	N
way	N
is	N
to	N
write	N
at	N
least	N
20	N
different	N
classes	N
using	N
intricate	N
inheritance	N
and	N
other	N
cool	N
OOP	N
features	N
to	N
complete	N
a	N
FizzBuzz	N
:)	N

Jeeez	N
.	N
I	N
almost	N
downvoted	N
the	N
answer	N
,	N
when	N
I	N
started	N
to	N
read	N
the	N
first	N
sentence	N
:D	N

twitted	N
right	N
after	N
finishing	N
laughing	N
...	N

Oh	N
my	N
gosh	N
...	N
hilarious	N
!	N
+1	N

Actually	N
,	N
javascript	N
isn't	N
just	N
for	N
browsers	N
.	N
It's	N
a	N
complete	N
scripting	N
language	N
often	N
used	N
for	N
many	N
applications	N
that	N
requires	N
scripts	N
.	N
And	N
Java	N
isn't	N
just	N
for	N
inexperienced	N
or	N
idiots	N
.	N
It	N
can	N
acomplish	N
many	N
things	N
within	N
no	N
time	N
.	N

Brilliant	N
.	N
A	N
heartfelt	N
+1	N

They	N
are	N
independent	N
languages	N
with	N
unrelated	N
lineages	N
.	N
Brendan	N
Eich	N
created	N
Javascript	N
originally	N
at	N
Netscape	N
.	N
It	N
was	N
initially	N
called	N
Mocha	N
.	N
The	N
choice	N
of	N
Javascript	N
as	N
a	N
name	N
was	N
a	N
nod	N
,	N
if	N
you	N
will	N
,	N
to	N
the	N
then	N
ascendant	N
Java	N
programming	N
language	N
,	N
developed	N
at	N
Sun	N
by	N
Patrick	N
Naughton	N
,	N
James	N
Gosling	N
,	N
et	N
.	N
al	N
.	N

JavaScript	N
is	N
an	N
object-oriented	N
scripting	N
language	N
that	N
allows	N
you	N
to	N
create	N
dynamic	N
HTML	N
pages	N
,	N
allowing	N
you	N
to	N
process	N
input	N
data	N
and	N
maintain	N
data	N
,	N
usually	N
within	N
the	N
browser	N
.	N
Java	N
is	N
a	N
programming	N
language	N
,	N
core	N
set	N
of	N
libraries	N
,	N
and	N
virtual	N
machine	N
platform	N
that	N
allows	N
you	N
to	N
create	N
compiled	N
programs	N
that	N
run	N
on	N
nearly	N
every	N
platform	N
,	N
without	N
distribution	N
of	N
source	N
code	N
in	N
its	N
raw	N
form	N
or	N
recompilation	N
.	N
While	N
the	N
two	N
have	N
similar	N
names	N
,	N
they	N
are	N
really	N
two	N
completely	N
different	N
programming	N
languages	N
/	N
models	N
/	N
platforms	N
,	N
and	N
are	N
used	N
to	N
solve	N
completely	N
different	N
sets	N
of	N
problems	N
.	N
Also	N
,	N
this	N
is	N
directly	N
from	N
the	N
Wikipedia	N
Javascript	N
article	N
:	N
A	N
common	N
misconception	N
is	N
that	N
JavaScript	N
is	N
similar	N
or	N
closely	N
related	N
to	N
Java	N
;	N
this	N
is	N
not	N
so	N
.	N
Both	N
have	N
a	N
C-like	N
syntax	N
,	N
are	N
object-oriented	N
,	N
are	N
typically	N
sandboxed	N
and	N
are	N
widely	N
used	N
in	N
client-side	N
Web	N
applications	N
,	N
but	N
the	N
similarities	N
end	N
there	N
.	N
Java	N
has	N
static	N
typing	N
;	N
JavaScript's	N
typing	N
is	N
dynamic	N
(	N
meaning	N
a	N
variable	N
can	N
hold	N
an	N
object	N
of	N
any	N
type	N
and	N
cannot	N
be	N
restricted	N
)	N
.	N
Java	N
is	N
loaded	N
from	N
compiled	N
bytecode	N
;	N
JavaScript	N
is	N
loaded	N
as	N
human-readable	N
code	N
.	N
C	N
is	N
their	N
last	N
common	N
ancestor	N
language	N
.	N

Javascript	N
isn't	N
just	N
for	N
HTML	N
pages	N
,	N
Java6	N
now	N
includes	N
it	N
,	N
BIRT	N
uses	N
it	N
for	N
report	N
scripting	N
-	N
I'm	N
sure	N
that	N
there	N
are	N
other	N
non-HTML	N
uses	N
beyond	N
these	N
two	N
.	N

You're	N
right	N
.	N
With	N
the	N
development	N
of	N
Rhino	N
,	N
and	N
some	N
of	N
the	N
other	N
developments	N
you	N
mentioned	N
,	N
Javascript	N
has	N
come	N
pretty	N
far	N
out	N
of	N
the	N
browser	N
sandbox	N
.	N

Scripting	N
is	N
simply	N
one	N
particular	N
kind	N
of	N
programming	N
...	N
instead	N
you	N
should	N
say	N
perhaps	N
that	N
Java	N
is	N
a	N
compiled	N
programming	N
language	N
and	N
javascript	N
is	N
a	N
scripting	N
or	N
interpreted	N
programming	N
language	N
.	N

Take	N
a	N
look	N
at	N
the	N
Wikipedia	N
link	N
JavaScript	N
,	N
despite	N
the	N
name	N
,	N
is	N
essentially	N
unrelated	N
to	N
the	N
Java	N
programming	N
language	N
,	N
although	N
both	N
have	N
the	N
common	N
C	N
syntax	N
,	N
and	N
JavaScript	N
copies	N
many	N
Java	N
names	N
and	N
naming	N
conventions	N
.	N
The	N
language	N
was	N
originally	N
named	N
"	N
LiveScript	N
"	N
but	N
was	N
renamed	N
in	N
a	N
co-marketing	N
deal	N
between	N
Netscape	N
and	N
Sun	N
,	N
in	N
exchange	N
for	N
Netscape	N
bundling	N
Sun's	N
Java	N
runtime	N
with	N
their	N
then-dominant	N
browser	N
.	N
The	N
key	N
design	N
principles	N
within	N
JavaScript	N
are	N
inherited	N
from	N
the	N
Self	N
and	N
Scheme	N
programming	N
languages	N
.	N

They	N
have	N
nothing	N
to	N
do	N
with	N
each	N
other	N
.	N
Java	N
is	N
statically	N
typed	N
,	N
compiles	N
,	N
runs	N
on	N
its	N
own	N
VM	N
.	N
Javascript	N
is	N
dynamically	N
typed	N
,	N
interpreted	N
,	N
and	N
runs	N
in	N
a	N
browser	N
.	N
It	N
also	N
has	N
first-class	N
functions	N
and	N
anonymous	N
functions	N
,	N
which	N
Java	N
does	N
not	N
.	N
It	N
has	N
direct	N
access	N
to	N
web-page	N
elements	N
,	N
which	N
makes	N
it	N
useful	N
for	N
doing	N
client-side	N
processing	N
.	N
They	N
are	N
also	N
somewhat	N
similar	N
in	N
syntax	N
,	N
but	N
that's	N
about	N
it	N
.	N

Like	N
everybody's	N
saying	N
,	N
they're	N
pretty	N
much	N
entirely	N
different	N
.	N
However	N
,	N
if	N
you	N
need	N
a	N
scripting	N
language	N
for	N
your	N
Java	N
application	N
,	N
Javascript	N
is	N
actually	N
a	N
really	N
good	N
choice	N
.	N
There	N
are	N
ways	N
to	N
get	N
Javascript	N
running	N
in	N
the	N
JVM	N
and	N
you	N
can	N
access	N
and	N
manipulate	N
Java	N
classes	N
pretty	N
seamlessly	N
once	N
you	N
do	N
.	N

In	N
addittion	N
to	N
being	N
entirely	N
different	N
languages	N
,	N
in	N
my	N
experience	N
:	N
Java	N
looks	N
nice	N
at	N
first	N
,	N
later	N
it	N
gets	N
annoying	N
.	N
JavaScript	N
looks	N
awful	N
and	N
hopeless	N
at	N
first	N
,	N
then	N
gradually	N
you	N
really	N
start	N
to	N
like	N
it	N
.	N
(	N
But	N
this	N
may	N
just	N
have	N
more	N
to	N
do	N
with	N
my	N
preference	N
of	N
functional	N
programming	N
over	N
OO	N
programming	N
...	N
;)	N

Same	N
experience	N
here	N
.	N

Practically	N
every	N
PC	N
in	N
the	N
world	N
sells	N
with	N
at	N
least	N
one	N
JavaScript	N
interpreter	N
installed	N
on	N
it	N
.	N
Most	N
(	N
but	N
not	N
"	N
practically	N
all	N
")	N
PCs	N
have	N
a	N
Java	N
VM	N
installed	N
.	N

A	N
Re-Introduction	N
to	N
Javascript	N
by	N
the	N
Mozilla	N
team	N
(	N
they	N
make	N
Firefox	N
)	N
should	N
explain	N
it	N
.	N

It's	N
like	N
they	N
didn't	N
bother	N
to	N
edit	N
it	N
even	N
a	N
little	N
.	N

Java	N
is	N
to	N
JavaScript	N
as	N
ham	N
is	N
to	N
hamster	N

Where	N
do	N
you	N
think	N
ham	N
comes	N
from	N
?	N
;)	N

It	N
comes	N
from	N
a	N
big	N
hamster	N
;	N
it's	N
so	N
big	N
that	N
you	N
could	N
confuse	N
it	N
with	N
a	N
pig	N
.	N
`	N
;)	N
`	N

Don't	N
be	N
confused	N
with	N
name	N
..	N
Java	N
was	N
created	N
at	N
Sun	N
Microsystems	N
(	N
now	N
Oracle	N
)	N
.	N
But	N
,	N
JavaScript	N
was	N
created	N
at	N
Netscape	N
(	N
now	N
Mozilla	N
)	N
in	N
the	N
early	N
days	N
of	N
the	N
Web	N
,	N
and	N
technically	N
,	N
Java-Script	N
is	N
a	N
trademark	N
licensed	N
from	N
Sun	N
Microsystems	N
used	N
to	N
describe	N
Netscape	N
s	N
implementation	N
of	N
the	N
language	N
.	N
Netscape	N
submitted	N
the	N
language	N
for	N
standardization	N
to	N
ECMA	N
(	N
European	N
Computer	N
Manufacturer	N
s	N
Association	N
)	N
and	N
because	N
of	N
trademark	N
issues	N
,	N
the	N
standardized	N
version	N
of	N
the	N
language	N
was	N
stuck	N
with	N
the	N
awkward	N
name	N
ECMAScript	N
.	N
For	N
the	N
same	N
trademark	N
reasons	N
,	N
Microsoft	N
s	N
version	N
of	N
the	N
language	N
is	N
formally	N
known	N
as	N
JScript	N
.	N
In	N
practice	N
,	N
just	N
about	N
everyone	N
calls	N
the	N
language	N
JavaScript	N
.	N
The	N
real	N
name	N
is	N
ECMAScript	N
.	N
Both	N
are	N
fully	N
different	N
languages	N
!!!	N

