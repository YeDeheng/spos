different	A
WAR	N
files	N
,	,
shared	A
resources	N

Suppose	V
you	O
have	V
several	A
applications	N
which	O
share	V
the	D
same	A
code	N
and	&
most	R
of	P
the	D
other	A
resources	N
,	,
but	&
have	V
a	D
somewhat	R
different	A
look	V
and	&
feel	V
,	,
some	D
labels	N
change	V
,	,
etc	G
.	,
(	,
think	V
branding	V
)	,
.	,
If	P
each	D
web	N
app	N
is	V
to	P
go	V
in	P
its	L
own	A
WAR	N
file	N
,	,
where	R
do	V
you	O
put	V
the	D
shared	A
resources	N
?	,
I	O
already	R
use	V
the	D
classpath	N
to	P
share	V
classes	N
and	&
property	N
files	N
.	,
But	&
what	O
about	P
javascript	^
and	&
css	N
files	N
?	,
Is	V
the	D
best	A
way	N
to	P
create	V
and	&
deploy	A
one	$
extra	A
WAR	N
file	V
that	O
will	V
serve	V
these	O
shared	V
files	N
to	P
whatever	D
other	A
application	N
requires	V
them	O
?	,
I	O
also	R
thought	V
of	P
a	D
build	V
script	N
that	O
does	V
some	D
magic	A
and	&
from	P
a	D
common	N
source	N
spews	V
out	T
the	D
(	,
slightly	R
)	,
different	A
WARs	N
,	,
but	&
I	O
don't	V
like	P
it	O
because	P
it	O
just	R
complicates	V
stuff	V
unnecessarily	R
when	R
you	O
need	V
to	P
build	V
/	,
test	N
/	,
run	V
a	D
single	A
application	N
.	,
Any	D
other	A
tips	N
and	&
tricks	N
would	V
be	V
appreciated	V
.	,

You	O
can	V
deploy	P
both	D
WARs	N
in	P
the	D
same	A
EAR	N
and	&
put	V
common	N
resources	N
in	P
the	D
EAR	N
.	,
Then	R
put	V
the	D
appropriate	A
dependencies	N
in	P
the	D
manifest	A
of	P
the	D
web	N
apps	N
to	P
link	N
to	P
the	D
jar	N
files	N
in	P
the	D
ear	N
.	,

If	P
you	O
don't	V
want	V
to	P
go	V
the	D
EAR	N
route	N
,	,
using	V
tomcat	^
,	,
etc	G
;	,
there	X
are	V
a	D
few	A
other	A
ways	N
to	P
achieve	V
the	D
consistency	N
you	O
want	V
.	,
If	P
you	O
want	V
to	P
share	V
just	R
js	A
and	&
css	N
,	,
look	V
into	P
pack	N
:	,
tag	N
.	,
You	O
could	V
host	V
the	D
.	,
js	^
and	&
css	N
from	P
an	D
apache	A
server	N
,	,
set	V
up	T
your	D
httpd.conf	N
so	P
your	D
webapps	N
can	V
call	V
it	O
,	,
then	R
use	V
pack	N
:	,
tag	N
from	P
your	D
application	N
wars	N
-	,
DRY	A
and	&
compression	N
in	P
one	$
step	N
.	,

Thanks	N
for	P
the	D
replies	N
so	R
far	R
,	,
but	&
I'm	L
afraid	A
I	O
forgot	V
to	P
mention	V
that	P
the	D
WARs	N
will	V
be	V
deployed	V
in	P
different	A
environments	N
that	O
are	V
completely	R
isolated	V
from	P
each	D
other	A
.	,
So	P
maybe	R
having	V
a	D
common	N
WAR	N
deployed	V
next	R
to	P
the	D
actual	A
application	N
is	V
the	D
only	A
option	N
.	,
I	O
think	V
I'll	L
go	V
with	P
the	D
following	N
:	,
WAR1	^
,	,
WAR2	^
containing	V
app-specific	A
stuff	N
CommonWAR	N
containg	V
common	N
stuff	N
(	,
no	D
kidding	V
)	,
EAR1	^
:	,
WAR1	^
+	&
CommonWAR	^
,	,
to	P
be	V
deployed	V
in	P
env1	^
EAR2	^
:	,
WAR2	^
+	&
CommonWAR	^
,	,
to	P
be	V
deployed	V
in	P
env2	$

The	^
CommonWar	^
serves	V
no	D
purpose	N
in	P
this	D
case	N
.	,
Just	R
put	V
your	D
common	N
resources	N
in	P
each	D
WAR	N
in	P
it's	L
lib	A
directory	N
,	,
or	&
in	P
the	D
EAR	N
itself	O
.	,
A	D
war	N
is	V
not	R
meant	V
to	P
just	R
package	N
resources	N
,	,
the	D
EAR	N
serves	V
that	D
purpose	N
.	,
Although	P
less	A
configuration	N
is	V
required	A
if	P
you	O
simple	A
put	V
it	O
in	P
each	D
WAR	N
.	,

Yes	!
,	,
but	&
if	P
I	O
put	V
the	D
common	N
resources	N
in	P
each	D
WAR	N
file	V
then	R
I	O
duplicate	V
those	D
resources	N
:	,
won't	V
do	V
that	O
.	,
If	P
I	O
put	V
the	D
common	N
resources	N
in	P
the	D
EAR	N
file	V
then	R
it	O
must	V
contain	V
all	X
the	D
WAR	N
files	V
that	O
depend	V
upon	P
those	D
resources	N
:	,
can't	V
do	V
either	R
,	,
one	$
WAR	N
must	V
be	V
deployed	V
per	P
environment	N
.	,

Since	P
you	O
are	V
deploying	V
the	D
CommonWAR	N
in	P
each	D
EAR	N
anyway	R
,	,
the	D
same	A
duplication	N
exists	V
,	,
and	&
you	O
have	V
wrapped	V
the	D
code	N
in	P
a	D
WAR	N
for	P
no	D
reason	N
.	,

The	^
CommonWAR	^
is	V
deployed	V
in	P
two	$
EARs	N
,	,
but	&
it	O
is	V
the	D
*	,
same	A
*	,
CommonWAR	^
,	,
so	P
it	O
is	V
NOT	O
duplicated	V
"	,
for	P
development	N
"	,
.	,
To	P
be	V
honest	A
,	,
I	O
have	V
reverted	V
to	P
2	$
EAR	N
files	N
and	&
one	$
WAR	N
file	N
,	,
see	V
my	D
updated	V
post	N
:)	E

Update	N
Yes	!
,	,
me	O
again	R
.	,
I	O
have	V
actually	R
changed	V
my	D
mind	N
(	,
again	R
:)	E
)	E
.	,
I	O
am	V
currently	R
trying	V
(	,
being	V
more	R
prudent	A
here	R
):	,
(	,
Common	^
)	,
WAR	N
:	,
containing	V
the	D
application	N
,	,
common	N
(	,
most	A
part	N
)	,
+	&
some	D
specific	A
stuff	N
EAR1	^
:	,
CommonWAR	^
+	&
specific	A
configuration	N
file	V
for	P
env1	^
EAR2	^
:	,
CommonWAR	^
+	&
specific	A
configuration	N
file	V
for	P
env2	$
The	D
configuration	N
file	V
is	V
picked	V
up	T
by	P
the	D
WAR	N
.	,
It	O
is	V
on	P
the	D
the	D
EAR	N
classpath	^
and	&
only	A
contains	N
one	$
property	N
'	,
application	N
'	,
with	P
a	D
value	N
.	,
The	D
single	A
WAR	N
will	V
then	R
use	V
this	D
information	N
where	R
appropriate	A
to	P
distinguish	V
between	P
the	D
two	$
apps	N
(	,
config	!
,	,
style	N
sheets	N
,	,
...	~
)	E
.	,
With	P
my	D
solution	N
of	P
EAR1	^
=	^
CommonWAR	^
+	^
WAR1	^
,	,
EAR2	^
=	^
CommonWAR	^
+	^
WAR2	^
,	,
it	O
was	V
too	R
difficult	A
or	&
impossible	A
to	P
lookup	^
static	A
resources	N
in	P
the	D
CommonWAR	N
without	P
using	V
a	D
web	N
url	N
(	,
e.g.	N
images	N
in	P
PDF	^
documents	N
generated	V
with	P
iText	E
)	,
.	,

A	D
strategy	N
that	P
I	O
have	V
seen	V
used	V
for	P
such	A
product-line	N
like	P
configurations	N
is	V
using	V
WAR	N
overlays	V
when	O
building	V
with	P
maven	^
.	,
You	O
define	V
a	D
common	N
WAR	N
that	O
contains	V
the	D
common	N
stuff	N
and	&
overlay	V
it	O
with	P
those	D
other	A
WARs	N
that	O
contain	V
the	D
specific	A
stuff	N
to	P
generate	V
different	A
WARs	N
for	P
every	D
application	N
.	,
This	D
method	N
is	V
probably	R
most	R
useful	A
if	P
you	O
deploy	V
the	D
WAR-variants	^
on	P
different	A
machines	N
.	,
But	&
I'm	L
not	R
sure	A
whether	P
I	O
can	V
actually	R
recommend	V
this	D
.	,
Remember	V
to	P
specify	V
the	D
overlays	N
configuration	N
if	P
you	O
actually	R
override	A
stuff	N
,	,
since	P
otherwise	R
the	D
overriding	A
order	N
is	V
not	R
deterministic	A
.	,
It	O
might	V
even	R
change	V
with	P
a	D
maven-war-plugin	V
upgrade	V
.	,
(	,
It	O
did	V
in	P
our	D
case	N
.	,
)	E

How	R
about	P
putting	V
your	D
css	N
and	&
js	V
in	P
the	D
classpath	N
and	&
serve	V
them	O
with	P
a	D
servlet	N
?	,
Then	R
you	O
can	V
build	V
the	D
common	N
resources	N
as	P
a	D
jar	N
and	&
that	D
jar	N
can	V
even	R
contain	V
the	D
servlet	N
(	,
resource	N
dispatcher	N
if	P
you	O
like	V
)	,
and	&
the	D
war	N
files	N
can	V
contain	V
the	D
jar	N
file	V
in	P
the	D
WEB-INF	^
/	,
lib	A
folder	N
.	,

You	O
can	V
also	R
dispatch	N
images	N
this	D
way	N

