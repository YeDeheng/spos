How can you run Javascript using Rhino for Java in a sandbox?
Part of our java application needs to run javascript that is written by non-developers.  These non-developers are using javascript for data formatting. (Simple logic and string concatenation mostly). My question is how can I setup the execution of these scripts to make sure scripting errors don't have a major negative impact on the rest of the application. Need to guard against infinite loops Guard against spawning new threads.   Limit access to services and environment File system (Example: If a disgruntled script writer decided to delete files) Database (Same thing delete database records) Basically I need to setup the javascript scope to only include exactly what they need and no more.
Do you mean to say (Javascript using Rhino) for (Java in a sandbox), or (Javascript using (Rhino for Java)) (in a sandbox)?
Javascript is single-threaded and can't access the filesystem, so I don't think you have to worry about those.  I'm not sure if there's a way to set a timeout to guard against infinite loops, but you could always spawn a (Java) thread that executes the script, and then kill the thread after so much time.
Rhino has a threading library available to it (java.lang.Thread!), and can access the file system.
To guard against infinite loops, you'd need to put it in a separate process so that it could be killed. To guard against creating threads, you'd need to extend SecurityManager (the default implementation allows untrusted code to access non-root thread groups). Java security does allow you to prevent access to the file system. For database restrictions, you might be able to use the standard SQL user security, but that is quite weak. Otherwise, you need to provide an API that enforces your restrictions. Edit: I should point out that the version of Rhino provided with JDK6 has had security work done on it, but doesn't include the compiler.
To guard against infinite loops, you can observe the instruction count as the script runs (this works only with interpreted scripts, not with compiled ones). There is this  example in the Rhino JavaDocs  to prevent a script from running for more than ten seconds:
To block Java class and method access have a look at... http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/
I just ran across this blog post that seems to be useful for sandboxing more or less anything (not just Rhino): http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html
