Has	N
anyone	N
used	N
GWT	N
and	N
can	N
say	N
it	N
really	N
delivers	N
what	N
it	N
promises	N
?	N

I	N
am	N
a	N
long	N
time	N
Java	N
web	N
developer	N
and	N
as	N
most	N
web	N
developers	N
I	N
have	N
used	N
quite	N
a	N
lot	N
of	N
JavaScript	N
.	N
Even	N
though	N
I	N
don't	N
hate	N
JavaScript	N
as	N
many	N
other	N
Java	N
developers	N
,	N
I	N
am	N
still	N
aware	N
of	N
its	N
faults	N
.	N
GWT	N
is	N
a	N
way	N
to	N
write	N
javascript	N
using	N
java	N
.	N
Since	N
I	N
know	N
both	N
languages	N
for	N
a	N
long	N
time	N
I	N
am	N
pretty	N
skeptical	N
about	N
this	N
claim	N
.	N
I	N
mean	N
,	N
I	N
having	N
a	N
hard	N
time	N
believing	N
that	N
you	N
can	N
really	N
create	N
full	N
Java	N
dynamic	N
web	N
applications	N
with	N
a	N
rich	N
GUI	N
using	N
just	N
GWT	N
.	N
That	N
is	N
why	N
I	N
am	N
asking	N
here	N
if	N
anyone	N
had	N
the	N
chance	N
to	N
work	N
with	N
GWT	N
on	N
a	N
large	N
scale	N
project	N
.	N
If	N
so	N
,	N
I	N
would	N
really	N
like	N
to	N
hear	N
what	N
they	N
think	N
of	N
it	N
.	N

Why	N
the	N
close	N
?	N
This	N
looks	N
like	N
an	N
interesting	N
question	N
to	N
me	N
..	N

Some	N
people	N
have	N
the	N
bad	N
habit	N
of	N
clicking	N
'	N
close	N
'	N
if	N
they	N
just	N
don't	N
like	N
the	N
question	N
.	N
I	N
don't	N
think	N
this	N
is	N
subjetive	N
nor	N
argumentative	N
at	N
all	N

Did	N
you	N
end	N
up	N
using	N
GWT	N
?	N
Did	N
it	N
deliver	N
?	N

Hi	N
Dave	N
,	N
No	N
,	N
finally	N
I	N
decided	N
not	N
using	N
it	N
.	N
My	N
final	N
conclusion	N
was	N
that	N
GWT	N
seems	N
like	N
a	N
really	N
good	N
product	N
and	N
the	N
people	N
who	N
use	N
it	N
mostly	N
love	N
it	N
.	N
Nevertheless	N
,	N
I	N
feel	N
like	N
since	N
GWT	N
has	N
a	N
totally	N
different	N
way	N
of	N
doing	N
things	N
,	N
it	N
is	N
a	N
product	N
that	N
once	N
you	N
start	N
using	N
it	N
,	N
you	N
commit	N
for	N
life	N
.	N
And	N
that	N
is	N
something	N
I	N
really	N
stay	N
away	N
from	N
.	N
Thanks	N
for	N
asking	N
.	N

I've	N
looked	N
at	N
it	N
briefly	N
for	N
an	N
older	N
application	N
at	N
one	N
of	N
my	N
jobs	N
,	N
and	N
I	N
must	N
admit	N
that	N
it	N
was	N
very	N
impressive	N
.	N
All	N
the	N
code	N
was	N
written	N
in	N
Java	N
,	N
and	N
the	N
javascript	N
was	N
built	N
beautifully	N
.	N
It	N
had	N
AJAX	N
,	N
dynamic	N
pages	N
,	N
the	N
works	N
.	N
There	N
are	N
plugins	N
for	N
it	N
as	N
well	N
,	N
such	N
as	N
the	N
Ext	N
GWT	N
framework	N
.	N
It's	N
definitely	N
worth	N
looking	N
into	N
and	N
trying	N
out	N
,	N
but	N
you	N
may	N
find	N
that	N
the	N
development	N
cycle	N
doesn't	N
"	N
feel	N
"	N
right	N
,	N
so	N
you	N
might	N
opt	N
to	N
use	N
regular	N
JavaScript	N
.	N

good	N
point	N
about	N
the	N
dev	N
environment	N
"	N
feel	N
.	N
"	N
GWT	N
is	N
definitely	N
only	N
for	N
those	N
that	N
enjoy	N
/	N
tolerate	N
the	N
constraints	N
of	N
a	N
language	N
like	N
Java	N
.	N

As	N
with	N
any	N
tool	N
,	N
it	N
needs	N
to	N
be	N
used	N
properly	N
.	N
One	N
can	N
wield	N
a	N
hammer	N
skillfully	N
and	N
build	N
something	N
nice	N
,	N
or	N
just	N
wave	N
it	N
around	N
at	N
stuff	N
and	N
do	N
more	N
harm	N
than	N
good	N
.	N
Google	N
Wave	N
,	N
I	N
think	N
,	N
has	N
become	N
the	N
prototype	N
of	N
"	N
what's	N
possible	N
"	N
with	N
GWT	N
.	N
It's	N
still	N
rather	N
hard	N
to	N
find	N
good	N
GWT	N
design	N
patterns	N
because	N
the	N
technology	N
is	N
too	N
new	N
,	N
so	N
that	N
can	N
harm	N
efforts	N
to	N
develop	N
a	N
very	N
rich	N
,	N
large-scale	N
web	N
app	N
in	N
GWT	N
.	N
Before	N
beginning	N
such	N
a	N
project	N
,	N
I	N
would	N
recommend	N
looking	N
at	N
examples	N
of	N
the	N
model-view-presenter	N
(	N
MVP	N
)	N
pattern	N
and	N
be	N
sure	N
to	N
use	N
it	N
,	N
or	N
something	N
like	N
it	N
,	N
as	N
a	N
foundation	N
for	N
the	N
control	N
flow	N
of	N
your	N
web	N
app	N
.	N
One	N
nice	N
thing	N
about	N
GWT	N
,	N
and	N
writing	N
your	N
code	N
in	N
Java	N
,	N
is	N
that	N
the	N
high	N
degree	N
of	N
abstraction	N
and	N
decoupling	N
necessary	N
for	N
a	N
clean	N
MVP	N
implementation	N
is	N
pretty	N
easy	N
(	N
thanks	N
to	N
the	N
compiler	N
)	N
.	N

I've	N
written	N
fairly	N
large	N
sized	N
app	N
in	N
GWT	N
,	N
and	N
i	N
have	N
to	N
say	N
that	N
i'm	N
even	N
more	N
impressed	N
by	N
GWT	N
than	N
i	N
was	N
when	N
the	N
project	N
started	N
.	N
My	N
general	N
'	N
feel	N
'	N
of	N
the	N
platform	N
is	N
that	N
things	N
are	N
really	N
well	N
thought	N
out	N
,	N
and	N
they	N
don't	N
do	N
things	N
unless	N
they	N
can	N
do	N
it	N
well	N
,	N
and	N
can	N
do	N
it	N
well	N
on	N
all	N
browsers	N
(	N
IE	N
users	N
are	N
still	N
your	N
users	N
!	N
)	N
Now	N
,	N
keep	N
in	N
mind	N
that	N
what	N
GWT	N
really	N
excels	N
at	N
is	N
the	N
creation	N
of	N
large	N
,	N
highly	N
dynamic	N
single-page	N
style	N
webapps	N
.	N
If	N
your	N
goal	N
is	N
to	N
enhance	N
an	N
otherwise	N
static	N
page	N
with	N
some	N
javascript	N
effects	N
,	N
than	N
GWT	N
is	N
massive	N
overkill	N
(	N
gquery	N
may	N
change	N
this	N
,	N
but	N
i	N
don't	N
have	N
experience	N
with	N
gquery	N
)	N
Some	N
features	N
I	N
enjoy	N
include	N
:	N
The	N
ability	N
to	N
share	N
code	N
between	N
the	N
server	N
side	N
and	N
the	N
client	N
side	N
.	N
(	N
if	N
your	N
server	N
side	N
is	N
written	N
in	N
java	N
,	N
of	N
course	N
)	N
.	N
I	N
didn't	N
expect	N
to	N
use	N
this	N
a	N
lot	N
of	N
this	N
at	N
first	N
,	N
but	N
in	N
practice	N
,	N
it	N
can	N
really	N
save	N
a	N
lot	N
of	N
code	N
duplication	N
.	N
However	N
,	N
i	N
find	N
that	N
in	N
general	N
,	N
this	N
only	N
works	N
with	N
code	N
that	N
has	N
been	N
written	N
with	N
GWT	N
in	N
mind	N
-	N
using	N
code	N
that	N
was	N
not	N
written	N
with	N
GWT	N
in	N
mind	N
often	N
doesn't	N
work	N
well	N
.	N
This	N
is	N
because	N
GWT	N
only	N
has	N
a	N
subset	N
of	N
the	N
classes	N
in	N
the	N
JDK	N
,	N
and	N
in	N
javascript	N
,	N
you	N
have	N
to	N
care	N
about	N
performance	N
a	N
lot	N
more	N
than	N
you	N
do	N
on	N
the	N
server	N
side	N
.	N
It	N
aims	N
to	N
achieve	N
the	N
fastest	N
javascript	N
,	N
faster	N
than	N
you	N
would	N
ever	N
write	N
by	N
hand	N
(	N
because	N
if	N
you	N
did	N
write	N
it	N
by	N
hand	N
,	N
the	N
code	N
would	N
be	N
unmaintainable	N
)	N
.	N
The	N
unfortunate	N
reality	N
is	N
that	N
the	N
browsers	N
that	N
a	N
lot	N
of	N
people	N
use	N
have	N
incredibly	N
slow	N
javascript	N
engines	N
,	N
so	N
the	N
performance	N
of	N
your	N
javascript	N
code	N
matters	N
a	N
lot	N
.	N
Gwt's	N
compiler	N
is	N
a	N
real	N
optimizing	N
compiler	N
-	N
it	N
will	N
inline	N
methods	N
,	N
intern	N
all	N
your	N
strings	N
.	N
devirtualize	N
your	N
method	N
calls	N
when	N
possible	N
,	N
etc	N
.	N
Because	N
you	N
are	N
compiling	N
for	N
each	N
browser	N
and	N
locale	N
,	N
the	N
compiler	N
can	N
also	N
inline	N
browser-specific	N
and	N
locale-specific	N
code	N
.	N
This	N
Google	N
I	N
/	N
O	N
presentation	N
has	N
some	N
benchmarks	N
a	N
few	N
slides	N
in	N
.	N
It	N
will	N
also	N
automatically	N
sprite	N
your	N
images	N
together	N
to	N
minimize	N
the	N
number	N
of	N
http	N
requests	N
needed	N
,	N
again	N
improving	N
the	N
speed	N
of	N
your	N
site	N
.	N
GWT	N
2.0	N
will	N
allow	N
you	N
to	N
combine	N
together	N
arbitrary	N
files	N
.	N
most	N
of	N
the	N
files	N
created	N
by	N
gwt	N
have	N
a	N
strong	N
hash	N
as	N
their	N
filename	N
,	N
which	N
lets	N
you	N
set	N
the	N
files	N
to	N
be	N
cached	N
forever	N
,	N
but	N
not	N
worry	N
about	N
people	N
having	N
old	N
versions	N
if	N
the	N
file	N
changes	N
The	N
code	N
splitting	N
in	N
GWT	N
2.0	N
is	N
very	N
impressive	N
and	N
would	N
be	N
very	N
difficult	N
to	N
do	N
by	N
hand	N
.	N
As	N
the	N
size	N
of	N
your	N
application	N
grows	N
,	N
dealing	N
with	N
the	N
size	N
of	N
your	N
javascript	N
matters	N
more	N
and	N
more	N
,	N
and	N
you	N
need	N
to	N
be	N
able	N
to	N
split	N
it	N
into	N
chunks	N
You	N
are	N
coding	N
in	N
a	N
statically	N
typed	N
language	N
.	N
I	N
know	N
some	N
people	N
prefer	N
dynamic	N
typing	N
,	N
but	N
i	N
like	N
to	N
compare	N
this	N
debate	N
to	N
the	N
emacs	N
vs	N
vi	N
debate	N
-	N
there	N
are	N
a	N
lot	N
of	N
smart	N
people	N
on	N
both	N
camps	N
,	N
and	N
arguing	N
on	N
the	N
internet	N
isn't	N
going	N
to	N
change	N
anyone's	N
preference	N
You	N
get	N
to	N
use	N
a	N
lot	N
of	N
the	N
great	N
tools	N
that	N
exist	N
in	N
the	N
java	N
ecosystem	N
,	N
which	N
are	N
generally	N
a	N
lot	N
more	N
mature	N
than	N
the	N
equivilant	N
javascript	N
tools	N
.	N
-	N
junit	N
,	N
java	N
IDEs	N
,	N
java	N
debuggers	N
,	N
refactoring	N
,	N
etc	N
.	N

Oh	N
,	N
and	N
i	N
guess	N
the	N
biggest	N
downsides	N
is	N
:	N
-	N
compile	N
time	N
-	N
hosted	N
mode	N
is	N
great	N
,	N
but	N
you	N
can't	N
currently	N
use	N
it	N
for	N
the	N
system	N
non-default	N
browser	N
-	N
GWT	N
2.0	N
and	N
out	N
of	N
process	N
hosted	N
mode	N
should	N
fix	N
this	N
though	N
.	N
-	N
The	N
java	N
language	N
can	N
be	N
verbose	N
at	N
times	N
,	N
although	N
that	N
is	N
far	N
from	N
a	N
showstopper	N
.	N
(	N
gwt	N
for	N
scala	N
would	N
be	N
awfully	N
nice	N
:)	N
)	N

If	N
you	N
have	N
familiarity	N
with	N
both	N
JavaScript	N
and	N
Java	N
,	N
you	N
really	N
are	N
perfectly	N
suited	N
to	N
get	N
the	N
most	N
out	N
of	N
GWT	N
.	N
What	N
many	N
people	N
do	N
not	N
realize	N
is	N
that	N
GWT	N
is	N
pretty	N
well	N
layered	N
and	N
that	N
you	N
can	N
really	N
decide	N
which	N
of	N
those	N
levels	N
you	N
want	N
to	N
work	N
at	N
.	N
For	N
instance	N
,	N
I	N
sometimes	N
write	N
directly	N
against	N
the	N
DOM	N
library	N
for	N
projects	N
.	N
Thats	N
a	N
lot	N
like	N
writing	N
JavaScript	N
code	N
except	N
you're	N
able	N
to	N
use	N
an	N
IDE	N
properly	N
and	N
get	N
the	N
power	N
of	N
a	N
compiler	N
.	N
From	N
the	N
compiler	N
I	N
get	N
static	N
type	N
checking	N
,	N
lots	N
of	N
good	N
compiler	N
optimizations	N
,	N
and	N
(	N
actually	N
my	N
favorite	N
for	N
maintaining	N
code	N
)	N
debug	N
mode	N
assertions	N
.	N
Nobody	N
ever	N
really	N
makes	N
much	N
of	N
the	N
ability	N
to	N
do	N
assertions	N
,	N
but	N
it's	N
so	N
nice	N
to	N
be	N
able	N
to	N
compile	N
a	N
debug	N
mode	N
that	N
does	N
expensive	N
checks	N
to	N
tease	N
out	N
bugs	N
and	N
then	N
turn	N
off	N
the	N
debug	N
mode	N
and	N
have	N
the	N
code	N
just	N
evaporate	N
.	N
(	N
Not	N
just	N
the	N
assert	N
statements	N
go	N
away	N
,	N
but	N
all	N
the	N
code	N
reachable	N
from	N
the	N
asserts	N
also	N
gets	N
compiled	N
out	N
)	N
.	N
Other	N
times	N
,	N
I	N
write	N
code	N
against	N
GWT's	N
UI	N
library	N
.	N
That	N
code	N
looks	N
a	N
bit	N
like	N
swing	N
or	N
SWT	N
code	N
so	N
it	N
is	N
most	N
comfortable	N
to	N
pure	N
java	N
developers	N
.	N
Working	N
at	N
this	N
level	N
,	N
you	N
don't	N
have	N
to	N
worry	N
as	N
much	N
about	N
the	N
DOM	N
and	N
it	N
is	N
usually	N
possible	N
to	N
construct	N
an	N
application	N
without	N
writing	N
any	N
JavaScript	N
.	N
You	N
do	N
occasionally	N
run	N
into	N
a	N
bug	N
where	N
something	N
doesn't	N
work	N
consistently	N
on	N
a	N
particular	N
browser	N
.	N
The	N
GWT	N
folks	N
consider	N
those	N
bugs	N
.	N
You	N
can	N
kind	N
of	N
pick	N
what	N
level	N
of	N
abstraction	N
you	N
want	N
to	N
work	N
at	N
.	N
There	N
are	N
tradeoffs	N
at	N
each	N
level	N
,	N
but	N
GWT	N
should	N
support	N
them	N
.	N
Also	N
,	N
full	N
disclosure	N
:	N
I'm	N
the	N
dude	N
in	N
the	N
video	N
that	N
Chi	N
linked	N
above	N
,	N
so	N
you	N
might	N
say	N
I'm	N
pretty	N
attached	N
to	N
GWT	N
.	N

I	N
have	N
created	N
two	N
quite	N
substantial	N
GWT	N
applications	N
in	N
my	N
three	N
years	N
at	N
Google	N
.	N
It	N
delivers	N
what	N
it	N
promises	N
-	N
my	N
apps	N
were	N
far	N
more	N
interactive	N
and	N
far	N
more	N
ajax-y	N
than	N
my	N
knowledge	N
of	N
Javascript	N
and	N
my	N
Javascript	N
tooling	N
would	N
have	N
let	N
me	N
produce	N
using	N
other	N
tools	N
.	N
I	N
also	N
found	N
the	N
apps	N
more	N
interactive	N
and	N
more	N
fun	N
than	N
the	N
purely	N
server-side	N
alternatives	N
I	N
had	N
used	N
before	N
moving	N
to	N
it	N
.	N
It	N
is	N
not	N
free	N
of	N
warts	N
,	N
but	N
it	N
is	N
a	N
very	N
productive	N
environment	N
to	N
do	N
the	N
kinds	N
of	N
apps	N
I	N
do	N
.	N
And	N
do	N
watch	N
Kelly's	N
presentation	N
.	N
It	N
,	N
and	N
some	N
of	N
the	N
others	N
from	N
I	N
/	N
O	N
,	N
give	N
a	N
really	N
clear	N
idea	N
of	N
what	N
GWT	N
can	N
do	N
.	N
You	N
will	N
pretty	N
quickly	N
get	N
a	N
good	N
idea	N
of	N
whether	N
it	N
is	N
the	N
right	N
tool	N
for	N
the	N
task	N
you	N
are	N
envisioning	N
.	N

I	N
have	N
been	N
developing	N
a	N
green	N
field	N
application	N
on	N
GWT	N
for	N
a	N
year	N
and	N
it	N
has	N
been	N
surprisingly	N
pleasant	N
.	N
The	N
subset	N
of	N
Java	N
used	N
in	N
GWT	N
causes	N
some	N
headaches	N
but	N
nothing	N
major	N
after	N
all	N
.	N
I	N
didn't	N
have	N
too	N
much	N
JavaScript	N
knowledge	N
when	N
I	N
joined	N
the	N
project	N
but	N
I	N
think	N
that	N
was	N
not	N
a	N
problem	N
.	N
The	N
common	N
GWT	N
related	N
problems	N
I	N
have	N
encountered	N
had	N
usually	N
something	N
to	N
do	N
with	N
Ext	N
GWT	N
/	N
GXT	N
framework	N
or	N
FCKEditor	N
integration	N
.	N

Simply	N
GWT	N
rocks	N
google	N
is	N
making	N
"	N
google	N
wave	N
"	N
fully	N
on	N
GWT	N
.	N

I	N
think	N
GWT	N
does	N
what	N
it	N
says	N
on	N
the	N
tin	N
...	N
Top	N
5	N
Reasons	N
for	N
choosing	N
GWT	N
:	N
Tapestry	N
can	N
be	N
overly	N
complicated	N
and	N
the	N
learning	N
curve	N
is	N
pretty	N
steep	N
for	N
new	N
developers	N
who	N
are	N
starting	N
out	N
\	N
joining	N
the	N
team	N
.	N
Esp	N
.	N
on	N
larger	N
projects	N
.	N
I	N
found	N
that	N
I	N
could	N
develop	N
"	N
richer	N
"	N
applications	N
using	N
GWT	N
seeing	N
that	N
my	N
strength	N
is	N
Java	N
not	N
Javascript	N
.	N
In	N
order	N
for	N
me	N
to	N
implement	N
similar	N
functionality	N
using	N
Tapestry	N
I	N
would	N
have	N
to	N
hand	N
write	N
Javascript	N
which	N
would	N
later	N
become	N
a	N
maintenance	N
nightmare	N
.	N
Browser	N
compatibility	N
,	N
I	N
would	N
spend	N
large	N
amounts	N
of	N
time	N
trying	N
to	N
get	N
my	N
hand	N
written	N
Javascirpt	N
to	N
work	N
on	N
all	N
the	N
different	N
browsers	N
(	N
like	N
I	N
said	N
Javascript	N
is	N
not	N
my	N
strength	N
:-)	N
The	N
GWT	N
Compiler	N
hides	N
me	N
from	N
this	N
which	N
results	N
in	N
me	N
spending	N
more	N
time	N
writing	N
features	N
.	N
Back	N
button	N
blues	N
,	N
GWT's	N
History	N
listener	N
is	N
handles	N
the	N
browsers	N
back	N
button	N
in	N
comparison	N
to	N
Tapestry	N
.	N
GWT	N
has	N
a	N
smaller	N
footprint	N
because	N
only	N
the	N
data	N
is	N
being	N
sent	N
across	N
the	N
wire	N
apposed	N
to	N
refreshing	N
the	N
entire	N
page	N
.	N
The	N
list	N
goes	N
on	N
but	N
all	N
in	N
all	N
,	N
I	N
am	N
very	N
happy	N
to	N
have	N
made	N
the	N
change	N
and	N
have	N
not	N
looked	N
back	N
since	N
.	N

I	N
didn't	N
know	N
much	N
Javascript	N
when	N
I	N
tried	N
to	N
create	N
my	N
website	N
.	N
In	N
fact	N
,	N
that	N
is	N
why	N
I	N
had	N
been	N
putting	N
off	N
creating	N
the	N
website	N
.	N
So	N
for	N
me	N
,	N
GWT	N
made	N
a	N
huge	N
difference	N
as	N
it	N
enabled	N
me	N
to	N
create	N
a	N
dynamic	N
,	N
cross-browser	N
website	N
that	N
I	N
definitely	N
would	N
not	N
have	N
been	N
able	N
to	N
create	N
without	N
putting	N
in	N
significant	N
effort	N
into	N
learning	N
Javascript	N
.	N

I've	N
done	N
a	N
few	N
projects	N
over	N
a	N
few	N
years	N
and	N
it	N
is	N
fantastic	N
.	N
Going	N
back	N
to	N
JS	N
/	N
JSP	N
/	N
request	N
based	N
framework	N
is	N
really	N
horrible	N
.	N
Don't	N
want	N
to	N
give	N
up	N
compile	N
time	N
checks	N
,	N
unit	N
tests	N
in	N
my	N
IDE	N
,	N
IDE	N
refactoring	N
etc	N
,	N
sharing	N
code	N
between	N
different	N
tiers	N
,	N
solid	N
set	N
of	N
widgets	N
,	N
incredibly	N
well	N
thought	N
out	N
framework	N
.	N
Can	N
do	N
so	N
much	N
more	N
so	N
much	N
faster	N
in	N
a	N
maintainable	N
way	N
.	N

There	N
is	N
a	N
steep	N
learning	N
curve	N
,	N
but	N
for	N
really	N
dynamic	N
ui	N
applications	N
,	N
there	N
is	N
just	N
no	N
way	N
that	N
you	N
can	N
build	N
from	N
hand	N
in	N
javascript	N
as	N
efficiently	N
.	N
What	N
I	N
mean	N
in	N
particular	N
is	N
for	N
instance	N
an	N
application	N
frontend	N
for	N
a	N
service	N
where	N
all	N
the	N
searchable	N
fields	N
and	N
result	N
type	N
s	N
and	N
length	N
were	N
completely	N
unknown	N
.	N
For	N
this	N
type	N
of	N
thing	N
,	N
a	N
dynamic	N
runtime	N
defined	N
ui	N
,	N
there	N
is	N
nothing	N
better	N
than	N
GWT	N
in	N
my	N
opinion	N
.	N
The	N
drawbacks	N
are	N
the	N
steep	N
learning	N
curve	N
(	N
especially	N
for	N
non-swing	N
Java	N
programmers	N
,	N
traditional	N
request	N
/	N
response	N
servlet	N
api	N
guys	N
and	N
gals	N
)	N
and	N
getting	N
cornered	N
into	N
GWT	N
once	N
you	N
make	N
that	N
decision	N
.	N

