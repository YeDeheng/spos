Detecting EOF / TCP teardown using Java sockets from Javascript
I'm creating a Java socket in Javascript, sending an HTTP request and receiving a response correctly but I seem to be unable to detect an EOF or the server closing the socket at the end. What am I doing wrong? The problem is we never exit the outermost while loop - the server stops transmitting and (presumably) closes its end of the connection, yet receiver.read() never returns -1 and all the socket methods return state consistent with the socket still being connected.
Wouldn't the this:       while( receiver.available()  & &  !eof) be better? in lieu of the first while( receiver.available()) ?
Seems a bit redundant - available() is defined as returning the number of bytes of data available to read without blocking, so would return 0 after EOF. Tried it anyway just in case; doesn't fix the problem.
Or do you mean in place of the outermost while? Data being available to read without blocking is independent of whether the server has closed the socket - there could be pauses in transmission, and the OS could have buffered input data. So we must test both separately.
No, I meant the inner while, but your first comment is right: I'm wrong.
Ok. What's the value of eof when the code reaches this comment?     // at this point response does contain the expected HTTP response What's the symptom? I assume it's an infinite loop?
eof is still 0 at that point (otherwise we'd exit the outermost while() correctly and I'd not be posting this). Question edited - hopefully the problem is clearer now?
OK, further research suggests there is no non-blocking way to discover whether the remote side has closed a socket. However, it is possible to achieve this using NIO channels:
When the end of the stream is reached, available() returns 0, so in your code, you never read the -1
Right. But read() will block until either EOF is reached or there is more data, and Javascript is single-threaded so we don't want to issue a read without knowing for certain we have data to read. And available() can return 0 during transmission, so we can't use that to test for EOF.
