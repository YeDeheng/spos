Accessing	N
the	N
JavaScript	N
Table	N
DOM	N
in	N
a	N
Java	N
Servlet	N

I	N
want	N
to	N
write	N
reusable	N
code	N
that	N
takes	N
an	N
HTML	N
table	N
from	N
a	N
JSP	N
and	N
converts	N
it	N
to	N
Excel	N
format	N
to	N
be	N
exported	N
to	N
the	N
user	N
.	N
I	N
want	N
to	N
take	N
advantage	N
of	N
the	N
HTML	N
DOM	N
Table	N
Object	N
rather	N
than	N
parse	N
the	N
HTML	N
in	N
Java	N
to	N
extract	N
the	N
same	N
information	N
.	N
The	N
biggest	N
advantage	N
to	N
this	N
would	N
be	N
inspecting	N
each	N
cell	N
for	N
checkboxes	N
,	N
buttons	N
,	N
etc	N
.	N
so	N
as	N
to	N
remove	N
them	N
before	N
writing	N
the	N
cells	N
to	N
Excel	N
.	N
In	N
my	N
mind	N
the	N
setup	N
would	N
go	N
something	N
like	N
this	N
:	N
HTML	N
Table	N
:	N
a	N
href=	N
"	N
javascript	N
:	N
export()	N
;	N
"	N
>	N
Export	N
to	N
Excel	N
/	N
a	N
>	N
table	N
id=	N
"	N
exportTable	N
"	N
>	N
...	N
/	N
table	N
>	N
JavaScript	N
:	N
function	N
export()	N
{	N
var	N
table	N
=	N
document.getElementById	N
(	N
"	N
exportTable	N
")	N
;	N
//	N
Send	N
table	N
object	N
to	N
Servlet	N
somehow	N
}	N
The	N
JavaScript	N
would	N
go	N
in	N
some	N
sort	N
of	N
common.js	N
so	N
that	N
the	N
concept	N
could	N
be	N
used	N
on	N
any	N
table	N
in	N
any	N
page	N
of	N
the	N
site	N
.	N
**	N
UPDATE	N
**	N
JSPs	N
will	N
be	N
using	N
Java	N
objects	N
to	N
generate	N
the	N
table	N
,	N
but	N
the	N
table	N
itself	N
will	N
be	N
different	N
every	N
time	N
.	N
I'm	N
looking	N
for	N
a	N
generic	N
solution	N
whereby	N
I	N
can	N
get	N
the	N
Table's	N
DOM	N
structure	N
,	N
thereby	N
utilizing	N
the	N
table.rows	N
and	N
table.cells	N
that	N
is	N
already	N
done	N
,	N
inspect	N
each	N
cell	N
to	N
remove	N
tags	N
I	N
don't	N
want	N
in	N
the	N
Excel	N
(	N
such	N
as	N
buttons	N
,	N
checkboxes	N
,	N
etc	N
)	N
,	N
and	N
write	N
that	N
out	N
to	N
the	N
user	N
with	N
the	N
response	N
type	N
set	N
to	N
excel	N
.	N
Does	N
that	N
make	N
more	N
sense	N
?	N

HTML	N
tables	N
can	N
be	N
interpreted	N
by	N
Excel	N
.	N
That	N
said	N
,	N
all	N
you	N
need	N
is	N
the	N
markup	N
and	N
a	N
content-type	N
of	N
"	N
application	N
/	N
ms-excel	N
"	N

Apparently	N
you	N
are	N
generating	N
the	N
table	N
in	N
the	N
JSP	N
so	N
why	N
don't	N
you	N
just	N
output	N
the	N
data	N
you	N
are	N
creating	N
the	N
Table	N
from	N
?	N
For	N
the	N
actual	N
JavaScript	N
implementation	N
just	N
take	N
a	N
look	N
at	N
Ajax	N
functionality	N
and	N
Dom	N
Manipulation	N
with	N
jQuery	N
(	N
http://jquery.com	N
)	N

I	N
don't	N
understand	N
,	N
is	N
there	N
a	N
question	N
in	N
here	N
?	N

POST	N
the	N
table	N
to	N
the	N
server	N
.	N
If	N
you	N
want	N
to	N
access	N
the	N
DOM	N
like	N
you	N
would	N
in	N
JavaScript	N
,	N
you	N
are	N
going	N
to	N
need	N
Rhino	N
.	N
But	N
I	N
recommend	N
just	N
sticking	N
with	N
something	N
easier	N
to	N
drop	N
in	N
like	N
JDOM	N
.	N
Then	N
echo	N
back	N
the	N
table	N
with	N
the	N
content-type	N
modified	N
in	N
the	N
header	N
to	N
be	N
"	N
application	N
/	N
ms-excel	N
"	N
.	N

I'd	N
serialize	N
the	N
data	N
from	N
the	N
cells	N
into	N
a	N
simple	N
JSON	N
object	N
,	N
then	N
use	N
one	N
of	N
the	N
many	N
JSON	N
libraries	N
available	N
on	N
the	N
Java-side	N
to	N
convert	N
it	N
back	N
into	N
a	N
usable	N
object	N
.	N
Something	N
like	N
this	N
:	N
This	N
uses	N
the	N
Public	N
Domain	N
JSON.stringify()	N
routine	N
,	N
available	N
directly	N
here	N
.	N
You	N
can	N
now	N
take	N
this	N
string	N
,	N
pass	N
it	N
to	N
a	N
server	N
,	N
and	N
re-hydrate	N
the	N
object	N
in	N
Java-land	N
.	N
You'll	N
get	N
a	N
multidimensional	N
array	N
of	N
values	N
corresponding	N
directly	N
to	N
the	N
contents	N
of	N
the	N
table	N
.	N
NOTE	N
:	N
This	N
retrieves	N
the	N
entire	N
table	N
.	N
If	N
you	N
just	N
want	N
to	N
get	N
the	N
table's	N
body	N
,	N
you'll	N
have	N
to	N
modify	N
the	N
above	N
code	N
to	N
iterate	N
over	N
the	N
tBodies	N
,	N
like	N
this	N
:	N

