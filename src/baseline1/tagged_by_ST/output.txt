TextMate_N equivalent_A to_P gVim_G Ctrl+P_G
To_P auto_N complete_V a_D previously_R written_V string_N ._. Is_V it_O possible_A ?_. EDIT_G I'm_G editing_N javascript_N /_: java_N if_P that_D matters_N ._.
Yes_^ -_: the_D autocomplete_N key_N is_V '_G escape_N '_'' by_P default_N ._. See_V the_D TextMate_^ manual_N for_P further_A information_N ._.
Thank_V you_O !!!_V it_O was_V driving_V me_O crazy_A !!!_G :)_G About_P the_D manual_N ..._: mhhhh_N ..._: mmhh_A well_N .._N Beside_P having_V to_P write_V my_D own_A product_N user_N manual_G (_G which_D I_O hate_V and_& usually_R I_O avoid_V )_N do_V I_O have_V to_P read_V others_N them_O too_R ???_G :)_G :)_G :)_G ;)_G Thanks_N again_R
@Oscar_N -_: absolutely_R ._. RTFM_N ,_, man_N ._.
Also_R ,_, Google_^ "_`` Textmate_N tips_N "_'' -_: I_O seem_V to_P pick_V up_R something_N new_A in_P every_D blogpost_N I_O read_V about_P TM_N ._.
Thanks_N for_P the_D hint_N ._. I_O didn't_V know_V about_P http://textmatetips.com_^ ._.
String_^ data_N passed_V to_P Java_^ Applet_^ by_P javascript_N is_V null_A when_R in_P Java_^ applet_N
This_D question_N may_V look_V familliar_N but_& I've_N discovered_V some_D rather_R more_R pertinent_A information_N and_& tried_V some_D other_A things_N (_$ which_D are_V detailed_V below_P )_N so_R to_P avoid_V confusion_N I've_N created_V another_D question_N ._. Here's_V the_D JavaScript_^ (_^ on_P an_D aspx_A page_N ):_G pdfXML_G is_V got_V from_P pdfData_N which_D is_V a_D hidden_A field_N on_P the_D page_N containing_V the_D XML_N that_D contains_V base64_R encoded_V pdf_N data_N which_D is_V passed_V to_P the_D java_N applet_N ._. All_X the_D other_A values_N being_V passed_V to_P the_D applet's_^ WriteDocument_^ method_N have_V within_P range_N sensible_A values_N ._. The_D XML_N is_V like_P this_D (_N the_D content_N of_P the_D PDF_N element_N is_V a_D lot_N bigger_A than_P displayed_V above_P ,_, i've_^ truncated_V the_D data_N for_P space_N reasons_N ;_: the_D PDF_N data_N is_V about_P 4Mb_G )_G The_D signature_N of_P the_D Java_^ method_N is_V :_: What_O happens_V is_V that_P somehow_R the_D xml_N string_N data_N is_V lost_V and_& by_P the_D time_N one_$ gets_V into_P the_D Java_^ the_D value_N of_P the_D PDFData_N parameter_N is_V null_A ._. I've_N debugged_V into_P the_D JS_N and_& the_D pdfXML_N param_N of_P the_D js_N method_N CallApplet_^ definitely_R has_V content_N ._. I've_N also_R tried_V to_P add_V a_D param_N tag_N in_P to_P the_D applet_N tag_N and_& set_V its_D value_N before_P calling_V the_D applet_N and_& used_V GetParameter()_N from_P inside_P the_D applet_N ._. This_D results_V in_P a_D blank_A string_N rather_R than_P a_D null_N ._. This_D problem_N doesn't_N occur_V on_P every_D machine_N ._. Our_D QA_N department_N don't_N get_V this_D for_P example_N but_& since_P this_D is_V a_D client-side_A issue_N ,_, one_$ of_P our_D customers_N will_V probably_R see_V this_D ._. I'm_N utterly_R out_P of_P ideas_N here_R so_P any_D help_N would_V be_V appreciated_V (_N with_P the_D obvious_A proviso_N that_P sadly_R I_O need_V to_P get_V this_D working_N rather_R than_P re-engineer_V this_D and_& the_D legacy_N systems_N the_D applet_N communicates_V with_P to_P avoid_V using_V an_D applet_N ._. )_N
Sorted_V the_D problem_N ._. How_R ?_. I_O took_V JRE_N 1.6_$ update_V 12_$ off_A and_& stuck_A update_V 7_$ (_N which_D is_V the_D version_N we_O reccomend_V to_P those_D who_O use_V our_D website_N )_N on_P my_D machine_N ._. Why_R update_V 12_$ stopped_V working_V I_^ don't_^ know_V ._. Why_R update_V 7_$ is_V stable_A I_N don't_N know_V ._. [_$ sigh_N ]_G It's_G things_N like_P this_D that_D make_V me_O glad_A I_N work_N mostly_R with_P a_D '_G long_A time_N between_P releases_N '_G framework_N like_P ._. net_N ._.
Detecting_V a_D 64-bit_A jre_N in_P a_D 32-bit_A browser_N ?_.
Is_V there_R any_D way_N to_P detect_V a_D 64-bit_A java_N install_V in_P a_D 32-bit_A environment_N ?_. The_D Java_^ Deployment_^ Toolkit_^ detects_V nothing_N ,_, but_& I_O was_V wondering_V if_P there_X was_V some_D secret_A browser_N way_N of_P detecting_V the_D 64-bit_A install_V client-side_A ._.
Sun's_G HotSpot_G JVM_N FAQ_N :_: When_R writing_V Java_^ code_N ,_, how_R do_V I_O distinguish_V between_P 32_$ and_& 64-bit_A operation_N ?_. There's_V no_D public_A API_N that_D allows_V you_O to_P distinguish_V between_P 32_$ and_& 64-bit_A operation_N ._. Think_V of_P 64-bit_A as_P just_R another_D platform_N in_P the_D write_V once_R ,_, run_V anywhere_R tradition_N ._. However_R ,_, if_P you'd_N like_P to_P write_V code_N which_D is_V platform_N specific_A (_N shame_N on_P you_O )_V ,_, the_D system_N property_N sun.arch.data.model_N has_V the_D value_N "_`` 32_$ "_'' ,_, "_'' 64_$ "_'' ,_, or_& "_`` unknown_A "_'' ._. You_O can_V access_V this_D like_A System.getProperty_N (_N "_'' sun.arch.data.model_G ")_G ._. This_D property_N will_V obviously_R only_R actually_R be_V set_V on_P Sun_^ JVMs_^ /_: JREs_N ._. You_O might_V also_R try_V to_P parse_V the_D results_N of_P System.getProperty_N (_N "_'' java.vm.name_G ")_G ,_, but_& this_D will_V also_R be_V highly_R vendor_N specific_A ._.
I_O guess_V I_O could_V do_V this_D in_P an_D applet_N ,_, but_& I_O was_V hoping_V to_P get_V this_D information_N before_P java_N was_V necessarily_R loaded_A or_& available_A ._.
HtmlUnit_N property_N undefined_A script_N error_N
I_O m_N submitting_V a_D form_N using_V java_G HtmlUnit_G package_N ._. I_O am_V able_A to_P get_V pages_N and_& submit_V forms_N but_& on_P one_$ page_N I_$ m_N getting_V a_D ScriptException_N error_N ._. The_D message_N is_V Cannot_^ set_V property_N "_`` disabled_A "_'' of_P undefined_A to_P "_`` 0_$ "_'' I_O think_V it_O might_V be_V caused_V by_P a_D javascript_N method_N that_D tries_V to_P set_V a_D variable_N that_D has_V not_R been_V declared_V in_P the_D form_N but_& I_N m_N not_R sure_A ._.
Does_V viewing_V the_D same_A page_N in_P a_D browser_N produce_V a_D JS_N error_N ?_.
I_O just_R tested_V it_O again_R and_& just_R noticed_V the_D page_N that_P loads_N does_V have_V a_D JS_N error_N ._. Is_V there_X a_D way_N I_O can_V tell_V HtmlUnit_^ to_P keep_V processing_N like_P ie_N does_V ?_.
Can_V you_O provide_V a_D public_A website_N to_P test_V against_P ?_. As_P I_O am_V not_R able_A to_P load_V the_D JS_N in_P https://mmlab1msslnx.fmr.com/mcwebadm/cgi-bin/edit_local.pl?operation=edit_N return_address=%2Fmcwebadm%2Fcgi-bin%_N 2Fmenu.pl_N selected=22020c341b11de96c3000423d43f1d_N Also_R ,_, please_V use_N latest_A HtmlUnit_N 2.5_$ version_N ._.
I'm_N not_R able_A to_P provide_V a_D public_A test_N case_N ._. I'm_N working_V on_P creating_V one_$ ._. I_O have_V checked_V and_& I'm_N using_V version_N 2.5_$ ._. I_O was_V hoping_V someone_N had_V seen_V something_N similar_A to_P this_D ._.
This_D was_V caused_V my_D a_D javascript_N error_N on_P the_D page_N that_D was_V being_V loaded_V ._. I_O set_V the_D webClient.getOptions()_N ._. setThrowExceptionOnScriptError_G (_G false_A );_N but_& it_O still_R threw_V the_D exception_N ._. SOLUTION_N :_: If_P you_O catch_V the_D ScriptException_^ the_D page_N is_V STILL_^ fully_R loaded_V and_& you_O can_V just_R continue_V processing_V and_& ignoring_V the_D exception_N ._. Example_^ of_P HTML_^ that_D fails_V :_:
Should_V I_O use_V PHP_^ or_& JSP_^ for_P a_D chat_N website_N ?_.
I_O want_V to_P develop_V a_D website_N web_N chat_N application_N like_P yahoo_N ._. Only_A difference_N is_V that_P I_O want_V to_P make_V it_O web_N based_V not_R desktop_N ._. I_O will_V be_V implementing_V it_O in_P jsp_N /_: php_N with_P ajax_N ._. I_O want_V to_P know_V whether_P jsp_N or_& php_N will_V be_V better_A for_P this_D ._. What_O will_V be_V advantages_N or_& disadvantages_N of_P both_D ._. Which_D one_$ of_P the_D two_$ would_V you_O prefer_V and_& why_R ?_. Will_V jsp_V applicatioon_N will_V be_V slower_A then_R php_V ?_. I_O am_V thinking_V of_P using_V using_V struts_N with_P jsp_N and_& ajax_N ._. Will_^ using_V of_P struts_A decrease_N speed_N ?_. I_O know_V jsp_N ,_, java_N and_& struts_N but_& not_R php_N ._. Is_V php_N more_R difficult_A then_R jsp_V ?_.
How_R long_A is_V a_D piece_N of_P string_N ?_. Seriously_R ._. We_O don't_V know_V exactly_R what_O you_O want_V to_P do_V but_& I_O imagine_V most_A of_P the_D backend_A stuff_N will_V be_V very_R similar_A in_P difficulty_N between_P the_D two_$ platforms_N ._. Most_A of_P the_D work_N will_V be_V platform_N independent_A front-end_N stuff_N ._.
It_O won't_N be_V slower_A because_P you_O are_V using_V one_$ over_P the_D other_A ._. It_O will_V be_V slower_A only_R if_P your_D implementation_N is_V less_R efficient_A ._.
Whatever_D you_O choose_V keep_V in_P mind_N that_P web_N based_A chat_N app_N would_V probably_R need_V continuous_A updates_N from_P server_N to_P the_D clients_N (_N so_R called_V Comet_^ )_^ ._.
Use_N whichever_D one_$ that_D you're_V a_D better_A programmer_N in_P ._. The_D task_N can_V be_V accomplished_V in_P either_D language_N just_R the_D same_A ._. You_O can_V argue_V endlessly_R about_P language_N features_N ,_, the_D bottom_A line_N will_V be_V whatever_D works_V best_A for_P you_O ._.
JSP_^ based_V web_N applications_N are_V a_D bit_N more_R harder_R to_P deploy_V than_P PHP_^ based_V web_N applications_N ,_, but_& you_O gain_V the_D ability_N of_P creating_V Servlets_^ ._. PHP_^ requires_V less_A server_N administration_N skills_N to_P setup_N properly_R and_& get_V running_V ,_, is_V fast_A to_P learn_V ,_, and_& allows_V fast_A creation_N of_P simple_A applications_N ._. None_^ is_V better_A than_P the_D other_A ,_, they_O are_V different_A in_P nature_N ._. Check_V your_D requirements_N ,_, and_& take_V a_D decision_N based_V on_P that_D ._. If_P your_D requirements_N doesn't_N favor_N one_$ over_P the_D other_A ,_, choose_V whichever_D your_D team_N is_V more_R comfortable_A with_P ._.
+1_N for_P basing_V your_D decision_N on_P *_N your_D requirements*_N ._.
Exactly_R !_. Great_A answer_N ._. Just_R because_P you_O can_V program_V easier_A in_P PHP_^ doesn't_^ mean_V it_O will_V always_R be_V the_D best_A choice_N ._. The_D requirements_N should_V be_V used_V to_P point_V you_O in_P the_D right_A direction_N ._.
I've_N worked_V with_P both_D JSP_^ and_& PHP_^ ._. Even_R if_P I_O prefer_V PHP_^ ,_, I_O still_R work_V with_P JSP_^ from_P time_N to_P time_N depending_V on_P my_D requirements_N ._. There_X is_V not_R really_R a_D better_A choice_N ._. It_O always_R ,_, **_G always_R **_G depends_V on_P your_D requirements_N ._.
JSP_^ isn't_^ a_D language_N -_: it's_V just_R a_D view_N /_: presentation_N technology_N -_: so_P it's_N only_R to_P build_V a_D web_N Frontend_N -_: while_P the_D main_A programming_N happens_V somewhere_R else_R -_: in_P the_D Java_^ Language_^ ,_, as_P a_D so-called_A Java_^ Servlet_^ ._. I_O personally_R like_P Java_^ more_A ,_, but_& PHP_^ is_V okay_A ,_, and_& if_P you_O only_R know_V PHP_^ (_^ which_D I_O must_V assume_V from_P the_D questions_N :)_G )_G you're_G better_A off_R doing_V it_O in_P PHP_^ now_R -_: you_O can_V learn_V Java_^ later_R ..._: Apart_R from_P that_D ,_, the_D others_N asking_V for_P more_A background_N info_N are_V right_A -_: you_O need_V to_P see_V what_O technology_N meets_V your_D requirements_N best_R ..._:
People_N refer_V to_P JSP_^ the_D same_A way_N as_P ASP.NET_N is_V referred_V to_P ._. It_O is_V a_D framework_N ._.
Which_D is_V incorrect_A ,_, and_& therefore_R I_O point_V out_R how_R it_O really_R is_V :)_^ No_^ ,_, really_R ,_, maybe_R people_N not_R doing_V Java_^ development_N themselves_O do_V that_D ._. Java_^ folks_N neither_& say_V they_O build_V something_N in_P JSP_^ instead_R of_P PHP_^ ,_, because_P JSP_^ isn't_^ a_D language_N ,_, nor_& do_V they_O refer_V to_P JSP_^ as_P a_D framework_N (_N because_P it_O does_V not_R deliver_V a_D complete_A stack_V of_P functionalities_N )_G -_: frameworks_N are_V things_N like_P struts_N ,_, gwt_N ,_, webwork_N ,_, sitemesh_N -_: and_& even_R those_D only_R deliver_V the_D view_N part_N -_: a_D full_A stack_V web_N framework_N helps_V you_O with_P a_D lot_N more_A things_N than_P just_R the_D view_N ._.
If_P you_O know_V both_D well_R then_R choose_V any_D ._. But_& if_P facing_V difficulty_N then_R PHP_^ is_V better_A to_P stay_V with_P ._. Reasons_N :_: fundamentally_R easy_A large_A no_D ._. of_P developer_N libraries_N are_V available_A ._. Easy_^ to_P integrate_V with_P other_A scripting_V languages_N But_& structural_A syntax_N becomes_V a_D problem_N as_P they_O are_V so_R many_A in_P cumbersome_A manner_N ._. Use_^ PHP_^ tag_N library_N for_P that_D works_V just_R like_P JSTL_^ ._. "_'' Choosing_V language_N is_V not_R the_D problem_N but_& efficient_A implementation_N of_P code_N is_V the_D only_A hurdle_N ._. "_''
java_N equivalent_N of_P swfobject_N
looking_V for_P a_D javascript_N class_N like_P swfobject_N to_P embed_V java_N and_& have_V a_D simple_A fallback_N if_P the_D user_N doesn't_N have_V java_N or_& refuses_V the_D security_N prompt_A ._. thanks_N ,_, Josh_^
appletobject_N may_V work_V ,_, but_& I_O have_V not_R used_V it_O ._.
You_O could_V build_V one_$ pretty_R easily_R ._. Have_^ something_N like_P a_D div_N set_V up_R like_P this_D :_: Then_R add_V Java_^ Plugin_^ Detection_N (_N builder_N )_$ to_P your_D JavaScript_^ ._. Then_R if_P that_D returns_V true_A ,_, then_R do_V something_N like_P :_:
Just_R embed_V the_D applet_N like_P you_O normally_R do_V and_& insert_V the_D fallback_A inside_N or_& insert_V a_D javascript_N snippet_N to_P remove_V the_D object_N :_: Besides_P param_N ,_, you_O can_V add_V other_A elements_N ,_, e.g._G paragraphs_N with_P text_N or_& javascript_N calling_V some_D function_N to_P replace_V the_D object_N ._.
This_D helps_V !_. I_O got_V a_D very_R strange_A problem_N while_P using_V applet_N to_P do_V batch_N file_V downloading_V from_P the_D server_N side_N ._. The_D Ajax_^ request_N seems_V conflict_N with_P applet_N request_N ,_, the_D applet_N file_N downloading_V interrupted_A with_P some_D socket_N exception_N ._. The_D applet_N works_V fine_A under_P JRE5.0_N ,_, it_O might_V be_V caused_V by_P our_D recent_A upgrade_N to_P JRE6.0_N ._. div_G id=_G "_`` java-applet_A "_'' /_: div_A script_N var_N t_N ;_: function_N startApplet()_N {_N var_N attributes_V =_A {_G codebase_G :_: '_'' %=_G request.getContextPath()_G %_N '_'' ,_, code_N :_: '_G %=appletClass%_N '_'' ,_, archive:'applet_N /_: SignedApplet.jar_N '_'' ,_, width_N :_: 0_$ ,_, height_N :_: 0_$ }_N ;_: var_N parameters_N =_A {_G para1:'value1_G '_'' ,_, para2:'value2_N '_'' ,_, java_arguments_N :_: '_G -Xms64m_N -Xmx512m_N '_'' }_N ;_: var_N version_N =_A '_'' 1.6_$ '_'' ;_: var_N buildAppletTag_N =_A function()_G {_G var_N tag_N =_A '_'' applet_N '_'' ;_: for_P (_G var_G attribute_N in_P attributes_N )_G {_G tag_N +=_G (_G '_'' '_'' +_& attribute_N +_& '_G =_A "'_N +_& attributes[attribute_N ]_$ +_& '"')_$ ;_: }_$ tag_N +=_N "_'' "_`` ;_: for_P (_G var_G parameter_N in_P parameters_N )_G {_G tag_N +=_N '_'' param_G name=_G "'_N +_& parameter_N +_& '"_G value=_G "'_N +_& parameters[parameter_N ]_$ +_& '"_$ /_: '_'' ;_: }_$ tag_N +=_N '_'' /_: applet_N '_'' ;_: return_N tag_N ;_: }_N ;_: document.getElementById_G (_G "_`` java-applet_A ")_N ._. innerHTML_N =_A buildAppletTag_G (_G attributes_N ,_, parameters_N ,_, version_N );_N clearTimeout_N (_$ t_N );_G }_G t_N =_A setTimeout_G (_G "_`` startApplet()_N "_'' ,_, 1000_$ );_G //_G delayed_V /_: script_N
Any_D function_N /_: method_N in_P Java_^ to_P implement_V a_D "_`` freeze_N panes_N "_`` -like_A sheet_N ?_.
We_O are_V using_V Java_^ and_& Javascript_^ to_P try_V to_P display_V a_D huge_A sheet_N with_P freeze_N panes_N ,_, but_& it_O is_V being_V very_R difficult_A ._. Does_^ someone_N know_V about_P a_D library_N ,_, method_N ,_, script_N or_& something_N ,_, either_& free_A or_& commercial_A ,_, to_P do_V this_D ?_. Thanks_N ._.
Not_R totally_R sure_A I_O understand_V what_O a_D sheet_N with_P freeze_N panes_N means_V -_: could_V you_O expand_V on_P this_D ?_.
It_O means_V to_P be_V able_A to_P display_V a_D huge_A sheet_N ,_, keeping_V the_D first_A row_N and_& column_N freeze_N ._. The_D idea_N is_V to_P be_V able_A to_P scroll_V through_P the_D sheet_N without_P losing_V the_D view_N of_P the_D first_A columns_N or_& rows_N which_D usually_R contain_V the_D column_N or_& row_N titles_N ._.
After_P looking_V at_P http://blogs.zoho.com/general/freeze-panes-in-zoho-sheet_N ,_, I_O assume_V you_O are_V looking_V for_P similar_A functionality_N in_P tables_N ?_. One_$ way_N to_P do_V this_D would_V be_V to_P have_V two_$ tables_N ,_, one_$ that_D was_V "_`` frozen_A "_'' rows_N (_$ or_& columns_N )_N that_D grew_V or_& shrunk_V in_P size_N based_V on_P how_R many_A frozen_V you_O had_V ,_, and_& the_D other_A was_V the_D dynamic_A table_N that_D grew_V or_& fell_V in_P size_N based_V on_P how_R many_A unfrozen_A there_X were_V ._.
Closing_N popups_N on_P session_N expiry_N
Here_R is_V the_D thing_N :_: my_D webapp_N has_V loads_N of_P popups_N and_& my_D boss_N wants_V '_G em_N closed_V on_P session_N expiry_N ,_, coz_N when_R session_N expires_V and_& an_D user_N presses_N refresh_V on_P a_D popup_N ,_, he_O is_V being_V shown_V the_D logon_N page_N ->_$ user_N logs_N on_P ->_N user_N is_V directed_V to_P the_D dashboard_N ._. Now_R ,_, a_D dashboard_N screen_N in_P a_D popup_N is_V totally_R uncool_A ._. Here_R is_V where_R google_N got_V me_O :_: Have_V javascript_N to_P close_V popup_N onload_N ._. Generate_V this_D onload_A script_N into_P the_D response_N if_P session_N has_V expired_V (_$ checking_N session_N expiry_N from_P jsp_N and_& including_V onload_A script_N conditionally_R )_^ ._. Do_V you_O think_V this_D is_V a_D good_A way_N to_P it_O ?_. What_O is_V the_D best_A practice_N for_P this_D scenario_N ?_. P.S_^ :_: I_O am_V not_R allowed_V to_P use_V AJAX_^
The_D best_A practice_N is_V to_P not_R use_V "_`` loads_N of_P popups_N "_'' ._. That_P aside_R ,_, when_R you_O talk_V about_P closing_N popup_N in_P "_`` onload_A "_'' event_N what_O would_V really_R happen_V is_V user_N would_V refresh_V the_D popup_N and_& it_O would_V close_R (_V which_D would_V be_V REALLY_^ weird_A from_P user's_A standpoint_N )_N OR_N user_N would_V get_V a_D prompt_A from_P the_D browser_N (_$ close_N this_D window_N ?_. yes_R /_: no_D )_N which_D is_V equally_R weird_A ._.
@ChssPly76_N -_: yes_! ,_, from_P an_D user_N standpoint_N ,_, it's_N probably_R weird_A ._. But_& ,_, designing_V data-oriented_A applications_N without_P pop-ups_N is_V one_$ heck_N of_P a_D challenge_N ._.
I'm_G ok_G with_P popups_N as_R long_R as_P I_^ don't_^ need_V any_D of_P the_D information_N behind_P it_O ._. If_P I_O do_V ,_, I_O get_V pissed_V at_P them_O and_& curse_N the_D designers_N ._.
The_D _only__N possible_A excuse_N for_P using_V popup_N windows_N is_V a_D requirement_N for_P application_N to_P function_V without_P javascript_N because_P then_R you_O can_V at_P least_A do_V some_D stuff_N via_P `_``
The_D best_A way_N would_V be_V an_D XMLHTTP_N request_N to_P check_V login_N and_& close_V them_O if_P required_V -_: do_V this_D periodically_R ._. Astute_A readers_N (_$ meaning_N everyone_N )_N will_V notice_V that_P this_D is_V an_D AJAX_^ request_N ,_, but_& if_P you_O phrase_N it_O that_D way_N it_O might_V get_V accepted_V as_P whoever_O dictated_V that_P you_O '_G aren't_N allowed_V to_P use_V AJAX_^ '_'' is_V clearly_R an_D idiot_N ._.
@Luke_V the_D corporate_A IT_^ teams_N of_P non-IT_A core_N companies_N are_V loaded_V with_P idiots_N who_O would_V tell_V you_O not_R to_P use_V AJAX_^ :-)_^ :_: And_& my_D boss_N is_V one_$ of_P '_'' em_G !_.
Won't_V the_D periodic_A HTTP_N request_N keep_V the_D session_N alive_A ?_.
then_R they_O are_V screwed_V ._. and_& so_R are_V you_O if_P your_D boss_N reads_V that_P you_O just_R called_V him_O an_D idiot_N ..._:
@matt_N b_N :_: not_R if_P you_O keep_V record_N of_P the_D last_A user_N activity_N ._.
@matt_N b_N -_: George_^ said_V what_O I_O was_V going_V to_P say_V :)_N
In_P a_D past_A life_N ,_, I_O made_V a_D popup_N manager_N object_N that_D maintained_V what_O windows_N were_V open_A ._. You_O should_V probably_R make_V one_$ of_P these_D if_P not_R already_R done_V ._. Then_R ,_, you_O can_V use_V setTimeout_N to_P call_V a_D function_N after_P so_R many_A minutes_N (_$ or_& whatever_D time_N you_O want_V )_$ have_V gone_V by_P ._. This_D will_V check_V for_P recent_A activity_N (_N probably_R via_P AJAX_G )_G and_& close_V the_D popup_N if_P you_O determine_V that_P the_D session_N has_V expired_V ._. If_P not_R ,_, call_V setTimeout_N again_R with_P your_D new_A time_N ,_, properly_R adjusted_V for_P most_A recent_A activity_N ._. ^^before_V the_D AJAX_^ edit_N ._. Well_^ ,_, since_P you_O can't_V use_V AJAX_^ ,_, can_V you_O put_V something_N in_P the_D url_N that_D will_V tell_V you_O it's_V a_D popup_N ?_. Then_R you'll_R know_V not_R to_P show_V the_D login_N screen_N when_R the_D user_N hits_V reload_N ._.
If_P your_D boss_N is_V asking_V you_O to_P achieve_V this_D ,_, without_P using_V AJAX_^ ,_, then_R you're_N in_P trouble_N ._. He_O should_V understand_V that_P the_D only_A connection_N a_D browser_N has_V to_P the_D server_N (_N without_P refreshing_V the_D page_N )_N is_V javascript_G (_G what_O he_O understands_V to_P be_V ajax_G )_G ._. The_D best_A way_N to_P do_V this_D is_V to_P setup_N a_D script_N on_P the_D pages_N to_P ask_V the_D server_N if_P the_D user_N is_V still_R logged_V in_P every_D 30_$ seconds_N or_& so_R ._. This_D script_N assumes_V you're_N using_V the_D jQuery_N framework_N for_P rapid_A development_N of_P javascript_N solutions_N ._. This_^ also_R uses_V JSON_^ (_^ Javascript_^ Object-notation_^ )_^ to_P test_V a_D return-value_N from_P the_D loggedin.php_N file_N ._. Bottom_N line_N ,_, you_O need_V to_P use_V AJAX_^ ._. Tell_V your_D boss_N there_X is_V no_D other_A way_N ._. If_P he_O still_R doesn't_^ get_V it_O ,_, ask_V him_O to_P balance_V his_D checkbook_N without_P using_V math_N ._.
Or_& just_R tell_V your_D boss_N that_D you're_V brilliant_A and_& figured_V out_R a_D way_N to_P do_V it_O with_P Javascript_^ instead_R of_P AJAX_^
Well_R ,_, the_D J_N in_P AJAX_^ is_V javascript_N ._. If_P its_D not_R async_A (_N A_N )_N and_& not_R xml_G (_G X_N )_N based_V ,_, then_R he_O can_V build_V a_D case_N saying_V that_P he's_N not_R using_V AJAX_^ ,_, unfortunately_R ,_, the_D example_N uses_V JQuery_N and_& underneath_P the_D hood_N ,_, it_O is_V using_V the_D A_N ,_, J_N and_& X_N of_P AJAX_^ ._.
An_D alternative_A way_N to_P implement_V modal_A dialogs_N in_P a_D web_N application_N is_V to_P :_: Model_^ the_D dialog_N in_P a_D DIV_N ,_, default_N styled_V to_P display_V :_: none_N ;_: On_P desired_V action_N ,_, inject_V /_: append_V the_D Modal_^ dialog_N DIV_^ into_P the_D page_N source_N Reset_^ the_D CSS_^ display_N so_P the_D modal_A dialog_N DIV_N is_V visible_A ,_, overlaid_A on_P top_N of_P the_D page_N by_P setting_V the_D CSS_N z-index_N property_N Make_V the_D modal_A dialog_N disappear_V upon_P either_& successful_A execution_N or_& the_D user_N cancelling_V out_R Because_P the_D modal_A dialog_N is_V part_N of_P the_D page_N source_N ,_, the_D dialog_N will_V disappear_V when_R the_D session_N times_N out_R ._. This_D approach_N doesn't_N spawn_V supporting_V windows_N that_D can_V be_V orphaned_V as_P the_D poster_N is_V attempting_V to_P address_V ._. And_& it_O fits_V the_D requirement_N of_P not_R using_V AJAX_^ ._. You_O can_V code_V these_D by_P hand_N ,_, but_& I_O don't_V really_R recommend_V it_O because_P of_P having_V to_P support_V various_A browser_N ._. I_O suggest_V looking_V at_P the_D Yahoo_^ User_N Interface_^ ._. You_O can_V tailor_V it_O to_P suit_V your_D needs_N (_$ IE_N :_: only_R modal_A dialogs_G )_G ,_, and_& it_O would_V support_V AJAX_^ if_P requirements_N change_V down_P the_D road_N ._. Beware_V of_P spawning_V modal_A dialogs_N from_P modal_A dialogs_N ._.
In_P theory_N ,_, you_O could_V avoid_V AJAX_^ by_P using_V a_D hidden_A flash_N widget_N ..._: But_& more_R practically_R ,_, AJAX_^ is_V the_D '_'' right_A '_'' solution_N ,_, and_& I_O think_V you_O will_V have_V to_P talk_V to_P your_D boss_N ,_, determine_V where_R this_D '_'' no_D AJAX_N '_'' rule_N came_V from_P ,_, and_& convince_V him_O that_P AJAX_^ is_V the_D best_A way_N to_P solve_V this_D problem_N ._. Does_V he_O think_V AJAX_^ would_V be_V take_V too_R much_A time_N to_P implement_V ?_. If_P so_R ,_, you_O should_V prove_V him_O wrong_A ._. Does_V he_O think_V it_O will_V be_V hard_A to_P maintain_V ?_. If_P so_R ,_, show_V how_R simple_A the_D code_N to_P do_V this_D will_V be_V ,_, and_& how_R widely_R used_V the_D common_A AJAX_^ libraries_N are_V ._. If_P your_D boss_N is_V reasonable_A ,_, then_R his_D goal_N is_V to_P what_O is_V best_A for_P the_D product_N ,_, and_& you_O should_V be_V able_A to_P reason_V with_P him_O ._.
using_V google_N map_N after_P logging_V
I_O have_V a_D project_N witch_N is_V using_V googleMap_N ,_, when_R I_O used_V localhost_A googleMap_N works_V correctly_R and_& anythings_N is_V OK_A ,_, but_& when_R I_O deploy_V it_O on_P the_D other_A computer_N the_D site_N can_V not_R work(don't_V show_N google_N map_V !!!_G )_G ._. I_O got_V a_D valid_A key_N but_& stil_V this_D problem_N exists_V !_. please_V help_V me_O !_.
when_R you_O say_V "_`` other_A computer_N "_'' do_V you_O mean_V you_O are_V deploying_V it_O to_P google_V app_N engine_N ?_.
Might_V it_O be_V a_D cross-site_A scripting_N issue_N ?_. There's_V an_D option_N in_P the_D GoogleMaps_^ preferences_N that_D allows_V you_O to_P turn_V off_R security_N ._. As_P an_D experiment_N ,_, try_V turning_V it_O off_R to_P see_V if_P it_O makes_V any_D difference_N ._. (_N And_& don't_N forget_V to_P turn_V it_O back_R on_P when_R you_O are_V done_V !_. )_G
Do_V you_O manage_V correctly_R the_D errors_N from_P Google_^ Map_^ API_^ in_P your_D code_N ,_, in_P order_N to_P see_V if_P there_X is_V a_D given_V error_N returned_V by_P one_$ of_P the_D google_N map_N function_N you_O use_V Also_R ,_, did_V you_O inspect_V the_D page_N when_R deployed_V on_P the_D other_A computer_N ,_, with_P a_D tool_N like_P firebug_N /_: web_N inspector_N ,_, to_P see_V if_P there_X are_V some_D errors_N linked_V to_P the_D problem_N
This_D really_R sounds_V like_P an_D API_N key_A problem_N ._. Make_V sure_A that_P you_O used_V the_D right_A domain_N to_P get_V your_D key_N ._. If_P you_O use_V "_`` example.com_N "_'' to_P get_V your_D key_N ,_, all_D of_P the_D sub-directories_N on_P example.com_N will_V be_V valid_A ._. If_P that's_N not_R it_O ,_, you_O definitely_R need_V to_P use_V Firebug_^ to_P find_V out_R what_O the_D error_N is_V ._.
is_V it_O free_A to_P get_V key_A ?_.
It_O is_V definitely_R free_A ._. http://code.google.com/apis/maps/signup.html_N
Read_^ Browser_^ /_: Client_^ time_N from_P Http_^ Servlet_^ request_N header_N
Is_V it_O possible_A to_P read_V the_D Browser_^ (_^ Client_^ machine_N )_$ time_N when_R a_D request_N is_V made_V to_P the_D servlet_N ?_.
I_O don't_V believe_V so_R ._. Unfortunately_R the_D HTTP_N Date_N header_N is_V only_R sent_V for_P PUT_N or_& POST_N messages_N ,_, and_& even_R then_R it's_V optional_A :_: Clients_N SHOULD_V only_R send_V a_D Date_^ header_N field_N in_P messages_N that_D include_V an_D entity-body_A ,_, as_P in_P the_D case_N of_P the_D PUT_N and_& POST_N requests_N ,_, and_& even_R then_R it_O is_V optional_A ._. A_D client_N without_P a_D clock_N MUST_^ NOT_^ send_V a_D Date_^ header_N field_N in_P a_D request_N ._. If_P you_O have_V control_N of_P the_D client_N ,_, you_O could_V (_V perhaps_R )_$ encode_V it_O as_P a_D separate_A experimental_A HTTP_N header_N ._. Or_& add_V it_O as_P a_D GET_V parameter_N etc_N ._.
You_O can_V use_V javascript_N and_& append_V the_D time_N to_P every_D request_N ._. Provided_V that_D javascript_N is_V enabled_V ,_, you_O can_V add_V the_D following_N to_P your_D links_N :_: You_O can_V do_V something_N similar_A ,_, if_P you_O need_V timezone_N information_N ._. This_D question_N may_V help_V ._.
JAAS_G tomcat_G login_N module_N possible_A method_N to_P pass_V ip_N address_N
I've_N been_V looking_V into_P a_D way_N of_P passing_V the_D client_N ip_N as_R well_R as_P the_D userid_N and_& password_N from_P a_D JAAS_N login_N page_N to_P the_D JAAS_N login_N module_N implementation_N in_P my_D web_N code_N ._. JAAS_N only_R allows_V the_D user_N id_N and_& password_N to_P be_V passed_V to_P the_D login_N module_N ._. My_D idea_N is_V to_P have_V a_D java_N script_N code_N to_P append_V the_D ip_N address_N to_P the_D user_N id_N and_& then_R call_V the_D form_N submit_V ._. I_O just_R don't_N have_V the_D right_A java_N script_N code_N to_P do_V this_D ._. Can_V you_O help_V ?_. The_D web_N page_N has_V two_$ input_N fields_N ,_, j_userid_N and_& j_password_N ,_, which_D the_D JAAS_^ code_N knows_V to_P look_V it_O ._. So_P what_D javaScript_N code_N can_V I_O use_V to_P add_V the_D ip_N address_N to_P the_D j_userid_N field_N before_P the_D form_N submit_V ._. I_O was_V thinking_V of_P '_G ip-address_A #userid_N '_'' and_& then_R in_P my_D login_N module_N I'd_N take_V the_D ip_N address_N off_P the_D userid_N ._.
Sorry_^ ,_, I_^ don't_^ think_V there_X is_V a_D way_N to_P obtain_V the_D ip_N on_P the_D client_N side_N ,_, in_P plain_A Javascript_^ ._. Testing_V the_D remote_A ip_N on_P the_D server_N side_N is_V probably_R not_R a_D solution_N if_P you_O don't_V control_V the_D infrastructure_N between_P the_D client_N and_& the_D server_N (_N load-balancers_N ,_, proxies_N ..._: )_$ ._. If_P you're_N confident_A the_D remote_A ip_N is_V the_D ip_N of_P the_D client_N ,_, you_O should_V be_V able_A to_P hack_V a_D tomcat_N Valve_N or_& a_D servlet_N filter_N ._.
I_O can_V get_V the_D ip_N address_N onto_P the_D page_N in_P a_D hidden_A field_N using_V a_D JSF_N bean_N ._. The_D problem_N is_V passing_V it_O through_P to_P the_D JAAS_N login_N module_N ._.
I_O created_V these_D two_$ javaScript_N functions_N ._. addIpSubmit_N is_V called_V from_P a_D login_N button_N ._. You_O can_V see_V I_O have_V a_D bean_N to_P put_V the_D ip_N address_N into_P a_D hidden_A field_N ._. The_D j_username_G JAAS_G field_N is_V also_R hidden_V and_& is_V filled_V in_R by_P the_D addIpSubmit()_N function_N ._. It_O mungs_V the_D ip_N to_P the_D user_N name_N and_& calls_V the_D JAAS_^ submit_V functions_N ._. Then_R in_P the_D login_N module_N I_O get_V the_D ip_N address_N and_& user_N name_V out_R ._. Just_R remember_V that_P the_D FacesContext.getCurrentInstance()_N ._. getExternalContext()_N ._. getRemoteUser()_N now_R has_V the_D ip_G #userid_G in_P it_O ._.
How_R to_P get_V custom_N value_N from_P text_N field_N in_P JSP_^ ?_.
I'm_N working_V in_P a_D very_R simple_A and_& small_A web_N application_N ,_, it_O is_V a_D jsp_N that_D handles_V a_D shopping_N cart_N ._. What_O I_O do_V at_P this_D point_N is_V to_P iterate_V through_P all_X the_D products_N that_D are_V stored_V in_P the_D car_N and_& add_V them_O one_$ by_P one_$ to_P the_D jsp_N with_P each_D iteration_N ._. This_D is_V the_D code_N that_D adds_V a_D row_N to_P the_D jsp_N in_P each_D iteration_N :_: As_P you_O can_V see_V I_O add_V to_P the_D end_N of_P each_D row_N a_D submit_V type_N control_N with_P a_D custom_N method_N for_P handling_V Click_V events_N ,_, the_D use_N of_P this_D control_N is_V to_P remove_V from_P the_D car_N the_D respective_A product_N ._. The_D problem_N that_P I_O have_V is_V that_P when_R I_O click_V in_P the_D delete_V button_N of_P a_D product_N ,_, the_D id_N that_D is_V passed_V to_P the_D CustomSubmit_N (_N ..._: )_N method_N is_V not_R the_D id_N of_P the_D product_N that_P I'm_N trying_V to_P remove_V but_& the_D id_N of_P the_D last_A product_N added_V to_P the_D jsp_N ._. So_R ,_, my_D question_N is_V how_R can_V I_O get_V the_D correct_A id_N from_P the_D item_N that_P I'm_N trying_V to_P remove_V ?_.
How_R are_V you_O iterating_V over_P each_D item_N in_P the_D cart_N ?_.
I_O got_V them_O in_P an_D ArrayList()_N that_D is_V contained_V in_P a_D Java_^ Bean_^ that_D is_V located_A in_P the_D session_N scope_N ._.
The_D way_N i_G use_V to_P do_V it_O is_V as_P follows_V :_: Replace_V add_V the_D deleteIt_N javascript_N function_N ,_, in_P the_D function_N you_O fill_V a_D hidden_A input_N field_N with_P the_D id_N ._. Then_R submit_V the_D page_N and_& the_D correct_A id_N gets_V passed_V to_P your_D page_N Little_^ sidenote_V its_D always_R prudent_A to_P escape_V all_D your_D Strings_^ maybe_R like_P
Thanks_N for_P the_D sidenote_N ,_, I_O will_V do_V it_O ,_, now_R about_P what_O you_O suggest_V ,_, I_O understand_V the_D javascript_N function_N part_N ,_, but_& how_R do_V you_O do_V to_P get_V '_G yourid_N '_'' variable_A ,_, because_P I{m_N adding_V rows_N dynamically_R ,_, and_& I_O don_V t_N know_V which_D is_V the_D id_N from_P the_D product_N that_P the_D user_N wants_V to_P remove_V ,_, the_D id_N is_V contained_V in_P a_D column_N of_P the_D row_N ,_, but_& I_O don't_V know_V how_R to_P get_V it_O ..._:
I_O assume_V your_D cart_N is_V a_D list_N of_P objects_N ,_, each_D having_V the_D attributes_N id_N and_& quantity_N ._. So_P I_O would_V expect_V you_O code_V to_P look_V something_N like_P this_D (_N noting_V Peter's_A answer_N about_P using_V a_D '_G button_N ')_N :_: I'm_N not_R entirely_R sure_A what_O you_O are_V trying_V to_P do_V with_P the_D '_G request_N '_'' parameter_N in_P your_D original_A code_N but_& if_P this_D is_V the_D HTTP_^ request_N all_D you_O will_V get_V when_R you_O try_V to_P write_V it_O to_P the_D JSP_^ is_V the_D result_N of_P the_D request.toString_N method_N ._.
well_R ,_, actually_R you_O can_V just_R ignore_V the_D request_N parameter_N ,_, is_V not_R important_A at_P this_D moment_N ;_: and_& it_O is_V just_R as_P you_O say_V ,_, that_D is_V exactly_R how_R I'm_N working_V ,_, but_& the_D problem_N is_V that_P when_R the_D event_N is_V fired_V and_& this_D code_N "_'' CustomSubmit_^ (_^ '_G <_A %=_$ cartItem.id_N %_N >_A ')"_$ is_V executed_V ,_, I_O don't_V get_V the_D "_`` cartItem.id_N "_'' from_P the_D item_N that_P I_O want_V to_P remove_V ,_, I_O get_V the_D "_`` cartItem.id_N "_'' from_P the_D last_A item_N added_V to_P the_D jsp_N ._. One_$ solution_N could_V be_V try_V to_P get_V the_D "_`` cartItem_N "_'' from_P the_D list_N but_& in_P order_N to_P do_V so_R I_O will_V need_V to_P know_V the_D row_N number_N of_P the_D item_N that_P I_O want_V to_P delete_V and_& I_O don't_V know_V either_& how_R to_P get_V the_D row_N number_N
When_R you_O look_V at_P the_D page_N source_N in_P the_D browser_N does_V each_D row_N in_P the_D table_N have_V the_D same_A id_N ?_. If_P so_R the_D problem_N isn't_N with_P this_D code_N ,_, it's_N with_P either_& the_D iteration_N logic_N or_& the_D cart_N item_N object_N ._. If_P not_R then_R there's_V something_N up_R with_P your_D JavaScript_^ and_& it's_^ time_N to_P crack_V out_R Firebug_^ and_& take_V a_D look_N at_P what's_N going_V on_R ._.
javascript_N injection_N in_P wicket_N
I_O have_V J2EE_N project_N which_D uses_V wicket_N framework_N ._. I_O want_V to_P know_V how_R can_V I_O prevent_V from_P javascript_N injection_N in_P wicket_N ?_.
Although_P I_^ didn't_^ think_V the_D way_N in_P which_D you_O formulated_V your_D question_N deserved_V it_O (_V no_D details_N ,_, no_D background_N ,_, no_D example_N problem_N statement_N ,_, implied_A susceptability_N to_P injection_N ,_, etc_G )_G ,_, I_O dug_V up_R some_D details_N from_P the_D Excellent_^ Wicket_^ in_P Action_^ :_: Wicket_^ is_V secure_A by_P default_N You_O never_R need_V to_P worry_V about_P pimple-faced_A 14-year-olds_N trying_V to_P hack_V your_D web_N application_N ._. To_P do_V so_R ,_, they_O would_V have_V to_P hijack_V the_D session_N and_& then_R guess_V the_D right_A page_N identifiers_N and_& version_N numbers_N ,_, which_D would_V be_V relative_A to_P the_D session_N and_& the_D relevant_A component_N paths_N ._. You_O d_N have_V to_P be_V a_D persistent_A hacker_N to_P pull_V that_P off_P ._. You_O can_V make_V your_D Wicket_^ application_N even_R more_R secure_A from_P the_D default_N by_P encrypting_V requests_N with_P ,_, for_P instance_N ,_, CryptedUrlWebRequestCodingStrategy_^ ._.
All_D Wicket_^ components_N escape_V strings_N by_P default_N (_N by_P Labels_^ ,_, TextFields_^ ,_, etc_G ._. )_N ,_, which_D avoids_V most_R common_A issues_N related_V to_P javascript_N injection_N ._. You_O should_V take_V appropriate_A care_N ,_, though_R ,_, if_P you_O disable_V this_D behavior_N (_G component.setEscapeModelStrings_G (_G false_A )_G )_G for_P some_D reason_N ,_, or_& create_V custom-rendered_A components_N (_V if_P you_O write_V the_D markup_N directly_R to_P the_D output_N )_N ._.
render_V complex_A org_N chart_N similar_A javascript_N /_: flash_N /_: java_A graphic_A library_N
i_G am_R looking_V for_P javascript_N /_: flash_N /_: java_A graphic_A lib_N ._. that_P able_A to_P render_V nicely_R a_D very_R complex_A relationship_N where_R one_$ node_N is_V relate_V to_P another_D node_N etc_N ._. for_P example_N a_D -->_P b_N --->_$ c_N b_N -->_P d_N ,_, e_G ,_, f_G any_D recommandation_N library_N ?_.
So_R essentially_R you_O are_V looking_V for_P recommendations_N for_P a_D graph_N visualization_N library_N for_P Javascript_^ ,_, Flash_^ ,_, or_& Java_^ ?_.
yes.i_N am_V looking_V for_P graph_N visualization_N lib_N
what_O a_D cooincidence_N ,_, I_O was_V just_R looking_V into_P this_D myself_O ._. I_O found_V this_D :_: http://www.ryandesign.com/canviz_N http://code.google.com/p/canviz_N /_:
Prefuse_^ is_V very_R cool_A and_& Java_^ based_V ._. Demo_^ here_R ._.
This_D is_V the_D one_$ I_N use_N for_P Organizational_A chart_N http://code.google.com/apis/visualization/documentation/gallery/orgchart.html_N
The_D Graphviz_^ open_A source_N graph_N visualization_N software_N is_V widely_R used_V to_P render_V graphs_N ,_, and_& jGraphviz_N is_V a_D binding_N for_P java_N ._.
focusing_V the_D text_N field_N
How_R to_P focus_V the_D calender_N after_P selecting_V the_D date_N from_P calender_G .._G I_O am_V selecting_V the_D date_N and_& calender_N is_V also_R closing_V but_& after_P that_D focus_N is_V missing_V ._. Please_! help_V me_O on_P this_D issue_N .._N Regards_V Sk_N
which_D calender_N ?_.
java_N or_& javascript_N ?_.
It_O seriously_R depends_V on_P the_D calendar_N implementation_N you_O use_V ._. If_P the_D calendar_N is_V drown_V by_P Java_^ tag_N try_V to_P seek_V the_D onchange_A attribute_N and_& set_V it_O to_P :_:
This_D appears_V to_P be_V JavaScript_^ code_N ,_, not_R Java_^ ._.
Do_V Applet_G JSObject_G javascript_N calls_N serialize_V ?_.
Do_V applet_N javascript_N calls_N serialize_V in_P any_D proper_A way_N ?_. I'm_N considering_V implementing_V a_D model_N in_P which_D two_$ threads_N send_V off_R javascript_N commands_N ._. One_$ responds_V to_P requests_N from_P the_D browser_N (_G js_G )_N ,_, and_& the_D other_A hits_N the_D browser_N periodically_R ._. My_D question_N is_V this_D :_: what_O happens_V if_P these_D two_$ javascript_N requests_N collide_V ?_. I'm_N worried_V about_P concurrent_A javascript_N requests_N ,_, as_P intuition_N leads_V me_O to_P believe_V that_P one_$ of_P the_D calls_N will_V fail_V nondeterministically_R ._.
Javascript_^ is_V single-threaded_A ._. Only_R one_$ block_N of_P code_N can_V be_V executing_V at_P any_D given_V time_N ;_: any_D other_A event_N ,_, method_N ,_, etc_G ._. that_P fires_N will_V wait_V until_P the_D currently_R executing_V code_N terminates_V ._. Google_^ Chrome's_^ javascript_N engine_N may_V be_V an_D exception_N -_: I_O recall_V them_O mentioning_V some_D kind_N of_P multi-threaded_A javascript_N support_N in_P their_D features_N ,_, but_& I'm_N unsure_A how_R it_O works_V ._. In_P IE_N 6_$ ,_, the_D browser_N UI_^ will_V actually_R become_V unresponsive_A while_P JS_N code_N is_V running_V (_$ if_P you_O stop_V at_P a_D breakpoint_N with_P keyword_N '_'' debugger_N '_'' ,_, or_& have_V IE_N set_V to_P debug_V ,_, for_P example_N )_N ._.
Serialize_V ?_. Do_V you_O mean_V synchronize_V ?_. JSObject_N works_V by_P passing_V primitives_N to_P a_D single_A JSContext_N JNI_^ NPAPI_^ wrapper_N which_D acts_V on_P the_D DOM_^ in_P the_D underlying_A browser_N implementation_N ._. Are_V you_O referring_V to_P the_D passing_N of_P primitives_N through_P JNI_^ ?_. I_O don't_V know_V much_R about_P how_R chrome's_^ JS_^ engine_N works_V ,_, but_& I_O assume_V that_P since_P the_D liveconnect_A NPAPI_N in_P chrome_N is_V the_D same_A as_P the_D others_N ,_, the_D ability_N to_P write_V multithreaded_A javascript_N has_V nothing_N to_P do_V with_P multithreaded_A JSObject_N access_N ._. The_D affected_V code_N extends_V the_D same_A abstract_A JSObject_N class_N that_P firefox_N uses_V ._. There_X are_V several_A implementations_N of_P JSObject_N /_: liveconnect_N --_: a_D few_A for_P netscape_N /_: firefox_N and_& one_$ for_P ie_G (_G ocx_G )_G ._. All_D behave_V differently_R as_R far_R as_P multiple_A threads_N go_V ._. DOM_N access_N isn't_N threadsafe_N in_P general_A as_R far_R as_P liveconnect_N is_V concerned_V ._. So_R ,_, officially_R ,_, multiple_A threads_N accessing_V the_D DOM_^ is_V undefined_A ._. If_P you_O manage_V to_P actually_R access_V the_D DOM_N through_P something_N other_A than_P code_N scoped_V in_P DOMService.run()_N ,_, you'll_N get_V crazy_A deadlocks_N and_& race_N conditions_N ._. So_R ,_, basically_R ,_, you_O need_V all_D of_P your_D java_N threads_N to_P post_V all_D DOMActions_N to_P your_D DOM_^ access_N dispatch_V thread_N only_R ._.
Display_V a_D javascript_N /_: css_N tooltip_N within_P a_D @For_N loop_N with_P Tapestry_N 4.0_$ ._. V_N D_N N_N ,_, ^_N N_N P_N D_N @_G N_N P_N ^_$ $_$ ,_, $_$
I'm_N not_R at_P all_D familiar_A with_P Tapestry_N 4.0_$ ._. 1_$ and_& need_V to_P update_V a_D legacy_N application_N to_P display_V a_D formatted_A tooltip_N for_P a_D few_A links_N within_P a_D @For_N loop_N ._. What_O is_V the_D easiest_A /_: best_A way_N to_P go_V about_P accomplishing_V this_D ?_. Should_V I_O be_V using_V the_D @Script_N component_N or_& is_V there_R a_D simpler_A way_N ?_. By_P the_D way_N ,_, upgrading_V to_P a_D newer_A version_N of_P Tapestry_^ is_V out_P of_P the_D question_N ._. Unfortunate_A ,_, yes_! ,_, but_& out_P of_P my_D control_N ._. Thanks_N in_P advance_N for_P your_D help_N ._. Carl_^
Maybe_R the_D better_A question_N would_V be_V :_: How_R do_V I_O pass_V a_D value_N to_P an_D inline_A function_N call_V ?_. I've_N written_V a_D small_A function_N to_P show_V the_D tip_N ,_, but_& I_O need_V to_P pass_V the_D message_N to_P it_O like_P so_R :_: AdUnit_^ Predicate_^ So_R ,_, how_R do_V I_O pass_V the_D message_N in_P ?_.
After_P posting_V my_D question_N ,_, I_O managed_V to_P come_V up_R with_P a_D rather_R hacky_A (_G crappy_G ?_. )_$ solution_N ._. Can't_N say_V it's_N my_D proudest_A moment_N as_P a_D engineer_N ,_, but_& it_O works_V ._. *_G *_G Some_D code_N omitted_V to_P protect_V the_D innocent_A ._.
IIRC_^ ,_, using_V the_D dom_N to_P update_V the_D structure_N is_V preferred_V to_P a_D straight_A document.write_N (_N ..._: )_^ CMA_^ :_: There_X was_V something_N along_P the_D lines_N of_P DOM_N /_: document.write_N posted_V here_R on_P SO_N a_D while_N ago_R
Use_V the_D @Any_N component_N ._. For_P your_D example_N ,_, substitute_A MYTOOLTIP_N with_P whatever_D object_N is_V holding_V the_D message_N :_:
How_R can_V I_O define_V static_A properties_N for_P Rhino's_^ ScriptableObject_^ ?_.
Rhino_N provides_V Scriptable_A interface_N and_& ScriptableObject_N helper_N class_N to_P implement_V a_D javascript_N object_N backed_V by_P a_D java_N object_N ._. When_R ScriptableObject_^ is_V constructed_V ,_, its_D methods_N with_P names_N starting_V with_P jsFunction____N ,_, jsStaticFunction____N ,_, jsGet____N ,_, jsSet____N ,_, jsConstructor_N are_V automatically_R defined_V for_P the_D javascript_N object_N ._. This_D way_N you_O can_V defined_V funations_N ,_, static_A frunctions_N ,_, instance_N properties_N (_$ by_P its_D accessors_N )_N ,_, and_& constructor_N ._. The_D question_N is_V how_R to_P define_V static_A properties_N ?_. By_P static_A properties_N I_O mean_V properties_N on_P the_D constructor_N ,_, like_P static_A methods_N are_V methods_N on_P the_D constructor_N ._. The_D only_A way_N I_O see_V for_P now_R is_V to_P use_V finishInit_N method_N ,_, and_& define_V static_A properties_N manually_R ._. But_& what_O is_V the_D right_A way_N ?_.
Currently_R I_O have_V something_N like_P this_D on_P my_D mind_N :_: Are_V there_R other_A ways_N ?_. And_& is_V this_D way_N correct_V ?_. IMPORTANT_^ :_: Note_V that_D constructor_N for_P MyObject_^ is_V not_R yet_R defined_V in_P scope_N ,_, when_R finishInit_N is_V called_V ._. In_P order_N to_P define_V static_A properties_N ,_, which_D are_V instances_N of_P MyObject_^ ,_, use_V the_D following_A syntax_N :_:
md5_N hash_V for_P password_N string_N in_P GWT_N /_: GWT-Ext_N ?_.
I_O am_V currently_R trying_V to_P modify_V an_D existing_V GWT-Ext_N application_N ,_, that_D is_V using_V plain_A text_N passwords_N in_P its_D MySql_^ database_N ._. My_D plan_N was_V to_P use_V md5_N hashes_N ,_, as_P the_D existing_V passwords_N can_V be_V easily_R altered_V with_P the_D MySql_N function_N and_& I_O was_V expecting_V to_P find_V an_D easy_A solution_N for_P the_D GWT-Ext_N side_N as_R well_R ._. But_& as_P I_O found_V out_R ,_, java.security_N is_V not_R supported_V by_P GWT_N and_& there_X doesn't_N seem_V to_P be_V any_D other_A implementation_N that_D can_V be_V used_V to_P change_V the_D password_N string_N to_P a_D md5_N hash_N on_P client_N side_N ._. Only_R "_`` solution_N "_'' I_O found_V so_R far_R ,_, is_V to_P re_R implement_V a_D md5_N method_N via_P JSNI_N as_P described_V here_R :_: http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ad09475a9944c9f8_N There_X is_V an_D existing_V user_N extension_N for_P Ext-JS_N ,_, but_& I_O couldn't_V find_V anything_N for_P GWT-Ext_N :_: http://extjs.com/forum/showthread.php?p=133516_^ Does_^ anybody_N know_V a_D more_R elegant_A /_: simple_A way_N to_P solve_V this_D problem_N ?_. Maybe_R I_O should_V use_V something_N else_R instead_R of_P md5_N to_P make_V sure_A the_D passwords_N are_V encrypted_V ?_. Cheers_^ Frank_^
Personally_R ,_, I_O would_V say_V you're_N doing_V it_O wrong_A ._. I_O wouldn't_V hash_V a_D password_N on_P the_D client_N side_N (_N which_D is_V what_O GWT_^ is_V )_^ ._. If_P you_O hash_V your_D password_N ,_, you_O will_V undoubtedly_R want_V to_P salt_N it_O ,_, otherwise_R you_O will_V be_V susceptible_A to_P rainbow_N attacks_N ._. If_P you_O hash_V +_& salt_N it_O on_P the_D client_N side_N ,_, your_D salt_N will_V be_V accessible_A to_P your_D users_N ._. If_P I_O were_V you_O ,_, I_O would_V hash_V +_& salt_N your_D password_N on_P the_D server_N side_N ._. This_D will_V allow_V you_O to_P use_V your_D standard_A Java_^ code_N to_P perform_V your_D MD5_N hash_N ._. My_D 2_$ cents_N ._. -JP_N
Its_D not_R a_D bad_A scheme_N if_P he_O does_V something_N like_P cram-md5_N on_P the_D client_N side_N ,_, where_R the_D client_N computes_V a_D hmac_G (_G md5_N hash_N plus_& a_D nonce_A salt_N )_N and_& sends_V it_O to_P the_D server_N ._. The_D down_A side_N is_V that_P the_D server_N needs_V clear_A text_N password_N to_P check_V the_D hmac_N ._.
good_A point_N about_P the_D rainbow_N attacks_N ,_, didn't_N knew_V about_P this_D before_P ._. I_O also_R solved_V it_O by_P doing_V the_D encryption_N on_P the_D server_N side_N ,_, but_& the_D idea_N was_V ,_, that_P I_O wanted_V to_P encrypt_V the_D password_N ,_, before_P sending_V it_O to_P the_D server_N ,_, as_P we_O currently_R only_R use_V http_N and_& no_D https_N ._.
GWT_N is_V client-side_A and_& server_N side_N ._. Other_A than_P that_D ,_, the_D post_N is_V good_A advice_N ._. Don't_N hash_V it_O on_P the_D client_N side_N ._. Have_V a_D look_N at_P http://www.owasp.org/index.php/Hashing_Java_N ._.
Another_D idea_N that_D may_V fit_V your_D need_N is_V something_N called_V zero_$ knowledge_N auth_N ._. (_G Ie_G ._. the_D server_N never_R needs_V to_P know_V the_D user's_A plain_A text_N password_N ._. )_N Basically_R ,_, when_R setting_V the_D initial_A password_N ,_, the_D client_N hashes_V the_D user's_A password_N N_N times_N (_V where_R N_N is_V a_D largish_A number_N like_P 1000_$ )_N ,_, and_& then_R sends_V that_P final_A hash_N to_P the_D server_N along_P with_P N_N ._. The_D server_N stores_V the_D hash_N and_& N_N ._. Later_R ,_, when_R the_D user_N wants_V to_P authenticate_V ,_, the_D server_N tells_V the_D client_N N-1_N ,_, and_& the_D client_N hashes_V the_D password_N the_D user_N types_N N-1_N times_N and_& sends_V that_P to_P the_D server_N ._. The_D server_N does_V 1_$ more_A hash_N on_P the_D received_A hash_N ,_, and_& (_N hopefully_R )_^ gets_V the_D stored_V hash_N ._. The_D server_N then_R stores_V the_D N-1_N hash_N and_& N-1_N number_N ._. Each_D time_N the_D user_N authenticates_V ,_, the_D server_N decrements_V the_D stored_V N_N and_& saves_V the_D previous_A hash_N ._. When_R N_N gets_V down_R to_P 0_$ ,_, the_D user_N must_V choose_V and_& set_V a_D new_A password_N ._. The_D server_N must_V ensure_V that_P it_O never_R asks_V for_P the_D same_A iteration_N ,_, otherwise_R it_O is_V vulnerable_A to_P a_D replay_N ._. You_O can't_V really_R enforce_V that_D condition_N from_P the_D client_N side_N because_P the_D client_N (_N especially_R a_D browser_N )_G can't_G reliably_R keep_V track_N of_P the_D last_A N_N ._.
Very_R interesting_A idea_N ,_, and_& never_R thought_V of_P that_D before_P ._. Doesn't_N really_R fit_V in_P the_D current_A solution_N ,_, but_& I_O will_V keep_V it_O in_P mind_N for_P future_A reference_N ,_, thanks_N :-)_N
Interesting_A idea_N so_P I_O spent_V some_D time_N thinking_V about_P it_O ,_, but_& it_O is_V vulnerable_A to_P a_D man-in-the-middle_A attack_N ._. On_P an_D authentication_N request_N ,_, the_D server_N sends_V some_D number_N M_N ._. The_D attacker_N sends_V (_$ M-1_N )_N to_P the_D client_N ,_, and_& receives_V hash_G (_G M-1_N )_N back_R ._. The_D attacker_N tries_V to_P authenticate_V again_R ,_, receives_V challenge_N (_N M-1_N )_N from_P the_D server_N and_& responds_V with_P hash_G (_G M-1_N )_N ._. The_D attacker_N is_V now_R authenticated_V ._.
yes_R ,_, that_D does_V sound_V like_P an_D issue_N ._. My_D first_A thought_N would_V be_V to_P require_V the_D server_N to_P not_R reuse_V M_N after_P issuing_V it_O during_P a_D challenge_N to_P the_D client_N ._. However_R ,_, the_D larger_A issue_N remains_V that_P Mallory_^ could_V tell_V the_D client_N M-100_N ,_, collect_V the_D hash_G (_G M-100_N )_N from_P the_D client_N ,_, and_& then_R login_V up_P to_P 100_$ times_N with_P the_D intercepted_V hash_N ._. I'll_N have_V to_P go_V see_V if_P the_D project_N that_P I_O first_R encountered_V this_D in_P found_V the_D same_A issues_N and_& dealt_V with_P it_O or_& abandoned_A zero_N knowledge_N auth_N ._.
I_O think_V you're_N always_R going_V to_P be_V vulnerable_A to_P a_D man_N in_P the_D middle_A attack_N ._. Keyloggers_^ too_R ._. Also_R drunken_A confessions_N of_P passwords_N ._. We_O can_V only_R raise_V the_D bar_N so_R far_R with_P reasonable_A coding_N efforts_N ._.
You_O can_V use_V gwt-crypto_A to_P generate_V SHA-1_N hashes_V on_P the_D client_N side_N using_V :_:
You_O should_V never_R use_V an_D md5_N or_& other_A hash_A functions_N for_P password_N encryption_N ._. See_^ http://codahale.com/how-to-safely-store-a-password_^ /_:
Has_V anyone_N used_V GWT_^ and_& can_V say_V it_O really_R delivers_V what_O it_O promises_V ?_.
I_O am_V a_D long_A time_N Java_^ web_N developer_N and_& as_P most_A web_N developers_N I_O have_V used_V quite_R a_D lot_N of_P JavaScript_^ ._. Even_R though_P I_^ don't_^ hate_V JavaScript_^ as_P many_A other_A Java_^ developers_N ,_, I_O am_V still_R aware_A of_P its_D faults_N ._. GWT_^ is_V a_D way_N to_P write_V javascript_N using_V java_N ._. Since_P I_O know_V both_D languages_N for_P a_D long_A time_N I_O am_V pretty_R skeptical_A about_P this_D claim_N ._. I_O mean_V ,_, I_O having_V a_D hard_A time_N believing_V that_P you_O can_V really_R create_V full_A Java_^ dynamic_N web_N applications_N with_P a_D rich_A GUI_N using_V just_R GWT_^ ._. That_D is_V why_R I_O am_V asking_V here_R if_P anyone_N had_V the_D chance_N to_P work_V with_P GWT_N on_P a_D large_A scale_N project_N ._. If_P so_R ,_, I_O would_V really_R like_V to_P hear_V what_O they_O think_V of_P it_O ._.
Why_R the_D close_N ?_. This_D looks_V like_P an_D interesting_A question_N to_P me_O .._N
Some_D people_N have_V the_D bad_A habit_N of_P clicking_V '_G close_N '_'' if_P they_O just_R don't_V like_P the_D question_N ._. I_O don't_V think_V this_D is_V subjetive_A nor_& argumentative_A at_P all_D
Did_V you_O end_V up_R using_V GWT_^ ?_. Did_V it_O deliver_V ?_.
Hi_^ Dave_^ ,_, No_^ ,_, finally_R I_O decided_V not_R using_V it_O ._. My_D final_A conclusion_N was_V that_P GWT_^ seems_V like_P a_D really_R good_A product_N and_& the_D people_N who_O use_V it_O mostly_R love_V it_O ._. Nevertheless_R ,_, I_O feel_V like_P since_P GWT_^ has_V a_D totally_R different_A way_N of_P doing_V things_N ,_, it_O is_V a_D product_N that_D once_R you_O start_V using_V it_O ,_, you_O commit_V for_P life_N ._. And_& that_D is_V something_N I_O really_R stay_V away_R from_P ._. Thanks_N for_P asking_V ._.
I've_N looked_V at_P it_O briefly_R for_P an_D older_A application_N at_P one_$ of_P my_D jobs_N ,_, and_& I_O must_V admit_V that_P it_O was_V very_R impressive_A ._. All_X the_D code_N was_V written_V in_P Java_^ ,_, and_& the_D javascript_N was_V built_V beautifully_R ._. It_O had_V AJAX_^ ,_, dynamic_A pages_N ,_, the_D works_N ._. There_X are_V plugins_N for_P it_O as_R well_R ,_, such_A as_P the_D Ext_N GWT_N framework_N ._. It's_N definitely_R worth_A looking_V into_P and_& trying_V out_R ,_, but_& you_O may_V find_V that_P the_D development_N cycle_N doesn't_N "_`` feel_N "_'' right_N ,_, so_P you_O might_V opt_V to_P use_V regular_A JavaScript_^ ._.
good_A point_N about_P the_D dev_A environment_N "_'' feel_N ._. "_'' GWT_^ is_V definitely_R only_R for_P those_D that_D enjoy_V /_: tolerate_V the_D constraints_N of_P a_D language_N like_P Java_^ ._.
As_P with_P any_D tool_N ,_, it_O needs_V to_P be_V used_V properly_R ._. One_$ can_V wield_V a_D hammer_N skillfully_R and_& build_V something_N nice_A ,_, or_& just_R wave_V it_O around_R at_P stuff_N and_& do_V more_A harm_N than_P good_A ._. Google_^ Wave_^ ,_, I_O think_V ,_, has_V become_V the_D prototype_N of_P "_`` what's_G possible_A "_'' with_P GWT_N ._. It's_N still_R rather_R hard_A to_P find_V good_A GWT_N design_N patterns_N because_P the_D technology_N is_V too_R new_A ,_, so_P that_D can_V harm_V efforts_N to_P develop_V a_D very_R rich_A ,_, large-scale_A web_N app_N in_P GWT_^ ._. Before_P beginning_V such_X a_D project_N ,_, I_O would_V recommend_V looking_V at_P examples_N of_P the_D model-view-presenter_A (_N MVP_N )_N pattern_N and_& be_V sure_A to_P use_V it_O ,_, or_& something_N like_P it_O ,_, as_P a_D foundation_N for_P the_D control_N flow_N of_P your_D web_N app_N ._. One_$ nice_A thing_N about_P GWT_^ ,_, and_& writing_V your_D code_N in_P Java_^ ,_, is_V that_P the_D high_A degree_N of_P abstraction_N and_& decoupling_N necessary_A for_P a_D clean_A MVP_N implementation_N is_V pretty_R easy_A (_N thanks_N to_P the_D compiler_G )_G ._.
I've_N written_V fairly_R large_A sized_V app_N in_P GWT_^ ,_, and_& i_G have_V to_P say_V that_D i'm_N even_R more_R impressed_A by_P GWT_N than_P i_G was_V when_R the_D project_N started_V ._. My_D general_A '_'' feel_N '_'' of_P the_D platform_N is_V that_P things_N are_V really_R well_R thought_V out_R ,_, and_& they_O don't_V do_V things_N unless_P they_O can_V do_V it_O well_R ,_, and_& can_V do_V it_O well_R on_P all_D browsers_G (_G IE_N users_N are_V still_R your_D users_N !_. )_^ Now_^ ,_, keep_V in_P mind_N that_P what_O GWT_^ really_R excels_V at_P is_V the_D creation_N of_P large_A ,_, highly_R dynamic_A single-page_A style_N webapps_N ._. If_P your_D goal_N is_V to_P enhance_V an_D otherwise_R static_A page_N with_P some_D javascript_N effects_N ,_, than_P GWT_^ is_V massive_A overkill_N (_N gquery_N may_V change_V this_D ,_, but_& i_G don't_G have_V experience_N with_P gquery_G )_G Some_D features_N I_O enjoy_V include_V :_: The_D ability_N to_P share_V code_N between_P the_D server_N side_N and_& the_D client_N side_N ._. (_$ if_P your_D server_N side_N is_V written_V in_P java_N ,_, of_P course_N )_N ._. I_O didn't_V expect_V to_P use_V this_D a_D lot_N of_P this_D at_P first_A ,_, but_& in_P practice_N ,_, it_O can_V really_R save_V a_D lot_N of_P code_N duplication_N ._. However_R ,_, i_G find_V that_P in_P general_A ,_, this_D only_R works_V with_P code_N that_D has_V been_V written_V with_P GWT_N in_P mind_N -_: using_V code_N that_D was_V not_R written_V with_P GWT_N in_P mind_N often_R doesn't_A work_N well_R ._. This_D is_V because_P GWT_^ only_R has_V a_D subset_N of_P the_D classes_N in_P the_D JDK_N ,_, and_& in_P javascript_N ,_, you_O have_V to_P care_V about_P performance_N a_D lot_N more_A than_P you_O do_V on_P the_D server_N side_N ._. It_O aims_V to_P achieve_V the_D fastest_A javascript_N ,_, faster_R than_P you_O would_V ever_R write_V by_P hand_N (_N because_P if_P you_O did_V write_V it_O by_P hand_N ,_, the_D code_N would_V be_V unmaintainable_A )_N ._. The_D unfortunate_A reality_N is_V that_P the_D browsers_N that_P a_D lot_N of_P people_N use_V have_V incredibly_R slow_A javascript_N engines_N ,_, so_P the_D performance_N of_P your_D javascript_N code_N matters_V a_D lot_N ._. Gwt's_G compiler_G is_V a_D real_A optimizing_V compiler_N -_: it_O will_V inline_V methods_N ,_, intern_V all_D your_D strings_N ._. devirtualize_V your_D method_N calls_V when_R possible_A ,_, etc_G ._. Because_P you_O are_V compiling_V for_P each_D browser_N and_& locale_N ,_, the_D compiler_N can_V also_R inline_V browser-specific_A and_& locale-specific_A code_N ._. This_^ Google_^ I_^ /_: O_N presentation_N has_V some_D benchmarks_N a_D few_A slides_N in_P ._. It_O will_V also_R automatically_R sprite_V your_D images_N together_R to_P minimize_V the_D number_N of_P http_A requests_N needed_V ,_, again_R improving_V the_D speed_N of_P your_D site_N ._. GWT_N 2.0_$ will_V allow_V you_O to_P combine_V together_R arbitrary_A files_N ._. most_A of_P the_D files_N created_V by_P gwt_N have_V a_D strong_A hash_N as_P their_D filename_N ,_, which_D lets_V you_O set_V the_D files_N to_P be_V cached_V forever_R ,_, but_& not_R worry_V about_P people_N having_V old_A versions_N if_P the_D file_N changes_V The_D code_N splitting_N in_P GWT_N 2.0_$ is_V very_R impressive_A and_& would_V be_V very_R difficult_A to_P do_V by_P hand_N ._. As_P the_D size_N of_P your_D application_N grows_V ,_, dealing_V with_P the_D size_N of_P your_D javascript_N matters_V more_A and_& more_A ,_, and_& you_O need_V to_P be_V able_A to_P split_V it_O into_P chunks_N You_O are_V coding_V in_P a_D statically_R typed_V language_N ._. I_O know_V some_D people_N prefer_V dynamic_A typing_N ,_, but_& i_G like_P to_P compare_V this_D debate_N to_P the_D emacs_N vs_& vi_G debate_N -_: there_X are_V a_D lot_N of_P smart_A people_N on_P both_D camps_N ,_, and_& arguing_V on_P the_D internet_G isn't_G going_V to_P change_V anyone's_N preference_N You_O get_V to_P use_V a_D lot_N of_P the_D great_A tools_N that_D exist_V in_P the_D java_N ecosystem_N ,_, which_D are_V generally_R a_D lot_N more_R mature_A than_P the_D equivilant_A javascript_N tools_N ._. -_: junit_N ,_, java_N IDEs_N ,_, java_N debuggers_N ,_, refactoring_N ,_, etc_N ._.
Oh_! ,_, and_& i_G guess_V the_D biggest_A downsides_N is_V :_: -_: compile_V time_N -_: hosted_V mode_N is_V great_A ,_, but_& you_O can't_V currently_R use_V it_O for_P the_D system_N non-default_A browser_N -_: GWT_N 2.0_$ and_& out_P of_P process_N hosted_V mode_N should_V fix_V this_D though_P ._. -_: The_D java_N language_N can_V be_V verbose_A at_P times_N ,_, although_P that_D is_V far_R from_P a_D showstopper_N ._. (_G gwt_G for_P scala_N would_V be_V awfully_R nice_A :)_G )_G
If_P you_O have_V familiarity_N with_P both_D JavaScript_^ and_& Java_^ ,_, you_O really_R are_V perfectly_R suited_V to_P get_V the_D most_A out_P of_P GWT_^ ._. What_O many_A people_N do_V not_R realize_V is_V that_P GWT_N is_V pretty_R well_R layered_A and_& that_P you_O can_V really_R decide_V which_D of_P those_D levels_N you_O want_V to_P work_V at_P ._. For_P instance_N ,_, I_O sometimes_R write_V directly_R against_P the_D DOM_^ library_N for_P projects_N ._. Thats_V a_D lot_N like_P writing_V JavaScript_^ code_N except_P you're_N able_A to_P use_V an_D IDE_^ properly_R and_& get_V the_D power_N of_P a_D compiler_N ._. From_P the_D compiler_N I_O get_V static_A type_N checking_N ,_, lots_N of_P good_A compiler_N optimizations_N ,_, and_& (_N actually_R my_D favorite_N for_P maintaining_V code_N )_G debug_G mode_N assertions_N ._. Nobody_N ever_R really_R makes_V much_A of_P the_D ability_N to_P do_V assertions_N ,_, but_& it's_N so_R nice_A to_P be_V able_A to_P compile_V a_D debug_N mode_N that_D does_V expensive_A checks_N to_P tease_V out_R bugs_N and_& then_R turn_V off_R the_D debug_N mode_N and_& have_V the_D code_N just_R evaporate_V ._. (_N Not_R just_R the_D assert_V statements_N go_V away_R ,_, but_& all_X the_D code_N reachable_A from_P the_D asserts_V also_R gets_V compiled_V out_R )_N ._. Other_A times_N ,_, I_O write_V code_N against_P GWT's_^ UI_^ library_N ._. That_D code_N looks_V a_D bit_N like_P swing_N or_& SWT_N code_N so_P it_O is_V most_R comfortable_A to_P pure_A java_N developers_N ._. Working_V at_P this_D level_N ,_, you_O don't_V have_V to_P worry_V as_R much_A about_P the_D DOM_^ and_& it_O is_V usually_R possible_A to_P construct_V an_D application_N without_P writing_V any_D JavaScript_^ ._. You_O do_V occasionally_R run_V into_P a_D bug_N where_R something_N doesn't_N work_N consistently_R on_P a_D particular_A browser_N ._. The_D GWT_^ folks_N consider_V those_D bugs_N ._. You_O can_V kind_N of_P pick_N what_D level_N of_P abstraction_N you_O want_V to_P work_V at_P ._. There_X are_V tradeoffs_N at_P each_D level_N ,_, but_& GWT_^ should_V support_V them_O ._. Also_R ,_, full_A disclosure_N :_: I'm_N the_D dude_N in_P the_D video_N that_P Chi_^ linked_V above_P ,_, so_P you_O might_V say_V I'm_N pretty_R attached_V to_P GWT_^ ._.
I_O have_V created_V two_$ quite_R substantial_A GWT_^ applications_N in_P my_D three_$ years_N at_P Google_^ ._. It_O delivers_V what_O it_O promises_V -_: my_D apps_N were_V far_R more_R interactive_A and_& far_R more_A ajax-y_N than_P my_D knowledge_N of_P Javascript_^ and_& my_D Javascript_^ tooling_N would_V have_V let_V me_O produce_V using_V other_A tools_N ._. I_O also_R found_V the_D apps_N more_R interactive_A and_& more_A fun_N than_P the_D purely_R server-side_A alternatives_N I_O had_V used_V before_P moving_V to_P it_O ._. It_O is_V not_R free_A of_P warts_N ,_, but_& it_O is_V a_D very_R productive_A environment_N to_P do_V the_D kinds_N of_P apps_N I_O do_V ._. And_& do_V watch_V Kelly's_N presentation_N ._. It_O ,_, and_& some_D of_P the_D others_N from_P I_O /_: O_N ,_, give_V a_D really_R clear_A idea_N of_P what_O GWT_^ can_V do_V ._. You_O will_V pretty_R quickly_R get_V a_D good_A idea_N of_P whether_P it_O is_V the_D right_A tool_N for_P the_D task_N you_O are_V envisioning_V ._.
I_O have_V been_V developing_V a_D green_A field_N application_N on_P GWT_^ for_P a_D year_N and_& it_O has_V been_V surprisingly_R pleasant_A ._. The_D subset_N of_P Java_^ used_V in_P GWT_^ causes_V some_D headaches_N but_& nothing_N major_A after_P all_D ._. I_^ didn't_^ have_V too_R much_A JavaScript_^ knowledge_N when_R I_O joined_V the_D project_N but_& I_O think_V that_D was_V not_R a_D problem_N ._. The_D common_A GWT_N related_A problems_N I_O have_V encountered_V had_V usually_R something_N to_P do_V with_P Ext_N GWT_N /_: GXT_N framework_N or_& FCKEditor_N integration_N ._.
Simply_R GWT_^ rocks_N google_N is_V making_V "_`` google_N wave_N "_'' fully_R on_P GWT_^ ._.
I_O think_V GWT_^ does_V what_O it_O says_V on_P the_D tin_N ..._: Top_^ 5_$ Reasons_N for_P choosing_V GWT_^ :_: Tapestry_N can_V be_V overly_R complicated_V and_& the_D learning_N curve_N is_V pretty_R steep_A for_P new_A developers_N who_O are_V starting_V out_R joining_V the_D team_N ._. Esp_^ ._. on_P larger_A projects_N ._. I_O found_V that_P I_O could_V develop_V "_`` richer_A "_'' applications_N using_V GWT_N seeing_V that_P my_D strength_N is_V Java_^ not_R Javascript_^ ._. In_P order_N for_P me_O to_P implement_V similar_A functionality_N using_V Tapestry_N I_O would_V have_V to_P hand_V write_V Javascript_^ which_D would_V later_R become_V a_D maintenance_N nightmare_N ._. Browser_N compatibility_N ,_, I_O would_V spend_V large_A amounts_N of_P time_N trying_V to_P get_V my_D hand_N written_V Javascirpt_^ to_P work_V on_P all_X the_D different_A browsers_N (_V like_P I_O said_V Javascript_^ is_V not_R my_D strength_N :-)_$ The_D GWT_N Compiler_N hides_V me_O from_P this_D which_D results_V in_P me_O spending_V more_A time_N writing_V features_N ._. Back_^ button_N blues_N ,_, GWT's_A History_N listener_N is_V handles_V the_D browsers_N back_V button_N in_P comparison_N to_P Tapestry_^ ._. GWT_^ has_V a_D smaller_A footprint_N because_P only_R the_D data_N is_V being_V sent_V across_P the_D wire_N apposed_V to_P refreshing_V the_D entire_A page_N ._. The_D list_N goes_V on_P but_& all_D in_P all_D ,_, I_O am_V very_R happy_A to_P have_V made_V the_D change_N and_& have_V not_R looked_V back_R since_P ._.
I_O didn't_V know_V much_A Javascript_^ when_R I_O tried_V to_P create_V my_D website_N ._. In_P fact_N ,_, that_D is_V why_R I_O had_V been_V putting_V off_R creating_V the_D website_N ._. So_R for_P me_O ,_, GWT_^ made_V a_D huge_A difference_N as_P it_O enabled_V me_O to_P create_V a_D dynamic_A ,_, cross-browser_A website_N that_P I_O definitely_R would_V not_R have_V been_V able_A to_P create_V without_P putting_V in_P significant_A effort_N into_P learning_V Javascript_^ ._.
I've_N done_V a_D few_A projects_N over_P a_D few_A years_N and_& it_O is_V fantastic_A ._. Going_V back_R to_P JS_N /_: JSP_^ /_: request_N based_A framework_N is_V really_R horrible_A ._. Don't_N want_V to_P give_V up_R compile_V time_N checks_N ,_, unit_N tests_N in_P my_D IDE_N ,_, IDE_N refactoring_N etc_N ,_, sharing_V code_N between_P different_A tiers_N ,_, solid_A set_N of_P widgets_N ,_, incredibly_R well_R thought_V out_R framework_N ._. Can_V do_V so_R much_R more_R so_R much_R faster_R in_P a_D maintainable_A way_N ._.
There_X is_V a_D steep_A learning_N curve_N ,_, but_& for_P really_R dynamic_A ui_N applications_N ,_, there_X is_V just_R no_D way_N that_P you_O can_V build_V from_P hand_N in_P javascript_N as_R efficiently_R ._. What_O I_O mean_V in_P particular_A is_V for_P instance_N an_D application_N frontend_N for_P a_D service_N where_R all_X the_D searchable_A fields_N and_& result_N type_N s_N and_& length_N were_V completely_R unknown_A ._. For_P this_D type_N of_P thing_N ,_, a_D dynamic_A runtime_N defined_V ui_R ,_, there_X is_V nothing_N better_R than_P GWT_^ in_P my_D opinion_N ._. The_D drawbacks_N are_V the_D steep_A learning_N curve_N (_N especially_R for_P non-swing_A Java_^ programmers_N ,_, traditional_A request_N /_: response_N servlet_N api_N guys_N and_& gals_N )_N and_& getting_V cornered_V into_P GWT_^ once_P you_O make_V that_D decision_N ._.
