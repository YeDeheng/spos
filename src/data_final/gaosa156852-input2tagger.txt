Dynamicaly	N
populating	N
a	N
combobox	N
with	N
values	N
from	N
a	N
Map	N
based	N
on	N
what's	N
selected	N
in	N
another	N
combobox	N

Ok	N
,	N
here's	N
one	N
for	N
the	N
Java	N
/	N
JavaScript	N
gurus	N
:	N
In	N
my	N
app	N
,	N
one	N
of	N
the	N
controllers	N
passes	N
a	N
TreeMap	N
to	N
it's	N
JSP	N
.	N
This	N
map	N
has	N
car	N
manufacturer's	N
names	N
as	N
keys	N
and	N
Lists	N
of	N
Car	N
objects	N
as	N
values	N
.	N
These	N
Car	N
objects	N
are	N
simple	N
beans	N
containing	N
the	N
car's	N
name	N
,	N
id	N
,	N
year	N
of	N
production	N
etc	N
.	N
So	N
,	N
the	N
map	N
looks	N
something	N
like	N
this	N
(	N
this	N
is	N
just	N
an	N
example	N
,	N
to	N
clarify	N
things	N
a	N
bit	N
):	N
Key	N
:	N
Porsche	N
Value	N
:	N
List	N
containing	N
three	N
Car	N
objects	N
(	N
for	N
example	N
911	N
,	N
Carrera	N
,	N
Boxter	N
with	N
their	N
respectable	N
years	N
of	N
production	N
and	N
ids	N
)	N
Key	N
:	N
Fiat	N
Value	N
:	N
List	N
containing	N
two	N
Car	N
objects	N
(	N
for	N
example	N
,	N
Punto	N
and	N
Uno	N
)	N
etc	N
...	N
Now	N
,	N
in	N
my	N
JSP	N
i	N
have	N
two	N
comboboxes	N
.	N
One	N
should	N
receive	N
a	N
list	N
of	N
car	N
manufacturers	N
(	N
keys	N
from	N
the	N
map	N
-	N
this	N
part	N
I	N
know	N
how	N
to	N
do	N
)	N
,	N
and	N
the	N
other	N
one	N
should	N
dynamicaly	N
change	N
to	N
display	N
the	N
names	N
of	N
the	N
cars	N
when	N
the	N
user	N
selects	N
a	N
certain	N
manufacturer	N
from	N
the	N
first	N
combobox	N
.	N
So	N
,	N
for	N
example	N
,	N
user	N
selects	N
a	N
"	N
Porsche	N
"	N
in	N
the	N
first	N
combobox	N
,	N
and	N
the	N
second	N
immediately	N
displays	N
"	N
911	N
,	N
Carrera	N
,	N
Boxter	N
"	N
...	N
After	N
spending	N
a	N
couple	N
of	N
days	N
trying	N
to	N
find	N
out	N
how	N
to	N
do	N
this	N
,	N
I'm	N
ready	N
to	N
admit	N
defeat	N
.	N
I	N
tried	N
out	N
a	N
lot	N
of	N
different	N
things	N
but	N
every	N
time	N
I	N
hit	N
a	N
wall	N
somewehere	N
along	N
the	N
way	N
.	N
Can	N
anybody	N
suggest	N
how	N
I	N
should	N
approach	N
this	N
one	N
?	N
Yes	N
,	N
I'm	N
a	N
JavaScript	N
newbie	N
,	N
if	N
anybody	N
was	N
wondering	N
...	N
EDIT	N
:	N
I've	N
retagged	N
this	N
as	N
a	N
code-challenge	N
.	N
Kudos	N
to	N
anybody	N
who	N
solves	N
this	N
one	N
without	N
using	N
any	N
JavaScript	N
framework	N
(	N
like	N
JQuery	N
)	N
.	N

Are	N
you	N
using	N
Struts	N
?	N
You	N
will	N
need	N
some	N
JavaScript	N
trickery	N
(	N
or	N
AJAX	N
)	N
to	N
accomplish	N
this	N
.	N
What	N
you'd	N
need	N
to	N
do	N
is	N
,	N
somewhere	N
in	N
your	N
JavaScript	N
code	N
(	N
leaving	N
aside	N
how	N
you	N
generate	N
it	N
for	N
the	N
minute	N
):	N
This	N
is	N
basically	N
a	N
copy	N
of	N
your	N
server-side	N
data	N
structure	N
,	N
i.e.	N
a	N
map	N
keyed	N
by	N
manufacturer	N
,	N
each	N
value	N
having	N
an	N
array	N
of	N
car	N
types	N
.	N
Then	N
,	N
in	N
your	N
onchange	N
event	N
for	N
the	N
manufacturers	N
,	N
you'd	N
need	N
to	N
get	N
the	N
array	N
from	N
the	N
map	N
defined	N
above	N
,	N
and	N
then	N
create	N
a	N
list	N
of	N
options	N
from	N
that	N
.	N
(	N
Check	N
out	N
devguru.com	N
-	N
it	N
has	N
a	N
lot	N
of	N
helpful	N
information	N
about	N
standard	N
JavaScript	N
objects	N
)	N
.	N
Depending	N
on	N
how	N
big	N
your	N
list	N
of	N
cars	N
is	N
,	N
though	N
,	N
it	N
might	N
be	N
best	N
to	N
go	N
the	N
AJAX	N
route	N
.	N
You'd	N
need	N
to	N
create	N
a	N
new	N
controller	N
which	N
looked	N
up	N
the	N
list	N
of	N
cars	N
types	N
given	N
a	N
manufacturer	N
,	N
and	N
then	N
forward	N
on	N
to	N
a	N
JSP	N
which	N
returned	N
JSON	N
(	N
it	N
doesn't	N
have	N
to	N
be	N
JSON	N
,	N
but	N
it	N
works	N
quite	N
well	N
for	N
me	N
)	N
.	N
Then	N
,	N
use	N
a	N
library	N
such	N
as	N
jQuery	N
to	N
retrieve	N
the	N
list	N
of	N
cars	N
in	N
your	N
onchange	N
event	N
for	N
the	N
list	N
of	N
manufacturers	N
.	N
(	N
jQuery	N
is	N
an	N
excellent	N
JavaScript	N
framework	N
to	N
know	N
-	N
it	N
does	N
make	N
development	N
with	N
JavaScript	N
much	N
easier	N
.	N
The	N
documentation	N
is	N
very	N
good	N
)	N
.	N
I	N
hope	N
some	N
of	N
that	N
makes	N
sense	N
?	N

Thanks	N
for	N
your	N
answer	N
,	N
Phill	N
.	N
Actually	N
,	N
I'm	N
using	N
Spring	N
.	N
While	N
your	N
answer	N
is	N
a	N
nice	N
one	N
,	N
I'd	N
still	N
like	N
to	N
hear	N
some	N
other	N
opinions	N
:-)	N

How	N
about	N
something	N
like	N
this	N
,	N
using	N
prototype	N
?	N
First	N
,	N
your	N
select	N
box	N
of	N
categories	N
:	N
Then	N
,	N
you	N
output	N
N	N
different	N
select	N
boxes	N
,	N
one	N
for	N
each	N
of	N
the	N
sub-categories	N
:	N
Your	N
changeCategory	N
javascript	N
function	N
disables	N
all	N
selects	N
with	N
class	N
categorySelect	N
,	N
and	N
then	N
enables	N
just	N
the	N
one	N
for	N
your	N
current	N
categoryID	N
.	N
When	N
you	N
hide	N
/	N
disable	N
like	N
this	N
in	N
prototype	N
,	N
it	N
not	N
only	N
hides	N
it	N
on	N
the	N
page	N
,	N
but	N
it	N
will	N
keep	N
that	N
FORM	N
variable	N
from	N
posting	N
.	N
So	N
even	N
though	N
you	N
have	N
N	N
selects	N
with	N
the	N
same	N
FORM	N
variable	N
name	N
(	N
myFormVar	N
)	N
,	N
only	N
the	N
active	N
one	N
posts	N
.	N

If	N
I	N
understand	N
this	N
correctly	N
,	N
every	N
time	N
a	N
car	N
manufacturer	N
is	N
added	N
or	N
removed	N
from	N
the	N
Map	N
,	N
I'd	N
have	N
to	N
add	N
or	N
remove	N
the	N
appropriate	N
select	N
tag	N
in	N
the	N
JSP	N
.	N
Since	N
I	N
get	N
this	N
Map	N
from	N
a	N
vendor's	N
web	N
service	N
,	N
I	N
have	N
no	N
way	N
of	N
knowing	N
how	N
many	N
elements	N
the	N
Map	N
might	N
have	N
.	N

And	N
,	N
I	N
still	N
don't	N
know	N
of	N
a	N
way	N
to	N
retrieve	N
the	N
names	N
of	N
the	N
cars	N
.	N
The	N
name	N
of	N
the	N
car	N
being	N
a	N
String	N
in	N
a	N
Car	N
object	N
,	N
that's	N
stored	N
in	N
a	N
List	N
that's	N
stored	N
as	N
a	N
value	N
in	N
a	N
Map	N
.	N
Whew	N
...	N
talk	N
about	N
complicated	N
...	N

Not	N
that	N
long	N
ago	N
I	N
thought	N
about	N
something	N
similar	N
.	N
Using	N
jQuery	N
and	N
the	N
TexoTela	N
add-on	N
it	N
wasn't	N
all	N
that	N
difficult	N
.	N
First	N
,	N
you	N
have	N
a	N
data	N
structure	N
like	N
the	N
map	N
mentioned	N
above	N
:	N
Your	N
HTML	N
should	N
look	N
comparable	N
to	N
:	N
Then	N
,	N
you	N
fill	N
the	N
first	N
combo	N
with	N
jQuery	N
code	N
like	N
:	N
where	N
manufacturerSelected	N
is	N
the	N
callback	N
registered	N
on	N
the	N
onChange	N
event	N
This	N
should	N
do	N
the	N
trick	N
.	N
Please	N
note	N
that	N
there	N
may	N
be	N
syntax	N
errors	N
in	N
there	N
;	N
I	N
have	N
edited	N
my	N
code	N
to	N
reflect	N
your	N
use	N
case	N
and	N
had	N
to	N
strip	N
quite	N
a	N
lot	N
out	N
.	N
If	N
this	N
helps	N
I	N
would	N
appreciate	N
a	N
comment	N
.	N

First	N
of	N
all	N
,	N
thanks	N
for	N
your	N
answer	N
,	N
extraneon	N
.	N
I'll	N
use	N
it	N
if	N
I	N
don't	N
find	N
any	N
other	N
way	N
.	N
However	N
,	N
there	N
are	N
two	N
issues	N
here	N
.	N
The	N
first	N
one	N
is	N
that	N
I'm	N
not	N
doing	N
this	N
for	N
my	N
own	N
personal	N
project	N
,	N
but	N
as	N
a	N
part	N
of	N
a	N
larger	N
enterprise	N
app	N
for	N
the	N
company	N
I'm	N
currently	N
employed	N
at	N
.	N
Because	N
of	N
that	N
,	N

I	N
might	N
not	N
be	N
allowed	N
to	N
use	N
JQuery	N
.	N
They're	N
a	N
bit	N
touchy	N
when	N
it	N
comes	N
to	N
introducing	N
new	N
frameworks	N
in	N
the	N
app	N
.	N
But	N
,	N
if	N
I	N
can't	N
get	N
it	N
to	N
work	N
any	N
other	N
way	N
,	N
I'll	N
just	N
have	N
to	N
get	N
my	N
boss	N
to	N
convince	N
the	N
business	N
guys	N
that	N
that's	N
the	N
only	N
way	N
to	N
do	N
it	N
.	N
However	N
,	N
the	N
larger	N
issue	N
is	N
getting	N
the	N
map	N

to	N
work	N
in	N
JavaScript	N
.	N
I	N
already	N
mentioned	N
that	N
I'm	N
getting	N
it	N
from	N
a	N
webservice	N
,	N
and	N
my	N
controller	N
passes	N
it	N
to	N
JSP	N
,	N
so	N
I	N
can't	N
just	N
hardcode	N
it	N
in	N
JavaScript	N
,	N
I	N
have	N
to	N
be	N
able	N
to	N
map	N
my	N
map	N
to	N
a	N
JavaScript	N
object	N
,	N
so	N
that	N
I	N
can	N
manipulate	N
it	N
there	N
.	N
I'm	N
still	N
working	N
on	N
my	N
own	N
solution	N
,	N
though	N
,	N
so	N

if	N
I	N
get	N
anywhere	N
,	N
I'll	N
post	N
the	N
solution	N
here	N
.	N
Once	N
again	N
,	N
everybody	N
,	N
thanks	N
for	N
all	N
the	N
answers	N
,	N
and	N
excuse	N
me	N
for	N
the	N
long	N
comment	N
.	N

As	N
an	N
add-on	N
on	N
my	N
previous	N
post	N
;	N
You	N
can	N
put	N
a	N
script	N
tag	N
in	N
your	N
JSP	N
where	N
you	N
iterate	N
over	N
your	N
map	N
.	N
An	N
example	N
about	N
iterating	N
over	N
maps	N
can	N
be	N
found	N
in	N
Maps	N
in	N
Struts	N
.	N
What	N
you	N
would	N
like	N
to	N
achieve	N
(	N
if	N
you	N
don't	N
care	N
about	N
form	N
submission	N
)	N
is	N
I	N
think	N
something	N
like	N
:	N
You	N
still	N
have	N
some	N
superfuous	N
"	N
,	N
"	N
which	N
you	N
might	N
wish	N
to	N
prevent	N
,	N
but	N
I	N
think	N
this	N
should	N
do	N
the	N
trick	N
.	N

I	N
just	N
love	N
a	N
challenge	N
.	N
No	N
jQuery	N
,	N
just	N
plain	N
javascript	N
,	N
tested	N
on	N
Safari	N
.	N
I'd	N
like	N
to	N
add	N
the	N
following	N
remarks	N
in	N
advance	N
:	N
It's	N
faily	N
long	N
due	N
to	N
the	N
error	N
checking	N
.	N
Two	N
parts	N
are	N
generated	N
;	N
the	N
first	N
script	N
node	N
with	N
the	N
Map	N
and	N
the	N
contents	N
of	N
the	N
manufacterer	N
SELECT	N
Works	N
on	N
My	N
Machine	N
(	N
TM	N
)	N
(	N
Safari	N
/	N
OS	N
X	N
)	N
There	N
is	N
no	N
(	N
css	N
)	N
styling	N
applied	N
.	N
I	N
have	N
bad	N
taste	N
so	N
it's	N
no	N
use	N
anyway	N
.	N
.	N

Very	N
nice	N
,	N
extraneon	N
!	N
However	N
,	N
the	N
map	N
is	N
still	N
hardcoded	N
,	N
so	N
the	N
challenge	N
is	N
still	N
on	N
...	N
:-)	N
To	N
be	N
honest	N
,	N
i	N
managed	N
to	N
solve	N
the	N
problem	N
,	N
although	N
the	N
solution	N
isn't	N
pretty	N
.	N
The	N
populating	N
part	N
is	N
done	N
pretty	N
much	N
the	N
way	N
you	N
did	N
it	N
.	N
I	N
haven't	N
posted	N
it	N
yet	N
'	N
cause	N
i	N
have	N
a	N
lot	N
to	N
do	N
but	N
I'll	N
post	N

it	N
as	N
soon	N
as	N
I	N
can	N
,	N
probably	N
the	N
day	N
after	N
tomorrow	N
.	N
Although	N
your	N
solution	N
isn't	N
complete	N
,	N
I'm	N
giving	N
you	N
a	N
vote	N
up	N
,	N
just	N
for	N
the	N
effort	N
you	N
put	N
into	N
it	N
:-)	N
Hint	N
:	N
my	N
solution	N
involves	N
using	N
a	N
scriptlet	N
.	N

OK	N
.	N
I	N
should	N
have	N
written	N
a	N
JSP	N
and	N
dynamically	N
generate	N
modelsPerManufacturer	N
and	N
the	N
manufacturer	N
SELECT	N
.	N
using	N
nothing	N
but	N
the	N
input	N
Map	N
.	N
I'll	N
update	N
the	N
answer	N
tonight	N
(	N
it's	N
now	N
7am	N
here	N
)	N
.	N

Here	N
is	N
a	N
working	N
,	N
cut-and-paste	N
answer	N
in	N
jsp	N
without	N
any	N
tag	N
libraries	N
or	N
external	N
dependencies	N
whatsoever	N
.	N
The	N
map	N
with	N
models	N
is	N
hardcoded	N
but	N
shouldn't	N
pose	N
any	N
problems	N
.	N
I	N
separated	N
this	N
answer	N
from	N
my	N
previous	N
answer	N
as	N
the	N
added	N
JSP	N
does	N
not	N
improve	N
readability	N
.	N
And	N
in	N
'	N
real	N
life	N
'	N
I	N
would	N
not	N
burden	N
my	N
JSP	N
with	N
all	N
the	N
embedded	N
logic	N
but	N
put	N
it	N
in	N
a	N
class	N
somewhere	N
.	N
Or	N
use	N
tags	N
.	N
All	N
that	N
"	N
first	N
"	N
stuff	N
is	N
to	N
prevent	N
superfluos	N
"	N
,	N
"	N
in	N
the	N
generated	N
code	N
.	N
Using	N
a	N
foreach	N
dosn't	N
give	N
you	N
any	N
knowledge	N
about	N
the	N
amount	N
of	N
elements	N
,	N
so	N
you	N
check	N
for	N
last	N
.	N
You	N
can	N
also	N
skip	N
the	N
first-element	N
handling	N
and	N
strip	N
the	N
last	N
"	N
,	N
"	N
afterwards	N
by	N
decreasing	N
the	N
builder	N
length	N
by	N
1	N
.	N

Well	N
anyway	N
,	N
as	N
i	N
said	N
,	N
i	N
finally	N
managed	N
to	N
do	N
it	N
by	N
myself	N
,	N
so	N
here's	N
my	N
answer	N
...	N
I	N
receive	N
the	N
map	N
from	N
my	N
controller	N
like	N
this	N
(	N
I'm	N
using	N
Spring	N
,	N
don't	N
know	N
how	N
this	N
works	N
with	N
other	N
frameworks	N
):	N
These	N
are	N
my	N
combos	N
:	N
I	N
imported	N
the	N
following	N
classes	N
(	N
some	N
names	N
have	N
,	N
of	N
course	N
,	N
been	N
changed	N
):	N
And	N
here's	N
the	N
code	N
that	N
does	N
all	N
the	N
hard	N
work	N
:	N

