Java	^
equivalent	N
to	P
JavaScript's	L
encodeURIComponent	V
that	O
produces	V
identical	A
output	N
?	,

I've	L
been	V
experimenting	V
with	P
various	A
bits	N
of	P
Java	^
code	N
trying	V
to	P
come	V
up	T
with	P
something	N
that	O
will	V
encode	P
a	D
string	N
containing	V
quotes	N
,	,
spaces	N
and	&
"	,
exotic	A
"	,
Unicode	N
characters	N
and	&
produce	V
output	N
that's	L
identical	A
to	P
JavaScript's	Z
encodeURIComponent	A
function	N
.	,
My	D
torture	N
test	N
string	N
is	V
:	,
"	,
A	^
"	,
B	G
"	,
If	P
I	O
enter	V
the	D
following	V
JavaScript	N
statement	N
in	P
Firebug	N
:	,
Then	R
I	O
get	V
:	,
Here's	L
my	D
little	A
test	N
Java	^
program	N
:	,
This	D
program	N
outputs	N
:	,
URLEncoder.encode	N
returns	V
%22A%22+B+%C2%B1+%22	^
getBytes	N
returns	N
"	,
A	^
"	,
B	G
"	,
Close	R
,	,
but	&
no	D
cigar	N
!	,
What	O
is	V
the	D
best	A
way	N
of	P
encoding	V
a	D
UTF-8	^
string	N
using	V
Java	^
so	P
that	D
it	O
produces	V
the	D
same	A
output	N
as	P
JavaScript's	Z
encodeURIComponent	N
?	,
EDIT	V
:	,
I'm	L
using	V
Java	^
1.4	^
moving	V
to	P
Java	^
5	$
shortly	R
.	,

Using	V
the	D
javascript	N
engine	N
that	O
is	V
shipped	V
with	P
Java	^
6	$
:	,
import	V
javax.script.ScriptEngine	^
;	,
import	N
javax.script.ScriptEngineManager	N
;	,
public	A
class	N
Wow	!
{	,
public	A
static	A
void	N
main	N
(	,
String	N
[]	^
args	^
)	,
throws	V
Exception	N
{	,
ScriptEngineManager	^
factory	N
=	,
new	A
ScriptEngineManager()	^
;	,
ScriptEngine	^
engine	N
=	E
factory.getEngineByName	E
(	E
"	E
JavaScript	E
")	E
;	E
engine.eval	E
(	E
"	,
print	V
(	,
encodeURIComponent	E
(	,
'	,
\	E
"	E
A\	E
"	E
B	E
\	E
"'))")	E
;	E
}	E
}	E
Output	N
:	,
%22A%22%20B%20%c2%b1%20%22	$
The	D
case	N
is	V
different	A
but	&
it's	L
closer	R
to	P
what	O
you	O
want	V
.	,

Ah	!
,	,
sorry	A
...	,
I	O
should	V
have	V
mentioned	V
in	P
the	D
question	N
that	P
I'm	L
on	P
Java	^
1.4	^
moving	V
to	P
Java	^
5	$
shortly	R
!	,

Iiips	^
.	,
I	O
don't	V
have	V
a	D
solution	N
for	P
you	O
then	R
:-)	E
.	,

If	P
javascript	O
is	V
the	D
only	A
solution	N
you	O
can	V
try	V
Rhino	^
,	,
but	&
it's	L
too	R
much	R
just	R
for	P
this	D
small	A
problem	N
.	,

Even	R
if	P
he	O
was	V
using	V
Java	^
6	$
,	,
I	O
think	V
this	D
solution	N
is	V
WAY	R
over	P
the	D
top	N
.	,
I	O
don't	V
think	V
he's	L
looking	V
for	P
a	D
way	N
to	P
directly	R
invoke	V
the	D
javascript	N
method	N
,	,
just	R
a	D
way	N
to	P
emulate	V
it	O
.	,

Maybe	R
.	,
I	O
think	V
the	D
easiest	A
solution	N
would	V
be	V
to	P
write	V
your	D
own	N
escape	V
function	N
if	P
you	O
can't	V
find	V
anything	V
that	O
does	V
the	D
trick	N
for	P
you	O
.	,
Just	R
copy	N
some	D
method	N
from	P
the	D
StringEscapeUtils	^
class	N
(	,
Jakarta	^
Commons	^
Lang	^
)	,
and	&
reimplement	V
it	O
with	P
your	D
needs	V
.	,

@Ravi	@
Wallau	^
very	R
nice	A
!	,

This	D
actually	R
works	V
,	,
and	&
if	P
you're	L
not	R
worried	A
about	P
performance	N
...	,
I	O
think	V
it's	L
good	A
.	,

Looking	V
at	P
the	D
implementation	N
differences	N
,	,
I	O
see	V
that	O
:	,
MDC	^
on	P
encodeURIComponent()	^
:	,
literal	A
characters	N
(	,
regex	N
representation	N
):	,
[-a-zA-Z0-	$
9._	$
*~	G
'	,
(	E
)	E
!	,
]	,
Java	^
1.5	$
.	,
0	$
documentation	N
on	P
URLEncoder	^
:	,
literal	A
characters	N
(	,
regex	N
representation	N
):	,
[-a-zA-Z0-	$
9._	$
*]	P
the	D
space	N
character	N
"	,
"	,
is	V
converted	V
into	P
a	D
plus	N
sign	N
"	,
+	&
"	,
.	,
So	P
basically	R
,	,
to	P
get	V
the	D
desired	A
result	N
,	,
use	V
URLEncoder.encode	N
(	,
s	G
,	,
"	,
UTF-8	^
")	^
and	&
then	R
do	V
some	D
post-processing	N
:	,
replace	V
all	D
occurrences	N
of	P
"	,
+	&
"	,
with	P
"	,
%20	$
"	,
replace	V
all	D
occurrences	N
of	P
"	,
%xx	N
"	,
representing	V
any	D
of	P
[~	^
'	,
(	E
)	E
!	,
]	,
back	N
to	P
their	D
literal	A
counter-parts	N

I	O
wish	V
you	O
had	V
written	V
"	,
Replace	V
all	D
occurrences	N
of	P
"	,
%xx	N
"	,
representing	V
any	D
of	P
[~	^
'	,
(	E
)	E
!	,
]	,
back	N
to	P
their	D
literal	A
counter-parts	N
"	,
in	P
some	D
simple	A
language	N
.	,
:(	E
my	D
tiny	A
head	N
is	V
not	R
able	A
to	P
understand	V
it	O
.......	,

@Shailendra	@
`	~
[~	G
'	,
(	E
)	E
!	E
]	E
`	E
means	V
`"	E
~	E
"`	E
or	E
`"'"`	E
or	E
`"	E
(	E
"`	E
or	&
`")"`	E
or	&
`"	E
!	,
"`	E
.	E
:)	E
I	E
recommend	V
learning	V
the	D
regex	N
basics	N
,	,
too	R
,	,
though	P
.	,
(	,
I	O
also	R
didn't	V
expand	V
on	P
that	D
since	P
at	O
least	R
two	$
other	A
answers	N
show	V
the	D
respective	A
Java	^
code	N
.	,
)	E

This	D
is	V
the	D
class	N
I	O
came	V
up	T
with	P
in	P
the	D
end	N
:	,

Thanks	N
for	P
sharing	V
the	D
code	N
!	,
:-)	E
+1	E

Adding	V
a	D
tip	N
.	,
In	P
Android	^
4.4	$
I	O
found	V
that	P
we	O
also	R
need	V
to	P
replace	V
`	,
%0A	$
`	,
which	O
means	V
a	D
return	N
key	A
in	P
Android	^
input	N
,	,
or	&
it	O
will	V
crash	V
the	D
js	N
.	,

I	O
came	V
up	T
with	P
another	D
implementation	N
documented	V
at	P
,	,
http://blog.sangupta.com/2010/05/encodeuricomponent-and.html	U
.	,
The	D
implementation	N
can	V
also	R
handle	V
Unicode	^
bytes	N
.	,

I	O
came	V
up	T
with	P
my	D
own	A
version	N
of	P
the	D
encodeURIComponent	N
,	,
because	P
the	D
posted	V
solution	N
has	V
one	$
problem	N
,	,
if	P
there	X
was	V
a	D
+	G
present	A
in	P
the	D
String	N
,	,
which	O
should	V
be	V
encoded	V
,	,
it	O
will	V
converted	V
to	P
a	D
space	N
.	,
So	P
here	R
is	V
my	D
class	N
:	,

Thanks	N
for	P
a	D
good	A
solution	N
!	,
The	D
others	N
look	V
totally	R
...	,
inefficient	A
,	,
IMO	^
.	,
Perhaps	R
it'd	L
be	V
even	R
better	R
without	P
the	D
BitSet	N
on	P
today's	S
hardware	N
.	,
Or	&
two	$
hard-coded	A
longs	N
for	P
0	$
...	~
127	$
.	,

`	,
URLEncoder.encode	N
(	,
"	,
+	&
"	,
,	,
"	,
UTF-8	^
")	E
;	E
`	,
yields	N
`"	,
%2B	$
"`	^
,	,
which	O
is	V
the	D
proper	A
URL	N
encoding	N
,	,
so	P
your	D
solution	N
is	V
,	,
my	D
apologies	N
,	,
totally	R
unnecessary	A
.	,
Why	R
on	P
earth	^
`	,
URLEncoder.encode	N
`	,
doesn't	V
turn	V
spaces	N
into	P
`	,
%20	$
`	,
is	V
beyond	P
me	O
.	,

I	O
have	V
found	V
PercentEscaper	^
class	N
from	P
google-http-java-client	A
library	N
,	,
that	O
can	V
be	V
used	V
to	P
implement	V
encodeURIComponent	V
quite	R
easily	R
.	,
PercentEscaper	^
from	P
google-http-java-client	V
javadoc	^
google-http-java-client	A
home	N

