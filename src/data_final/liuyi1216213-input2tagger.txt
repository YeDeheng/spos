javascript	N
injection	N
in	N
wicket	N

I	N
have	N
J2EE	N
project	N
which	N
uses	N
wicket	N
framework	N
.	N
I	N
want	N
to	N
know	N
how	N
can	N
I	N
prevent	N
from	N
javascript	N
injection	N
in	N
wicket	N
?	N

Although	N
I	N
didn't	N
think	N
the	N
way	N
in	N
which	N
you	N
formulated	N
your	N
question	N
deserved	N
it	N
(	N
no	N
details	N
,	N
no	N
background	N
,	N
no	N
example	N
problem	N
statement	N
,	N
implied	N
susceptability	N
to	N
injection	N
,	N
etc	N
)	N
,	N
I	N
dug	N
up	N
some	N
details	N
from	N
the	N
Excellent	N
Wicket	N
in	N
Action	N
:	N
Wicket	N
is	N
secure	N
by	N
default	N
You	N
never	N
need	N
to	N
worry	N
about	N
pimple-faced	N
14-year-olds	N
trying	N
to	N
hack	N
your	N
web	N
application	N
.	N
To	N
do	N
so	N
,	N
they	N
would	N
have	N
to	N
hijack	N
the	N
session	N
and	N
then	N
guess	N
the	N
right	N
page	N
identifiers	N
and	N
version	N
numbers	N
,	N
which	N
would	N
be	N
relative	N
to	N
the	N
session	N
and	N
the	N
relevant	N
component	N
paths	N
.	N
You	N
d	N
have	N
to	N
be	N
a	N
persistent	N
hacker	N
to	N
pull	N
that	N
off	N
.	N
You	N
can	N
make	N
your	N
Wicket	N
application	N
even	N
more	N
secure	N
from	N
the	N
default	N
by	N
encrypting	N
requests	N
with	N
,	N
for	N
instance	N
,	N
CryptedUrlWebRequestCodingStrategy	N
.	N

All	N
Wicket	N
components	N
escape	N
strings	N
by	N
default	N
(	N
by	N
Labels	N
,	N
TextFields	N
,	N
etc	N
.	N
)	N
,	N
which	N
avoids	N
most	N
common	N
issues	N
related	N
to	N
javascript	N
injection	N
.	N
You	N
should	N
take	N
appropriate	N
care	N
,	N
though	N
,	N
if	N
you	N
disable	N
this	N
behavior	N
(	N
component.setEscapeModelStrings	N
(	N
false	N
)	N
)	N
for	N
some	N
reason	N
,	N
or	N
create	N
custom-rendered	N
components	N
(	N
if	N
you	N
write	N
the	N
markup	N
directly	N
to	N
the	N
output	N
)	N
.	N

