447097		java and javascript callbacks compared	^ & ^ N V		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		It seems I don't understand javascript callbacks quite as well as I thought . In the following example , I would think that each copy of function in setTimeout would refer to its own copy of the variable " index " . Therefore , running the example should produce the following alerts : " zero " " one " " two " . However , it seems that theres only one copy of the index variable , and all copies of the callback function point to the same variable , giving me the following alerts : " two " " two " " two " . The following analagous ( I thought ) example in java prints " zero " " one " " two " , as expected . Can anyone explain to me why the js example doesn't work , and perhaps compare what's going on in the two examples ?	O V O V V ^ N R R R P O V , P D N N , O V V P D N P N P ^ V V P L A N P D A , N , , R , V D N V V D N V , , $ , , $ , , $ , , R , O V P O A $ N P D N N , & D N P D N N N P D A N , V O D N V , , $ , , $ , , $ , , ^ V A , O V , N P ^ V , $ , , $ , , $ , , P V , V O V P O R D ^ N V N , & R V L V P P D $ N ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Have you seen : http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope	V O V , U		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Prestaul , thank , that's pretty much my same question . I looked for similar questions before I posted but didn't find this one .	^ , V , L R A D A N , O V P A N P O V & V V D $ ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		I asked [ an almost identical][1 ] question yesterday and got a couple of different variations in the answers and some discussion on the merits of each . Might be worth a look [ 1 ]: http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope	O V , D R G , N N & V D N P A N P D N & D N P D N P D , V V V D V , $ , U		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		index changes with each iteration of the loop . What you want is to place index into a closure not affected by the loop :	N V P D N P D N , O O V V P N N P D N R V P D N ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Thanks . I guess I thought that each iteration of the for loop would create a closure .	N , O V O V P D N P D P N V V D N ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Well yes , technically I left that part out . There * is * a closure around index . But it is declared in an outer scope to the function passed to setTimeout . " closure " ! = " unchanging variable " .	! ! , R O V D N P , X , V , D N P N , & O V V P D A N P D N V P ^ , , N , , , , A A , ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Cool . One more question : why does the function declaration need to be wrapped in parens ?	A , $ A N , R V D N N V P V V P ^ ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		@morgancodes : that's just convention ; also , there might be some cases where the parser might otherwise produce incorrect results	@ , L R N , R , X V V D N R D N V R V A N		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Firefox tells me there's a syntax error if I leave them out .	^ V O Y D N N P O V O T ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		closures in javascript ( references to variables outside the function ) retain their association ... if you refer to a loop variable in a function called after the loop ends , in the function call you get the value of that variable after the loop .	N P ^ , N P N P D N , V D N , P O V P D N N P D N V P D N N , P D N V O V D N P D A P D N ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		the function call / parens / etc create a copy of the value " i " into the variable " index " , at the time of each iteration of the loop .	D N V , N , ^ V D N P D N , O , P D A , N , , P D N P D N P D N ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		In javascript the for loop does not have it's own scope - so a var you create inside a loop is not different from one defined outside of it .	P ^ D P N V R V L A N , P D N O V P D N V R A P $ A N P O ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Private Members In JavaScript is my favorite reference on closures . It is written as a recipe for providing private variables in JS objects ( maybe useful , maybe not ) but in the process goes through an excellent introduction of how closures work in general , and especially in JS . The comp.lang.javascript FAQ has a worthwhile section on closures as well . Closures can be confusing so I put together a working example of the shortest useful closure I've come across , which was in the Rhino book . Oh and I don't have enough rep to comment yet :) but I saw your question above about why you have to put parenthesis around functions sometimes . That's only necessary when you invoke an anonymous function inline . For example the parenthesis are required here : Because you are creating a function and then immediately invoking it . But the parens are not necessary in the usual case where you are just declaring a named function for later use .	A N P ^ V D A N P N , O V V P D N P V A N P ^ N , R A , R R , & P D N V P D A N P R N V P A , & R P ^ , D ^ ^ V D A N P N P R , O V V A P O V R D V N P D R A N L V P , O V P D ^ N , ! & O V V A ^ P V R E & O V D N P P R O V P V N P N R , L R A R O V D A N N , P N D N V V R , P O V V D N & R R V O , & D N V R A P D A N R O V R V D V N P R V ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
447097		Thanks Noah . that rhino book example is cool .	N ^ , D ^ N N V A ,		Wed Aug 26 2015 21:27:51 GMT+0800 (China Standard Time)
