What	N
is	N
the	N
disadvantage	N
of	N
DWR	N
?	N

While	N
using	N
DWR	N
in	N
a	N
intranet	N
,	N
will	N
disadvantages	N
like	N
perfomance	N
or	N
security	N
issues	N
occur	N
?	N
Direct	N
web	N
remoting	N
is	N
a	N
tool	N
which	N
uses	N
Ajax	N
request	N
to	N
contact	N
a	N
server	N
from	N
a	N
js	N
file	N
.	N

One	N
thing	N
I	N
would	N
watch	N
out	N
for	N
is	N
that	N
your	N
server	N
will	N
most	N
likely	N
get	N
hit	N
by	N
more	N
HTTP	N
requests	N
than	N
if	N
you	N
have	N
the	N
(	N
normal	N
)	N
full	N
page	N
HTTP	N
delivery	N
.	N
Let	N
me	N
explain	N
.	N
When	N
your	N
web	N
page	N
is	N
AJAX-enabled	N
,	N
your	N
clients	N
will	N
end	N
up	N
creating	N
more	N
HTTP	N
requests	N
for	N
(	N
say	N
)	N
form	N
filling	N
,	N
page-fragment	N
regeneration	N
etc	N
.	N
I've	N
seen	N
scenarios	N
where	N
developers	N
have	N
gone	N
AJAX-crazy	N
,	N
and	N
made	N
the	N
web	N
page	N
a	N
largely	N
dynamic	N
document	N
.	N
This	N
results	N
in	N
a	N
great	N
user	N
experience	N
(	N
if	N
done	N
well	N
)	N
,	N
but	N
every	N
request	N
results	N
in	N
a	N
server	N
hit	N
,	N
leading	N
to	N
scalability	N
and	N
latency	N
issues	N
.	N
Note	N
-	N
this	N
isn't	N
particular	N
to	N
DWR	N
,	N
but	N
is	N
an	N
AJAX	N
issue	N
.	N
I've	N
used	N
DWR	N
,	N
and	N
it	N
works	N
nicely	N
.	N
Unfortunately	N
,	N
I	N
found	N
that	N
it	N
worked	N
so	N
well	N
,	N
and	N
so	N
easily	N
,	N
that	N
everything	N
becomes	N
a	N
candidate	N
for	N
remoting	N
,	N
and	N
you	N
can	N
end	N
up	N
with	N
huge	N
numbers	N
of	N
small	N
requests	N
.	N

I	N
agree	N
with	N
this	N
answer	N
.	N
I	N
used	N
DWR	N
in	N
an	N
web-based	N
application	N
.	N
The	N
application	N
gives	N
a	N
great	N
user	N
experience	N
,	N
but	N
I	N
think	N
the	N
application	N
doesn't	N
work	N
fast	N
,	N
because	N
of	N
all	N
the	N
JavaScript	N
and	N
httprequest	N
.	N

I	N
worked	N
on	N
a	N
project	N
with	N
DWR	N
-	N
a	N
really	N
nice	N
tool	N
.	N
I'm	N
not	N
convinced	N
about	N
the	N
pace	N
of	N
development	N
though	N
.	N
They	N
did	N
post	N
on	N
the	N
development	N
log	N
that	N
they're	N
working	N
on	N
getting	N
3.0	N
out	N
the	N
door	N
,	N
but	N
the	N
last	N
stable	N
release	N
-	N
2.0	N
-	N
was	N
out	N
in	N
summer	N
2006	N
.	N
It's	N
a	N
bit	N
worrying	N
taken	N
from	N
a	N
support	N
perspective	N
-	N
bug	N
fixes	N
especially	N
.	N

Main	N
problem	N
I've	N
experienced	N
is	N
trying	N
to	N
script	N
a	N
load	N
test	N
on	N
a	N
system	N
where	N
the	N
main	N
bulk	N
of	N
the	N
work	N
is	N
done	N
via	N
DWR	N
calls	N
.	N
The	N
format	N
of	N
the	N
calls	N
is	N
difficult	N
to	N
replicate	N
when	N
compared	N
with	N
just	N
replying	N
a	N
bunch	N
of	N
urls	N
with	N
changing	N
parameters	N
.	N
Still	N
DWR	N
is	N
an	N
excellent	N
framework	N
and	N
makes	N
implementing	N
Javascript	N
->	N
Java	N
RPC	N
pretty	N
damn	N
easy	N
.	N

DWR	N
is	N
a	N
great	N
tool	N
when	N
your	N
site	N
has	N
a	N
lot	N
of	N
ajax	N
calls	N
.	N
Each	N
page	N
that	N
makes	N
dwr	N
rpc	N
calls	N
needs	N
to	N
include	N
:	N
a	N
)	N
an	N
interface	N
file	N
corresponding	N
to	N
the	N
calls	N
being	N
made	N
.	N
and	N
b	N
)	N
a	N
js	N
file	N
bundled	N
with	N
dwr	N
that	N
contains	N
the	N
dwr	N
engine	N
code	N
that	N
makes	N
these	N
calls	N
possible	N
.	N
for	N
e.g.	N
script	N
src=	N
"	N
/	N
dwr	N
/	N
engine.js	N
"	N
/	N
script	N
one	N
technique	N
that	N
is	N
frequently	N
used	N
while	N
optimizing	N
web	N
applications	N
is	N
to	N
use	N
the	N
browser	N
cache	N
as	N
much	N
as	N
possible	N
when	N
a	N
resource	N
(	N
like	N
a	N
js	N
file	N
)	N
has	N
not	N
changed	N
on	N
a	N
server	N
.	N
engine.js	N
is	N
something	N
that	N
will	N
never	N
change	N
unless	N
you	N
upgrade	N
your	N
dwr	N
to	N
a	N
newer	N
version	N
.	N
But	N
,	N
by	N
default	N
,	N
engine.js	N
is	N
not	N
a	N
static	N
file	N
served	N
by	N
your	N
webserver	N
.	N
its	N
bundled	N
as	N
part	N
of	N
the	N
dwr	N
tool	N
itsef	N
and	N
is	N
served	N
by	N
the	N
dwr	N
controller	N
/	N
servlet.this	N
doesnt	N
aid	N
client	N
side	N
caching	N
.	N
So	N
,	N
it	N
is	N
beneficial	N
to	N
save	N
engine.js	N
under	N
the	N
document	N
root	N
of	N
your	N
webserver	N
and	N
let	N
the	N
webserver	N
serve	N
it	N
as	N
a	N
static	N
file	N
.	N

More	N
about	N
caching	N
engine.js	N
on	N
DWR's	N
site	N
:	N
http://directwebremoting.org/dwr/browser/engine/static.html	N

One	N
feature	N
missing	N
of	N
current	N
DWR	N
3.x	N
that	N
any	N
user	N
should	N
take	N
good	N
care	N
is	N
that	N
when	N
an	N
instance	N
of	N
a	N
bean	N
has	N
properties	N
of	N
NULL	N
value	N
,	N
those	N
properties	N
will	N
be	N
still	N
injected	N
to	N
the	N
JSON	N
and	N
these	N
redundant	N
data	N
DO	N
affect	N
the	N
performance	N
.	N
When	N
a	N
property	N
has	N
the	N
value	N
of	N
NULL	N
,	N
usually	N
it	N
should	N
not	N
be	N
sent	N
to	N
frontend	N
.	N
Details	N
of	N
problem	N
:	N
http://dwr.2114559.n2.nabble.com/Creating-Custom-bean-converter-td6178318.html	N

The	N
biggest	N
difference	N
among	N
other	N
solutions	N
to	N
transfer	N
objects	N
(	N
marshaling	N
)	N
is	N
object	N
references	N
.	N
For	N
instance	N
,	N
if	N
you	N
use	N
it	N
to	N
transfer	N
a	N
tree	N
:	N
A	N
|-B	N
|-C	N
in	N
a	N
list	N
{	N
A	N
,	N
B	N
,	N
C}	N
:	N
B.parent	N
=	N
A	N
C.parent	N
=	N
A	N
then	N
A	N
is	N
the	N
same	N
object	N
in	N
Javascrit	N
!	N
On	N
the	N
bad	N
side	N
,	N
if	N
you	N
have	N
complex	N
structures	N
with	N
circular	N
dependencies	N
and	N
lot	N
of	N
objects	N
:	N
A	N
-B	N
,	N
B	N
-C	N
,	N
C	N
-B	N
,	N
C	N
.	N
A	N
,...	N
it	N
could	N
crash	N
.	N
Anyway	N
,	N
I	N
use	N
it	N
in	N
a	N
real	N
project	N
used	N
by	N
many	N
hundreds	N
of	N
companies	N
in	N
production	N
to	N
transfer	N
thousands	N
of	N
objects	N
to	N
a	N
single	N
html	N
page	N
in	N
order	N
to	N
draw	N
a	N
complex	N
graph	N
and	N
it	N
works	N
nicely	N
with	N
a	N
good	N
performance	N
.	N

