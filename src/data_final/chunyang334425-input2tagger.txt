different	N
WAR	N
files	N
,	N
shared	N
resources	N

Suppose	N
you	N
have	N
several	N
applications	N
which	N
share	N
the	N
same	N
code	N
and	N
most	N
of	N
the	N
other	N
resources	N
,	N
but	N
have	N
a	N
somewhat	N
different	N
look	N
and	N
feel	N
,	N
some	N
labels	N
change	N
,	N
etc	N
.	N
(	N
think	N
branding	N
)	N
.	N
If	N
each	N
web	N
app	N
is	N
to	N
go	N
in	N
its	N
own	N
WAR	N
file	N
,	N
where	N
do	N
you	N
put	N
the	N
shared	N
resources	N
?	N
I	N
already	N
use	N
the	N
classpath	N
to	N
share	N
classes	N
and	N
property	N
files	N
.	N
But	N
what	N
about	N
javascript	N
and	N
css	N
files	N
?	N
Is	N
the	N
best	N
way	N
to	N
create	N
and	N
deploy	N
one	N
extra	N
WAR	N
file	N
that	N
will	N
serve	N
these	N
shared	N
files	N
to	N
whatever	N
other	N
application	N
requires	N
them	N
?	N
I	N
also	N
thought	N
of	N
a	N
build	N
script	N
that	N
does	N
some	N
magic	N
and	N
from	N
a	N
common	N
source	N
spews	N
out	N
the	N
(	N
slightly	N
)	N
different	N
WARs	N
,	N
but	N
I	N
don't	N
like	N
it	N
because	N
it	N
just	N
complicates	N
stuff	N
unnecessarily	N
when	N
you	N
need	N
to	N
build	N
/	N
test	N
/	N
run	N
a	N
single	N
application	N
.	N
Any	N
other	N
tips	N
and	N
tricks	N
would	N
be	N
appreciated	N
.	N

You	N
can	N
deploy	N
both	N
WARs	N
in	N
the	N
same	N
EAR	N
and	N
put	N
common	N
resources	N
in	N
the	N
EAR	N
.	N
Then	N
put	N
the	N
appropriate	N
dependencies	N
in	N
the	N
manifest	N
of	N
the	N
web	N
apps	N
to	N
link	N
to	N
the	N
jar	N
files	N
in	N
the	N
ear	N
.	N

If	N
you	N
don't	N
want	N
to	N
go	N
the	N
EAR	N
route	N
,	N
using	N
tomcat	N
,	N
etc	N
;	N
there	N
are	N
a	N
few	N
other	N
ways	N
to	N
achieve	N
the	N
consistency	N
you	N
want	N
.	N
If	N
you	N
want	N
to	N
share	N
just	N
js	N
and	N
css	N
,	N
look	N
into	N
pack	N
:	N
tag	N
.	N
You	N
could	N
host	N
the	N
.	N
js	N
and	N
css	N
from	N
an	N
apache	N
server	N
,	N
set	N
up	N
your	N
httpd.conf	N
so	N
your	N
webapps	N
can	N
call	N
it	N
,	N
then	N
use	N
pack	N
:	N
tag	N
from	N
your	N
application	N
wars	N
-	N
DRY	N
and	N
compression	N
in	N
one	N
step	N
.	N

Thanks	N
for	N
the	N
replies	N
so	N
far	N
,	N
but	N
I'm	N
afraid	N
I	N
forgot	N
to	N
mention	N
that	N
the	N
WARs	N
will	N
be	N
deployed	N
in	N
different	N
environments	N
that	N
are	N
completely	N
isolated	N
from	N
each	N
other	N
.	N
So	N
maybe	N
having	N
a	N
common	N
WAR	N
deployed	N
next	N
to	N
the	N
actual	N
application	N
is	N
the	N
only	N
option	N
.	N
I	N
think	N
I'll	N
go	N
with	N
the	N
following	N
:	N
WAR1	N
,	N
WAR2	N
containing	N
app-specific	N
stuff	N
CommonWAR	N
containg	N
common	N
stuff	N
(	N
no	N
kidding	N
)	N
EAR1	N
:	N
WAR1	N
+	N
CommonWAR	N
,	N
to	N
be	N
deployed	N
in	N
env1	N
EAR2	N
:	N
WAR2	N
+	N
CommonWAR	N
,	N
to	N
be	N
deployed	N
in	N
env2	N

The	N
CommonWar	N
serves	N
no	N
purpose	N
in	N
this	N
case	N
.	N
Just	N
put	N
your	N
common	N
resources	N
in	N
each	N
WAR	N
in	N
it's	N
lib	N
directory	N
,	N
or	N
in	N
the	N
EAR	N
itself	N
.	N
A	N
war	N
is	N
not	N
meant	N
to	N
just	N
package	N
resources	N
,	N
the	N
EAR	N
serves	N
that	N
purpose	N
.	N
Although	N
less	N
configuration	N
is	N
required	N
if	N
you	N
simple	N
put	N
it	N
in	N
each	N
WAR	N
.	N

Yes	N
,	N
but	N
if	N
I	N
put	N
the	N
common	N
resources	N
in	N
each	N
WAR	N
file	N
then	N
I	N
duplicate	N
those	N
resources	N
:	N
won't	N
do	N
that	N
.	N
If	N
I	N
put	N
the	N
common	N
resources	N
in	N
the	N
EAR	N
file	N
then	N
it	N
must	N
contain	N
all	N
the	N
WAR	N
files	N
that	N
depend	N
upon	N
those	N
resources	N
:	N
can't	N
do	N
either	N
,	N
one	N
WAR	N
must	N
be	N
deployed	N
per	N
environment	N
.	N

Since	N
you	N
are	N
deploying	N
the	N
CommonWAR	N
in	N
each	N
EAR	N
anyway	N
,	N
the	N
same	N
duplication	N
exists	N
,	N
and	N
you	N
have	N
wrapped	N
the	N
code	N
in	N
a	N
WAR	N
for	N
no	N
reason	N
.	N

The	N
CommonWAR	N
is	N
deployed	N
in	N
two	N
EARs	N
,	N
but	N
it	N
is	N
the	N
*	N
same	N
*	N
CommonWAR	N
,	N
so	N
it	N
is	N
NOT	N
duplicated	N
"	N
for	N
development	N
"	N
.	N
To	N
be	N
honest	N
,	N
I	N
have	N
reverted	N
to	N
2	N
EAR	N
files	N
and	N
one	N
WAR	N
file	N
,	N
see	N
my	N
updated	N
post	N
:)	N

Update	N
Yes	N
,	N
me	N
again	N
.	N
I	N
have	N
actually	N
changed	N
my	N
mind	N
(	N
again	N
:)	N
)	N
.	N
I	N
am	N
currently	N
trying	N
(	N
being	N
more	N
prudent	N
here	N
):	N
(	N
Common	N
)	N
WAR	N
:	N
containing	N
the	N
application	N
,	N
common	N
(	N
most	N
part	N
)	N
+	N
some	N
specific	N
stuff	N
EAR1	N
:	N
CommonWAR	N
+	N
specific	N
configuration	N
file	N
for	N
env1	N
EAR2	N
:	N
CommonWAR	N
+	N
specific	N
configuration	N
file	N
for	N
env2	N
The	N
configuration	N
file	N
is	N
picked	N
up	N
by	N
the	N
WAR	N
.	N
It	N
is	N
on	N
the	N
the	N
EAR	N
classpath	N
and	N
only	N
contains	N
one	N
property	N
'	N
application	N
'	N
with	N
a	N
value	N
.	N
The	N
single	N
WAR	N
will	N
then	N
use	N
this	N
information	N
where	N
appropriate	N
to	N
distinguish	N
between	N
the	N
two	N
apps	N
(	N
config	N
,	N
style	N
sheets	N
,	N
...	N
)	N
.	N
With	N
my	N
solution	N
of	N
EAR1	N
=	N
CommonWAR	N
+	N
WAR1	N
,	N
EAR2	N
=	N
CommonWAR	N
+	N
WAR2	N
,	N
it	N
was	N
too	N
difficult	N
or	N
impossible	N
to	N
lookup	N
static	N
resources	N
in	N
the	N
CommonWAR	N
without	N
using	N
a	N
web	N
url	N
(	N
e.g.	N
images	N
in	N
PDF	N
documents	N
generated	N
with	N
iText	N
)	N
.	N

A	N
strategy	N
that	N
I	N
have	N
seen	N
used	N
for	N
such	N
product-line	N
like	N
configurations	N
is	N
using	N
WAR	N
overlays	N
when	N
building	N
with	N
maven	N
.	N
You	N
define	N
a	N
common	N
WAR	N
that	N
contains	N
the	N
common	N
stuff	N
and	N
overlay	N
it	N
with	N
those	N
other	N
WARs	N
that	N
contain	N
the	N
specific	N
stuff	N
to	N
generate	N
different	N
WARs	N
for	N
every	N
application	N
.	N
This	N
method	N
is	N
probably	N
most	N
useful	N
if	N
you	N
deploy	N
the	N
WAR-variants	N
on	N
different	N
machines	N
.	N
But	N
I'm	N
not	N
sure	N
whether	N
I	N
can	N
actually	N
recommend	N
this	N
.	N
Remember	N
to	N
specify	N
the	N
overlays	N
configuration	N
if	N
you	N
actually	N
override	N
stuff	N
,	N
since	N
otherwise	N
the	N
overriding	N
order	N
is	N
not	N
deterministic	N
.	N
It	N
might	N
even	N
change	N
with	N
a	N
maven-war-plugin	N
upgrade	N
.	N
(	N
It	N
did	N
in	N
our	N
case	N
.	N
)	N

How	N
about	N
putting	N
your	N
css	N
and	N
js	N
in	N
the	N
classpath	N
and	N
serve	N
them	N
with	N
a	N
servlet	N
?	N
Then	N
you	N
can	N
build	N
the	N
common	N
resources	N
as	N
a	N
jar	N
and	N
that	N
jar	N
can	N
even	N
contain	N
the	N
servlet	N
(	N
resource	N
dispatcher	N
if	N
you	N
like	N
)	N
and	N
the	N
war	N
files	N
can	N
contain	N
the	N
jar	N
file	N
in	N
the	N
WEB-INF	N
/	N
lib	N
folder	N
.	N

You	N
can	N
also	N
dispatch	N
images	N
this	N
way	N

