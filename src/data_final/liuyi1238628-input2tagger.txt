md5	N
hash	N
for	N
password	N
string	N
in	N
GWT	N
/	N
GWT-Ext	N
?	N

I	N
am	N
currently	N
trying	N
to	N
modify	N
an	N
existing	N
GWT-Ext	N
application	N
,	N
that	N
is	N
using	N
plain	N
text	N
passwords	N
in	N
its	N
MySql	N
database	N
.	N
My	N
plan	N
was	N
to	N
use	N
md5	N
hashes	N
,	N
as	N
the	N
existing	N
passwords	N
can	N
be	N
easily	N
altered	N
with	N
the	N
MySql	N
function	N
and	N
I	N
was	N
expecting	N
to	N
find	N
an	N
easy	N
solution	N
for	N
the	N
GWT-Ext	N
side	N
as	N
well	N
.	N
But	N
as	N
I	N
found	N
out	N
,	N
java.security	N
is	N
not	N
supported	N
by	N
GWT	N
and	N
there	N
doesn't	N
seem	N
to	N
be	N
any	N
other	N
implementation	N
that	N
can	N
be	N
used	N
to	N
change	N
the	N
password	N
string	N
to	N
a	N
md5	N
hash	N
on	N
client	N
side	N
.	N
Only	N
"	N
solution	N
"	N
I	N
found	N
so	N
far	N
,	N
is	N
to	N
re	N
implement	N
a	N
md5	N
method	N
via	N
JSNI	N
as	N
described	N
here	N
:	N
http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ad09475a9944c9f8	N
There	N
is	N
an	N
existing	N
user	N
extension	N
for	N
Ext-JS	N
,	N
but	N
I	N
couldn't	N
find	N
anything	N
for	N
GWT-Ext	N
:	N
http://extjs.com/forum/showthread.php?p=133516	N
Does	N
anybody	N
know	N
a	N
more	N
elegant	N
/	N
simple	N
way	N
to	N
solve	N
this	N
problem	N
?	N
Maybe	N
I	N
should	N
use	N
something	N
else	N
instead	N
of	N
md5	N
to	N
make	N
sure	N
the	N
passwords	N
are	N
encrypted	N
?	N
Cheers	N
Frank	N

Personally	N
,	N
I	N
would	N
say	N
you're	N
doing	N
it	N
wrong	N
.	N
I	N
wouldn't	N
hash	N
a	N
password	N
on	N
the	N
client	N
side	N
(	N
which	N
is	N
what	N
GWT	N
is	N
)	N
.	N
If	N
you	N
hash	N
your	N
password	N
,	N
you	N
will	N
undoubtedly	N
want	N
to	N
salt	N
it	N
,	N
otherwise	N
you	N
will	N
be	N
susceptible	N
to	N
rainbow	N
attacks	N
.	N
If	N
you	N
hash	N
+	N
salt	N
it	N
on	N
the	N
client	N
side	N
,	N
your	N
salt	N
will	N
be	N
accessible	N
to	N
your	N
users	N
.	N
If	N
I	N
were	N
you	N
,	N
I	N
would	N
hash	N
+	N
salt	N
your	N
password	N
on	N
the	N
server	N
side	N
.	N
This	N
will	N
allow	N
you	N
to	N
use	N
your	N
standard	N
Java	N
code	N
to	N
perform	N
your	N
MD5	N
hash	N
.	N
My	N
2	N
cents	N
.	N
-JP	N

Its	N
not	N
a	N
bad	N
scheme	N
if	N
he	N
does	N
something	N
like	N
cram-md5	N
on	N
the	N
client	N
side	N
,	N
where	N
the	N
client	N
computes	N
a	N
hmac	N
(	N
md5	N
hash	N
plus	N
a	N
nonce	N
salt	N
)	N
and	N
sends	N
it	N
to	N
the	N
server	N
.	N
The	N
down	N
side	N
is	N
that	N
the	N
server	N
needs	N
clear	N
text	N
password	N
to	N
check	N
the	N
hmac	N
.	N

good	N
point	N
about	N
the	N
rainbow	N
attacks	N
,	N
didn't	N
knew	N
about	N
this	N
before	N
.	N
I	N
also	N
solved	N
it	N
by	N
doing	N
the	N
encryption	N
on	N
the	N
server	N
side	N
,	N
but	N
the	N
idea	N
was	N
,	N
that	N
I	N
wanted	N
to	N
encrypt	N
the	N
password	N
,	N
before	N
sending	N
it	N
to	N
the	N
server	N
,	N
as	N
we	N
currently	N
only	N
use	N
http	N
and	N
no	N
https	N
.	N

GWT	N
is	N
client-side	N
and	N
server	N
side	N
.	N
Other	N
than	N
that	N
,	N
the	N
post	N
is	N
good	N
advice	N
.	N
Don't	N
hash	N
it	N
on	N
the	N
client	N
side	N
.	N
Have	N
a	N
look	N
at	N
http://www.owasp.org/index.php/Hashing_Java	N
.	N

Another	N
idea	N
that	N
may	N
fit	N
your	N
need	N
is	N
something	N
called	N
zero	N
knowledge	N
auth	N
.	N
(	N
Ie	N
.	N
the	N
server	N
never	N
needs	N
to	N
know	N
the	N
user's	N
plain	N
text	N
password	N
.	N
)	N
Basically	N
,	N
when	N
setting	N
the	N
initial	N
password	N
,	N
the	N
client	N
hashes	N
the	N
user's	N
password	N
N	N
times	N
(	N
where	N
N	N
is	N
a	N
largish	N
number	N
like	N
1000	N
)	N
,	N
and	N
then	N
sends	N
that	N
final	N
hash	N
to	N
the	N
server	N
along	N
with	N
N	N
.	N
The	N
server	N
stores	N
the	N
hash	N
and	N
N	N
.	N
Later	N
,	N
when	N
the	N
user	N
wants	N
to	N
authenticate	N
,	N
the	N
server	N
tells	N
the	N
client	N
N-1	N
,	N
and	N
the	N
client	N
hashes	N
the	N
password	N
the	N
user	N
types	N
N-1	N
times	N
and	N
sends	N
that	N
to	N
the	N
server	N
.	N
The	N
server	N
does	N
1	N
more	N
hash	N
on	N
the	N
received	N
hash	N
,	N
and	N
(	N
hopefully	N
)	N
gets	N
the	N
stored	N
hash	N
.	N
The	N
server	N
then	N
stores	N
the	N
N-1	N
hash	N
and	N
N-1	N
number	N
.	N
Each	N
time	N
the	N
user	N
authenticates	N
,	N
the	N
server	N
decrements	N
the	N
stored	N
N	N
and	N
saves	N
the	N
previous	N
hash	N
.	N
When	N
N	N
gets	N
down	N
to	N
0	N
,	N
the	N
user	N
must	N
choose	N
and	N
set	N
a	N
new	N
password	N
.	N
The	N
server	N
must	N
ensure	N
that	N
it	N
never	N
asks	N
for	N
the	N
same	N
iteration	N
,	N
otherwise	N
it	N
is	N
vulnerable	N
to	N
a	N
replay	N
.	N
You	N
can't	N
really	N
enforce	N
that	N
condition	N
from	N
the	N
client	N
side	N
because	N
the	N
client	N
(	N
especially	N
a	N
browser	N
)	N
can't	N
reliably	N
keep	N
track	N
of	N
the	N
last	N
N	N
.	N

Very	N
interesting	N
idea	N
,	N
and	N
never	N
thought	N
of	N
that	N
before	N
.	N
Doesn't	N
really	N
fit	N
in	N
the	N
current	N
solution	N
,	N
but	N
I	N
will	N
keep	N
it	N
in	N
mind	N
for	N
future	N
reference	N
,	N
thanks	N
:-)	N

Interesting	N
idea	N
so	N
I	N
spent	N
some	N
time	N
thinking	N
about	N
it	N
,	N
but	N
it	N
is	N
vulnerable	N
to	N
a	N
man-in-the-middle	N
attack	N
.	N
On	N
an	N
authentication	N
request	N
,	N
the	N
server	N
sends	N
some	N
number	N
M	N
.	N
The	N
attacker	N
sends	N
(	N
M-1	N
)	N
to	N
the	N
client	N
,	N
and	N
receives	N
hash	N
(	N
M-1	N
)	N
back	N
.	N
The	N
attacker	N
tries	N
to	N
authenticate	N
again	N
,	N
receives	N
challenge	N
(	N
M-1	N
)	N
from	N
the	N
server	N
and	N
responds	N
with	N
hash	N
(	N
M-1	N
)	N
.	N
The	N
attacker	N
is	N
now	N
authenticated	N
.	N

yes	N
,	N
that	N
does	N
sound	N
like	N
an	N
issue	N
.	N
My	N
first	N
thought	N
would	N
be	N
to	N
require	N
the	N
server	N
to	N
not	N
reuse	N
M	N
after	N
issuing	N
it	N
during	N
a	N
challenge	N
to	N
the	N
client	N
.	N
However	N
,	N
the	N
larger	N
issue	N
remains	N
that	N
Mallory	N
could	N
tell	N
the	N
client	N
M-100	N
,	N
collect	N
the	N
hash	N
(	N
M-100	N
)	N
from	N
the	N
client	N
,	N
and	N
then	N
login	N
up	N
to	N
100	N
times	N
with	N
the	N
intercepted	N
hash	N
.	N
I'll	N
have	N
to	N
go	N
see	N
if	N
the	N
project	N
that	N
I	N
first	N
encountered	N
this	N
in	N
found	N
the	N
same	N
issues	N
and	N
dealt	N
with	N
it	N
or	N
abandoned	N
zero	N
knowledge	N
auth	N
.	N

I	N
think	N
you're	N
always	N
going	N
to	N
be	N
vulnerable	N
to	N
a	N
man	N
in	N
the	N
middle	N
attack	N
.	N
Keyloggers	N
too	N
.	N
Also	N
drunken	N
confessions	N
of	N
passwords	N
.	N
We	N
can	N
only	N
raise	N
the	N
bar	N
so	N
far	N
with	N
reasonable	N
coding	N
efforts	N
.	N

You	N
can	N
use	N
gwt-crypto	N
to	N
generate	N
SHA-1	N
hashes	N
on	N
the	N
client	N
side	N
using	N
:	N

You	N
should	N
never	N
use	N
an	N
md5	N
or	N
other	N
hash	N
functions	N
for	N
password	N
encryption	N
.	N
See	N
http://codahale.com/how-to-safely-store-a-password	N
/	N

