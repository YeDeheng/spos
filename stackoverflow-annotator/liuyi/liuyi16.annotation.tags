1228024		Do Applet JSObject javascript calls serialize ?	V N ^ ^ V N ,		Thu Sep 03 2015 19:41:50 GMT+0800 (Malay Peninsula Standard Time)
1228024		Do applet javascript calls serialize in any proper way ? I'm considering implementing a model in which two threads send off javascript commands . One responds to requests from the browser ( js ) , and the other hits the browser periodically . My question is this : what happens if these two javascript requests collide ? I'm worried about concurrent javascript requests , as intuition leads me to believe that one of the calls will fail nondeterministically .	V N ^ V N P D A N , L V V D N P D $ N V T ^ N , O V P N P D N , ^ , , & D A V D N R , D N V D , O V P D $ ^ N V , L A P A ^ N , P N V O P V D $ P D N V V R ,		Thu Sep 03 2015 19:41:50 GMT+0800 (Malay Peninsula Standard Time)
1228024		Javascript is single-threaded . Only one block of code can be executing at any given time ; any other event , method , etc . that fires will wait until the currently executing code terminates . Google Chrome's javascript engine may be an exception - I recall them mentioning some kind of multi-threaded javascript support in their features , but I'm unsure how it works . In IE 6 , the browser UI will actually become unresponsive while JS code is running ( if you stop at a breakpoint with keyword ' debugger ' , or have IE set to debug , for example ) .	^ V A , R $ N P N V V V P D V N , D A N , N , G , O V V V P D R V N V , ^ Z A N V V D N , O V O V D N P A ^ N P D N , & L A R O V , P ^ $ , D N N V R V A P ^ N V V , P O V P D N P N , N , , & V ^ V P V , P N , ,		Thu Sep 03 2015 19:41:50 GMT+0800 (Malay Peninsula Standard Time)
1228024		Serialize ? Do you mean synchronize ? JSObject works by passing primitives to a single JSContext JNI NPAPI wrapper which acts on the DOM in the underlying browser implementation . Are you referring to the passing of primitives through JNI ? I don't know much about how chrome's JS engine works , but I assume that since the liveconnect NPAPI in chrome is the same as the others , the ability to write multithreaded javascript has nothing to do with multithreaded JSObject access . The affected code extends the same abstract JSObject class that firefox uses . There are several implementations of JSObject / liveconnect -- a few for netscape / firefox and one for ie ( ocx ) . All behave differently as far as multiple threads go . DOM access isn't threadsafe in general as far as liveconnect is concerned . So , officially , multiple threads accessing the DOM is undefined . If you manage to actually access the DOM through something other than code scoped in DOMService.run() , you'll get crazy deadlocks and race conditions . So , basically , you need all of your java threads to post all DOMActions to your DOM access dispatch thread only .	V , V O V V , ^ V P V N P D A ^ ^ ^ N D V P D ^ P D A N N , V O V P D V P N P ^ , O V V R P R Z ^ N V , & O V O P D N ^ P N V D A P D N , D N P V A N V N P V P A ^ N , D A N V D A A N N P ^ V , X V A N P ^ , N , D A P ^ , ^ & $ P ^ , G , , X V R R R R A N V , ^ N V A P A P R P N V A , P , R , A N V D ^ V A , P O V P R V D ^ P N R P N N P ^ , L V A N & N N , P , R , O V R P D N N P V D ^ P D ^ N N N R ,		Thu Sep 03 2015 19:41:50 GMT+0800 (Malay Peninsula Standard Time)
