Do	V
Applet	^
JSObject	^
javascript	^
calls	V
serialize	^
?	,

Do	V
applet	V
javascript	N
calls	V
serialize	V
in	P
any	D
proper	A
way	N
?	,
I'm	L
considering	V
implementing	V
a	D
model	N
in	P
which	D
two	$
threads	N
send	V
off	T
javascript	D
commands	N
.	,
One	O
responds	V
to	P
requests	N
from	P
the	D
browser	N
(	E
js	E
)	E
,	,
and	&
the	D
other	A
hits	N
the	D
browser	N
periodically	R
.	,
My	D
question	N
is	V
this	D
:	,
what	O
happens	V
if	P
these	D
two	$
javascript	A
requests	N
collide	N
?	,
I'm	L
worried	A
about	P
concurrent	A
javascript	N
requests	N
,	,
as	P
intuition	N
leads	V
me	O
to	P
believe	V
that	D
one	$
of	P
the	D
calls	N
will	V
fail	V
nondeterministically	R
.	,

Javascript	^
is	V
single-threaded	V
.	,
Only	R
one	$
block	N
of	P
code	N
can	V
be	V
executing	V
at	P
any	D
given	V
time	N
;	,
any	D
other	A
event	N
,	,
method	N
,	,
etc	G
.	,
that	O
fires	V
will	V
wait	V
until	P
the	D
currently	R
executing	V
code	N
terminates	V
.	,
Google	^
Chrome's	Z
javascript	A
engine	N
may	V
be	V
an	D
exception	N
-	,
I	O
recall	V
them	O
mentioning	V
some	D
kind	N
of	P
multi-threaded	V
javascript	N
support	N
in	P
their	D
features	N
,	,
but	&
I'm	L
unsure	A
how	R
it	O
works	V
.	,
In	P
IE	^
6	$
,	,
the	D
browser	^
UI	^
will	V
actually	R
become	V
unresponsive	A
while	P
JS	^
code	N
is	V
running	V
(	,
if	P
you	O
stop	V
at	P
a	D
breakpoint	N
with	P
keyword	^
'	,
debugger	N
'	,
,	,
or	&
have	V
IE	^
set	V
to	P
debug	N
,	,
for	P
example	N
)	,
.	,

Serialize	^
?	,
Do	V
you	O
mean	V
synchronize	V
?	,
JSObject	N
works	V
by	P
passing	V
primitives	N
to	P
a	D
single	A
JSContext	^
JNI	^
NPAPI	^
wrapper	N
which	D
acts	N
on	P
the	D
DOM	N
in	P
the	D
underlying	A
browser	N
implementation	N
.	,
Are	V
you	O
referring	V
to	P
the	D
passing	V
of	P
primitives	N
through	P
JNI	^
?	,
I	O
don't	V
know	V
much	R
about	P
how	R
chrome's	Z
JS	^
engine	N
works	V
,	,
but	&
I	O
assume	V
that	O
since	P
the	D
liveconnect	N
NPAPI	^
in	P
chrome	N
is	V
the	D
same	A
as	P
the	D
others	N
,	,
the	D
ability	N
to	P
write	V
multithreaded	V
javascript	N
has	V
nothing	N
to	P
do	V
with	P
multithreaded	D
JSObject	N
access	N
.	,
The	D
affected	A
code	N
extends	V
the	D
same	A
abstract	A
JSObject	N
class	N
that	P
firefox	^
uses	V
.	,
There	X
are	V
several	A
implementations	N
of	P
JSObject	^
/	,
liveconnect	N
--	,
a	D
few	A
for	P
netscape	^
/	,
firefox	^
and	&
one	$
for	P
ie	^
(	E
ocx	E
)	E
.	,
All	X
behave	V
differently	R
as	R
far	R
as	R
multiple	A
threads	N
go	V
.	,
DOM	A
access	N
isn't	V
threadsafe	V
in	P
general	^
as	P
far	R
as	P
liveconnect	O
is	V
concerned	A
.	,
So	P
,	,
officially	R
,	,
multiple	A
threads	N
accessing	V
the	D
DOM	N
is	V
undefined	A
.	,
If	P
you	O
manage	V
to	P
actually	R
access	V
the	D
DOM	N
through	P
something	N
other	A
than	P
code	N
scoped	N
in	P
DOMService.run()	^
,	,
you'll	L
get	V
crazy	A
deadlocks	^
and	&
race	N
conditions	N
.	,
So	P
,	,
basically	R
,	,
you	O
need	V
all	R
of	P
your	D
java	N
threads	N
to	P
post	N
all	D
DOMActions	^
to	P
your	D
DOM	N
access	N
dispatch	N
thread	N
only	R
.	,

