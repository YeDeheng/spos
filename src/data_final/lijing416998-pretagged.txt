Is	V
Google	^
Web	^
Toolkit	^
useful	A
to	P
develop	V
complex	A
javascripts	N
?	,

Iam	V
a	D
great	A
fan	N
of	P
javascript	^
frameworks	^
especially	R
jQuery	A
.	,
I	O
have	V
always	R
wanted	V
to	P
design	N
sites	N
like	V
"	,
plurk.com	!
"	,
but	&
i	O
know	V
that	P
it	O
needs	V
very	R
huge	A
lines	N
of	P
javascript.so	N
that	O
shut	V
me	O
off.But	V
since	P
i	O
came	V
to	P
know	V
GWT	^
,	,
i	O
really	R
want	V
to	P
test	N
it	O
out	T
and	&
want	V
to	P
ask	V
you	O
if	P
it	O
makes	V
our	D
job	N
easier	A
to	P
develop	V
complex	A
things	N
than	P
with	P
the	D
javascript	N
or	&
its	L
frameworks	^
.	,
Which	^
one	$
would	V
you	O
prefer	V
?	,

With	P
GWT	^
,	,
you're	L
not	R
actually	R
writing	V
JavaScript	^
;	,
it's	L
entire	A
value	N
proposition	N
is	V
that	P
you	O
can	V
write	V
Java	^
that	P
it	O
will	V
compile	V
down	T
to	P
JavaScript	^
for	P
you	O
.	,

ya	!
i	O
know	V
.	,
but	&
i	O
just	R
want	V
to	P
know	V
,	,
does	V
that	O
simplify	V
the	D
process	N
of	P
developing	V
complex	A
javascripts	N
-	,
very	R
huge	A
lines	N
of	P
javascript	D
code	N
?	,

I	O
guess	V
if	P
you	O
trust	V
that	D
google	^
will	V
do	V
it	O
better	R
than	P
you	O
would	V
and	&
you	O
know	V
your	D
Java	^
it	^
*	,
could	V
*	,
do	V
-	,
personally	R
I'm	L
against	P
it	O
,	,
but	&
it	O
probably	R
has	V
niche	N
value	N
for	P
someone	O

No	!
.	,
It	O
doesn't	V
.	,
It	O
doesn't	V
remove	V
the	D
complexity	N
,	,
it	O
just	R
makes	V
it	O
possible	R
for	P
you	O
to	P
deal	N
with	P
it	O
from	P
a	D
Java	^
Perspective	^
.	,
Since	P
that	O
gives	V
you	O
all	X
the	D
Tooling	N
available	A
from	P
Java	^
...	,
that	O
alone	R
might	V
make	V
it	O
worthwhile	A
.	,
JavaScript	^
IDEs	^
are	V
getting	V
better	R
and	&
better	R
though	P
,	,
and	&
typically	R
if	P
you're	L
using	V
a	D
Framework	^
like	P
jQuery	^
or	&
Prototype	^
,	,
then	R
you're	L
probably	R
going	V
to	P
find	V
it	O
easier	A
than	P
dealing	V
with	P
a	D
heavy	A
weight	N
abstraction	N
layer	N
like	P
GWT	^
.	,
My	D
personal	A
preference	N
is	V
to	P
take	V
the	D
pure	A
JavaScript	N
approach	N
,	,
but	&
that's	L
because	P
I	O
like	V
being	V
able	A
to	P
work	V
more	R
closely	R
to	P
metal	N
,	,
and	&
I'm	L
disciplined	V
enough	A
to	P
tame	V
my	D
JavaScript	N
cats	N
.	,

Yes	!
,	,
it	O
does	V
,	,
since	P
you'll	L
be	V
using	V
Java	^
and	&
not	R
Javascript	A
.	,
Superb	^
IDEs	^
,	,
static	A
code	N
analysis	N
,	,
searching	V
and	&
refactoring	V
-	,
all	X
this	D
will	V
make	V
your	D
life	N
much	R
easier	A
on	P
large	A
projects	N
.	,

Few	A
things	N
scare	V
me	O
like	V
"	,
generated	V
Javascript	^
"	,
.	,
The	^
Law	^
of	P
Leaky	^
Abstractions	^
has	V
got	V
to	P
be	V
doubly	R
true	A
in	P
these	D
cases	N
.	,
Writing	V
effective	A
cross-browser	N
javascript	N
is	V
a	D
tricky	A
process	N
of	P
continuous	A
refinement	N
.	,
Trying	V
to	P
decipher	^
where	R
some	D
generated	V
,	,
obscured	A
Javascript	N
is	V
going	V
wrong	N
is	V
a	D
major	A
headache	N
.	,
It's	L
bad	A
enough	N
fixing	V
bugs	V
in	P
the	D
pure	A
JS	N
libraries	N
.	,
To	P
me	O
,	,
GWT	O
is	V
a	D
trick	N
aimed	V
at	P
allowing	V
backend	D
developers	N
to	P
write	V
front-end	^
,	,
in-browser	A
code	N
.	,
Unfortunately	R
,	,
the	D
realities	N
of	P
modern	A
web	N
apps	N
mean	V
you	O
just	R
have	V
to	P
know	V
Javascript	^
and	&
the	D
DOM	N
.	,
Something's	L
going	V
to	P
break	V
,	,
and	&
you're	L
going	V
to	P
need	V
to	P
know	V
why	R
.	,
I	O
think	V
you're	L
better	R
off	O
picking	V
a	D
good	A
javascript	N
library	N
like	P
jquery	A
or	&
prototype	N
,	,
and	&
learning	V
that	O
well	R
.	,
Those	D
libraries	N
abstract	V
away	R
the	D
sort	N
of	P
stuff	V
that	O
SHOULD	V
be	V
abstracted	V
away	R
and	&
is	V
unlikely	R
to	P
break	V
in	P
edge	N
cases	N
,	,
like	V
array	N
operations	N
and	&
AJAX	^
requests	N
.	,

Do	V
you	O
think	V
the	D
same	A
way	N
about	P
generated	V
Assembler	^
?	,
Handling	V
all	X
those	D
differences	N
between	P
different	A
Processor	N
architecures	N
?	,
I	O
am	V
not	R
saying	V
,	,
that	D
GWT	V
is	V
necessarily	R
there	R
yet	R
.	,
But	&
Generating	V
one	$
language	N
out	P
of	P
another	O
is	V
nothing	R
scary	A
at	P
all	X
.	,

the	D
problem	N
is	V
that	O
since	P
JS	^
is	V
a	D
high-level	A
language	N
,	,
there	X
are	V
several	A
features	N
you'd	L
like	V
to	P
use	V
.	,
for	P
example	N
a	D
hashtable	N
.	,
it's	L
not	R
exactly	R
the	D
same	A
semantics	N
as	P
Java	^
maps	N
,	,
so	P
they	O
write	V
an	D
emulation	N
layer	N
.	,
therefore	&
they're	L
no	R
longer	A
usable	A
as	P
JS	^
objects	N
.	,
same	A
for	P
other	A
things	N
...	,

Another	D
difference	N
is	V
that	O
,	,
besides	P
being	V
a	D
much	A
more	R
mature	A
technology	N
,	,
assembler	^
is	V
very	R
highly	R
tuned	A
towards	P
a	D
single	A
architecture	N
.	,
The	D
same	A
cannot	N
be	V
said	V
of	P
Javascript	^
,	,
which	O
must	V
support	N
scores	N
of	P
different	A
browsers	N
and	&
version	N
.	,

not	R
to	P
mention	V
that	P
all	R
modern	A
cpu	N
instruction	N
sets	N
are	V
designed	V
for	P
the	D
compiler	N
,	,
not	R
for	P
a	D
human	N
programmer	N
;	,
just	R
like	P
bytecodes	O
are	V
designed	V
with	P
a	D
specific	A
language	N
in	P
mind	N
.	,

I	O
suspect	V
you've	L
never	R
used	V
GWT	V
in	P
a	D
large	A
scale	N
project	N
.	,
It	O
doesn't	V
make	V
cross	V
browser	N
stuff	N
harder	R
,	,
it	O
makes	V
it	O
easier	A
.	,
People	N
worry	V
about	P
going	V
through	P
generated	V
javascript	N
,	,
but	&
the	D
truth	N
is	V
you	O
never	R
have	V
to	P
,	,
just	R
like	P
you	O
never	R
have	V
to	P
look	V
at	P
java	^
byte	N
code	N
,	,
because	P
the	D
compiler	N
is	V
top-notch	A
.	,

disregarding	V
whether	P
compiled	V
js	O
is	V
good	A
or	&
bad	A
,	,
gwt	O
offers	V
hosted	V
mode	N
debugging	V
,	,
and	&
simple	A
unit	N
test	N
integration	N
,	,
which	O
is	V
a	D
must	V
in	P
large	A
projects	N
.	,
However	R
,	,
there	X
are	V
some	D
growing	V
pains	N
involved	V
with	P
gwt	^
,	,
but	&
nothing	N
too	R
bad	A
.	,
GWT	O
is	V
more	R
suitable	A
for	P
large	A
scale	N
ajax	N
app	N
vs	P
medium	A
scale	N
ones	N
.	,

Using	V
GWT	O
is	V
really	R
no	R
different	A
then	R
using	V
jQuery	A
or	&
Prototype	^
.	,
If	P
there	X
is	V
a	D
bug	N
in	P
the	D
library	N
you	O
are	V
using	V
,	,
it	O
will	V
make	V
your	D
life	N
difficult	A
.	,
The	D
same	A
problems	N
exist	V
for	P
GWT	^
.	,
The	D
difference	N
is	V
that	D
GWT	N
has	V
Google's	Z
developers	N
backing	V
it	O
up	T
,	,
not	R
just	R
the	D
few	A
people	N
behind	P
the	D
other	A
libraries	N
.	,

I'm	L
working	V
on	P
a	D
project	N
that	P
has	V
used	V
GWT	V
to	P
pretty	R
good	A
effect	N
.	,
It's	L
a	D
good	A
choice	N
for	P
us	O
since	P
we're	L
all	R
primarily	R
Java	^
developers	N
working	V
on	P
internal	A
tools	N
.	,
I	O
can't	V
speak	V
to	P
how	R
useful	A
it	O
is	V
for	P
large	A
end-user	N
sites	N
.	,
One	$
advantage	N
I	O
particularly	R
appreciate	V
is	V
the	D
seamless	A
object	N
serialization	N
and	&
deserialization	N
.	,
Not	R
only	A
are	P
the	D
details	N
of	P
XML-RPC	^
abstracted	V
away	R
,	,
but	&
since	P
the	D
same	A
Java	^
code	N
is	V
compiled	V
to	P
byte	A
code	N
for	P
the	D
server	N
and	&
javascript	V
for	P
the	D
browser	N
,	,
you	O
can	V
code	N
almost	R
as	R
if	P
the	D
server	N
and	&
client	N
were	V
running	V
in	P
separate	A
class	N
loaders	N
in	P
the	D
same	A
JVM	N
.	,
For	P
instance	N
,	,
you	O
can	V
construct	V
a	D
Java	^
object	N
on	P
the	D
server	N
,	,
send	V
it	O
to	P
the	D
browser	N
as	P
the	D
return	N
value	N
from	P
an	D
RPC	^
service	N
call	V
and	&
the	D
browser	N
code	N
can	V
then	R
use	V
the	D
identical	A
Java	^
class	N
to	P
manipulate	V
the	D
object	N
you	O
just	R
returned	V
.	,
Likewise	R
,	,
parameters	N
to	P
RPC	^
calls	V
can	V
be	V
constructed	V
as	P
Java	^
objects	N
,	,
with	P
the	D
server	N
receiving	V
an	D
identical	A
Java	^
object	N
on	P
the	D
other	A
end	N
.	,
All	X
this	D
without	P
mucking	V
about	P
in	P
the	D
details	N
of	P
(	E
de	E
)	E
serialization	N
.	,

GWT	O
doesnt	V
actually	R
use	V
XML-RPC	^
,	,
but	&
yea	!
,	,
the	D
rest	N
of	P
the	D
post	N
is	V
my	D
sentiments	N
exactly	R
.	,

thanks	V
a	D
lot	N
:)	E
that	O
was	V
great	A
.	,

