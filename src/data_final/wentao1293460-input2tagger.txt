ESRI	N
frameworks	N
:	N
java	N
vs	N
javascript	N

I'm	N
about	N
to	N
develop	N
a	N
web	N
mapping	N
application	N
with	N
ESRI	N
Products	N
like	N
ArcGIS	N
Server	N
and	N
Image	N
Server	N
.	N
I	N
can't	N
find	N
a	N
good	N
comparison	N
between	N
the	N
Java	N
Web	N
ADF	N
and	N
the	N
Javascript	N
Framework	N
.	N
They're	N
of	N
course	N
different	N
because	N
one	N
is	N
a	N
full	N
environment	N
and	N
the	N
other	N
is	N
only	N
client	N
side	N
but	N
it's	N
much	N
more	N
concise	N
and	N
the	N
step	N
to	N
start	N
is	N
minimal	N
.	N
Another	N
problem	N
is	N
that	N
the	N
Java	N
Web	N
ADF	N
is	N
not	N
compatible	N
with	N
our	N
current	N
application	N
server	N
(	N
JBoss	N
4.2	N
.	N
2	N
)	N
and	N
require	N
an	N
old	N
4.0	N
.	N
2	N
version	N
.	N
Someone	N
out	N
there	N
has	N
experience	N
that	N
can	N
help	N
me	N
?	N
Many	N
thanks	N
.	N

Seems	N
that	N
everybody	N
hate	N
the	N
Java	N
Web	N
ADF	N
,	N
http://www.spatiallyadjusted.com/2008/01/30/esris-web-adf-is-one-horrific-development-platform	N
/	N

I	N
don't	N
have	N
direct	N
experience	N
with	N
the	N
Java	N
Web	N
ADF	N
,	N
but	N
I	N
have	N
worked	N
with	N
the	N
.	N
Net	N
version	N
and	N
am	N
now	N
working	N
with	N
the	N
Flex	N
API	N
.	N
The	N
main	N
problem	N
with	N
the	N
Web	N
ADFs	N
that	N
I	N
have	N
seen	N
and	N
heard	N
from	N
other	N
developers	N
is	N
that	N
they're	N
very	N
cumbersome	N
to	N
use	N
.	N
The	N
newer	N
frameworks	N
(	N
Javascript	N
,	N
Silverlight	N
,	N
and	N
Flex	N
)	N
are	N
much	N
lighter-weight	N
,	N
easier	N
to	N
use	N
,	N
and	N
you	N
can	N
up	N
to	N
speed	N
much	N
quicker	N
with	N
them	N
.	N
For	N
example	N
,	N
a	N
test	N
application	N
I	N
wrote	N
withg	N
the	N
.	N
Net	N
ADF	N
took	N
me	N
almost	N
three	N
weeks	N
before	N
I	N
gave	N
up	N
on	N
it	N
.	N
At	N
that	N
time	N
I	N
gave	N
up	N
using	N
the	N
ADF	N
and	N
just	N
did	N
WebService	N
calls	N
against	N
ArcGIS	N
Server	N
since	N
that	N
was	N
easier	N
to	N
do	N
than	N
to	N
try	N
to	N
figure	N
out	N
the	N
ADF	N
.	N
Contrast	N
that	N
to	N
using	N
the	N
Flex	N
API	N
on	N
a	N
similar	N
project	N
,	N
which	N
I	N
just	N
started	N
last	N
week	N
,	N
and	N
I	N
have	N
an	N
almost	N
complete	N
app	N
as	N
of	N
this	N
morning	N
.	N
I	N
would	N
avoid	N
the	N
ADFs	N
and	N
go	N
with	N
the	N
Javascript	N
API	N
.	N

What	N
you	N
need	N
depends	N
on	N
what	N
you	N
want	N
.	N
If	N
you	N
want	N
to	N
create	N
just	N
a	N
viewer	N
(	N
as	N
opposed	N
to	N
an	N
application	N
in	N
which	N
users	N
can	N
add	N
(	N
e.g.	N
draw	N
)	N
geographical	N
data	N
)	N
,	N
by	N
all	N
means	N
,	N
use	N
the	N
javascript	N
api	N
!	N
I've	N
been	N
working	N
with	N
the	N
web	N
adf	N
(	N
v9.3	N
)	N
for	N
some	N
time	N
now	N
and	N
am	N
still	N
frustrated	N
at	N
every	N
turn	N
.	N
Primarily	N
for	N
its	N
lack	N
of	N
proper	N
documentation	N
,	N
but	N
also	N
for	N
various	N
other	N
reasons	N
,	N
such	N
as	N
these	N
:	N
It	N
requires	N
you	N
to	N
use	N
the	N
jsf	N
reference	N
implementation	N
,	N
but	N
it	N
does	N
not	N
allow	N
you	N
to	N
use	N
some	N
of	N
its	N
basic	N
functionality	N
,	N
such	N
as	N
(	N
f	N
:)	N
subviews	N
.	N
This	N
makes	N
it	N
impossible	N
to	N
use	N
any	N
templating	N
systems	N
,	N
such	N
as	N
facelets	N
.	N
Lots	N
of	N
stuff	N
you	N
want	N
to	N
be	N
able	N
to	N
configure	N
is	N
hardcoded	N
in	N
esri's	N
jar	N
files	N
.	N
For	N
example	N
,	N
the	N
map	N
MUST	N
be	N
directly	N
under	N
form	N
>	N
which	N
must	N
be	N
the	N
first	N
element	N
of	N
the	N
DOM	N
tree	N
.	N
If	N
not	N
,	N
map-movement	N
listeners	N
such	N
as	N
the	N
ContinueousPanListener	N
are	N
unable	N
to	N
find	N
the	N
map	N
and	N
hence	N
fail	N
at	N
updating	N
the	N
map	N
position	N
.	N
It's	N
impossible	N
to	N
code	N
your	N
jsp	N
pages	N
in	N
xml	N
style	N
,	N
since	N
the	N
web	N
adf	N
inlines	N
pieces	N
of	N
at	N
a	N
lot	N
of	N
places	N
in	N
your	N
code	N
,	N
with	N
xslt	N
.	N
Its	N
learning	N
curve	N
is	N
very	N
steep	N
and	N
without	N
the	N
proper	N
docs	N
,	N
you'll	N
be	N
looking	N
for	N
days	N
or	N
even	N
weeks	N
on	N
how	N
to	N
do	N
the	N
most	N
trivial	N
things	N
.	N
Some	N
of	N
these	N
end	N
up	N
to	N
be	N
downright	N
impossible	N
or	N
impractical	N
,	N
because	N
you're	N
not	N
adopting	N
esri's	N
mindset	N
.	N
The	N
default	N
interface	N
is	N
not	N
very	N
intuitive	N
.	N
You	N
may	N
still	N
end	N
up	N
doing	N
lots	N
of	N
work	N
in	N
javascript	N
to	N
get	N
the	N
way	N
the	N
application	N
draws	N
to	N
your	N
liking	N
.	N
The	N
undo	N
functionality	N
requires	N
a	N
versioned	N
database	N
,	N
which	N
is	N
impractical	N
/	N
impossible	N
for	N
application	N
that	N
serves	N
more	N
than	N
10	N
or	N
so	N
users	N
at	N
the	N
same	N
time	N
,	N
plus	N
,	N
the	N
round	N
trip	N
to	N
the	N
server	N
for	N
every	N
undo	N
action	N
is	N
a	N
waste	N
.	N
In	N
short	N
:	N
You	N
can	N
make	N
some	N
interesting	N
apps	N
and	N
if	N
you	N
know	N
your	N
stuff	N
,	N
there's	N
work	N
a	N
plenty	N
to	N
be	N
found	N
in	N
the	N
sector	N
,	N
but	N
if	N
its	N
just	N
for	N
'	N
some	N
project	N
'	N
,	N
I'd	N
switch	N
to	N
some	N
..	N
any	N
!	N
other	N
framework	N
,	N
such	N
as	N
openGeo	N
..	N

I	N
accepted	N
your	N
answer	N
because	N
is	N
the	N
most	N
complete	N
,	N
but	N
thanks	N
to	N
everybody	N
for	N
yours	N
time	N
.	N

Web	N
ADF	N
was	N
ESRI's	N
first	N
attempt	N
to	N
create	N
an	N
ArcGIS	N
Server	N
simplified	N
API	N
.	N
However	N
,	N
as	N
time	N
progressed	N
,	N
the	N
Web	N
ADF	N
ended	N
up	N
with	N
its	N
own	N
abstractions	N
that	N
were	N
as	N
complicated	N
as	N
the	N
"	N
standard	N
"	N
ArcGIS	N
Server	N
ArcObjects	N
API	N
and	N
not	N
as	N
powerful	N
.	N
Therefore	N
,	N
I	N
would	N
recommend	N
the	N
later	N
incarnations	N
...	N
javascript	N
,	N
flex	N
,	N
etc	N

Its	N
depends	N
on	N
the	N
requirements	N
.	N
I	N
java	N
web	N
adf	N
you	N
could	N
have	N
more	N
flexiblity	N
to	N
use	N
arcobjects	N
compared	N
to	N
java	N
script	N
api	N
.	N
i	N
am	N
using	N
.	N
net	N
adf	N
i	N
was	N
wanted	N
to	N
move	N
to	N
jsapi	N
.	N
but	N
due	N
to	N
limitation	N
of	N
arcobject	N
usage	N
in	N
jsapi	N
i	N
am	N
still	N
with	N
web	N
adf	N
.	N
I	N
think	N
still	N
jsapi	N
is	N
not	N
grown	N
as	N
compared	N
to	N
web	N
adf	N
.	N
for	N
just	N
viwer	N
small	N
task	N
js	N
api	N
is	N
fine	N
.	N
but	N
if	N
you	N
are	N
creating	N
complex	N
tasks	N
geoprocessing	N
then	N
its	N
worth	N
to	N
stick	N
with	N
web	N
adf	N
.	N

there	N
is	N
good	N
blog	N
post	N
on	N
ESRI	N
Developer	N
Blog	N
today	N
.	N
have	N
a	N
look	N
.	N

If	N
you	N
need	N
to	N
edit	N
geospatial	N
data	N
then	N
you	N
have	N
to	N
use	N
the	N
Web	N
ADF	N
which	N
is	N
access	N
to	N
the	N
ArcObjects	N
.	N
If	N
you	N
are	N
just	N
working	N
with	N
viewing	N
data	N
maybe	N
some	N
redlines	N
that	N
are	N
not	N
saved	N
to	N
your	N
geodatabase	N
then	N
JavaScript	N
API	N
works	N
nice	N
.	N
Geoprocessing	N
can	N
be	N
done	N
in	N
the	N
JSAPI	N
.	N
You	N
can	N
also	N
publish	N
models	N
and	N
use	N
them	N
in	N
the	N
JSAPI	N
.	N
I	N
hear	N
that	N
the	N
newer	N
APIs	N
-	N
JavaScript	N
API	N
will	N
have	N
the	N
ability	N
to	N
edit	N
in	N
the	N
near	N
future	N
.	N
As	N
is	N
mentioned	N
the	N
web	N
ADF	N
is	N
broad	N
and	N
fairly	N
complex	N
.	N
It	N
has	N
a	N
good	N
learning	N
curve	N
to	N
it	N
.	N
I	N
have	N
just	N
started	N
getting	N
my	N
head	N
around	N
it	N
and	N
figuring	N
out	N
the	N
logic	N
.	N
I	N
am	N
using	N
the	N
.	N
NET	N
ADF	N
v9.3.1	N
I	N
have	N
not	N
had	N
many	N
problems	N
with	N
it	N
once	N
I	N
started	N
figuring	N
out	N
the	N
API	N
.	N
It	N
is	N
not	N
for	N
the	N
casual	N
user	N
.	N

You	N
can	N
do	N
editing	N
via	N
the	N
JSAPI	N
using	N
a	N
geoprocessing	N
service	N
too	N
.	N
Version	N
2.0	N
(	N
due	N
out	N
with	N
ArcGIS	N
Server	N
9.4	N
)	N
will	N
have	N
editing	N
capabilities	N
built	N
in	N
.	N
That	N
said	N
,	N
if	N
a	N
plan	N
involves	N
exposing	N
editing	N
of	N
geospatial	N
data	N
via	N
a	N
public	N
facing	N
webpage	N
,	N
that	N
plan	N
needs	N
to	N
be	N
rethought	N
.	N
If	N
you	N
are	N
working	N
internally	N
,	N
ArcGIS	N
Engine	N
is	N
probably	N
a	N
better	N
option	N
.	N

Stay	N
far	N
,	N
far	N
away	N
from	N
the	N
Java	N
Web	N
ADF	N
.	N
I	N
would	N
rather	N
stick	N
hot	N
irons	N
in	N
my	N
eyes	N
than	N
develop	N
with	N
the	N
ADF	N
.	N
It	N
doesn't	N
work	N
well	N
with	N
other	N
JSF	N
frameworks	N
,	N
any	N
custom	N
functionality	N
results	N
in	N
you	N
trying	N
to	N
develop	N
javascript	N
-	N
but	N
only	N
by	N
first	N
embedding	N
the	N
javascript	N
within	N
XSL	N
page	N
fragments	N
.	N
It	N
is	N
cumbersome	N
,	N
confusing	N
,	N
but	N
-	N
at	N
least	N
it	N
is	N
slow	N
.	N
ESRI	N
is	N
not	N
recommending	N
the	N
Java	N
Web	N
ADF	N
for	N
any	N
new	N
applications	N
.	N

We've	N
just	N
gone	N
through	N
the	N
same	N
thing	N
and	N
it	N
would	N
appear	N
the	N
ESRI	N
REST	N
APIs	N
are	N
the	N
way	N
to	N
go	N
if	N
you	N
want	N
a	N
lightweight	N
services	N
based	N
application	N
with	N
a	N
'	N
rich	N
'	N
front	N
end	N
,	N
rather	N
than	N
the	N
ADF	N
bloat	N
.	N
There's	N
a	N
good	N
summary	N
of	N
all	N
the	N
ESRI	N
frameworks	N
on	N
their	N
UK	N
site	N
here	N
.	N

Editing	N
with	N
the	N
REST	N
API	N
and	N
the	N
client	N
API's	N
(	N
JS	N
,	N
Flex	N
,	N
Silverlight	N
)	N
will	N
be	N
available	N
at	N
version	N
10	N
(	N
verison	N
9.4	N
renamed	N
)	N
which	N
will	N
be	N
released	N
in	N
Summer	N
2010	N
.	N
This	N
thread	N
is	N
a	N
bit	N
old	N
now	N
,	N
but	N
I	N
concur	N
with	N
those	N
who	N
suggest	N
not	N
using	N
the	N
Java	N
ADF	N
.	N
Use	N
the	N
JavaScript	N
,	N
Flex	N
or	N
Silver	N
light	N
API's	N
as	N
they	N
scale	N
much	N
better	N
.	N
If	N
you	N
need	N
to	N
perform	N
GIS	N
actions	N
on	N
the	N
server	N
then	N
use	N
the	N
SOAP	N
API	N
in	N
a	N
custom	N
web	N
service	N
.	N
Only	N
look	N
at	N
ArcObjects	N
when	N
you	N
definitely	N
have	N
to	N
and	N
then	N
make	N
sure	N
you	N
use	N
a	N
Server	N
Object	N
Utility	N
or	N
extension	N
to	N
give	N
yourself	N
the	N
best	N
chance	N
of	N
making	N
a	N
online	N
application	N
that	N
runs	N
quickly	N
.	N
http://edndoc.esri.com/arcobjects/9.2/net_server_doc/developer/samples/web_applications/arcgis_simple_server_object_extension/8e8b2bf6-1877-4c48-80fe-266f5fa70f57.htm	N

