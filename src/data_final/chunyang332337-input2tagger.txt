Session	N
management	N
in	N
GWT	N
without	N
using	N
Java	N
on	N
the	N
server	N
?	N

I	N
am	N
using	N
GWT	N
for	N
my	N
client	N
side	N
application	N
.	N
I	N
am	N
not	N
using	N
GWT	N
/	N
Java	N
for	N
the	N
server	N
.	N
However	N
,	N
I	N
am	N
not	N
sure	N
how	N
I	N
can	N
handle	N
session	N
management	N
.	N
The	N
GWT	N
application	N
resides	N
on	N
one	N
page	N
,	N
all	N
server	N
calls	N
are	N
done	N
via	N
AJAX	N
.	N
If	N
a	N
session	N
expires	N
on	N
the	N
server	N
...	N
let's	N
assume	N
the	N
user	N
didn't	N
close	N
the	N
browser	N
,	N
but	N
left	N
the	N
application	N
open	N
,	N
how	N
could	N
my	N
server	N
notify	N
the	N
application	N
that	N
the	N
session	N
has	N
expired	N
and	N
that	N
the	N
client	N
side	N
portion	N
should	N
show	N
the	N
login	N
screen	N
again	N
?	N
What	N
is	N
meant	N
by	N
client	N
side	N
session	N
management	N
?	N
That	N
seems	N
inherently	N
insecure	N
.	N
I'm	N
not	N
looking	N
for	N
code	N
.	N
I'm	N
looking	N
for	N
ideas	N
,	N
techniques	N
,	N
potential	N
solutions	N
etc	N
.	N
I've	N
considered	N
Comet	N
http://en.wikipedia.org/wiki/Comet_(programming	N
)	N
,	N
but	N
that	N
doesn't	N
seem	N
like	N
that	N
will	N
work	N
very	N
well	N
without	N
using	N
Java	N
on	N
the	N
server	N
side	N
.	N
Maybe	N
,	N
I'm	N
wrong	N
?	N
I	N
don't	N
want	N
to	N
poll	N
the	N
server	N
either	N
.	N
Any	N
thoughts	N
or	N
insight	N
?	N

What	N
should	N
happen	N
if	N
the	N
session	N
expired	N
on	N
the	N
server-side	N
,	N
then	N
the	N
next	N
time	N
the	N
client	N
sends	N
a	N
request	N
to	N
the	N
server	N
,	N
it	N
will	N
either	N
create	N
a	N
new	N
session	N
,	N
or	N
,	N
more	N
likely	N
,	N
send	N
back	N
a	N
message	N
to	N
the	N
client	N
that	N
it	N
is	N
trying	N
to	N
access	N
a	N
page	N
without	N
a	N
session	N
,	N
and	N
send	N
them	N
to	N
the	N
login	N
screen	N
.	N
However	N
,	N
you	N
will	N
still	N
need	N
to	N
wait	N
until	N
the	N
client	N
sends	N
a	N
message	N
to	N
the	N
server	N
.	N

Without	N
knowing	N
how	N
you're	N
doing	N
your	N
RPC	N
is	N
working	N
,	N
its	N
hard	N
to	N
give	N
good	N
advice	N
.	N
If	N
your	N
AJAX	N
service	N
requires	N
a	N
user	N
to	N
be	N
authenticated	N
(	N
IE	N
have	N
a	N
valid	N
session	N
)	N
,	N
it	N
is	N
ok	N
to	N
just	N
send	N
a	N
401	N
error	N
saying	N
that	N
the	N
user	N
is	N
invalid	N
.	N
Client-side	N
can	N
interpret	N
the	N
401	N
error	N
as	N
a	N
message	N
that	N
it	N
should	N
set	N
the	N
user	N
up	N
for	N
re-authentication	N
.	N

I'm	N
not	N
using	N
RPC	N
,	N
the	N
GWT	N
request	N
object	N
is	N
just	N
a	N
wrapper	N
around	N
XMLHttpRequest	N
.	N
Great	N
idea	N
!	N
I've	N
never	N
thought	N
about	N
changing	N
the	N
http	N
status	N
code	N
.	N
I	N
may	N
end	N
up	N
using	N
this	N
.	N

We	N
handled	N
this	N
in	N
our	N
application	N
,	N
by	N
detecting	N
when	N
the	N
server	N
sent	N
back	N
a	N
redirect	N
to	N
the	N
login	N
screen	N
(	N
it	N
would	N
come	N
through	N
the	N
response	N
to	N
the	N
Ajax	N
call	N
)	N
,	N
and	N
popped	N
up	N
a	N
dialog	N
asking	N
the	N
user	N
for	N
their	N
password	N
again	N
,	N
but	N
pre-filled	N
their	N
username	N
.	N
We	N
then	N
posted	N
that	N
to	N
the	N
same	N
place	N
the	N
login	N
page	N
does	N
,	N
as	N
if	N
it	N
was	N
the	N
login	N
page	N
,	N
and	N
so	N
the	N
user	N
was	N
logged	N
into	N
this	N
new	N
session	N
automatically	N
.	N
Finally	N
we	N
just	N
re-submitted	N
the	N
ajax	N
call	N
again	N
,	N
so	N
it	N
was	N
a	N
seamless	N
process	N
to	N
the	N
user	N
(	N
eg	N
:	N
they	N
didn't	N
have	N
to	N
click	N
the	N
action	N
again	N
)	N
.	N
Since	N
we	N
stored	N
all	N
the	N
state	N
on	N
the	N
client	N
,	N
and	N
not	N
in	N
session	N
variables	N
we	N
didn't	N
have	N
any	N
problems	N
trying	N
to	N
persist	N
data	N
across	N
sessions	N
.	N

