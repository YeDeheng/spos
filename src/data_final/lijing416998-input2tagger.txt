Is	N
Google	N
Web	N
Toolkit	N
useful	N
to	N
develop	N
complex	N
javascripts	N
?	N

Iam	N
a	N
great	N
fan	N
of	N
javascript	N
frameworks	N
especially	N
jQuery	N
.	N
I	N
have	N
always	N
wanted	N
to	N
design	N
sites	N
like	N
"	N
plurk.com	N
"	N
but	N
i	N
know	N
that	N
it	N
needs	N
very	N
huge	N
lines	N
of	N
javascript.so	N
that	N
shut	N
me	N
off.But	N
since	N
i	N
came	N
to	N
know	N
GWT	N
,	N
i	N
really	N
want	N
to	N
test	N
it	N
out	N
and	N
want	N
to	N
ask	N
you	N
if	N
it	N
makes	N
our	N
job	N
easier	N
to	N
develop	N
complex	N
things	N
than	N
with	N
the	N
javascript	N
or	N
its	N
frameworks	N
.	N
Which	N
one	N
would	N
you	N
prefer	N
?	N

With	N
GWT	N
,	N
you're	N
not	N
actually	N
writing	N
JavaScript	N
;	N
it's	N
entire	N
value	N
proposition	N
is	N
that	N
you	N
can	N
write	N
Java	N
that	N
it	N
will	N
compile	N
down	N
to	N
JavaScript	N
for	N
you	N
.	N

ya	N
i	N
know	N
.	N
but	N
i	N
just	N
want	N
to	N
know	N
,	N
does	N
that	N
simplify	N
the	N
process	N
of	N
developing	N
complex	N
javascripts	N
-	N
very	N
huge	N
lines	N
of	N
javascript	N
code	N
?	N

I	N
guess	N
if	N
you	N
trust	N
that	N
google	N
will	N
do	N
it	N
better	N
than	N
you	N
would	N
and	N
you	N
know	N
your	N
Java	N
it	N
*	N
could	N
*	N
do	N
-	N
personally	N
I'm	N
against	N
it	N
,	N
but	N
it	N
probably	N
has	N
niche	N
value	N
for	N
someone	N

No	N
.	N
It	N
doesn't	N
.	N
It	N
doesn't	N
remove	N
the	N
complexity	N
,	N
it	N
just	N
makes	N
it	N
possible	N
for	N
you	N
to	N
deal	N
with	N
it	N
from	N
a	N
Java	N
Perspective	N
.	N
Since	N
that	N
gives	N
you	N
all	N
the	N
Tooling	N
available	N
from	N
Java	N
...	N
that	N
alone	N
might	N
make	N
it	N
worthwhile	N
.	N
JavaScript	N
IDEs	N
are	N
getting	N
better	N
and	N
better	N
though	N
,	N
and	N
typically	N
if	N
you're	N
using	N
a	N
Framework	N
like	N
jQuery	N
or	N
Prototype	N
,	N
then	N
you're	N
probably	N
going	N
to	N
find	N
it	N
easier	N
than	N
dealing	N
with	N
a	N
heavy	N
weight	N
abstraction	N
layer	N
like	N
GWT	N
.	N
My	N
personal	N
preference	N
is	N
to	N
take	N
the	N
pure	N
JavaScript	N
approach	N
,	N
but	N
that's	N
because	N
I	N
like	N
being	N
able	N
to	N
work	N
more	N
closely	N
to	N
metal	N
,	N
and	N
I'm	N
disciplined	N
enough	N
to	N
tame	N
my	N
JavaScript	N
cats	N
.	N

Yes	N
,	N
it	N
does	N
,	N
since	N
you'll	N
be	N
using	N
Java	N
and	N
not	N
Javascript	N
.	N
Superb	N
IDEs	N
,	N
static	N
code	N
analysis	N
,	N
searching	N
and	N
refactoring	N
-	N
all	N
this	N
will	N
make	N
your	N
life	N
much	N
easier	N
on	N
large	N
projects	N
.	N

Few	N
things	N
scare	N
me	N
like	N
"	N
generated	N
Javascript	N
"	N
.	N
The	N
Law	N
of	N
Leaky	N
Abstractions	N
has	N
got	N
to	N
be	N
doubly	N
true	N
in	N
these	N
cases	N
.	N
Writing	N
effective	N
cross-browser	N
javascript	N
is	N
a	N
tricky	N
process	N
of	N
continuous	N
refinement	N
.	N
Trying	N
to	N
decipher	N
where	N
some	N
generated	N
,	N
obscured	N
Javascript	N
is	N
going	N
wrong	N
is	N
a	N
major	N
headache	N
.	N
It's	N
bad	N
enough	N
fixing	N
bugs	N
in	N
the	N
pure	N
JS	N
libraries	N
.	N
To	N
me	N
,	N
GWT	N
is	N
a	N
trick	N
aimed	N
at	N
allowing	N
backend	N
developers	N
to	N
write	N
front-end	N
,	N
in-browser	N
code	N
.	N
Unfortunately	N
,	N
the	N
realities	N
of	N
modern	N
web	N
apps	N
mean	N
you	N
just	N
have	N
to	N
know	N
Javascript	N
and	N
the	N
DOM	N
.	N
Something's	N
going	N
to	N
break	N
,	N
and	N
you're	N
going	N
to	N
need	N
to	N
know	N
why	N
.	N
I	N
think	N
you're	N
better	N
off	N
picking	N
a	N
good	N
javascript	N
library	N
like	N
jquery	N
or	N
prototype	N
,	N
and	N
learning	N
that	N
well	N
.	N
Those	N
libraries	N
abstract	N
away	N
the	N
sort	N
of	N
stuff	N
that	N
SHOULD	N
be	N
abstracted	N
away	N
and	N
is	N
unlikely	N
to	N
break	N
in	N
edge	N
cases	N
,	N
like	N
array	N
operations	N
and	N
AJAX	N
requests	N
.	N

Do	N
you	N
think	N
the	N
same	N
way	N
about	N
generated	N
Assembler	N
?	N
Handling	N
all	N
those	N
differences	N
between	N
different	N
Processor	N
architecures	N
?	N
I	N
am	N
not	N
saying	N
,	N
that	N
GWT	N
is	N
necessarily	N
there	N
yet	N
.	N
But	N
Generating	N
one	N
language	N
out	N
of	N
another	N
is	N
nothing	N
scary	N
at	N
all	N
.	N

the	N
problem	N
is	N
that	N
since	N
JS	N
is	N
a	N
high-level	N
language	N
,	N
there	N
are	N
several	N
features	N
you'd	N
like	N
to	N
use	N
.	N
for	N
example	N
a	N
hashtable	N
.	N
it's	N
not	N
exactly	N
the	N
same	N
semantics	N
as	N
Java	N
maps	N
,	N
so	N
they	N
write	N
an	N
emulation	N
layer	N
.	N
therefore	N
they're	N
no	N
longer	N
usable	N
as	N
JS	N
objects	N
.	N
same	N
for	N
other	N
things	N
...	N

Another	N
difference	N
is	N
that	N
,	N
besides	N
being	N
a	N
much	N
more	N
mature	N
technology	N
,	N
assembler	N
is	N
very	N
highly	N
tuned	N
towards	N
a	N
single	N
architecture	N
.	N
The	N
same	N
cannot	N
be	N
said	N
of	N
Javascript	N
,	N
which	N
must	N
support	N
scores	N
of	N
different	N
browsers	N
and	N
version	N
.	N

not	N
to	N
mention	N
that	N
all	N
modern	N
cpu	N
instruction	N
sets	N
are	N
designed	N
for	N
the	N
compiler	N
,	N
not	N
for	N
a	N
human	N
programmer	N
;	N
just	N
like	N
bytecodes	N
are	N
designed	N
with	N
a	N
specific	N
language	N
in	N
mind	N
.	N

I	N
suspect	N
you've	N
never	N
used	N
GWT	N
in	N
a	N
large	N
scale	N
project	N
.	N
It	N
doesn't	N
make	N
cross	N
browser	N
stuff	N
harder	N
,	N
it	N
makes	N
it	N
easier	N
.	N
People	N
worry	N
about	N
going	N
through	N
generated	N
javascript	N
,	N
but	N
the	N
truth	N
is	N
you	N
never	N
have	N
to	N
,	N
just	N
like	N
you	N
never	N
have	N
to	N
look	N
at	N
java	N
byte	N
code	N
,	N
because	N
the	N
compiler	N
is	N
top-notch	N
.	N

disregarding	N
whether	N
compiled	N
js	N
is	N
good	N
or	N
bad	N
,	N
gwt	N
offers	N
hosted	N
mode	N
debugging	N
,	N
and	N
simple	N
unit	N
test	N
integration	N
,	N
which	N
is	N
a	N
must	N
in	N
large	N
projects	N
.	N
However	N
,	N
there	N
are	N
some	N
growing	N
pains	N
involved	N
with	N
gwt	N
,	N
but	N
nothing	N
too	N
bad	N
.	N
GWT	N
is	N
more	N
suitable	N
for	N
large	N
scale	N
ajax	N
app	N
vs	N
medium	N
scale	N
ones	N
.	N

Using	N
GWT	N
is	N
really	N
no	N
different	N
then	N
using	N
jQuery	N
or	N
Prototype	N
.	N
If	N
there	N
is	N
a	N
bug	N
in	N
the	N
library	N
you	N
are	N
using	N
,	N
it	N
will	N
make	N
your	N
life	N
difficult	N
.	N
The	N
same	N
problems	N
exist	N
for	N
GWT	N
.	N
The	N
difference	N
is	N
that	N
GWT	N
has	N
Google's	N
developers	N
backing	N
it	N
up	N
,	N
not	N
just	N
the	N
few	N
people	N
behind	N
the	N
other	N
libraries	N
.	N

I'm	N
working	N
on	N
a	N
project	N
that	N
has	N
used	N
GWT	N
to	N
pretty	N
good	N
effect	N
.	N
It's	N
a	N
good	N
choice	N
for	N
us	N
since	N
we're	N
all	N
primarily	N
Java	N
developers	N
working	N
on	N
internal	N
tools	N
.	N
I	N
can't	N
speak	N
to	N
how	N
useful	N
it	N
is	N
for	N
large	N
end-user	N
sites	N
.	N
One	N
advantage	N
I	N
particularly	N
appreciate	N
is	N
the	N
seamless	N
object	N
serialization	N
and	N
deserialization	N
.	N
Not	N
only	N
are	N
the	N
details	N
of	N
XML-RPC	N
abstracted	N
away	N
,	N
but	N
since	N
the	N
same	N
Java	N
code	N
is	N
compiled	N
to	N
byte	N
code	N
for	N
the	N
server	N
and	N
javascript	N
for	N
the	N
browser	N
,	N
you	N
can	N
code	N
almost	N
as	N
if	N
the	N
server	N
and	N
client	N
were	N
running	N
in	N
separate	N
class	N
loaders	N
in	N
the	N
same	N
JVM	N
.	N
For	N
instance	N
,	N
you	N
can	N
construct	N
a	N
Java	N
object	N
on	N
the	N
server	N
,	N
send	N
it	N
to	N
the	N
browser	N
as	N
the	N
return	N
value	N
from	N
an	N
RPC	N
service	N
call	N
and	N
the	N
browser	N
code	N
can	N
then	N
use	N
the	N
identical	N
Java	N
class	N
to	N
manipulate	N
the	N
object	N
you	N
just	N
returned	N
.	N
Likewise	N
,	N
parameters	N
to	N
RPC	N
calls	N
can	N
be	N
constructed	N
as	N
Java	N
objects	N
,	N
with	N
the	N
server	N
receiving	N
an	N
identical	N
Java	N
object	N
on	N
the	N
other	N
end	N
.	N
All	N
this	N
without	N
mucking	N
about	N
in	N
the	N
details	N
of	N
(	N
de	N
)	N
serialization	N
.	N

GWT	N
doesnt	N
actually	N
use	N
XML-RPC	N
,	N
but	N
yea	N
,	N
the	N
rest	N
of	N
the	N
post	N
is	N
my	N
sentiments	N
exactly	N
.	N

I	N
think	N
a	N
few	N
of	N
the	N
answers	N
on	N
this	N
question	N
are	N
quite	N
un-informed	N
,	N
and	N
I	N
suspect	N
that	N
the	N
people	N
answering	N
them	N
have	N
never	N
used	N
GWT	N
on	N
large	N
scale	N
projects	N
.	N
Yes	N
GWT	N
is	N
a	N
great	N
way	N
to	N
do	N
large	N
AJAX	N
websites	N
,	N
and	N
for	N
large	N
complex	N
sites	N
,	N
involving	N
a	N
back	N
end	N
as	N
well	N
,	N
it	N
kicks	N
things	N
like	N
JQuery	N
up	N
and	N
down	N
the	N
park	N
.	N
The	N
way	N
I	N
always	N
look	N
at	N
it	N
is	N
that	N
javascript	N
on	N
it's	N
own	N
is	N
great	N
for	N
doing	N
small	N
client	N
side	N
things	N
.	N
When	N
you	N
need	N
to	N
do	N
something	N
more	N
complex	N
(	N
like	N
dynamic	N
fields	N
,	N
popups	N
,	N
animations	N
)	N
you	N
bring	N
in	N
something	N
like	N
JQuery	N
or	N
Prototype	N
.	N
When	N
you	N
want	N
to	N
take	N
it	N
one	N
step	N
further	N
you	N
go	N
with	N
GWT	N
.	N
People	N
assume	N
that	N
because	N
you	N
write	N
it	N
in	N
Java	N
,	N
it's	N
designed	N
for	N
back	N
end	N
developers	N
to	N
do	N
front	N
end	N
development	N
.	N
It's	N
not	N
.	N
Java	N
is	N
simply	N
the	N
language	N
that	N
they	N
chose	N
,	N
mainly	N
because	N
it's	N
widely	N
used	N
,	N
statically	N
typed	N
and	N
there	N
are	N
lots	N
of	N
good	N
editors	N
out	N
there	N
for	N
it	N
.	N
I	N
don't	N
buy	N
the	N
leaky	N
abstraction	N
theory	N
either	N
,	N
it	N
doesn't	N
try	N
to	N
fully	N
abstract	N
out	N
the	N
HTML	N
elements	N
,	N
as	N
it	N
gives	N
you	N
direct	N
access	N
to	N
both	N
native	N
javascript	N
and	N
the	N
DOM	N
if	N
you	N
choose	N
to	N
use	N
those	N
.	N
In	N
short	N
we've	N
built	N
very	N
complex	N
sites	N
(	N
one	N
of	N
which	N
was	N
featured	N
on	N
the	N
GWT	N
blog	N
)	N
in	N
GWT	N
,	N
and	N
also	N
using	N
other	N
libraries	N
like	N
JQuery	N
.	N
I	N
can	N
tell	N
you	N
with	N
100%	N
confidence	N
that	N
once	N
you	N
get	N
your	N
head	N
around	N
GWT	N
it	N
kills	N
those	N
other	N
frameworks	N
dead	N
for	N
complex	N
tasks	N
.	N
It	N
also	N
has	N
some	N
great	N
built	N
in	N
things	N
that	N
help	N
make	N
things	N
better	N
,	N
and	N
even	N
does	N
some	N
things	N
that	N
no	N
other	N
framework	N
supports	N
(	N
like	N
the	N
magic	N
it	N
can	N
do	N
with	N
images	N
)	N
.	N
See	N
this	N
blog	N
post	N
for	N
more	N
details	N
:	N
http://googlewebtoolkit.blogspot.com/2007/10/epo-builder-built-with-gwt.html	N

thanks	N
a	N
lot	N
:)	N
that	N
was	N
great	N
.	N

