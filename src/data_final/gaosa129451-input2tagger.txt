JavaScript	N
or	N
Java	N
String	N
Subtraction	N

If	N
you	N
are	N
using	N
Java	N
or	N
JavaScript	N
,	N
is	N
there	N
a	N
good	N
way	N
to	N
do	N
something	N
like	N
a	N
String	N
subtraction	N
so	N
that	N
given	N
two	N
strings	N
:	N
you	N
just	N
get	N
I	N
know	N
that	N
I	N
could	N
just	N
write	N
code	N
to	N
walk	N
the	N
string	N
comparing	N
characters	N
,	N
but	N
I	N
was	N
hoping	N
there	N
was	N
a	N
way	N
to	N
do	N
it	N
in	N
really	N
compact	N
way	N
.	N
EDIT	N
TO	N
A	N
DD:	N
As	N
I	N
was	N
analyzing	N
the	N
data	N
I	N
get	N
when	N
I	N
use	N
this	N
I	N
realized	N
that	N
I	N
missed	N
the	N
statement	N
of	N
the	N
case	N
a	N
bit	N
.	N
It	N
should	N
be	N
:	N
So	N
,	N
I	N
actually	N
only	N
want	N
to	N
remove	N
the	N
sections	N
that	N
are	N
identical	N
.	N
That	N
said	N
,	N
the	N
answer	N
that	N
I	N
accepted	N
is	N
closest	N
to	N
my	N
goal	N
.	N

I	N
don't	N
see	N
how	N
JavaScript	N
is	N
relevant	N
here	N
...	N

How	N
isn't	N
it	N
?	N
You	N
never	N
need	N
to	N
remove	N
a	N
string	N
from	N
another	N
string	N
in	N
javascript	N
?	N
Granted	N
,	N
all	N
solutions	N
have	N
been	N
posted	N
in	N
java	N
,	N
but	N
that	N
doesn't	N
invalidate	N
the	N
question	N
.	N

LOL	N
-	N
okay	N
then	N
,	N
let's	N
tag	N
this	N
as	N
Java	N
/	N
JavaScript	N
/	N
C#	N
/	N
VB.NET	N
/	N
Python	N
/	N
Ruby	N
/	N
erlang	N
/	N
Smalltalk	N
/	N
Lisp	N
/	N
etc	N
...	N
My	N
point	N
is	N
,	N
JavaScript	N
and	N
Java	N
have	N
nothing	N
in	N
common	N
other	N
than	N
syntax	N
shared	N
with	N
C#	N
,	N
C	N
,	N
C++	N
,	N
etc	N
.	N
and	N
this	N
is	N
not	N
really	N
a	N
JavaScript	N
solution	N
.	N

Should	N
work	N
...	N
EDIT	N
:	N
Apache	N
commons	N
libraries	N
are	N
also	N
great	N
to	N
use	N
As	N
noted	N
below	N
,	N
the	N
StringUtils	N
class	N
does	N
in	N
fact	N
have	N
a	N
method	N
for	N
this	N
:	N
StringUtils.remove()	N

Can't	N
you	N
just	N
replace	N
the	N
occurrences	N
of	N
the	N
first	N
string	N
in	N
the	N
second	N
with	N
an	N
empty	N
string	N
?	N

Depends	N
on	N
precisely	N
what	N
you	N
want	N
.	N
If	N
you're	N
looking	N
for	N
a	N
way	N
to	N
compare	N
strings	N
in	N
the	N
general	N
case	N
--	N
meaning	N
finding	N
common	N
sub-strings	N
between	N
arbitrary	N
inputs	N
--	N
then	N
you're	N
looking	N
at	N
something	N
closer	N
to	N
the	N
Levenshtein	N
distance	N
and	N
similar	N
algorithms	N
.	N
However	N
,	N
if	N
all	N
you	N
need	N
is	N
prefix	N
/	N
suffix	N
comparison	N
,	N
this	N
should	N
work	N
:	N
...	N
or	N
something	N
roughly	N
to	N
that	N
effect	N
.	N

Thanks	N
Chris	N
and	N
Daniel	N
(	N
and	N
all	N
the	N
rest	N
of	N
you	N
)	N
.	N
That	N
was	N
amazingly	N
fast	N
.	N

This	N
seems	N
like	N
way	N
too	N
much	N
code	N
for	N
what's	N
requested	N
-	N
Erickson's	N
approach	N
(	N
replace	N
string	N
B	N
in	N
string	N
A	N
with	N
empty	N
string	N
)	N
is	N
much	N
simpler	N
and	N
readable	N
.	N

@Herb	N
Agreed	N
,	N
I	N
do	N
like	N
Erickson's	N
(	N
and	N
Chris's	N
)	N
approach	N
much	N
better	N
for	N
readability	N
.	N
However	N
,	N
his	N
doesn't	N
enforce	N
strict	N
prefix	N
/	N
suffix	N
.	N
The	N
problem	N
I	N
have	N
is	N
the	N
question	N
is	N
a	N
bit	N
ill-defined	N
:	N
what	N
does	N
String	N
difference	N
really	N
mean	N
?	N

If	N
you're	N
just	N
trying	N
to	N
get	N
whatever's	N
after	N
the	N
last	N
dot	N
,	N
I	N
find	N
this	N
method	N
easy	N
in	N
Javascript	N
:	N
subString	N
will	N
contain	N
the	N
value	N
you're	N
looking	N
for	N
.	N

At	N
first	N
glance	N
,	N
I	N
thought	N
of	N
RegExp	N
,	N
but	N
adding	N
to	N
the	N
question	N
,	N
you	N
removed	N
that	N
possibility	N
by	N
adding	N
to	N
the	N
start-string	N
...	N
So	N
you'll	N
have	N
to	N
make	N
a	N
procedure	N
,	N
that	N
takes	N
every	N
character	N
that	N
are	N
equal	N
out	N
of	N
the	N
resulting	N
string	N
,	N
something	N
like	N
this	N
:	N
By	N
the	N
way	N
it	N
doesn't	N
have	N
a	N
meaning	N
to	N
set	N
Java	N
and	N
javascript	N
as	N
equals	N
in	N
any	N
context	N
,	N
a	N
popular	N
way	N
of	N
putting	N
it	N
could	N
be	N
:	N
Java	N
and	N
javascript	N
has	N
four	N
things	N
in	N
common	N
:	N
j	N
-	N
a	N
-	N
v	N
-	N
a	N
!	N
-	N
)	N

Though	N
this	N
relies	N
on	N
that	N
the	N
character	N
with	N
code	N
1	N
does	N
not	N
appear	N
in	N
any	N
of	N
those	N
strings	N
.	N

