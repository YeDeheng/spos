462348	String length differs from Javascript to Java code	N N V P ^ P ^ N
462348	I've got a JSP page with a piece of Javascript validation code which limits to a certain amount of characters on submit . I'm using a textarea so I can't simply use a length attribute like in a input type= " text " . I use document.getElementById ( " text ") . value.length to get the string length . I'm running Firefox 3.0 on Windows ( but I've tested this behavior with IE 6 also ) . The form gets submitted to a J2EE servlet . In my Java servlet the string length of the parameter is larger than 2000 ! I've noticed that this can easily be reproduced by adding carriage returns in the textarea . I've used Firebug to assert the length of the textare and it really is 2000 characters long . On the Java side though , the carriage returns get converted to UNIX style ( \r\n , instead of \n ) , thus the string length differs ! Am I missing something obvious here or what ? If not , how would you reliably ( cross-platform / browser ) make sure that the textarea is limited .	L V D ^ N P D N P ^ N N D N P D A N P N P V , L V D ^ P O V R V D N V V P D N N , N , , O V ^ , , V E , N P V D N N , L V ^ $ P ^ , & L V D N P ^ $ R , , D N V V P D ^ N , P D ^ V D N N P D N V R P $ , L V P D V R V V P V N V P D ^ , L V N P V D N P D N & O R V $ N R , P D ^ N P , D N N V V P ^ N , N , R P ^ , , R D N N V , V O V R A R & O , P R , R V O R , E E E , V A P D ^ V A ,
462348	@Fran ois : Always enclose things in tag brackets in back-ticks ( e.g. format them as code ) , or they will be stripped out on display of your question .	@ G , R A N P N N P ^ , N N O P N , , & O V V V T P ^ P D N ,
462348	just stumbled across such situation . your topic made my day , sir ! thanks a lot !	R V P A N , D N V D N , N , V D N ,
462348	Do you particularly care which line-endings are used ? Why not just make the Java convert " \r\n " to " \n " ? ( Note that " \r\n " is the Windows style ; " \n " is the Unix style . ) Alternatively , do the reverse when checking the length within the JavaScript .	V O R V D N V V , R R R V D ^ V , N , P , N , , , V O , N , V D ^ N , , N , V D ^ N , , R , V D N R V D N P D N ,
462348	OK . I get it . I guess that means that Javascript always represents carriage returns the UNIX way internally and through its APIs ( i.e. ` length() `) . Somehow I gets converted to ` \r\n ` because the Java VM is running on Windows . I wish it was more uniform ...	A , O V O , O V O V D ^ R V N V D ^ N R & P D ^ E E E E E , ! O V V P , ^ , P D ^ ^ V V P ^ , O V O V A N ,
462348	+1 , normalizing sounds good here	$ , V V A R
462348	I don't know what rules different browsers on servlet engines will apply , but normalization should remove the differences either way . Btw , it's worth trying on macs too , where \r is the normal linebreak .	O V V O V A N P D N V V , & N V V D N & N , ! , L V V P ^ R , R R V D A N ,
462348	+1 Just remove all " \r " and everybody will be happy , whatever platform you are using . Macs included .	$ R V R , ^ , & N V V A , D N O V V , ^ V ,
462348	Are you limiting it to 2000 chars so it fits inside an nvarchar ( 2000 ) column in a database ? Otherwise maybe just allow a 2% overrun to be flexible on the Java side . And Java should be using Unicode UTF16 to represent Strings . That / r must have got in there somewhere else , maybe a conversion in the web browser when submitting ? Have you tried different browsers ? On different platforms ? You might just have to strip out the / r s .	V O V O P $ N P O V P D N , $ , N P D N , R R R V D $ N P V A P D ^ N , ^ ^ V V V ^ ^ P V ^ , O , V V V V T R R R , R D N P D N N R V , V O V A N , R A N , O V R V P N P D N G G ,
462348	This isn't really a JavaScript ( or Java ) problem - both layers report an accurate length for the string they are dealing with . The problem in your case is that the string gets transformed during the HTTP transmission . If you absolutely must ensure that the string doesn't exceed a certain length , you can mimic this transformation on the client by replacing every instance of " \n " with " \n\r " - but only for length verification purposes :	D V R D N , & ^ , N , D N V D A N P D N O V V P , D N P D N V P D N V V P D N N , P O R V V P D N V V D A N , O V V D N P D N P V D N P , N , P , ^ , , & R P N N N ,
462348	Note : The code should be ` textarea.value.replace (/ \n / g , " \n\r ") . length ` to find all occurrences . The original code only looks for the first match .	N , D N V V , ^ E ^ , G , , E E , N , P V D N , D A N R V P D A N ,
462348	Thanks . Fixed it .	N , V O ,
462348	It should be `" \r\n "` , not `" \n\r "` .	O V V , ^ ^ , R , ^ ^ ,
462348	To remember that the right order is ` \r\n ` , remember ` \r ` stands for Carriage ? eturn ( ` Cr `) and ` \n ` stands for ( ? ew ) Line Feed ( ` Lf `) in ` CrLf ` .	P V P D A N V , E , , V , ^ , V P ^ , E E E ^ ^ & , E , V P , , ! , N V E E E E P , ^ , ,
462348	I think you need to do the line ending conversion / check on both client and server because you don't know what line endings the client browser is going to use ( Firefox submits \n even on Windows ) and if you develop server side on Windows and deploy on Linux then the line endings will be handled differently .	O V O V P V D N V N , V P D N & N P O V V D N N D N N V V P V , ^ V ^ R P ^ , & P O V N N P ^ & R P ^ R D N N V V V R ,
