Which	N
to	N
learn	N
first	N
Java	N
or	N
javascript	N
?	N

With	N
the	N
intent	N
on	N
becoming	N
fluent	N
on	N
both	N
to	N
do	N
a	N
mix	N
of	N
web	N
and	N
application	N
coding	N
.	N
Would	N
one	N
facilitate	N
learning	N
the	N
other	N
?	N

They	N
are	N
only	N
loosely	N
related	N
one	N
doesn't	N
really	N
feed	N
into	N
the	N
other	N
as	N
much	N
as	N
one	N
might	N
think	N
.	N
Don't	N
let	N
the	N
names	N
fool	N
you	N
.	N

Java	N
and	N
JavaScript	N
have	N
just	N
the	N
similar	N
name	N
in	N
common	N
.	N
Besides	N
that	N
,	N
they	N
are	N
absolutely	N
different	N
.	N

Good	N
points	N
,	N
@Copas	N
and	N
@Gumbo	N
,	N
but	N
if	N
one	N
starts	N
with	N
0	N
programming	N
knowledge	N
one	N
does	N
need	N
to	N
start	N
_some_where	N
;-)	N
.	N

You	N
might	N
make	N
this	N
CW	N
because	N
it	N
doesn't	N
really	N
have	N
an	N
answer	N
.	N

like	N
the	N
joke	N
goes	N
:	N
java	N
:	N
javascript	N
::	N
car	N
:	N
carpet	N
.	N

@Lucas	N
,	N
I	N
agree	N
,	N
should	N
be	N
a	N
CW	N
.	N

It	N
depends	N
on	N
which	N
one	N
(	N
websites	N
or	N
programs	N
)	N
that	N
you	N
want	N
to	N
make	N
first	N
.	N
If	N
you	N
do	N
want	N
to	N
make	N
websites	N
your	N
not	N
going	N
to	N
get	N
to	N
far	N
with	N
just	N
JavaScript	N
and	N
HTML	N
(	N
think	N
about	N
using	N
JQuery	N
)	N
.	N
You	N
might	N
also	N
want	N
to	N
learn	N
ASP.NET	N
,	N
it	N
will	N
allow	N
you	N
to	N
use	N
C#	N
(	N
very	N
similar	N
to	N
Java	N
)	N
to	N
make	N
rich	N
websites	N
with	N
code	N
that	N
can	N
run	N
on	N
the	N
server	N
and	N
HTML	N
/	N
JavaScript	N
to	N
be	N
displayed	N
to	N
the	N
user	N
.	N
If	N
you	N
want	N
to	N
make	N
programs	N
look	N
into	N
Java	N
or	N
C#	N
.	N
I	N
learned	N
HTML	N
->	N
JavaScript	N
->	N
BASIC	N
->	N
C++	N
->	N
C#	N
->	N
ASP.NET	N
.	N
I	N
started	N
with	N
websites	N
then	N
learned	N
programming	N
and	N
in	N
turn	N
went	N
back	N
to	N
making	N
websites	N
using	N
C#	N
as	N
my	N
programming	N
language	N
.	N

He	N
does	N
say	N
he	N
means	N
to	N
learn	N
both	N
,	N
just	N
wants	N
tips	N
on	N
"	N
which	N
one	N
_first_	N
"	N
...	N

@Alex	N
:	N
I	N
updated	N
my	N
answer	N
to	N
reflect	N
his	N
real	N
question	N
.	N
Thanks	N
.	N

@Lucas	N
:	N
good	N
points	N
,	N
though	N
I	N
disagree	N
that	N
"	N
you	N
won't	N
get	N
far	N
"	N
with	N
Javascript	N
(	N
and	N
HTML	N
and	N
CSS	N
)	N
,	N
these	N
days	N
--	N
guess	N
I'll	N
add	N
a	N
note	N
to	N
my	N
answer	N
to	N
that	N
effect	N
.	N

@Alex	N
:	N
What	N
I	N
meant	N
by	N
that	N
was	N
he	N
wouldn't	N
be	N
able	N
to	N
do	N
anything	N
that	N
must	N
run	N
on	N
the	N
server	N
using	N
JavaScript	N
.	N

I've	N
seen	N
people	N
try	N
both	N
approaches	N
--	N
start	N
with	N
the	N
more	N
rigid	N
and	N
better-defined	N
language	N
first	N
(	N
here	N
that	N
would	N
be	N
Java	N
)	N
,	N
or	N
start	N
with	N
the	N
looser	N
and	N
more	N
fluid	N
one	N
(	N
here	N
that	N
would	N
be	N
Javascript	N
)	N
.	N
In	N
my	N
observation	N
,	N
which	N
one	N
works	N
best	N
depends	N
on	N
the	N
learner	N
:	N
"	N
left	N
brained	N
"	N
personality	N
types	N
prefer	N
stricter	N
definition	N
(	N
start	N
w	N
/	N
Java	N
)	N
,	N
"	N
creative	N
"	N
/	N
"	N
right	N
brained	N
"	N
ones	N
prefer	N
greater	N
freedom	N
of	N
expression	N
(	N
start	N
w	N
/	N
JS	N
)	N
.	N
So	N
what's	N
your	N
personality	N
?	N
Edit	N
,	N
to	N
add	N
...	N
:	N
Maybe	N
you're	N
(	N
making	N
up	N
a	N
personality	N
)	N
"	N
center-brained	N
"	N
,	N
motivated	N
by	N
actually	N
achieving	N
small	N
but	N
neat	N
/	N
useful	N
/	N
cool	N
results	N
;	N
in	N
this	N
case	N
,	N
and	N
against	N
"	N
received	N
wisdom	N
"	N
,	N
I	N
suggest	N
that	N
,	N
these	N
days	N
,	N
there's	N
actually	N
a	N
lot	N
that	N
you	N
can	N
achieve	N
on	N
the	N
web	N
with	N
Javascript	N
(	N
and	N
HTML	N
and	N
CSS	N
)	N
.	N
At	N
Google	N
I	N
/	N
O	N
last	N
week	N
,	N
Vic	N
Gundotra	N
showed	N
something	N
of	N
what	N
you	N
can	N
do	N
with	N
just	N
these	N
tools	N
with	N
the	N
new	N
HTML5	N
toys	N
--	N
it's	N
all	N
over	N
the	N
web	N
,	N
search	N
for	N
it	N
,	N
but	N
for	N
example	N
here's	N
a	N
summary	N
with	N
some	N
further	N
useful	N
links	N
.	N
That's	N
definitely	N
not	N
to	N
say	N
that	N
Java	N
won't	N
also	N
be	N
rewarding	N
in	N
terms	N
of	N
results	N
you	N
can	N
achieve	N
--	N
hey	N
,	N
just	N
to	N
stay	N
in	N
the	N
Google	N
arena	N
,	N
it's	N
key	N
to	N
programming	N
Android	N
,	N
it	N
lets	N
you	N
"	N
almost	N
"	N
(;	N
-	N
)	N
avoid	N
learning	N
Javascript	N
if	N
you	N
go	N
with	N
GWT	N
,	N
it	N
can	N
now	N
be	N
deployed	N
to	N
Google	N
App	N
Engine	N
,	N
etc	N
,	N
etc	N
--	N
the	N
sky's	N
the	N
limit	N
!	N
However	N
,	N
most	N
people	N
can	N
probably	N
achieve	N
small	N
results	N
on	N
the	N
web	N
faster	N
(	N
widgets	N
,	N
mashups	N
,	N
opensocial	N
apps	N
,	N
etc	N
,	N
etc	N
)	N
with	N
Javascript	N
,	N
especially	N
in	N
conjunction	N
with	N
a	N
powerful	N
toolkit	N
such	N
as	N
dojo	N
or	N
jquery	N
.	N
Then	N
one	N
could	N
start	N
talking	N
about	N
server-side	N
JS	N
,	N
but	N
that's	N
a	N
pretty	N
controversial	N
subject	N
,	N
and	N
this	N
answer	N
is	N
already	N
pretty	N
long	N
,	N
so	N
I	N
won't	N
;-)	N
.	N

+1	N
Good	N
answer	N
,	N
plus	N
great	N
links	N
.	N

Wow	N
,	N
I	N
didn't	N
even	N
know	N
SSJS	N
existed	N
:-O	N

Beyond	N
some	N
of	N
the	N
basic	N
syntax	N
,	N
they	N
are	N
not	N
very	N
similar	N
at	N
all	N
.	N
Go	N
with	N
whichever	N
you	N
find	N
most	N
interesting	N
first	N
.	N

Those	N
two	N
are	N
very	N
different	N
techonologies	N
.	N
They	N
have	N
similar	N
C-like	N
syntax	N
,	N
but	N
thats	N
all	N
that	N
they	N
have	N
in	N
common	N
.	N
Go	N
for	N
JavaScript	N
if	N
you	N
want	N
to	N
make	N
websites	N
and	N
Java	N
if	N
you	N
want	N
desktop	N
/	N
enterprise	N
appliactions	N
.	N

What	N
do	N
you	N
want	N
to	N
be	N
able	N
to	N
do	N
first	N
?	N
There	N
are	N
any	N
number	N
of	N
languages	N
which	N
could	N
be	N
a	N
first	N
language	N
and	N
it	N
really	N
depends	N
on	N
what	N
you	N
want	N
to	N
do	N
.	N

Apart	N
from	N
some	N
superficial	N
syntax	N
and	N
the	N
name	N
,	N
the	N
two	N
have	N
very	N
little	N
in	N
common	N
as	N
languages	N
.	N
That	N
being	N
said	N
,	N
you	N
can	N
write	N
useful	N
(	N
if	N
not	N
very	N
"	N
modern	N
")	N
webapps	N
without	N
JavaScript	N
,	N
but	N
not	N
without	N
a	N
server-side	N
language	N
like	N
Java	N
,	N
so	N
it	N
might	N
be	N
better	N
to	N
start	N
on	N
that	N
side	N
;	N
it's	N
also	N
the	N
overall	N
more	N
complex	N
one	N
,	N
since	N
it	N
includes	N
database	N
access	N
.	N
Then	N
again	N
,	N
there	N
is	N
Server-side	N
JavaScript	N
which	N
would	N
allow	N
you	N
to	N
do	N
everything	N
in	N
one	N
language	N
,	N
but	N
it's	N
not	N
a	N
very	N
common	N
choice	N
.	N

Java	N
first	N
,	N
because	N
you	N
will	N
be	N
learning	N
better	N
programming	N
habits	N
that	N
will	N
be	N
useful	N
whatever	N
second	N
language	N
you	N
want	N
to	N
learn	N
after	N
.	N
And	N
it's	N
less	N
traumathic	N
to	N
make	N
the	N
transition	N
from	N
a	N
static	N
type	N
system	N
to	N
a	N
dynamic	N
one	N
than	N
the	N
reverse	N
.	N

I	N
would	N
recommend	N
start	N
with	N
Java	N
.	N
It	N
would	N
give	N
you	N
good	N
basics	N
in	N
programming	N
.	N
With	N
Java	N
knowledge	N
you	N
can	N
learn	N
JavaScript	N
,	N
C#	N
and	N
other	N
languages	N
more	N
easily	N
.	N
I	N
don't	N
think	N
that	N
would	N
be	N
the	N
case	N
if	N
you	N
would	N
start	N
with	N
javascript	N
.	N

Javascript	N
is	N
a	N
prototype-based	N
scripting	N
language	N
,	N
with	N
weak	N
and	N
dynamic	N
typing	N
which	N
is	N
usually	N
hosted	N
in	N
a	N
browser	N
.	N
Java	N
is	N
an	N
object-oriented	N
programming	N
language	N
,	N
with	N
strong	N
and	N
static	N
typing	N
which	N
runs	N
on	N
the	N
Java	N
Virtual	N
Machine	N
.	N
What	N
does	N
that	N
mean	N
?	N
From	N
Greg	N
Hewgill's	N
answer	N
to	N
the	N
question	N
What	N
s	N
the	N
difference	N
between	N
JavaScript	N
and	N
Java	N
?	N
:	N
Java	N
and	N
Javascript	N
are	N
similar	N
like	N
Car	N
and	N
Carpet	N
are	N
similar	N
.	N
As	N
the	N
others	N
have	N
already	N
pointed	N
out	N
,	N
both	N
Java	N
and	N
Javascript	N
superficially	N
have	N
similar	N
syntax	N
which	N
is	N
influenced	N
by	N
C	N
,	N
but	N
most	N
of	N
the	N
similarity	N
ends	N
there	N
.	N
Under	N
the	N
hood	N
,	N
the	N
two	N
languages	N
are	N
completely	N
different	N
beasts	N
.	N
Between	N
the	N
two	N
,	N
getting	N
started	N
may	N
be	N
a	N
little	N
bit	N
easier	N
with	N
Javascript	N
than	N
Java	N
,	N
as	N
it	N
is	N
more	N
forgiving	N
in	N
terms	N
of	N
things	N
which	N
can	N
be	N
performed	N
.	N
However	N
,	N
this	N
can	N
also	N
mean	N
that	N
it	N
might	N
serve	N
as	N
a	N
way	N
to	N
pick	N
up	N
some	N
bad	N
habits	N
,	N
such	N
as	N
overlooking	N
the	N
concept	N
of	N
data	N
types	N
.	N
At	N
the	N
end	N
of	N
the	N
day	N
,	N
it	N
will	N
come	N
down	N
to	N
what	N
one	N
wants	N
to	N
get	N
accomplished	N
first	N
.	N
Either	N
performing	N
tasks	N
in	N
the	N
browser	N
to	N
manipulate	N
webpages	N
(	N
Javascript	N
)	N
,	N
or	N
writing	N
programs	N
that	N
will	N
run	N
as	N
applications	N
on	N
clients	N
and	N
servers	N
(	N
Java	N
)	N
.	N

Yeah	N
,	N
I	N
wondered	N
about	N
the	N
name	N
coincidence	N
.	N
I	N
guess	N
I	N
ll	N
let	N
the	N
project	N
dictate	N
which	N
one	N
gets	N
the	N
most	N
focus	N
.	N
You	N
are	N
correct	N
about	N
the	N
infrastructure	N
needs	N
(	N
jvm	N
vs	N
web	N
)	N
that	N
each	N
needs	N
.	N
Thanks	N
y	N
all	N

Naming	N
is	N
not	N
a	N
coincidence	N
.	N
It	N
was	N
a	N
marketing	N
decision	N
.	N
And	N
JavaScript	N
and	N
Java	N
are	N
more	N
similar	N
than	N
they	N
might	N
have	N
been	N
.	N
The	N
C	N
syntax	N
wasn't	N
something	N
Brendan	N
Eich	N
started	N
with	N
.	N
He	N
did	N
make	N
the	N
language	N
more	N
Java-like	N
as	N
a	N
result	N
of	N
the	N
desire	N
to	N
have	N
a	N
"	N
Java-like	N
"	N
syntax	N
.	N
I	N
think	N
that	N
what	N
we	N
got	N
with	N
JavaScript	N
(	N
a	N
functional	N
language	N
with	N
C	N
syntax	N
)	N
is	N
really	N
cool	N
.	N

IMO	N
,	N
learn	N
JavaScript	N
first	N
.	N
You	N
can	N
be	N
near	N
guaranteed	N
that	N
you	N
will	N
come	N
across	N
a	N
project	N
/	N
task	N
where	N
you	N
need	N
it	N
.	N
Definitely	N
take	N
a	N
look	N
at	N
jquery	N
,	N
a	N
great	N
library	N
for	N
javascript	N
.	N
In	N
terms	N
of	N
the	N
application	N
layer	N
,	N
if	N
you	N
are	N
just	N
learning	N
now	N
,	N
Java	N
is	N
an	N
OK	N
decision	N
to	N
learn	N
first	N
,	N
so	N
is	N
C#	N
.	N
Personally	N
,	N
I	N
prefer	N
the	N
open	N
source	N
stack	N
,	N
Perl	N
,	N
Python	N
or	N
PHP	N
as	N
I	N
believe	N
there	N
are	N
a	N
lot	N
more	N
resources	N
out	N
there	N
to	N
help	N
you	N
learn	N
them	N
.	N
PHP	N
will	N
have	N
the	N
most	N
resources	N
,	N
but	N
Python	N
is	N
a	N
better	N
choice	N
.	N

I	N
would	N
recommend	N
learning	N
a	N
few	N
different	N
languages	N
before	N
learning	N
JavaScript	N
.	N
Java	N
for	N
class-based	N
object	N
orientation	N
;	N
LISP	N
or	N
similar	N
for	N
functional	N
programming	N
.	N
JavaScript	N
can	N
accomodate	N
several	N
different	N
paradigms	N
and	N
it's	N
easier	N
if	N
you	N
are	N
already	N
familiar	N
with	N
them	N
.	N
JavaScript	N
does	N
functional	N
programming	N
better	N
than	N
Python	N
or	N
Java	N
,	N
but	N
not	N
as	N
easily	N
as	N
the	N
"	N
real	N
"	N
funcional	N
programming	N
languages	N
.	N
JavaScript	N
has	N
its	N
own	N
variety	N
of	N
prototype-based	N
object	N
orientation	N
and	N
does	N
it	N
well	N
.	N
You	N
can	N
force	N
it	N
to	N
do	N
object	N
oriented	N
programming	N
in	N
a	N
Java-like	N
way	N
,	N
but	N
you're	N
better	N
off	N
not	N
calling	N
functions	N
"	N
classes	N
"	N
and	N
just	N
calling	N
them	N
"	N
prototypes	N
"	N
.	N
It's	N
difficult	N
to	N
model	N
subclasses	N
inheriting	N
from	N
base	N
classes	N
;	N
it's	N
much	N
easier	N
to	N
just	N
accept	N
the	N
concept	N
of	N
objects	N
inheriting	N
from	N
prototypes	N
.	N
JavaScript	N
is	N
much	N
easier	N
to	N
learn	N
and	N
use	N
if	N
you	N
are	N
already	N
familiar	N
with	N
the	N
basic	N
concepts	N
.	N
For	N
instance	N
,	N
you	N
should	N
know	N
about	N
HashMaps	N
from	N
Java	N
or	N
the	N
equivalent	N
Dictionaries	N
in	N
Python	N
or	N
Property	N
Lists	N
in	N
LISP	N
.	N
In	N
JavaScript	N
every	N
object	N
is	N
a	N
really	N
super-efficient	N
HashMap	N
,	N
so	N
if	N
your	N
design	N
can	N
make	N
use	N
of	N
that	N
fact	N
,	N
use	N
it	N
.	N

