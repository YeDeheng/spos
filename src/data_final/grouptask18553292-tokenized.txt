JavaScript minification workflow with Maven
I am wondering about any " best practices " to integrate a " modern JavaScript build workflow " into a Maven build that produces a WAR artifact . I have found several maven plugins that handle concatenation and minification : WRO4J : https://code.google.com/p/wro4j/wiki/MavenPlugin Minify Maven Plugin : https://github.com/samaxes/minify-maven-plugin YUI : http://alchim.sourceforge.net/yuicompressor-maven-plugin However I am still missing how they fit into a full build workflow , since I think it is mandatory to be able to switch concatenation / minification on and off : For development I want to build a WAR that does not contain the concatenated / minified resources so that I can conveniently debug . For a production build I want to produce a WAR that contains the concatenated / minified resources . Additionally for the production build I then have to " rewrite " the script URLs in my html to point to the concatenate / minified version(s) of the script(s) . In the JavaScript world I would use Grunt with different grunt tasks ( uglify , usemin ) to achieve the above workflow . How can I achieve the same in a Maven build ?
You should be able to run maven with different profiles so you can minify js scripts for a production build but build it locally with a different profile for the purposes of debugging . There's more information about this on Maven's build profile page Hope this helps .
Thanks for your answer . Using Maven profiles solves the first part of my question : How to switch the minification on and off for different builds . However I am still struggling with how can I " rewrite " my HTML so that it uses the non-minified or the minified JavaScript . Is there another Maven plugin for that ?
Hi again , no problem . It looks like the answer was already found in another Stack Overflow question ... [ How do you automate javascript minification for your java web applications] ( http://stackoverflow.com/questions/1379856/how-do-you-automate-javascript-minification-for-your-java-web-applications) . It looks like you can use YUICompressor ant target . You can use the maven-antrun-plugin to execute an ant goal at whatever point you want in your Maven build . I think that should be enough for you to do what you want .
In answer to your question , you could in theory write a bash script that scans all your HTML files and replaces the * . js files with * . min.js if they are located in the same directory . Although I don't know if there is anything out-of-the-box that will do this for it . It's potentially a bit bespoke so unfortunately you may have to write this yourself .
If you're using a scripting language like PHP or even JSPs you may be able to write a method that checks if there is a setting to enable the build to use minified js . In which case , then it can precede the * . js with * . min.js as required .
@ Dropkick : Thanks for your comments . I am still hoping that there is something more mature out there that I have not found yet ... I just think that this should be a standard problem that should have a standard solution ...
Since you mentioned Grunt , have you considered calling Grunt tasks directly from your Maven build ? It's not a perfect solution , but it gives you some more options without relying on Maven plugins . http://addyosmani.com/blog/making-maven-grunt Also , this SO topic : Javascript web app and Java server , build all in Maven or use Grunt for web app ?
Nice choice . Grunt would probably solve the problem since you can just run that grunt task tied with a maven goal .
