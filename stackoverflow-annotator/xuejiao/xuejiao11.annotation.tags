1006387		What is the disadvantage of DWR ?	O V D N P ^ ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		While using DWR in a intranet , will disadvantages like perfomance or security issues occur ? Direct web remoting is a tool which uses Ajax request to contact a server from a js file .	P V ^ P D N , V N P N & N N V , N N V V D N O V ^ N P V D N P D ^ N ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		One thing I would watch out for is that your server will most likely get hit by more HTTP requests than if you have the ( normal ) full page HTTP delivery . Let me explain . When your web page is AJAX-enabled , your clients will end up creating more HTTP requests for ( say ) form filling , page-fragment regeneration etc . I've seen scenarios where developers have gone AJAX-crazy , and made the web page a largely dynamic document . This results in a great user experience ( if done well ) , but every request results in a server hit , leading to scalability and latency issues . Note - this isn't particular to DWR , but is an AJAX issue . I've used DWR , and it works nicely . Unfortunately , I found that it worked so well , and so easily , that everything becomes a candidate for remoting , and you can end up with huge numbers of small requests .	$ N O V V T P V P D N V R R V V P A ^ N P P O V D , A , A N ^ N , V O V , R D N N V ^ , D N V N T V A ^ N P , V , N V , N N G , L V N R N V V ^ , & V D N N D R A N , D N P D A N N , P V R , , & D N N P D N V , V P N & A N , N , O V A P ^ , & V D ^ N , L V ^ , & O V R , R , O V P O V R R , & R R , D N V D N P V , & O V N T P A N P A N ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		I agree with this answer . I used DWR in an web-based application . The application gives a great user experience , but I think the application doesn't work fast , because of all the JavaScript and httprequest .	O V P D N , O V ^ P D A N , D N V D A N N , & O V D N V V R , P P X D ^ & N ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		I worked on a project with DWR - a really nice tool . I'm not convinced about the pace of development though . They did post on the development log that they're working on getting 3.0 out the door , but the last stable release - 2.0 - was out in summer 2006 . It's a bit worrying taken from a support perspective - bug fixes especially .	O V P D N P ^ , D R A N , L R V P D N P N P , O V N P D N V P L V P V $ P D N , & D A A N , $ , V T P N $ , L D N V V P D N N , N N R ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		Main problem I've experienced is trying to script a load test on a system where the main bulk of the work is done via DWR calls . The format of the calls is difficult to replicate when compared with just replying a bunch of urls with changing parameters . Still DWR is an excellent framework and makes implementing Javascript -> Java RPC pretty damn easy .	A N L V V V P N D N N P D N R D A N P D N V V P ^ V , D N P D N V A P V O V P R V D N P ^ P V N , R ^ V D A N & V V ^ ^ ^ ^ R A A ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		DWR is a great tool when your site has a lot of ajax calls . Each page that makes dwr rpc calls needs to include : a ) an interface file corresponding to the calls being made . and b ) a js file bundled with dwr that contains the dwr engine code that makes these calls possible . for e.g. script src= " / dwr / engine.js " / script one technique that is frequently used while optimizing web applications is to use the browser cache as much as possible when a resource ( like a js file ) has not changed on a server . engine.js is something that will never change unless you upgrade your dwr to a newer version . But , by default , engine.js is not a static file served by your webserver . its bundled as part of the dwr tool itsef and is served by the dwr controller / servlet.this doesnt aid client side caching . So , it is beneficial to save engine.js under the document root of your webserver and let the webserver serve it as a static file .	^ V D A N R D N V D N P ^ V , D N O V ^ ^ V V P V , D , D N V V P D N V V , & V , D ^ V V P ^ O V D N N N O V O V R , P D N N , , N , ^ , , N $ N O V R V P V N N V P V D N N P A P R R D N , P D ^ N , V R V P D N , ^ V N O V R V P O V D N P D A N , & , P N , ^ V R D A N V P D N , D V P N P D N N O & V V P D ^ N , ^ V N N N V , P , O V A P V V P D N N P D N & V D N V O P D A N ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		More about caching engine.js on DWR's site : http://directwebremoting.org/dwr/browser/engine/static.html	A P V ^ P Z N , U		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		One feature missing of current DWR 3.x that any user should take good care is that when an instance of a bean has properties of NULL value , those properties will be still injected to the JSON and these redundant data DO affect the performance . When a property has the value of NULL , usually it should not be sent to frontend . Details of problem : http://dwr.2114559.n2.nabble.com/Creating-Custom-bean-converter-td6178318.html	$ N V P A ^ $ P D N V V A N V O R D N P D N V N P D N , D N V V R V P D ^ & D A N V V D N , R D N V D N P ^ , R O V R V V P N , N P N , U		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
1006387		The biggest difference among other solutions to transfer objects ( marshaling ) is object references . For instance , if you use it to transfer a tree : A |-B |-C in a list { A , B , C} : B.parent = A C.parent = A then A is the same object in Javascrit ! On the bad side , if you have complex structures with circular dependencies and lot of objects : A -B , B -C , C -B , C . A ,... it could crash . Anyway , I use it in a real project used by many hundreds of companies in production to transfer thousands of objects to a single html page in order to draw a complex graph and it works nicely with a good performance .	D A N P A N P N N , V , V N N , P N , P O V O P V D N , N N N P D N , N , N , N , ^ ^ ^ ^ ^ ^ R N V D A N P ^ , P D A N , P O V A N P A N & N P N , N N , N N , N N , N , N , O V V , R , O V O P D A N V P A N P N P N P N N P N P D A ^ N P N P V D A N & O V R P D A N ,		Wed Sep 02 2015 20:20:09 GMT+0800 (CST)
