253403	How to prevent a user from seeing previous users ' info by hitting the " Back " button	R P V D N P V A N , N P V D , R , N
253403	I am developing a java web app using servlet , in order to prevent user from hitting the back button to see previous users ' info , I have the following code : Besides I also have the following code in the file : web / WEB-INF / web.xml And the ResponseHeaderFilter.java looks like this : So far it's still not working correctly . The back button will bring up a warning window saying the data has expired , it asks if the user wants to repost it . If you choose yes , it will still display the previous pages info . What am I doing wrong ? What's the fix ? Frank Yes , I am developing a web app for a PC in public place , if user B hits the back button he might see user A's private info . I was trying to use session id with servlet , but how to do it , any sample code ? I also tried the following : It works for IE but but Firefox .	O V V D N N N V N , P V P V N P V D N N P V A N , ! , O V D N N , P O R V D N N P D N , N , ^ , ^ & D ^ V P D , P R L R R V R , D N N V V T D N N V D N V A , O V P D N V P V O , P O V ! , O V R V D A N N , O V O V A , L D V , ^ ! , O V V D N N P D N P A N , P N G V D N N O V V N Z A N , O V V P V N L P N , & R P V O , D N N , O R V D N , O V P ^ & & ^ ,
253403	Breaking the back button is a cardinal sin of web development . but you could try a bit of java script in the onload that refreshed the details according to the currently logged in session .	V D N N V D N V P N N , & O V V D N P N N P D N O V D N V P D R V P N ,
253403	Breaking the back button is only relevant within a single session . For example , I can't open a new browser window and hit the " back " button to go to the last website I visited .	V D N N V R A P D A N , P N , O V V D A N N & V D , N , N P V P D A N O V ,
253403	I'm not sure if I understand your problem exactly . Are you concerned about Person A logging off , Person B logs in from the same PC and browser instance , and then you want to prevent Person B from seeing whatever A was viewing ? If so , it should be sufficient to check the credentials of the user on every page load . Check that the current user is authorized to view the data being requested .	L R A P O V D N R , V O V P ^ ^ V T , ^ ^ V P P D A N & N N , & R O V P V ^ ^ P V D ^ V N , P R , O V V A P V D N P D N P D N N , V P D A N V V P N D N V V ,
253403	How will hitting the back button cause the user to see another user's data ? What is your use case ? Is it designed for a public terminal , where each user submits data and then leaves ? In this case , associate each input with a unique session id . Keep track of valid session ids in your server . Once the input is submitted , remove that session id from the valid ids . If it comes up again , then don't display the information .	R V V D N N P D N P V D S N , O V D N N , V O V P D A N , R D N V N & R V , P D N , V D N P D A N ^ , V N P A N N P D N , R D N V V , V D N L P D A N , P O V T R , R V V D N ,
253403	I agree - it sounds like he's trying to solve a problem that shouldn't exist ... running the session as a singleton or something ?	O V , O V P L V P V D N P V V , V D N P D ^ & N ,
253403	Your problem is that you're trying to keep the client from seeing what's on his or her own computer . You can't keep them from looking at their browser cache . You can't keep them from disabling JavaScript ( and thus your scripting code ) . You can't keep them from using a browser that doesn't observe that " repost " convention that you mention . This is not a problem that can be solved with JavaScript or a server-side solution . That part of why " breaking the back button " is frowned upon : it doesn't actually solve anything .	D N V P L V P V D N P V L P D & D A N , O V V O P V P D N N , O V V O P V ^ , & R D N N , , O V V O P V D N O V V O , N , N P O V , D V R D N P V V V P ^ & D A N , D N P R , V D N N , V V T , O V R V N ,
253403	Actually , you can turn caching off . Most browsers respect this , but it's not guaranteed .	R , O V V V T , A N N D , & L R A ,
253403	As I mentioned in my post here , you can turn off caching but history may be treated differently by different user agents . The HTTP specification makes a distinction between the two but doesn't really define the concept of history as well as it defines caching .	P O V P D N R , O V V T V & N V V V R P A N N , ^ ^ N V D N P D $ & V R V D N P N P R P O V V ,
253403	I had a similar problem in . Net . I added the following javascript to my logout page : document.execCommand ( " ClearAuthenticationCache " , " false ") ; now if you press the back button you need to authenticate again .	O V D A N P , N , O V D V V P D N N , E , , ^ , , , A N , R P O V D N N O V P V R ,
253403	Have you considered that a malicious user could simply turn off Javascript ?	V O V P D A N V R V T ^ ,
253403	It sounds like your real problem is that the re-post works . That would probably be because you : are trusting credentials from the browser rather than the current session , or are not checking that the current session is allowed access the data represented by a key / identifier value sent from the browser I recommend that after a user has logged in you never trust a user name submitted by the browser . Ideally use the security services of a framework like Spring Security but in their absence you can rely on HttpServletRequest.getUserPrincipal() . To make sure the current session is allowed access the data you could use an Access Control List mechanism provided by a framework such as Spring Security or include a WHERE OWNER= ? clause in your database queries .	O V P D A N V P D N V , O V R V P O , V V N P D N R P D A N , & V R V P D A N V V V D N V P D A , A N V P D N O V O P D N V V P O R V D N N V P D N , R V D N N P D N P ^ N & P D N O V V P ^ , P V A D A N V V V D N O V V D ^ ^ ^ N V P D N R P ^ N & V D ^ ^ , N P D N N ,
253403	If you're worried about someone seeing what was in a form in a previous page you could use a hidden form for the " real " post and use one that's just for display for the user . When the user submits the display form , you copy all of the fields to the hidden form , clear the display form , then submit the hidden one . I agree with everyone else - fiddling with the back button this is a bad way to handle protecting information .	P L A P O V O V P D N P D A N O V V D A N P D , A , N & V $ L R P ^ P D N , R D N V D N N , O N R P D N P D A N , V D N N , R V D A $ , O V P N R , N P D N N D V D A N P V V N ,
253403	I'm not 100% sure this is a fix to your issue , as I don't fully understand how you would get another user's data using back . However , I know that for the web apps I develop I try to exclusively use Redirect After Post to avoid back button and refresh duplicate form submissions .	L R $ A O V D V P D N , P O V R V R O V V D S N V R , R , O V O P D N V O V O V P R V N P N P V T N & V A N N ,
253403	Jeff Atwood described a way to prevent CSRF and XSRF attacks here . You could use this technique to solve your " users seeing what they should not see " problem .	^ ^ V D N P V ^ & N V R , O V V D N P V D , N V O O V R V , N ,
253403	I'm not sure I understand your problem correctly , but it sounds like you are allowing rePOSTs . One approach to prevent resubmission is to use tokens . Put a random token in the form and session . On submission check that the submitted token matches the token in the session if it does , replace the token in the session with a fresh one and process the request otherwise stop processing the request ) .	L R A O V D N R , & O V P O V V ^ , $ N P V N V P V N , V D A N P D N & N , P N V P D V R V D N P D N P O V , V D N P D N P D A $ & N D N R V V D N , ,
253403	All of the different browsers have different behaviors and quirks when it comes to how history relates to the cache and the various headers available to control it . Firefox 3 works differently from Firefox 2 , re-displaying potentially sensitive data when a user clicks the back button in spite of using caching directives to prevent it . The best solution is to use a session cookie that is not persisted and inform the user of the need to close the browser window after logging out . Especially if they are at a public terminal . Painful , I know , but current browser offerings and the HTTP specification do not provide any mechanisms for dealing with browser history . History may be treated differently than caching by a user agent according to the HTTP specification . See 13.13 History Lists as defined in RFC 2616 Hypertext Transfer Protocol -- HTTP / 1.1 for the problem and rationale .	X P D A N V A N & N R O V P R N V P D N & D A N A P N O , ^ $ V R P ^ $ , V R A N R D N V D N N P N P V V N P V O , D A N V P V D N N O V R V & V D N P D V P V D N N P V T , R P O V P D A N , A , O V , & A N N & D N N V R V D N P V P ^ N , ^ V V V R P V P D N N V P D N N , V ^ ^ ^ P V P ^ ^ ^ ^ ^ , ^ , $ P D N & N ,
253403	I think this is as much a user interface challenge as a coding problem . On top of whatever anti-caching techniques you employ , you need to make it clear to the user that they must hit a big , obvious " Logout " button ( or equivalent ) when they are done .	O V D V R A D N N N P D N N , P A P D V N O V , O V P V O V P D N P O V V D A , A , ^ , N , & N , R O V V ,
253403	if this might help . This works for ASP , use an equivalent solution for other languages . % response.buffer = true% > % Response.CacheControl = " no-cache " % > % Response.AddHeader " Pragma " , " no-cache " % > % Response.Expires = -1 % >	P D V N , D V P ^ , V D N N P A N , E E E E E E E E , G , N E G ^ , ^ , , , G , N E N ^ E $ N E
