jQuery_N and_& Java_^ applets_N
I'm_N working_V on_P a_D project_N where_R we're_N using_V a_D Java_^ applet_N for_P part_N of_P the_D UI_G (_G a_D map_N ,_, specifically_R )_$ ,_, but_& building_V the_D rest_N of_P the_D UI_N around_P the_D applet_N in_P HTML_^ /_: JavaScript_^ ,_, communicating_V with_P the_D applet_N through_P LiveConnect_^ /_: NPAPI_^ ._. A_D little_A bizarre_A ,_, I_O know_V ,_, but_& let's_N presume_V that_P setup_N is_V not_R under_P discussion_N ._. I_O started_V out_R planning_N on_P using_V jQuery_N as_P my_D JavaScript_^ framework_N ,_, but_& I've_A run_N into_P two_$ issues_N ._. Issue_V the_D first_A :_: Selecting_V the_D applet_N doesn't_N provide_V access_N to_P the_D applet's_N methods_N ._. Java_^ :_: JavaScript_^ :_: Running_V the_D above_A JavaScript_^ results_V in_P $_$ (_$ "_`` #applet_G -id_G ")_G ._. foo_N is_V not_R a_D function_N This_^ is_V in_P contrast_N to_P Prototype_^ ,_, where_R the_D analogous_A code_N does_V work_N :_: So...where'd_N the_D applet_N methods_N go_V ?_. Issue_^ the_D second_A :_: There's_V a_D known_A problem_N with_P jQuery_N and_& applets_N in_P Firefox_^ 2_$ :_: http://www.pengoworks.com/workshop/jquery/bug_applet/jquery_applet_bug.htm_G It's_G a_D long_A shot_N ,_, but_& does_V anybody_N know_V of_P a_D workaround_N ?_. I_O suspect_V this_D problem_N isn't_G fixable_G ,_, which_D will_V mean_V switching_N to_P Prototype_^ ._. Thanks_N for_P the_D help_N !_.
For_P the_D first_A issue_N ,_, how_R about_P trying_V For_P the_D second_A issue_N here_R is_V a_D thread_N with_P a_D possible_A workaround_N ._. Quoting_V the_D workaround_N change_N that_D code_V to_P :_:
How_R does_V one_$ record_N audio_N from_P a_D Javascript_^ based_A webapp_N ?_.
I'm_N trying_V to_P write_V a_D web-app_N that_D records_V WAV_^ files_V (_G eg_G :_: from_P the_D user's_A microphone_N )_N ._. I_O know_V Javascript_^ alone_R can_V not_R do_V this_D ,_, but_& I'm_N interested_A in_P the_D least_A proprietary_A method_N to_P augment_V my_D Javascript_^ with_P ._. My_D targeted_A browsers_N are_V Firefox_^ for_P PC_^ and_& Mac_^ (_^ so_R no_R ActiveX_G )_G ._. Please_! share_V your_D experiences_N with_P this_D ._. I_O gather_V it_O can_V be_V done_V with_P Flash_G (_G but_& not_R as_P a_D WAV_N formated_A file_N )_N ._. I_O gather_V it_O can_V be_V done_V with_P Java_^ (_N but_& not_R without_P code-signing_A )_N ._. Are_V these_D the_D only_A options_N ?_. @dominic_A -mazzoni_A I'd_N like_P to_P record_V the_D file_N as_P a_D WAV_N because_P because_P the_D purpose_N of_P the_D webapp_N will_V be_V to_P assemble_V a_D library_N of_P good_A quality_N short_A soundbites_N ._. I_O estimate_V upload_N will_V be_V 50_$ MB_^ ,_, which_D is_V well_R worth_A it_O for_P the_D quality_N ._. The_D app_N will_V only_R be_V used_V on_P our_D intranet_N ._. UPDATE_^ :_: There's_V now_R an_D alternate_A solution_N thanks_N to_P JetPack's_N upcoming_V Audio_^ API_^ :_: See_V https://wiki.mozilla.org/Labs/Jetpack/JEP/18_N
Maybe_R you_O find_V this_D useful_A :_: https://github.com/milani/microphone.js_N
Flash_^ is_V going_V to_P be_V your_D best_A solution_N ._. Hopefully_R this_D will_V help_V :_: http://www.kirupa.com/forum/showthread.php?t=17331_N
Yes_R I_O believe_V Flash_^ or_& a_D Java-Applet_^ are_V the_D only_A ways_N to_P do_V that_D ._. Since_P you_O cannot_V interact_N with_P a_D microphone_N you_O must_V use_V some_D sort_N of_P browser-plugin_N ,_, its_D the_D only_A way_N to_P use_V the_D microphone_N ._. I'm_N not_R aware_A of_P any_D other_A plugin_N that_D would_V provide_V that_P features_N ._. A_D quick_A search_N on_P Google_^ did_V not_R reveal_V any_D further_A possibilities_N ._. I_O think_V the_D easiest_A would_V be_V going_V with_P Flash_^ ._.
Your_D only_A options_N are_V Flash_^ ,_, Java_^ ,_, ActiveX_^ ,_, or_& writing_V a_D custom_N Firefox_^ extension_N ._. Flash_^ is_V probably_R your_D best_A option_N -_: you_O could_V write_V or_& use_V an_D existing_V Flash_N app_N to_P do_V the_D recording_N and_& keep_V almost_R everything_N else_R in_P pure_A Javascript_^ ._. Why_R do_V you_O want_V a_D WAV_^ file_N ?_. If_P you're_N planning_V to_P process_V the_D actual_A bits_N of_P the_D waveform_N on_P the_D client_N ,_, then_R that's_V probably_R a_D bad_A idea_N ;_: the_D client_N might_V be_V really_R slow_A and_& you_O wouldn't_V be_V able_A to_P really_R manipulate_V the_D file_N ._. If_P you_O want_V to_P send_V the_D sound_N back_R to_P the_D server_N ,_, then_R it's_V much_R better_A to_P send_V a_D compressed_V file_N ,_, and_& then_R uncompress_V it_O on_P the_D server_N ._.
Flash_^ requires_V you_O to_P use_V a_D media_N server_N (_$ note_N :_: I'm_N still_R using_V Flash_^ MX_^ ,_, but_& a_D quick_A Google_^ search_N brings_V up_R documentation_N for_P Flash_A CS3_N that_D seems_V to_P concur_V -_: note_N that_D Flash_V CS4_N is_V out_R soon_R ,_, might_V change_V then_R )_^ ._. Macromedia_^ /_: Adobe_^ aim_N to_P flog_V you_O their_D media_N server_N ,_, but_& the_D Red5_N open-source_N project_N might_V be_V suitible_A for_P your_D project_N :_: http://osflash.org/red5_N I_O think_V Java_^ is_V going_V to_P be_V more_R suitible_A ._. I've_N seen_V an_D applet_N that_D might_V do_V what_O you_O want_V over_R on_P Moodle_G (_G an_D open-source_A virtual_A learning_N environment_N ):_G http://64.233.183.104/search?q=cache:k27rcY8QNWoJ:moodle.org/mod/forum/discuss.php%3Fd%3D51231+moodlespeex_G hl=en_G ct=clnk_G cd=1_G gl=uk_G (_G membership-required_A site_N ,_, but_& open_A to_P Google_^ ,_, hence_R the_D link_N goes_V to_P the_D Google_^ cache_N page_N )_N ._.
As_P of_P Flash_^ 10_$ you_O do_V not_R need_V a_D media_N server_N ._. You_O can_V capture_V the_D raw_A samples_N and_& send_V them_O to_P an_D arbitrary_A back-end_A with_P an_D HTTP_N post_N ._. https://code.google.com/p/wami-recorder_N /_:
You_O could_V download_V Real_^ Producer_^ Basic_^ ,_, which_D is_V free_A here_R (_^ http://forms.real.com/rnforms/products/tools/producerbasic_^ )_^ ,_, and_& imbed_V it_O as_P an_D activeX_N object_N since_P it's_N on_P your_D intranet_N ._. Flash_^ will_V embed_V the_D same_A way_N ,_, it's_N on_P all_X the_D office_N workstations_N ,_, but_& since_P this_D is_V your_D Intranet_^ ,_, you_O could_V install_V it_O on_P all_X the_D machines_N with_P AD_N ._. Real_A audio_N files_N are_V very_R small_A compared_V to_P wav_V and_& sound_V great_A ._. Here's_V a_D link_N to_P the_D Real_^ Sudio_^ ActiveX_^ how-to_A guide_N ._. http://service.real.com/help/library/guides/activex/producerx.html_N
This_D is_V a_D paid_V solution_N but_& it_O will_V do_V what_O you_O are_V looking_V for_P ._. http://www.javasonics.com_N /_:
Another_D solution_N if_P you_O don't_V mind_V your_D users_N installing_V a_D plugin_N is_V to_P use_V Runtime_^ Revolution_^ RevWeb_^ plugin_N which_D supports_V recording_N audio_N in_P browser_N (_N and_& is_V trivial_A to_P implement_V ,_, I_O made_V a_D test_N applet_N to_P confirm_V this_D in_P about_R 10_$ minutes_N )_^ ._. http://revweb.runrev.com_^ /_:
This_D is_V an_D old_A thread_N ,_, but_& the_D issue_N remains_V relevant_A ._. It_O should_V be_V noted_V that_P there_X is_V a_D way_N to_P record_V audio_N to_P the_D server_N in_P Flash_^ without_P a_D proprietary_N back-end_A ._. Here's_V an_D example_N project_N to_P get_V you_O started_V :_: https://code.google.com/p/wami-recorder_N /_:
I'd_N say_V this_D answer_N is_V better_A than_P the_D accepted_V one_$ from_P 2008_$ ,_, as_P it_O has_V the_D same_A effect_N but_& a_D dedicated_A server_N component_N is_V not_R required_V ._. It_O is_V still_R not_R a_D complete_A solution_N as_P it_O will_V not_R work_V on_P Apple_^ mobile_A devices_N ,_, which_D are_V widespread_A ._. Hopefully_R a_D reasonable_A cross_N platform_N standard_N which_D combines_V native_A recording_N ,_, an_D open_A file_N format_N and_& plain_A HTTP_^ post_N will_V emerge_V soon_R ._.
Write_V a_D Servlet_^ that_P Talks_N to_P JMS_^ (_^ ActiveMQ_^ )_^ and_& OnMessage_^ Update_^ the_D Site_N
I_O am_V building_V a_D site_N that_D uses_V a_D simple_A AJAX_^ Servlet_^ to_P talk_V JMS_^ (_^ ActiveMQ_^ )_^ and_& when_R a_D message_N arrives_V from_P the_D topic_N to_P update_V the_D site_N ._. I_O have_V Javascript_^ that_D creates_V an_D XMLHttpRequest_N for_P data_N ._. The_D Servlet_^ processes_V the_D Get_V Request_N and_& sends_V back_R JSON_^ ._. However_R I_O have_V no_D idea_N how_R to_P connect_V my_D Servlet_^ into_P my_D ActiveMQ_^ Message_^ Broker_^ ._. It_O just_R sends_V back_R dummy_A data_N right_R now_R ._. I_O am_V thinking_V the_D Servelt_^ should_V implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D JavaScript_^ page_N ._. But_& I'm_N not_R sure_A how_R to_P do_V this_D ._.
You_O probably_R need_V to_P get_V a_D JMS_^ connection_N from_P JNDI_^ ,_, like_P this_D :_:
Okay_! ..._: this_D is_V a_D good_A way_N to_P connect_V to_P my_D Topic_^ ,_, thanks_N ._. I_O already_R have_V code_N like_P this_D is_V another_D Java_^ Client_^ ._. But_& I_O want_V the_D Servelt_^ to_P implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D Javascript_^ page_N ._.
The_D problem_N with_P having_V a_D servlet_N implement_V MessageListener_^ is_V that_P servlets_N are_V synchronous_A and_& MessageListeners_N are_V asynchronous_A ._. Instead_R you_O should_V create_V some_D other_A object_N to_P act_V as_P the_D MessageListener_^ and_& update_V some_D state_N somewhere_R (_V possibly_R a_D database_N or_& a_D JMX_N MBean_N or_& a_D Stateful_A Session_N EJB_N )_N when_R messages_N come_V in_R ._. Then_R the_D servlet_N can_V query_V that_D state_N to_P see_V if_P there's_A data_N to_P report_V back_R to_P the_D client_N ,_, and_& your_D web_N page_N can_V periodically_R ping_V the_D servlet_N to_P ask_V for_P fresh_A data_N ._.
Thanks_N jodonnell_G .._G I_O have_V never_R wrote_V a_D JMX_N MBean_N or_& Stateful_A Session_N EJB_N but_& after_P a_D quick_A google_N search_N I_O think_V this_D is_V the_D right_A path_N to_P look_V down_R ._. Thanks_N for_P the_D help_N ._.
Have_V you_O tried_V reading_V the_D answers_N for_P this_D question_N which_D links_V to_P the_D ActiveMQ_^ Ajax_^ support_N ._. Basically_R ActiveMQ_^ has_V native_A support_N for_P Ajax_^ so_P you_O can_V use_V its_D JavaScript_^ library_N to_P directly_R subscribe_V from_P an_D ActiveMQ_N topic_N ._. Also_R see_V the_D ActiveMQ_N web_N samples_N which_D show_V how_R to_P do_V things_N like_P real_A time_N chat_N or_& real_A time_N stock_N portfolio_N screens_N using_V Ajax_N with_P ActiveMQ_N
As_P James_^ Strachan_^ says_V -_: http://activemq.apache.org/ajax.html_N is_V an_D ideal_A out-of-the-box_A solution_N for_P your_D problem_N ._. If_P you_O still_R want_V to_P create_V such_A solution_N manually_R you_O can_V just_R create_V JMS_^ connection_N in_P your_D Ajax_N servlet_G (_G connection_N per_P request_N )_N ._. Consider_V using_V Spring_^ JMS_^ template_N for_P that_D reason_N (_G http://static.springsource.org/spring/docs/2.5.x/reference/jms.html_G )_G ._. Then_R just_R receive_V the_D message_N in_P the_D Servlet_G doGet_G /_: doPost_N method_N ._. Consider_V low_A timeout_N value_N for_P receiving_V in_P that_D case_N ._. Such_A solution_N will_V work_V for_P the_D Queues_N and_& durable_A Topics_N ._. For_P non-durable_A Topics_N consider_V external_A message_N listener_N ._. Spring_^ MessageListenerContainer_^ is_V an_D excellent_A tool_N for_P that_D purpose_N :_: Bean_^ lastTenUpdatesCache_N will_V be_V a_D singleton_N bean_N implementing_V MesssageListener_^ ._. This_D bean_N would_V be_V responsible_A for_P caching_V last_A ten_$ messages_N (_$ just_R putting_V it_O into_P a_D java.util_N list_N )_N ._. It_O will_V be_V injected_V into_P your_D Ajax_^ servlet_N so_R in_P your_D doGet_N /_: doPost_N method_N you_O can_V ask_V it_O about_P last_A 10_$ messages_N sent_V to_P the_D topic_N ._.
Passing_V JS_N function_N to_P applet_V for_P as_P event_N listener_N
Is_V it_O possible_A to_P pass_V a_D function_N /_: callback_N from_P javascript_N to_P a_D java_N applet_N ?_. For_P example_N i_G have_V an_D applet_N with_P a_D button_N that_P when_R pressed_V it_O will_V call_V the_D passed_V js_G callback_G
You_O can_V use_V JSObject_N to_P call_V back_R into_P javascript_N from_P Java_^ ._. From_P that_D page_N :_:
is_V it_O also_R possible_A to_P pass_V js_N function_N which_D is_V an_D object_N as_P the_D first_A argument_N of_P win.call_N instead_R the_D name_N of_P the_D js_N function_N ?_.
No_R ,_, but_& instead_R of_P passing_V in_P the_D bare_A callback_N function_N you_O could_V create_V a_D new_A object_N containing_V it_O ,_, pass_V that_P in_P then_R use_V the_D object.call_G (_G name_N )_N form_N ._.
I_O tend_V to_P use_V something_N I_O derived_V from_P the_D reflection_N example_N at_P the_D bottom_N of_P this_D page_N ,_, as_P then_R you_O don't_V need_V to_P meddle_V with_P your_D classpath_N to_P get_V it_O to_P compile_V Then_R I_O just_R pass_V JSON_N strings_N around_P between_P the_D applet_N and_& javascript_N
thx_N for_P the_D link_N ,_, it_O just_R contains_V all_X the_D possible_A methods_N
ps_N ._. to_P use_V JSObject_N you_O may_V need_V to_P include_V "_`` MAYSCRIPT_^ "_'' tag_N to_P applet_V html_N tag_N ._.
JavaScript_^ or_& Java_^ String_^ Subtraction_^
If_P you_O are_V using_V Java_^ or_& JavaScript_^ ,_, is_V there_R a_D good_A way_N to_P do_V something_N like_P a_D String_^ subtraction_N so_P that_P given_V two_$ strings_N :_: you_O just_R get_V I_O know_V that_P I_O could_V just_R write_V code_N to_P walk_V the_D string_N comparing_V characters_N ,_, but_& I_O was_V hoping_V there_X was_V a_D way_N to_P do_V it_O in_P really_R compact_A way_N ._. EDIT_V TO_P A_D DD:_N As_P I_O was_V analyzing_V the_D data_N I_O get_V when_R I_O use_V this_D I_O realized_V that_P I_O missed_V the_D statement_N of_P the_D case_N a_D bit_N ._. It_O should_V be_V :_: So_R ,_, I_O actually_R only_R want_V to_P remove_V the_D sections_N that_D are_V identical_A ._. That_D said_V ,_, the_D answer_N that_P I_O accepted_V is_V closest_A to_P my_D goal_N ._.
I_O don't_V see_V how_R JavaScript_^ is_V relevant_A here_R ..._:
How_R isn't_A it_O ?_. You_O never_R need_V to_P remove_V a_D string_N from_P another_D string_N in_P javascript_N ?_. Granted_V ,_, all_D solutions_N have_V been_V posted_V in_P java_N ,_, but_& that_P doesn't_N invalidate_V the_D question_N ._.
LOL_^ -_: okay_A then_R ,_, let's_N tag_V this_D as_P Java_^ /_: JavaScript_^ /_: C#_N /_: VB.NET_N /_: Python_N /_: Ruby_^ /_: erlang_N /_: Smalltalk_N /_: Lisp_N /_: etc_N ..._: My_D point_N is_V ,_, JavaScript_^ and_& Java_^ have_V nothing_N in_P common_A other_A than_P syntax_N shared_V with_P C#_N ,_, C_N ,_, C++_^ ,_, etc_G ._. and_& this_D is_V not_R really_R a_D JavaScript_^ solution_N ._.
Should_V work_V ..._: EDIT_^ :_: Apache_G commons_G libraries_N are_V also_R great_A to_P use_V As_P noted_V below_P ,_, the_D StringUtils_^ class_N does_V in_P fact_N have_V a_D method_N for_P this_D :_: StringUtils.remove()_N
Can't_V you_O just_R replace_V the_D occurrences_N of_P the_D first_A string_N in_P the_D second_N with_P an_D empty_A string_N ?_.
Depends_N on_P precisely_R what_O you_O want_V ._. If_P you're_N looking_V for_P a_D way_N to_P compare_V strings_N in_P the_D general_A case_N --_: meaning_N finding_V common_A sub-strings_N between_P arbitrary_A inputs_N --_: then_R you're_N looking_V at_P something_N closer_R to_P the_D Levenshtein_^ distance_N and_& similar_A algorithms_N ._. However_R ,_, if_P all_D you_O need_V is_V prefix_N /_: suffix_N comparison_N ,_, this_D should_V work_V :_: ..._: or_& something_N roughly_R to_P that_D effect_N ._.
Thanks_N Chris_^ and_& Daniel_^ (_^ and_& all_X the_D rest_N of_P you_O )_V ._. That_D was_V amazingly_R fast_R ._.
This_D seems_V like_P way_N too_R much_A code_N for_P what's_N requested_V -_: Erickson's_N approach_V (_R replace_V string_N B_N in_P string_N A_N with_P empty_A string_N )_N is_V much_R simpler_A and_& readable_A ._.
@Herb_G Agreed_G ,_, I_O do_V like_P Erickson's_G (_G and_& Chris's_G )_G approach_N much_R better_A for_P readability_N ._. However_R ,_, his_D doesn't_N enforce_V strict_A prefix_N /_: suffix_N ._. The_D problem_N I_O have_V is_V the_D question_N is_V a_D bit_N ill-defined_A :_: what_O does_V String_^ difference_N really_R mean_V ?_.
If_P you're_N just_R trying_V to_P get_V whatever's_N after_P the_D last_A dot_N ,_, I_O find_V this_D method_N easy_A in_P Javascript_^ :_: subString_N will_V contain_V the_D value_N you're_N looking_V for_P ._.
At_P first_A glance_N ,_, I_O thought_V of_P RegExp_^ ,_, but_& adding_V to_P the_D question_N ,_, you_O removed_V that_P possibility_N by_P adding_V to_P the_D start-string_N ..._: So_P you'll_N have_V to_P make_V a_D procedure_N ,_, that_D takes_V every_D character_N that_D are_V equal_A out_P of_P the_D resulting_V string_N ,_, something_N like_P this_D :_: By_P the_D way_N it_O doesn't_R have_V a_D meaning_N to_P set_V Java_^ and_& javascript_N as_P equals_V in_P any_D context_N ,_, a_D popular_A way_N of_P putting_V it_O could_V be_V :_: Java_^ and_& javascript_N has_V four_$ things_N in_P common_A :_: j_N -_: a_D -_: v_G -_: a_D !_. -_: )_N
Though_P this_D relies_V on_R that_P the_D character_N with_P code_N 1_$ does_V not_R appear_V in_P any_D of_P those_D strings_N ._.
Java_^ :_: Scripting_V language_N (_G macro_G )_N to_P embed_V into_P a_D Java_^ desktop_N application_N
I_O am_V writing_V a_D graphics_N application_N in_P Java_^ ._. Eventually_R I_O would_V like_V to_P build_V in_P a_D scripting_V language_N so_P things_N are_V programmable_A ._. Which_D language_N library_N do_V you_O recommend_V ?_. Likely_A suspects_N are_V :_: Rhino_^ (_^ JavaScript_^ )_^ JRuby_^ (_^ Ruby_^ )_G Jython_G (_G Python_G )_G Less_R likely_A candidates_N are_V :_: Whip_N up_R my_D own_A language_N using_V JavaCC_G LuaJava_G (_G Lua_G )_G Groovy_G JavaFX_G Script-Fu_G The_D target_N audience_N are_V probably_R not_R hardcore_N programmers_N ,_, so_R less_R arcane_A language_N is_V preferred_V ._. My_D guess_N is_V that_P JavaScript_^ is_V more_R acceptable_A by_P them_O even_R with_P its_D quirks_N just_R because_P they've_N seen_V it_O more_A ._. Lua_N seems_V to_P be_V popular_A in_P C_N /_: C++_^ ,_, but_& at_P least_A LuaJava_^ requires_V additional_A ._. dll_N /_: ._. so_R ,_, which_D makes_V deployment_N complicated_A ._. EDIT_^ :_: PhiLho_^ wrote_V that_P there's_N a_D Java_^ implementation_N of_P Lua_^ called_V kahlua_N ._. Related_A questions_N :_: Which_D scripting_V language_N to_P support_V in_P an_D existing_V codebase_N ?_. (_N in_P C_N /_: C++_^ )_^ Adding_V Scripting_N functionality_N to_P ._. net_A Apps_N What_O is_V the_D best_A scripting_N language_N to_P embed_V in_P a_D C#_N desktop_N application_N ._.
if_P the_D target_N audience_N is_V "_`` no_D programming_N skills_N ...._V "_`` choose_V jython_G (_G python_G )_G it_O is_V easy_A to_P learn_V ._. (_$ my_D 7_$ year_N old_A daugther_N learned_V it_O very_R quick_A )_N Bruce_^ Eckel_^ made_V a_D chapter_N with_P jython_N in_P "_`` thinking_V in_P java_N "_'' ._. at_P the_D danger_N getting_V a_D "_`` down-vote_A "_'' python_N is_V easier_A as_P BASIC_G :-)_G
+1_N for_P -BASIC_N ;o_N )_N
Lua_N is_V appreciated_V ,_, among_P other_A things_N ,_, by_P the_D simplicity_N of_P the_D language_N ,_, making_V it_O easy_A to_P learn_V ._. LuaJava_^ uses_V the_D original_A Lua_N implementation_N ,_, making_V it_O complete_A ,_, but_& as_P you_O point_V it_O ,_, maybe_R delicate_A to_P install_V ._. I_O know_V at_P least_A a_D pure_A Java_^ implementation_N of_P Lua_^ :_: Kahlua_^ ._. It_O is_V not_R complete_A (_N lacking_V coroutine_N support_N among_P other_A things_N ,_, but_& one_O can_V do_V much_R without_P them_O )_$ but_& perhaps_R already_R usable_A for_P your_D goal_N ._. Unlike_P ,_, say_V ,_, Groovy_^ ,_, it_O shouldn't_N add_V much_A overhead_N to_P your_D application_N ..._:
There's_N also_R BeanShell_^ ,_, which_D has_V the_D advantage_N of_P being_V a_D fully-approved_A JSR_N ,_, and_& so_R perhaps_R more_R likely_A to_P stick_V around_R ._. http://www.beanshell.org_N /_:
Plus_N side_N :_: it's_N basically_R dynamic_A Java_^ ,_, so_P it's_N really_R easy_A to_P attach_V it_O to_P a_D Java_^ program_N ._. Minus_^ side_N :_: it's_N basically_R dynamic_A Java_^ ,_, so_P it_O might_V not_R be_V the_D easiest_A language_N to_P learn_V ._.
If_P I_O like_V Java_^ ,_, and_& I_O use_V Java_^ ,_, but_& I_O don't_V want_V my_D users_N to_P know_V that_P they_O are_V running_V Java_^ app_N ,_, is_V that_P sort_N of_P like_P being_V ashamed_A of_P ugly_A girl_N friend_N ?_. No_! ,_, right_R ?_.
You_O might_V consider_V Jacl_^ ._. It_O is_V based_V on_P Tcl_^ which_D was_V originally_R designed_V to_P be_V an_D embeddable_A scripting_N language_N ._. So_R ,_, one_O could_V argue_V it_O is_V much_R more_R suited_V for_P that_D purpose_N than_P other_A scripting_V languages_N that_D had_V the_D ability_N to_P be_V embedded_V tacked-on_A ._. Particularly_R if_P the_D target_N audience_N is_V "_`` not_R hardcore_N programmers_N "_'' ,_, Jacl_^ makes_V a_D fine_A choice_N ._. Intelligent_A people_N (_N and_& especially_R those_D without_P hard-wired_A programming_N prejudices_N )_N can_V easily_R pick_V up_R the_D Tcl_^ syntax_N in_P a_D morning_N ._.
If_P you_O wanted_V to_P go_V all_D out_P you_O could_V utilize_V scripting_N for_P the_D Java_^ Platform_^ as_P defined_V by_P JSR_N 223_$ ._. Taking_V that_D approach_N would_V allow_V the_D application_N to_P utilize_V any_D language_N that_D has_V a_D conforming_V script_N engine_N ._.
"_`` The_D Mozilla_^ Rhino_^ engine_N for_P the_D JavaScript_^ programming_N language_N ,_, however_R ,_, is_V currently_R included_V as_P a_D feature_N in_P the_D JDK_N 6_$ and_& JRE_N 6_$ libraries_N ._. "_'' Does_^ this_D put_A Rhino_N slightly_R ahead_R of_P everyone_N else_R ?_.
In_P theory_N it_O does_V ._. I'm_V not_R really_R sure_A that_D is_V what_O has_V happened_V in_P reality_N yet_R ._.
Java_^ 6_$ already_R has_V javascript_V available_A as_P a_D JSR_N 223_$ scripting_N language_N ,_, out_P of_P the_D box_N ._.
It_O ships_N with_P Rhino_N ,_, which_D I_O commented_V on_P laz's_N answer_N too_R ._. In_P theory_N ,_, this_D is_V the_D official_A endorsement_N ._.
You_O can_V use_V RelProxy_^ -_: Java_^ ,_, it_O provides_V real_A and_& pure_A Java_^ as_P a_D scripting_N language_N ,_, including_V shell_N scripts_N made_V with_P Java_^ ,_, thanks_N to_P its_D compilation_N on_P the_D fly_N ._. Because_P the_D Java_^ "_`` script_N "_'' is_V executed_V sharing_V the_D launcher_N ClassLoader_^ ,_, integration_N is_V straightforward_A ._.
Dynamicaly_R populating_V a_D combobox_N with_P values_N from_P a_D Map_N based_V on_P what's_N selected_V in_P another_D combobox_N
Thanks_N for_P your_D answer_N ,_, Phill_^ ._. Actually_R ,_, I'm_N using_V Spring_N ._. While_P your_D answer_N is_V a_D nice_A one_N ,_, I'd_N still_R like_P to_P hear_V some_D other_A opinions_N :-)_$
How_R about_P something_N like_P this_D ,_, using_V prototype_N ?_. First_A ,_, your_D select_A box_N of_P categories_N :_: Then_R ,_, you_O output_N N_N different_A select_A boxes_N ,_, one_$ for_P each_D of_P the_D sub-categories_N :_: Your_D changeCategory_N javascript_N function_N disables_V all_D selects_V with_P class_N categorySelect_N ,_, and_& then_R enables_V just_R the_D one_$ for_P your_D current_A categoryID_N ._. When_R you_O hide_V /_: disable_V like_P this_D in_P prototype_N ,_, it_O not_R only_R hides_V it_O on_P the_D page_N ,_, but_& it_O will_V keep_V that_P FORM_N variable_N from_P posting_V ._. So_R even_R though_P you_O have_V N_N selects_V with_P the_D same_A FORM_N variable_A name_N (_^ myFormVar_^ )_^ ,_, only_R the_D active_A one_$ posts_N ._.
If_P I_O understand_V this_D correctly_R ,_, every_D time_N a_D car_N manufacturer_N is_V added_V or_& removed_V from_P the_D Map_N ,_, I'd_N have_V to_P add_V or_& remove_V the_D appropriate_A select_A tag_N in_P the_D JSP_^ ._. Since_P I_O get_V this_D Map_N from_P a_D vendor's_N web_N service_N ,_, I_O have_V no_D way_N of_P knowing_V how_R many_A elements_N the_D Map_N might_V have_V ._.
And_& ,_, I_O still_R don't_V know_V of_P a_D way_N to_P retrieve_V the_D names_N of_P the_D cars_N ._. The_D name_N of_P the_D car_N being_V a_D String_^ in_P a_D Car_N object_N ,_, that's_N stored_V in_P a_D List_N that's_N stored_V as_P a_D value_N in_P a_D Map_N ._. Whew_N ..._: talk_N about_P complicated_A ..._:
Not_R that_P long_R ago_R I_O thought_V about_P something_N similar_A ._. Using_V jQuery_N and_& the_D TexoTela_^ add-on_A it_O wasn't_G all_X that_D difficult_A ._. First_A ,_, you_O have_V a_D data_N structure_N like_P the_D map_N mentioned_V above_P :_: Your_D HTML_^ should_V look_V comparable_A to_P :_: Then_R ,_, you_O fill_V the_D first_A combo_N with_P jQuery_N code_N like_P :_: where_R manufacturerSelected_A is_V the_D callback_N registered_V on_P the_D onChange_N event_N This_^ should_V do_V the_D trick_N ._. Please_V note_N that_P there_X may_V be_V syntax_A errors_N in_P there_X ;_: I_O have_V edited_V my_D code_N to_P reflect_V your_D use_N case_N and_& had_V to_P strip_V quite_R a_D lot_N out_P ._. If_P this_D helps_V I_O would_V appreciate_V a_D comment_N ._.
First_R of_P all_D ,_, thanks_N for_P your_D answer_N ,_, extraneon_N ._. I'll_N use_V it_O if_P I_O don't_V find_V any_D other_A way_N ._. However_R ,_, there_X are_V two_$ issues_N here_R ._. The_D first_A one_$ is_V that_D I'm_N not_R doing_V this_D for_P my_D own_A personal_A project_N ,_, but_& as_P a_D part_N of_P a_D larger_A enterprise_N app_N for_P the_D company_N I'm_N currently_R employed_V at_P ._. Because_P of_P that_D ,_,
I_O might_V not_R be_V allowed_V to_P use_V JQuery_N ._. They're_V a_D bit_N touchy_A when_R it_O comes_V to_P introducing_V new_A frameworks_N in_P the_D app_N ._. But_& ,_, if_P I_O can't_V get_V it_O to_P work_V any_D other_A way_N ,_, I'll_N just_R have_V to_P get_V my_D boss_N to_P convince_V the_D business_N guys_N that_D that's_V the_D only_A way_N to_P do_V it_O ._. However_R ,_, the_D larger_A issue_N is_V getting_V the_D map_N
to_P work_V in_P JavaScript_^ ._. I_O already_R mentioned_V that_P I'm_N getting_V it_O from_P a_D webservice_N ,_, and_& my_D controller_N passes_V it_O to_P JSP_^ ,_, so_P I_O can't_V just_R hardcode_V it_O in_P JavaScript_^ ,_, I_O have_V to_P be_V able_A to_P map_V my_D map_N to_P a_D JavaScript_^ object_N ,_, so_P that_P I_O can_V manipulate_V it_O there_R ._. I'm_N still_R working_V on_P my_D own_A solution_N ,_, though_R ,_, so_R
if_P I_O get_V anywhere_R ,_, I'll_N post_V the_D solution_N here_R ._. Once_R again_R ,_, everybody_N ,_, thanks_N for_P all_X the_D answers_N ,_, and_& excuse_V me_O for_P the_D long_A comment_N ._.
As_P an_D add-on_A on_P my_D previous_A post_N ;_: You_O can_V put_V a_D script_N tag_N in_P your_D JSP_^ where_R you_O iterate_V over_P your_D map_N ._. An_D example_N about_P iterating_V over_P maps_N can_V be_V found_V in_P Maps_^ in_P Struts_^ ._. What_O you_O would_V like_V to_P achieve_V (_N if_P you_O don't_V care_N about_P form_N submission_N )_N is_V I_O think_V something_N like_P :_: You_O still_R have_V some_D superfuous_A "_`` ,_, "_'' which_D you_O might_V wish_V to_P prevent_V ,_, but_& I_O think_V this_D should_V do_V the_D trick_N ._.
I_O just_R love_V a_D challenge_N ._. No_D jQuery_N ,_, just_R plain_A javascript_N ,_, tested_V on_P Safari_^ ._. I'd_N like_P to_P add_V the_D following_A remarks_N in_P advance_N :_: It's_N faily_R long_R due_A to_P the_D error_N checking_N ._. Two_$ parts_N are_V generated_V ;_: the_D first_A script_N node_N with_P the_D Map_N and_& the_D contents_N of_P the_D manufacterer_N SELECT_^ Works_^ on_P My_^ Machine_^ (_^ TM_^ )_^ (_^ Safari_^ /_: OS_N X_N )_N There_X is_V no_D (_G css_G )_G styling_N applied_V ._. I_O have_V bad_A taste_N so_P it's_N no_D use_N anyway_R ._. ._.
Very_R nice_A ,_, extraneon_N !_. However_R ,_, the_D map_N is_V still_R hardcoded_V ,_, so_P the_D challenge_N is_V still_R on_P ..._: :-)_$ To_P be_V honest_A ,_, i_G managed_V to_P solve_V the_D problem_N ,_, although_P the_D solution_N isn't_N pretty_R ._. The_D populating_V part_N is_V done_V pretty_R much_R the_D way_N you_O did_V it_O ._. I_O haven't_V posted_V it_O yet_R '_G cause_N i_G have_V a_D lot_N to_P do_V but_& I'll_V post_N
it_O as_R soon_R as_P I_O can_V ,_, probably_R the_D day_N after_P tomorrow_N ._. Although_P your_D solution_N isn't_N complete_A ,_, I'm_N giving_V you_O a_D vote_N up_R ,_, just_R for_P the_D effort_N you_O put_V into_P it_O :-)_^ Hint_^ :_: my_D solution_N involves_V using_V a_D scriptlet_N ._.
OK_! ._. I_O should_V have_V written_V a_D JSP_^ and_& dynamically_R generate_V modelsPerManufacturer_N and_& the_D manufacturer_N SELECT_N ._. using_V nothing_N but_& the_D input_N Map_N ._. I'll_N update_V the_D answer_N tonight_N (_$ it's_N now_R 7am_V here_R )_$ ._.
Here_R is_V a_D working_N ,_, cut-and-paste_A answer_N in_P jsp_N without_P any_D tag_N libraries_N or_& external_A dependencies_N whatsoever_R ._. The_D map_N with_P models_N is_V hardcoded_A but_& shouldn't_N pose_V any_D problems_N ._. I_O separated_V this_D answer_N from_P my_D previous_A answer_N as_P the_D added_V JSP_^ does_V not_R improve_V readability_N ._. And_& in_P '_G real_A life_N '_'' I_O would_V not_R burden_N my_D JSP_^ with_P all_X the_D embedded_A logic_N but_& put_V it_O in_P a_D class_N somewhere_R ._. Or_& use_N tags_N ._. All_D that_P "_`` first_A "_'' stuff_N is_V to_P prevent_V superfluos_N "_`` ,_, "_'' in_P the_D generated_V code_N ._. Using_V a_D foreach_G dosn't_G give_V you_O any_D knowledge_N about_P the_D amount_N of_P elements_N ,_, so_P you_O check_V for_P last_A ._. You_O can_V also_R skip_V the_D first-element_A handling_N and_& strip_V the_D last_A "_`` ,_, "_'' afterwards_R by_P decreasing_V the_D builder_N length_N by_P 1_$ ._.
Well_R anyway_R ,_, as_P i_G said_V ,_, i_G finally_R managed_V to_P do_V it_O by_P myself_O ,_, so_R here's_V my_D answer_N ..._: I_O receive_V the_D map_N from_P my_D controller_N like_P this_D (_G I'm_G using_V Spring_^ ,_, don't_^ know_V how_R this_D works_V with_P other_A frameworks_N ):_V These_D are_V my_D combos_N :_: I_O imported_V the_D following_A classes_N (_V some_D names_N have_V ,_, of_P course_N ,_, been_V changed_V ):_$ And_& here's_$ the_D code_N that_D does_V all_X the_D hard_A work_N :_:
How_R do_V you_O restrict_V the_D size_N of_P a_D file_N being_V uploaded_V with_P JavaScript_^ (_^ or_& Java_^ )_N without_P transferring_V the_D entire_A file_N ?_.
Is_V there_R a_D way_N to_P validate_V on_P the_D client_N side_N browser_N whether_P the_D size_N of_P a_D file_N being_V uploaded_V from_P a_D JSP_^ page_N is_V over_P a_D set_V size_N limit_N without_P forcing_V the_D user_N to_P upload_V the_D entire_A file_N only_R to_P find_V out_R it_O was_V too_R large_A ?_. I_O would_V like_V to_P stay_V away_R from_P any_D proprietary_A controls_N or_& techniques_N like_P Flash_N or_& ActiveX_N if_P possible_A ._. Thanks_N !_.
This_D isn't_N a_D perfect_A solution_N ,_, but_& if_P you_O check_V the_D Content-Length_A HTTP_N header_N with_P request.getHeader_G (_G "_`` Content-Length_A ")_N then_R you_O can_V choose_V to_P not_R transfer_V the_D entire_A file_N ._. By_P way_N of_P explanation_N ,_, an_D extremely_R large_A file_N will_V not_R be_V transferred_V all_D at_P once_R ._. You'd_N have_V to_P actually_R open_V a_D stream_N representing_V that_P chunk_N of_P POST_N data_N and_& read_V from_P it_O for_P the_D entire_A thing_N to_P be_V transfered_V ._. On_P the_D other_A hand_N ,_, if_P you're_N worried_V about_P denial-of-service_A attacks_N ,_, then_R you_O can't_V really_R trust_V the_D Content-Length_^ header_N ,_, because_P it_O can_V easily_R be_V forged_V ._. In_P this_D case_N ,_, you_O should_V set_V a_D limit_N and_& stream_N a_D transfer_N of_P this_D file_N ,_, stopping_V as_R soon_R as_P you've_N exceeded_V that_P limit_N ._.
Suggest_V you_O reconsider_V the_D Flash_^ decision_N and_& take_V a_D look_N at_P the_D YUI_^ Uploader_^ ,_, here_R :_: http://developer.yahoo.com/yui/uploader_N Among_P other_A things_N ,_, the_D fileSelect_N event_N will_V tell_V you_O the_D size_N of_P the_D selected_V file_N in_P bytes_N immediately_R after_P it_O is_V selected_V but_& before_P it's_G uploaded_G ,_, so_R you'll_R be_V able_A to_P restrict_V accordingly_R ._.
With_P JSP_^ or_& PHP_^ you_O won't_V be_V able_A to_P restrict_V the_D file_N size_N because_P your_D page_N won't_N get_V the_D request_N until_P the_D upload_N has_V already_R happened_V ._. At_P that_D point_N you_O can_V decide_V not_R to_P save_V the_D file_N but_& that_D might_V be_V too_R late_A ._. There_X are_V some_D Java_^ solutions_N out_P there_R ,_, e.g._G MyUploader_^ or_& Hermes_^ ._. Some_D even_R support_V multiple_A file_N uploads_N and_& resuming_V partial_A uploads_N ,_, and_& some_D also_R give_V you_O the_D source_N code_N ._. You_O can_V also_R write_V your_D own_A ,_, but_& it_O will_V need_V to_P be_V a_D signed_A applet_N in_P order_N to_P function_V because_P it_O needs_V to_P access_V the_D local_A filesystem_N ._. If_P you're_N using_V Apache_^ as_P your_D webserver_N you'll_N need_V enough_R RAM_^ in_P your_D machine_N to_P fit_V the_D whole_A file_N size_N in_P memory_N of_P all_D files_N being_V uploaded_V at_P a_D given_V time_N ._.
How_R do_V I_O call_V Java_^ code_N from_P JavaScript_^ code_N in_P Wicket_^ ?_.
If_P I_O can_V do_V this_D ,_, how_R do_V I_O call_V Java_^ code_N (_N methods_N for_P instance_N )_N from_P within_P JavaScript_^ code_N ,_, in_P Wicket_^ ._.
Assuming_V you_O mean_V JavaScript_^ running_V on_P the_D client_N -_: you_O cause_V an_D HTTP_N redirect_N to_P be_V made_V to_P the_D server_N ,_, and_& have_V your_D servlet_N react_V to_P the_D request_N for_P the_D given_V URL_N ._. This_D is_V known_V as_P Ajax_^ ,_, and_& there_X are_V a_D number_N of_P libraries_N that_D help_V you_O do_V it_O .._V
http://www.wicket-library.com/wicket-examples-6.0.x/index.html_N has_V plenty_N of_P examples_N to_P get_V you_O going_V ._. Or_& have_V a_D Have_^ a_D look_N at_P DWR_^ http://directwebremoting.org_^ DWR_^ allows_V Javascript_^ in_P a_D browser_N to_P interact_V with_P Java_^ on_P a_D server_N and_& helps_V you_O manipulate_V web_N pages_N with_P the_D results_N ._. As_P Dorward_^ mentioned_V this_D is_V done_V via_P AJAX_N
Broken_A link_N http://wicketstuff.org/wicket13/ajax_N /_:
erk_N ._. The_D correct_A answer_N would_V be_V ajax_A call_N backs_N ._. You_O can_V either_R manually_R code_V the_D js_N to_P hook_N into_P the_D wicket_G js_G ,_, or_& you_O can_V setup_N the_D callbacks_N from_P wicket_N components_N in_P java_N ._. For_P example_N ,_, from_P AjaxLazyLoadPanel_^ :_: This_D example_N shows_V how_R to_P add_V call_N back_R code_V to_P any_D Component_^ in_P Wicket_^ ._. After_P the_D OnDomReady_^ event_N fires_N in_P your_D browser_N ,_, when_R loading_V a_D page_N ,_, Wicket_^ will_V cause_V it's_G js_G enging_N ,_, to_P call_V back_R into_P your_D code_N ,_, using_V Ajax_^ ,_, to_P the_D '_G respond_N '_'' method_N shown_V above_P ,_, at_P which_D point_N you_O can_V execute_V Java_^ code_N on_P the_D server_N ,_, and_& potentially_R add_V components_N to_P the_D ajax_N target_N to_P be_V re-rendered_A ._. To_P do_V it_O manually_R ,_, from_P js_N ,_, you_O can_V hook_N into_P wicket's_N system_N by_P printing_V out_R getCallbackScript()_N ._. toString()_N to_P a_D attribute_N on_P a_D wicket_N component_N ,_, which_D you'll_V then_R be_V able_A to_P access_V from_P js_G ._. Calling_V this_D url_N from_P js_N manually_R with_P wicket's_G wicketAjaxGet_G from_P wicket-_G ajax.js_G ._. Check_V out_R the_D mailing_N list_N for_P lot's_N of_P conversation_N on_P this_D topic_N :_: http://www.nabble.com/Wicket-and-javascript-ts24336438.html#a24336438_N
the_D last_A link_N does_V not_R work_V
Excerpt_N from_P https://cwiki.apache.org/WICKET/calling-wicket-from-javascript.html_N If_P you_O add_V any_D class_N that_D extends_V AbstractDefaultAjaxBehavior_^ to_P your_D page_N ,_, wicket-_G ajax.js_G will_V be_V added_V to_P the_D header_N ofyour_N web_N page_N ._. wicket-_G ajax.js_G provides_V you_O with_P two_$ basic_A methods_N to_P call_V your_D component_N :_: and_& Here_R is_V an_D example_N :_: JavaScript_G $url$_G is_V obtained_V from_P the_D method_N abstractDefaultAjaxBehavior.getCallbackUrl()_N ._. If_P you_O paste_V the_D String_^ returned_V from_P that_D method_N into_P your_D browser_N ,_, you'll_N invoke_V the_D respond_N method_N ,_, the_D same_A applies_V for_P the_D javascript_N method_N ._. You_O can_V optionally_R add_V arguments_N by_P appending_V these_D to_P the_D URL_N string_N ._. They_O take_V the_D form_N foo_G =b_G ar_G ._. you_O get_V the_D optional_A arguments_N in_P the_D Java_^ response_N method_N like_P this_D :_: or_& this_D :_:
Worth_^ mentioning_V that_P the_D API_^ for_P extracting_V parameters_N has_V changed_V in_P Wicket_^ 1.5_$ ._. Having_V called_V `_`` RequestCycle.get()_N ._. getRequest()_N `_`` to_P obtain_V a_D `_`` Request_^ `_`` object_N ,_, you_O must_V now_R call_V `_`` getQueryParameters()_N `_`` (_N for_P GET_V params_G )_G ,_, `_`` getPostParameters()_N `_`` (_N for_P POST_N params_G )_G ,_, or_& `_`` getRequestParameters()_N `_`` (_N for_P all_D at_P once_R )_$ ._. Each_D returns_N an_D `_`` IRequestParameters_N `_`` instance_N that_P you_O can_V query_V for_P parameters_N ._. See_^ [_^ the_D API_N docs]_G (_G http://wicket.apache.org/apidocs/1.5/)_N ._.
Oh_! ,_, and_& a_D gotcha_N :_: the_D URL_N returned_V by_P `_`` getCallbackUrl()_N `_`` can_V change_V during_P the_D component_N construction_N cycle_N ._. It's_N often_R inaccurate_A if_P you_O try_V to_P use_V it_O in_P the_D constructor_N ,_, and_& callbacks_N will_V fail_V as_P a_D result_N ._. I've_N had_V success_N using_V it_O in_P an_D override_N of_P the_D component's_N `_`` onBeforeRender()_N `_`` instead_R ._.
Testing_V onbeforeunload_A events_N from_P Selenium_N
I'm_N trying_V to_P write_V a_D Selenium_^ test_N for_P a_D web_N page_N that_D uses_V an_D onbeforeunload_A event_N to_P prompt_V the_D user_N before_P leaving_V ._. Selenium_G doesn't_G seem_V to_P recognize_V the_D confirmation_N dialog_N that_D comes_V up_R ,_, or_& to_P provide_V a_D way_N to_P hit_V OK_A or_& Cancel_V ._. Is_V there_R any_D way_N to_P do_V this_D ?_. I'm_N using_V the_D Java_^ Selenium_^ driver_N ,_, if_P that's_R relevant_A ._.
Warning_N :_: this_D gives_V an_D alternate_A solution_N Watij_^ --_: http://watij.com_N --_: can_V help_V here_R ._. Or_& if_P you're_N comfortable_A with_P ruby_N ,_, watir_N can_V help_V --_: http://wtr.rubyforge.org/install.html_N
You_O could_V write_V a_D user_N extension_N (_N or_& just_R some_D JavaScript_^ in_P a_D storeEval_N etc_G )_G that_P tests_N that_P window.onbeforeunload_N is_V set_V ,_, and_& then_R replaces_V it_O with_P null_N before_P continuing_V on_R from_P the_D page_N ._. Ugly_R ,_, but_& ought_V to_P get_V you_O off_P the_D page_N ._.
I_O didn't_V end_V up_R doing_V this_D (_$ my_D requirements_N changed_V such_A that_P I_O was_V better_A off_R using_V a_D regular_A alert_N anyway_R )_$ ,_, but_& this_D looks_V like_P it_O would_V do_V the_D trick_N ,_, and_& is_V close_A to_P how_R Selenium_^ handles_V testing_N for_P other_A alerts_V ._.
it_O was_V just_R a_D matter_N of_P adding_V `_`` js_eval_A "_'' window.onbeforeunload_N =null_N "`_N before_P an_D open_A for_P me_O ._. (_N selenium-client_A in_P Ruby_^ ,_, but_& you_O should_V be_V able_A to_P easily_R translate_V to_P other_A languages_N )_N
When_R I_O was_V confronted_V with_P limited_A control_N which_D I_O had_V over_P browser_N using_V Selenium_^ ,_, I_O turned_V to_P MozLab_^ plugin_N which_D solved_V my_D problem_N if_P only_R for_P one_$ browser_N platform_N ._.
I've_N just_R had_V to_P do_V this_D for_P an_D application_N of_P mine_N where_R the_D onbeforeunload_A handler_N brings_V up_R a_D prompt_A if_P a_D user_N leaves_V a_D page_N while_P a_D document_N is_V in_P an_D unsaved_A state_N ._. Python_^ code_N :_: The_D Java_^ equivalent_N would_V be_V :_: If_P the_D alert_N does_V not_R exist_V ,_, the_D code_N above_R will_V fail_V with_P a_D NoAlertPresentException_^ so_P there_X is_V no_D need_N for_P a_D separate_A test_N to_P check_V the_D existence_N before_P accepting_V the_D prompt_A ._. I'm_N running_V Selenium_^ 2.43_$ ._. 0_$ but_& I_O think_V this_D has_V been_V doable_A for_P a_D while_N now_R ._. In_P cases_N where_R I_^ don't_^ want_V the_D prompt_A to_P come_V up_R at_P all_D because_P that's_N not_R what_O I'm_N testing_N ,_, I_O run_V custom_N JavaScript_^ in_P the_D browser_N to_P set_V window.onbeforeunload_N to_P null_N before_P leaving_V the_D page_N ._. I_O put_V this_D in_P the_D test_N teardown_N code_N ._.
Calling_V JS_N from_P Applet_^ :_: MalformedURLException_N :_: unknown_A protocol_N :_: javascript_N
I_O read_V that_P you_O could_V call_V JavaScript_^ code_N from_P a_D Java_^ Applet_^ by_P calling_V However_R ,_, when_R I_O do_V this_D i_G get_V the_D following_A error_N :_: How_R do_V I_O work_V around_P this_D ?_.
Works_^ !!_^ Maybe_^ the_D browser_N does_V not_R have_V javascript_N enabled_V .._R just_R a_D guess_N
I_O get_V the_D same_A exception_N as_P you_O do_V because_P of_P that_P the_D URL_N class_N does_V not_R accept_V javascript_N :_: as_P a_D valid_A protocol_N ._. There_X is_V a_D workaround_N though_P ;_: supply_N an_D URLStreamHandler_N to_P the_D URL_N constructor_N ._. Example_^ :_:
This_D opens_V a_D new_A tab_N in_P Firefox_^ ,_, but_& the_D page_N and_& location_N address_N are_V both_D empty_A ._. Nothing_N happens_V .._G :/_G
Nevermind_^ ,_, apparently_R my_D Firefox_^ 3.0_$ ._. 3_$ on_P Ubuntu_^ is_V bugged_V :)_P It_O works_V perfectly_R on_P other_A computers_N ._. Thanks_N !_.
Spreadsheet-like_A control_N for_P a_D web_N application_N ?_.
I've_N been_V in_P a_D team_N that_D has_V built_V this_D using_V a_D ._. NET_N +_& jQuery_N setup_N -_: it's_N not_R fun_N ,_, and_& makes_V your_D mind_N MELT_N ._. If_P you_O have_V the_D option_N of_P using_V a_D silverlight_N grid_N I'd_N take_V that_D option_N over_P javascript_N ._.
This_D question_N was_V already_R asked_V a_D couple_N of_P times_N ._. Check_V this_D out_N :_: http://stackoverflow.com/questions/58289/excel-like-server-side-control-for-aspnet#58295_N but_& there_X are_V more_A ._.
I'd_N say_V this_D comes_V down_R to_P data_N grids_N ._. For_P Javascript_^ frameworks_N :_: Jquery_^ has_V '_G plugins_N '_G like_P this_D ._. Serverside_^ :_: Telerik_^ has_V asp.net_N controls_N like_P this_D ._. It_O really_R comes_V down_R to_P what_O platform_N mix_N you_O want_V to_P use_V ._. Also_R ,_, why_R do_V you_O want_V to_P bind_V an_D asp.net_N page_N to_P IE_N instead_R of_P Firefox_^ ?_. For_P a_D web_N application_N ,_, my_D recommendation_N would_V be_V a_D mix_N of_P asp.net_N mvc_N and_& jquery_N ._. JQuery_N is_V in_P my_D view_N the_D best_A and_& most_R stable_A JavaScript_^ framework_N out_R there_R ._. The_D problem_N is_V that_P asp.net_G mvc_G is_V still_R in_P ctp_N phase_N and_& it's_N probably_R not_R '_'' supported_V '_'' and_& '_'' stable_A '_'' enough_R in_P some_D eyes_N ._. I_O already_R finished_V a_D mid-scale_A commercial_A web_N app_N based_V on_P the_D mixture_N and_& was_V pleased_V with_P it_O ._.
I_O would_V consider_V a_D solution_N based_V on_P google_N docs_N /_: apps_N or_& similar_A and_& background_N web_N services_N ._.
Check_V out_R SpreadsheetGear_^ ,_, as_P is_V a_D ._. Net_A component_N that_D will_V allow_V you_O to_P read_V /_: write_V Excel_^ files_N and_& execute_V macros_N ._. You_O can_V preserve_V the_D logic_N of_P the_D spreadsheets_N and_& use_V them_O to_P power_N you_N web_N site_N ._. For_P a_D front_A end_N you_O may_V want_V to_P check_V out_R Telerik_^ as_P people_N have_V created_V a_D spreadsheet_N like_P interface_N with_P the_D Telerik_^ grid_N control_N ._.
Check_V out_R ZK_^ Spreadsheet_^ its_D cool_N ._.
It_O sounds_V like_P EASA_^ might_V meet_V your_D needs_N ._. It's_G a_G codeless_G app_N development_N tool_N in_P use_N at_P companies_N like_P Zurich_^ ,_, GE_^ ,_, HP_^ ._. You_O may_V like_V to_P have_V a_D look_N at_P http://www.easasoftware.com/spreadsheets_N ._. Hope_^ this_D helps_V ._.
Here_R you_O can_V download_V GelSheet_^ an_D opensource_N web_N based_V spreadsheet_N ._. It_O is_V written_V on_P PHP_^ /_: MySql_N /_: Javascript_^ You_O can_V contact_V the_D developers_N at_P sourceforege_N project_N page_N for_P any_D customizations_N It's_V the_D best_A solution_N I_O found_V and_& I'm_N using_V it_O as_P a_D part_N of_P a_D personal_A project_N ._.
Scripting_V in_P Java_^
Me_O and_& some_D friends_N are_V writing_V a_D MORPG_^ in_P Java_^ ,_, and_& we_O would_V like_V to_P use_V a_D scripting_V language_N to_P ,_, eg_G ._. to_P create_V quests_N ._. We_O have_V non_A experience_N with_P scripting_N in_P Java_^ ._. We_O have_V used_V Python_^ ,_, but_& we_O are_V very_R inexperienced_A with_P it_O ._. One_$ of_P us_O also_R have_V used_V Javascript_^ ._. What_O scripting_V language_N should_V we_O use_V ?_. What_O scripting_V language_N should_V we_O not_R use_V ?_.
How_R about_P Jython_^ ?_. http://www.jython.org/Project_N /_:
I_O agree_V with_P Viktor's_G Jython_G suggestion_N ._. Other_A than_P that_D and_& JavaScript_^ (_^ which_D you've_N mentioned_V ,_, and_& is_V built_V into_P Java_^ 6+_$ via_P the_D javax.script_N package_N )_N ,_, Groovy_N and_& JRuby_N are_V also_R worth_A looking_V at_P too_R ._. By_P the_D way_N ,_, you_O should_V look_V at_P Wyvern_^ ,_, also_R an_D MMORPG_N written_V in_P Java_^ and_& using_V Jython_^ for_P scripting_V ._. Steve_^ Yegge_^ ,_, its_D author_N ,_, has_V much_A to_P say_V about_P it_O from_P time_N to_P time_N ._. :-)_N
Java_^ supports_V a_D variety_N of_P (_G scripting_G )_G languages_N ,_, some_D are_V listed_V in_P Wikipedia_^ here_R and_& here_R ._. You_O probably_R should_V choose_V language_N with_P powerful_A DSL_N and_& metaprogramming_N capabilities_N ,_, such_A as_P Clojure_^ ._. But_& if_P you_O need_V something_N simpler_A ,_, JavaScript_^ might_V be_V a_D viable_A alternative_N ._.
See_^ Java_^ :_: Scripting_V language_N (_G macro_G )_N to_P embed_V into_P a_D Java_^ desktop_N application_N
You_O have_V quite_R a_D few_A options_N :_: Groovy_A -_: http://groovy.codehaus.org_N Jython_N -_: http://www.jython.org/Project_N JRuby_N -_: http://jruby.codehaus.org_N Possibly_R even_R BeanShell_^ (_G http://www.beanshell.org_G )_G I'm_G a_D fan_N of_P Python_^ myself_O so_R I'd_R recommend_V Jython_^ ,_, but_& they're_R probably_R all_D reasonable_A options_N ._.
what_O about_P creating_V your_D own_A specialized_A scripting_N language_N ?_. If_P your_D app_N is_V written_V with_P java_N ,_, you_O can_V use_V ANTLR_^ (_^ http://www.antlr.org_^ )_^ to_P create_V your_D language_N parsing_V code_N ._. The_D reason_N I_O say_V this_D is_V because_P a_D general_A purpose_N scripting_V language_N may_V provide_V too_R much_A power_N (_N because_P the_D script_N it_O to_P be_V used_V for_P quests_N only_R i_G assume_V )_N ._. But_& if_P making_V your_D own_A language_N is_V too_R hard_R then_R any_D of_P the_D above_A suggestions_N works_V -_: you_O just_R have_V to_P figure_V out_R how_R to_P bind_V the_D game's_G runtime_G into_P the_D script_N ._. I_O also_R suggest_V Lua_^ (_^ http://www.lua.org_^ )_^ as_P another_D choice_N that_P lots_N of_P games_N use_V ._.
I_O am_V a_D big_A fan_N of_P Python_^ /_: Jython_N due_A to_P the_D clean_A syntax_N -_: which_D may_V suit_V you_O if_P you_O have_V some_D python_N experience_N ._. Otherwise_R Groovy_A which_D is_V based_V on_P Java_^ syntax_N and_& may_V be_V an_D easier_A learning_N curve_N if_P most_A of_P your_D developers_N are_V Java_^ guys_N ._. It_O also_R has_V the_D advantage_N of_P closer_A ties_N with_P the_D Java_^ language_N and_& libraries_N ._. Beanshell_^ is_V good_A if_P you_O have_V simple_A scripting_N in_P mind_N -_: it_O doesn't_A support_N classes_N ._. However_R I_$ don't_N think_V it_O has_V had_V any_D support_N over_P the_D last_A few_A years_N (_V the_D JSR_^ seemed_V to_P kill_V it_O off_R ..._: )_N so_R is_V perhaps_R a_D bad_A choice_N if_P support_N is_V important_A to_P you_O ._.
I_O would_V have_V to_P recommend_V Javascript_^ for_P this_D purpose_N ._. Mozilla_G Rhino_G http://www.mozilla.org/rhino_N is_V an_D excellent_A implementation_N that_D would_V fit_V your_D needs_N perfectly_R ._. I_O recommend_V Javascript_^ over_P Jython_^ or_& JRuby_^ because_P of_P familiarity_N ._. Trivial_A Javascript_^ follows_V a_D very_R familiar_A syntax_N that_P anybody_N can_V use_V ._. However_R if_P someone_N wants_V to_P do_V something_N more_R intense_A ,_, Javascript_^ is_V a_D very_R powerful_A functional_A programming_N language_N ._. I_O regularly_R use_V Groovy_^ and_& Ruby_^ professionally_R and_& believe_V that_P their_D purpose_N is_V best_A for_P writing_V parts_N of_P applications_N with_P particularly_R complex_A logic_N where_R Java_^ is_V cumbersome_A to_P write_V ._. Javascript_^ is_V a_D much_R better_A choice_N as_P an_D embedded_A ,_, general_A scripting_N language_N to_P use_V in_P a_D game_N ._. I_O haven't_V used_V Python_^ ,_, but_& it's_N syntactically_R similar_A to_P Ruby_^ and_& I_O would_V believe_V it's_A purpose_N would_V also_R be_V similar_A ._.
If_P you_O were_V to_P start_V from_P scratch_N in_P 2012_$ would_V you_O approach_V the_D "_`` glue_N components_N together_R "_`` differently_R ?_.
There_X is_V one_$ good_A reason_N for_P including_V a_D scripting_N language_N ,_, namely_R where_R you_O need_V to_P be_V able_A to_P add_V new_A functionality_N (_N which_D hence_R cannot_V be_V configured_V )_N without_P redeployment_N ._.
But_& Java_^ has_V support_N for_P (_G re-_G )_G loading_V classes_N ,_, and_& using_V some_D thought_N and_& reflection_N will_V take_V you_O a_D long_A way_N ._. If_P necessary_A ._.
You_O still_R need_V to_P compile_V the_D revised_A Java_^ classes_N ._.
Compiling_V should_V an_D be_V infinitesimal_A issue_N compared_V to_P incorporating_V a_D scripting_N language_N ,_, in_P all_X the_D ways_N I_O can_V think_V of_P ._.
LuaJ_N seems_V to_P be_V a_D nice_A way_N to_P embed_V Lua_^ into_P Java_^ :_: http://sourceforge.net/projects/luaj_N /_:
Wicket_N +_& Javascript_N
I'm_N wrapping_V up_R a_D Javascript_^ widget_N in_P a_D Wicket_^ component_N ._. I_O want_V to_P let_V the_D JS_^ side_N talk_N to_P the_D component_N ._. What_D I've_N got_V so_R far_R :_: Component_N in_P question_N goes_V like_P in_P constructor_N and_& then_R ,_, later_R on_P ,_, puts_V something_N like_P into_P the_D JS_^ ._. where_R GridAjaxBehavior_^ extends_V AbstractDefaultAjaxBehavior_^ ._. I_O want_V GridAjaxBehavior_^ to_P spit_V back_R some_D XML_N when_R the_D JS_^ calls_V it_O ._. Am_V I_O doing_V this_D the_D right_A way_N ?_. What_O should_V GridAjaxBehaviour_^ do_V to_P spit_V back_R the_D XML_N ?_. Thanks_N
FYI_^ ,_, there's_V an_D error_N in_P your_D javascript_N emit_N ._. You're_N missing_V the_D right_A hand_N paren_N and_& semicolon_N ,_, but_& you're_N also_R missing_V quotes_N around_P the_D supplied_V string_N ._. ..._: new_A talker_N (_N ""_N +_& this.talker.getCallbackURL()_N +_& "_`` ")_N ;_: "_'' ;_: or_& something_N like_P that_D ._.
PSA_N :_: Wicket_G ~=_G a_D Java_^ Framework_^ ._. http://wicket.apache.org/introduction.html_N
please_V show_V a_D link_N to_P GridAjaxBehavior_^ -_: i_G know_V wicket_N a_D bit_N ,_, but_& GridAjaxBehavior_^ is_V new_A to_P me_O ._. is_V this_D a_D custom_N developed_A behavior_N
I_O don't_V really_R know_V what_O Wicket_^ is_V or_& what_O it_O does_V ,_, but_& there_X is_V a_D minor_A bug_N in_P your_D code_N (_N as_P it_O appears_V )_^ ._. This_^ :_: "_`` var_N MyGridTalker_N =_A new_A talker_N (_N "_'' +_& this.talker.getCallbackUrl()_N ;_: You_O seem_V to_P be_V missing_V your_D end_N parens_N :_: "_`` var_N MyGridTalker_N =_A new_A talker_N (_N "_'' +_& this.talker.getCallbackUrl()_N +_& ")"_N ;_: Anyway_R ,_, not_R a_D big_A deal_N ,_, but_& didn't_N know_V if_P it_O was_V intentional_A ._.
Write_V a_D Servlet_^ that_P Talks_N to_P JMS_^ (_^ ActiveMQ_^ )_^ and_& OnMessage_^ Update_^ the_D Site_N
I_O am_V building_V a_D site_N that_D uses_V a_D simple_A AJAX_^ Servlet_^ to_P talk_V JMS_^ (_^ ActiveMQ_^ )_^ and_& when_R a_D message_N arrives_V from_P the_D topic_N to_P update_V the_D site_N ._. I_O have_V Javascript_^ that_D creates_V an_D XMLHttpRequest_N for_P data_N ._. The_D Servlet_^ processes_V the_D Get_V Request_N and_& sends_V back_R JSON_^ ._. However_R I_O have_V no_D idea_N how_R to_P connect_V my_D Servlet_^ into_P my_D ActiveMQ_^ Message_^ Broker_^ ._. It_O just_R sends_V back_R dummy_A data_N right_R now_R ._. I_O am_V thinking_V the_D Servelt_^ should_V implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D JavaScript_^ page_N ._. But_& I'm_N not_R sure_A how_R to_P do_V this_D ._.
You_O probably_R need_V to_P get_V a_D JMS_^ connection_N from_P JNDI_^ ,_, like_P this_D :_:
Okay_! ..._: this_D is_V a_D good_A way_N to_P connect_V to_P my_D Topic_^ ,_, thanks_N ._. I_O already_R have_V code_N like_P this_D is_V another_D Java_^ Client_^ ._. But_& I_O want_V the_D Servelt_^ to_P implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D Javascript_^ page_N ._.
The_D problem_N with_P having_V a_D servlet_N implement_V MessageListener_^ is_V that_P servlets_N are_V synchronous_A and_& MessageListeners_N are_V asynchronous_A ._. Instead_R you_O should_V create_V some_D other_A object_N to_P act_V as_P the_D MessageListener_^ and_& update_V some_D state_N somewhere_R (_V possibly_R a_D database_N or_& a_D JMX_N MBean_N or_& a_D Stateful_A Session_N EJB_N )_N when_R messages_N come_V in_R ._. Then_R the_D servlet_N can_V query_V that_D state_N to_P see_V if_P there's_A data_N to_P report_V back_R to_P the_D client_N ,_, and_& your_D web_N page_N can_V periodically_R ping_V the_D servlet_N to_P ask_V for_P fresh_A data_N ._.
Thanks_N jodonnell_G .._G I_O have_V never_R wrote_V a_D JMX_N MBean_N or_& Stateful_A Session_N EJB_N but_& after_P a_D quick_A google_N search_N I_O think_V this_D is_V the_D right_A path_N to_P look_V down_R ._. Thanks_N for_P the_D help_N ._.
Have_V you_O tried_V reading_V the_D answers_N for_P this_D question_N which_D links_V to_P the_D ActiveMQ_^ Ajax_^ support_N ._. Basically_R ActiveMQ_^ has_V native_A support_N for_P Ajax_^ so_P you_O can_V use_V its_D JavaScript_^ library_N to_P directly_R subscribe_V from_P an_D ActiveMQ_N topic_N ._. Also_R see_V the_D ActiveMQ_N web_N samples_N which_D show_V how_R to_P do_V things_N like_P real_A time_N chat_N or_& real_A time_N stock_N portfolio_N screens_N using_V Ajax_N with_P ActiveMQ_N
As_P James_^ Strachan_^ says_V -_: http://activemq.apache.org/ajax.html_N is_V an_D ideal_A out-of-the-box_A solution_N for_P your_D problem_N ._. If_P you_O still_R want_V to_P create_V such_A solution_N manually_R you_O can_V just_R create_V JMS_^ connection_N in_P your_D Ajax_N servlet_G (_G connection_N per_P request_N )_N ._. Consider_V using_V Spring_^ JMS_^ template_N for_P that_D reason_N (_G http://static.springsource.org/spring/docs/2.5.x/reference/jms.html_G )_G ._. Then_R just_R receive_V the_D message_N in_P the_D Servlet_G doGet_G /_: doPost_N method_N ._. Consider_V low_A timeout_N value_N for_P receiving_V in_P that_D case_N ._. Such_A solution_N will_V work_V for_P the_D Queues_N and_& durable_A Topics_N ._. For_P non-durable_A Topics_N consider_V external_A message_N listener_N ._. Spring_^ MessageListenerContainer_^ is_V an_D excellent_A tool_N for_P that_D purpose_N :_: Bean_^ lastTenUpdatesCache_N will_V be_V a_D singleton_N bean_N implementing_V MesssageListener_^ ._. This_D bean_N would_V be_V responsible_A for_P caching_V last_A ten_$ messages_N (_$ just_R putting_V it_O into_P a_D java.util_N list_N )_N ._. It_O will_V be_V injected_V into_P your_D Ajax_^ servlet_N so_R in_P your_D doGet_N /_: doPost_N method_N you_O can_V ask_V it_O about_P last_A 10_$ messages_N sent_V to_P the_D topic_N ._.
Integration_N of_P JavaScript_^ and_& JMS_^
Where_R can_V I_O find_V a_D guide_N for_P integrating_V JavaScript_^ and_& JMS_^ (_^ Java_^ Messaging_^ Service_^ )_^ ?_. I_O would_V like_V a_D best_A practice_N or_& established_A technology_N that_D allows_V me_O to_P directly_R or_& indirectly_R receive_V messages_N from_P a_D topic_N and_& update_V a_D site_N based_V on_P the_D message_N ._. I_O was_V thinking_V of_P creating_V two_$ components_N ,_, a_D servlet_N for_P the_D Web_N module_N ,_, and_& an_D MDB_^ (_^ Message-Driven_^ Bean_^ )_^ for_P the_D EJB_N module_N ._. The_D web_N client_N will_V comsume_V messages_N from_P the_D JMS_^ topic_N ,_, and_& the_D MDB_^ will_V handle_V the_D onMessage_N ._. Does_V this_D sound_N correct_V ?_. Have_V you_O seen_V any_D examples_N ?_. Edit_^ :_: I_O am_V using_V ActiveMQ_N for_P the_D JMS_^ ._.
I_O would_V try_V using_V DWR_^ to_P integrate_V JavaScript_^ with_P your_D Java_^ app_N ._. It_O makes_V Java_^ to_P JavaScript_^ communication_N transparent_A and_& only_R requires_V one_$ servlet_N +_& configuration_N of_P what_O to_P expose_V ._. I_N haven_N t_N done_V this_D with_P JMS_^ ,_, but_& it_O should_V work_V the_D same_A ._. There_X are_V three_$ technologies_N that_D together_R solve_V all_D my_D integration_N problems_N ,_, Spring_^ ,_, Mule_^ ,_, and_& DWR_^ ._.
I'll_A second_A DWR_N -_: excellent_A (_N and_& painless_A !_. )_$ to_P integrate_V any_D server-side_N based_V Java_^ and_& JavaScript_^ on_P the_D client_N front-end_N
You'll_N find_V some_D references_N to_P the_D Dojo_^ /_: Bayeux_^ approach_N here_R http://www.pathf.com/blogs/2006/08/bayeux_a_json_p_A If_P you're_N using_V WebSphere_^ 6.0_$ or_& higher_A then_R the_D Web_N 2.0_$ Feature_N Pack_V includes_V an_D implementation_N ._.
I_O think_V this_D is_V your_D answer_N ._. Looks_V like_P it_O is_V baked_A in_P to_P ActieMQ_^ ._. I_O tried_V the_D examples_N and_& they_O seem_V to_P work_V ._. http://activemq.apache.org/ajax.html_N
I_O was_V able_A to_P get_V the_D examples_N to_P work_V on_P Version_^ 5.0_$ of_P ActiveMQ_N ._. However_R they_O have_V trouble_N running_V in_P 5.1_$ ._. Which_D version_N of_P ActiveMQ_N are_V you_O running_V ?_.
We_O did_V have_V a_D lot_N of_P problems_N with_P this_D servlet_N ,_, and_& we_O did_V abandon_V it_O completely_R ..._:
The_D Seam_^ framework_N supports_V subscription_N to_P JMS_^ topics_N from_P a_D JavaScript_^ based_V client_N :_: http://docs.jboss.com/seam/2.0.2.GA/reference/en-US/html/remoting.html#d0e14169_N
How_R to_P conduct_V blackbox_A testing_N on_P an_D AJAX_N application_N ?_.
What's_V the_D best_A ,_, crossplatform_A way_N to_P perform_V blackbox_N tests_N on_P AJAX_^ web_N applications_N ?_. Ideally_R ,_, the_D solution_N should_V have_V the_D following_A attributes_N :_: Able_A to_P integrate_V into_P a_D continuous_A integration_N build_V loop_N Cross_N platform_N so_P I_O you_O can_V run_V it_O on_P Windows_^ laptops_N and_& Linux_^ continuous_A integration_N servers_N Easy_^ way_N to_P script_N the_D interactions_N Free-as-in-freedom_N so_P you_O can_V adapt_V it_O into_P your_D tool_N chain_N if_P necessary_A I've_N looked_V into_P HttpUnit_^ but_& I'm_^ not_R conviced_V it_O can_V handle_V AJAX-heavy_A websites_N ._.
Selenium_N might_V be_V what_D you're_N looking_V for_P :_: http://selenium.openqa.org_N It_O allows_V you_O to_P script_N actions_N and_& evaluate_V the_D results_N ._. It's_G open-source_G (_G Apache_G 2.0_$ )_N ,_, cross_N platform_N ,_, and_& has_V nice_A tools_N ._.
I_O have_V used_V Selenium_^ for_P exactly_R this_D task_N ,_, but_& found_V it_O to_P be_V brittle_A ._. Check_V out_R this_D talk_N by_P two_$ Googlers_^ :_: Does_V my_D button_N look_N big_A in_P this_D ?_. Building_^ testable_A AJAX_^ applications_N They_O isolate_V the_D testable_A javascript_N (_$ non_A DOM-interaction_A )_N and_& test_N that_P using_V the_D Rhino_N javascript_N engine_N ._.
What_O is_V the_D best_A way_N to_P use_V Ext_^ JS_^ as_P part_N of_P Java_^ /_: Spring_N /_: Hibernate_^ based_V web_N application_N ?_.
We_O want_V to_P try_V Ext_^ JS_^ on_P new_A project_N ._. Is_V there_X any_D well-known_A best_A practice_N for_P integrating_V Ext_N JS_N with_P server_N side_N Java_^ (_^ Spring_^ /_: Hibernate_^ /_: JS_G )_G application_N ?_. Is_V DWR_N a_D good_A choice_N for_P that_D ?_.
It's_N perfectly_R fine_V to_P build_V your_D application_N using_V Ext_N JS_N /_: DWR_N /_: Spring_N /_: Hibernate_^ ._.
Yes_^ it's_^ possible_A ._. I've_N done_V the_D same_A thing_N with_P ._. NET_N :_: UI_N in_P ext-JS_N which_D communicates_V with_P the_D server_N trough_N JSON_N ._. In_P ._. NET_N world_N you_O can_V use_V DataContractSerializer_G (_G class_N from_P WCF_G )_G or_& JavascriptSerializer_^ (_^ ASP.NET_^ )_^ I'm_^ sure_A that_D there's_V several_A good_A JSON_^ Serializer_^ in_P the_D Java_^ world_N too_R ._. I_O used_V Jabsorb_G (_G but_& not_R enough_R to_P give_V you_O a_D solid_A feedback_N )_N ._. It_O appears_V that_P other_A people_N have_V tried_V :_: [_$ link_N text][2_N ]_G [_G 2_$ ]:_$ http://extjs.com/forum/showthread.php?t=30759_N forum_N ext-js_N
In_P our_D application_N we_O subclass_V Ext.data.DataProxy_N like_P this_D :_: You_O use_V it_O with_P a_D store_N like_P so_R :_: Our_D actual_A proxy_N class_N has_V some_D additional_A debug_N and_& error_N handling_N code_N that_P I_O left_V out_R for_P simplicity_N ._. You_O may_V also_R need_V to_P manipulate_V your_D data_N slightly_R so_P that_P the_D Ext.data.JsonReader_N can_V handle_V it_O ,_, but_& that's_V the_D basic_A idea_N ._. SomeService_^ is_V the_D JavaScript_^ name_N you_O specified_V for_P whatever_D bean_N you_O exposed_V in_P dwr.xml_G (_G or_& your_D Spring_N config_G )_G ._.
My_D team_N has_V been_V using_V Ext_N with_P DWR_N for_P almost_R year_N a_D year_N ,_, and_& have_V had_V nothing_N but_& good_A things_N to_P say_V ._. If_P you_O take_V this_D approach_N ,_, you_O will_V end_V up_R using_V DWR's_N generated_V JavaScript_^ classes_N for_P making_V your_D requests_N to_P the_D server_N ._. This_D will_V often_R be_V done_V in_P place_N of_P using_V the_D Ext.Ajax_N and_& Ext.data.Connection_N classes_N ._. When_R you_O use_V a_D class_N that_D require_V an_D Ext.data.Store_N (_G e.g._G grip_N ,_, combo_N box_N ,_, etc_G ._. )_N and_& you_O want_V to_P fetch_V data_N from_P the_D server_N ,_, you_O will_V need_V to_P use_V a_D proxy_N that_D can_V link_V in_R with_P DWR_^ ._. The_D user-community_N provided_V Ext.ux.data.DWRProxy_N has_V worked_V flawlessly_R for_P us_O :_: http://extjs.com/forum/showthread.php?t=23884_N ._.
Just_R wanted_V to_P report_V that_P we_O are_V doing_V this_D now_R and_& it_O works_V quite_R good_A ._. We_O also_R are_V using_V DWRProxy_N just_R like_P suggested_V ._.
Take_V a_D look_N at_P Grails_^ ,_, it_O plays_V well_R together_R with_P ExtJS_N ._.
How_R can_V you_O run_V Javascript_^ using_V Rhino_^ for_P Java_^ in_P a_D sandbox_N ?_.
Part_N of_P our_D java_N application_N needs_V to_P run_V javascript_N that_D is_V written_V by_P non-developers_N ._. These_D non-developers_N are_V using_V javascript_N for_P data_N formatting_V ._. (_$ Simple_A logic_N and_& string_N concatenation_N mostly_R )_^ ._. My_D question_N is_V how_R can_V I_O setup_N the_D execution_N of_P these_D scripts_N to_P make_V sure_A scripting_N errors_N don't_N have_V a_D major_A negative_A impact_N on_P the_D rest_N of_P the_D application_N ._. Need_V to_P guard_V against_P infinite_A loops_N Guard_^ against_P spawning_V new_A threads_N ._. Limit_N access_N to_P services_N and_& environment_N File_N system_N (_^ Example_^ :_: If_P a_D disgruntled_A script_N writer_N decided_V to_P delete_V files_N )_G Database_G (_G Same_A thing_N delete_V database_N records_N )_V Basically_R I_O need_V to_P setup_N the_D javascript_N scope_N to_P only_R include_V exactly_R what_O they_O need_V and_& no_D more_A ._.
Do_V you_O mean_V to_P say_V (_^ Javascript_^ using_V Rhino_^ )_^ for_P (_^ Java_^ in_P a_D sandbox_N )_N ,_, or_& (_^ Javascript_^ using_V (_^ Rhino_^ for_P Java_^ ))_^ (_^ in_P a_D sandbox_N )_N ?_.
Javascript_^ is_V single-threaded_A and_& can't_A access_N the_D filesystem_N ,_, so_P I_O don't_V think_V you_O have_V to_P worry_V about_P those_D ._. I'm_N not_R sure_A if_P there's_$ a_D way_N to_P set_V a_D timeout_N to_P guard_V against_P infinite_A loops_N ,_, but_& you_O could_V always_R spawn_V a_D (_^ Java_^ )_^ thread_N that_D executes_V the_D script_N ,_, and_& then_R kill_V the_D thread_N after_P so_R much_A time_N ._.
Rhino_N has_V a_D threading_A library_N available_A to_P it_O (_G java.lang.Thread_G !_. )_$ ,_, and_& can_V access_V the_D file_N system_N ._.
To_P guard_V against_P infinite_A loops_N ,_, you'd_N need_V to_P put_V it_O in_P a_D separate_A process_N so_P that_P it_O could_V be_V killed_V ._. To_P guard_V against_P creating_V threads_N ,_, you'd_A need_N to_P extend_V SecurityManager_^ (_^ the_D default_N implementation_N allows_V untrusted_A code_N to_P access_V non-root_A thread_N groups_N )_V ._. Java_^ security_N does_V allow_V you_O to_P prevent_V access_N to_P the_D file_N system_N ._. For_P database_N restrictions_N ,_, you_O might_V be_V able_A to_P use_V the_D standard_A SQL_^ user_N security_N ,_, but_& that_D is_V quite_R weak_A ._. Otherwise_R ,_, you_O need_V to_P provide_V an_D API_N that_D enforces_V your_D restrictions_N ._. Edit_^ :_: I_O should_V point_V out_R that_P the_D version_N of_P Rhino_N provided_V with_P JDK6_N has_V had_V security_N work_N done_V on_P it_O ,_, but_& doesn't_N include_V the_D compiler_N ._.
To_P guard_V against_P infinite_A loops_N ,_, you_O can_V observe_V the_D instruction_N count_N as_P the_D script_N runs_N (_V this_D works_V only_R with_P interpreted_V scripts_N ,_, not_R with_P compiled_V ones_N )_V ._. There_X is_V this_D example_N in_P the_D Rhino_^ JavaDocs_^ to_P prevent_V a_D script_N from_P running_V for_P more_A than_P ten_$ seconds_N :_:
To_P block_V Java_^ class_N and_& method_N access_N have_V a_D look_N at_P ..._: http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java_N /_:
I_O just_R ran_V across_P this_D blog_N post_N that_D seems_V to_P be_V useful_A for_P sandboxing_V more_A or_& less_A anything_N (_$ not_R just_R Rhino_G ):_G http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html_N
setting_V classpath_N for_P java_N classes_N (_$ jar_N file_N )_N in_P XUL_^ ,_, to_P access_V via_P javascript_N
I_O am_V implementing_V firefox_N extension_N using_V XUL_^ ._. I_O have_V set_V of_P java_N classes_N that_D is_V zipped_V as_P jar_N which_D needs_V to_P be_V accessed_V through_P javascript_N ._. If_P I_O copy_V my_D jar_N into_P jre's_G lib_G /_: ext_N then_R javascript_N will_V be_V able_A to_P invoke_V my_D java_N classes_N ._. If_P I_O remove_V from_P ext_N and_& package_N this_D jar_N in_G xpi_G ,_, Javascript_^ is_V unable_A to_P find_V the_D classpath_N for_P my_D jar_N file_N ._. Please_! let_V me_O know_V how_R to_P set_V the_D classpath_N for_P my_D java_N classes_N (_$ jar_N file_N )_N in_P XUL_N environment_N at_P the_D earliest_A ._.
javascript_N /_: XUL_N invoking_V java_N ?_. interesting_A ..._: any_D ref_N ?_.
I_O suggest_V taking_V a_D look_N at_P this_D extension_N XQuery_N USE_N ME_N 1.4_$ ._. 7_$ and_& the_D following_A articles_N Calling_V java_N from_P XUL_N applications_N Java_^ in_P Firefox_^ Extensions_N
Thanks_N ,_, Is_V there_R any_D easy_A way_N to_P set_V the_D classpath_N such_A that_P javascript_N can_V find_V it_O ._. -_: Anand_^ ._.
What_O is_V the_D disadvantage_N of_P DWR_^ ?_.
While_P using_V DWR_^ in_P a_D intranet_N ,_, will_V disadvantages_V like_P perfomance_N or_& security_N issues_N occur_V ?_. Direct_A web_N remoting_N is_V a_D tool_N which_D uses_V Ajax_^ request_N to_P contact_V a_D server_N from_P a_D js_N file_N ._.
One_$ thing_N I_O would_V watch_V out_R for_P is_V that_P your_D server_N will_V most_R likely_R get_V hit_V by_P more_A HTTP_N requests_N than_P if_P you_O have_V the_D (_N normal_A )_$ full_A page_N HTTP_N delivery_N ._. Let_V me_O explain_V ._. When_R your_D web_N page_N is_V AJAX-enabled_A ,_, your_D clients_N will_V end_V up_R creating_V more_A HTTP_N requests_N for_P (_N say_V )_N form_N filling_N ,_, page-fragment_N regeneration_N etc_N ._. I've_V seen_V scenarios_N where_R developers_N have_V gone_V AJAX-crazy_A ,_, and_& made_V the_D web_N page_N a_D largely_R dynamic_A document_N ._. This_D results_V in_P a_D great_A user_N experience_N (_N if_P done_V well_R )_$ ,_, but_& every_D request_N results_V in_P a_D server_N hit_N ,_, leading_V to_P scalability_N and_& latency_N issues_N ._. Note_V -_: this_D isn't_N particular_A to_P DWR_^ ,_, but_& is_V an_D AJAX_^ issue_N ._. I've_^ used_V DWR_^ ,_, and_& it_O works_V nicely_R ._. Unfortunately_R ,_, I_O found_V that_P it_O worked_V so_R well_R ,_, and_& so_R easily_R ,_, that_P everything_N becomes_V a_D candidate_N for_P remoting_N ,_, and_& you_O can_V end_V up_R with_P huge_A numbers_N of_P small_A requests_N ._.
I_O agree_V with_P this_D answer_N ._. I_O used_V DWR_^ in_P an_D web-based_A application_N ._. The_D application_N gives_V a_D great_A user_N experience_N ,_, but_& I_O think_V the_D application_N doesn't_N work_N fast_R ,_, because_P of_P all_X the_D JavaScript_N and_& httprequest_N ._.
I_O worked_V on_P a_D project_N with_P DWR_N -_: a_D really_R nice_A tool_N ._. I'm_N not_R convinced_A about_P the_D pace_N of_P development_N though_P ._. They_O did_V post_N on_P the_D development_N log_N that_D they're_V working_V on_P getting_V 3.0_$ out_P the_D door_N ,_, but_& the_D last_A stable_A release_N -_: 2.0_$ -_: was_V out_R in_P summer_N 2006_$ ._. It's_V a_D bit_N worrying_V taken_V from_P a_D support_N perspective_N -_: bug_N fixes_N especially_R ._.
Main_^ problem_N I've_N experienced_V is_V trying_V to_P script_N a_D load_N test_N on_P a_D system_N where_R the_D main_A bulk_N of_P the_D work_N is_V done_V via_P DWR_N calls_N ._. The_D format_N of_P the_D calls_N is_V difficult_A to_P replicate_V when_R compared_V with_P just_R replying_V a_D bunch_N of_P urls_N with_P changing_V parameters_N ._. Still_R DWR_^ is_V an_D excellent_A framework_N and_& makes_V implementing_V Javascript_^ ->_^ Java_^ RPC_^ pretty_R damn_R easy_A ._.
DWR_^ is_V a_D great_A tool_N when_R your_D site_N has_V a_D lot_N of_P ajax_N calls_N ._. Each_D page_N that_D makes_V dwr_N rpc_N calls_V needs_N to_P include_V :_: a_D )_N an_D interface_N file_N corresponding_V to_P the_D calls_N being_V made_V ._. and_& b_N )_G a_G js_G file_N bundled_V with_P dwr_N that_D contains_V the_D dwr_N engine_N code_N that_D makes_V these_D calls_N possible_A ._. for_P e.g._G script_N src=_N "_'' /_: dwr_N /_: engine.js_N "_'' /_: script_N one_$ technique_N that_D is_V frequently_R used_V while_P optimizing_V web_N applications_N is_V to_P use_V the_D browser_N cache_N as_R much_A as_P possible_A when_R a_D resource_N (_N like_P a_D js_N file_N )_N has_V not_R changed_V on_P a_D server_N ._. engine.js_N is_V something_N that_D will_V never_R change_V unless_P you_O upgrade_V your_D dwr_N to_P a_D newer_A version_N ._. But_& ,_, by_P default_N ,_, engine.js_N is_V not_R a_D static_A file_N served_V by_P your_D webserver_N ._. its_D bundled_V as_P part_N of_P the_D dwr_N tool_N itsef_N and_& is_V served_V by_P the_D dwr_N controller_N /_: servlet.this_G doesnt_G aid_N client_N side_N caching_N ._. So_R ,_, it_O is_V beneficial_A to_P save_V engine.js_N under_P the_D document_N root_N of_P your_D webserver_N and_& let_V the_D webserver_N serve_V it_O as_P a_D static_A file_N ._.
More_R about_P caching_G engine.js_G on_P DWR's_N site_N :_: http://directwebremoting.org/dwr/browser/engine/static.html_N
One_$ feature_N missing_V of_P current_A DWR_N 3.x_N that_P any_D user_N should_V take_V good_A care_N is_V that_P when_R an_D instance_N of_P a_D bean_N has_V properties_N of_P NULL_N value_N ,_, those_D properties_N will_V be_V still_R injected_V to_P the_D JSON_N and_& these_D redundant_A data_N DO_N affect_V the_D performance_N ._. When_R a_D property_N has_V the_D value_N of_P NULL_^ ,_, usually_R it_O should_V not_R be_V sent_V to_P frontend_N ._. Details_N of_P problem_N :_: http://dwr.2114559.n2.nabble.com/Creating-Custom-bean-converter-td6178318.html_N
The_D biggest_A difference_N among_P other_A solutions_N to_P transfer_V objects_N (_G marshaling_G )_G is_V object_N references_N ._. For_P instance_N ,_, if_P you_O use_V it_O to_P transfer_V a_D tree_N :_: A_D |-B_N |-C_N in_P a_D list_N {_N A_N ,_, B_N ,_, C}_N :_: B.parent_N =_A A_N C.parent_N =_A A_N then_R A_D is_V the_D same_A object_N in_P Javascrit_^ !_. On_P the_D bad_A side_N ,_, if_P you_O have_V complex_A structures_N with_P circular_A dependencies_N and_& lot_N of_P objects_N :_: A_D -B_N ,_, B_N -C_N ,_, C_N -B_N ,_, C_N ._. A_D ,..._N it_O could_V crash_V ._. Anyway_R ,_, I_O use_V it_O in_P a_D real_A project_N used_V by_P many_A hundreds_N of_P companies_N in_P production_N to_P transfer_V thousands_N of_P objects_N to_P a_D single_A html_N page_N in_P order_N to_P draw_V a_D complex_A graph_N and_& it_O works_V nicely_R with_P a_D good_A performance_N ._.
Clientside_^ Javascript_^ -->_P Serverside_^ Java_^ -->_P user_N is_V served_V a_D ._. doc_N
I_O am_V helping_V someone_N out_R with_P a_D javascript-based_A web_N app_G (_G even_R though_P I_O know_V next_A to_P nothing_N about_P web_N development_N )_N and_& we_O are_V unsure_A about_P the_D best_A way_N to_P implement_V a_D feature_N we'd_N like_P to_P have_V ._. Basically_R ,_, the_D user_N will_V be_V using_V our_D tool_N to_P view_V all_D kinds_N of_P boring_A data_N in_P tables_N ,_, columns_N ,_, etc_G ._. via_P javascript_N ._. We_O want_V to_P implement_V a_D feature_N where_R the_D user_N can_V click_V a_D button_N or_& link_N that_D then_R allows_V the_D user_N to_P download_V the_D displayed_V data_N in_P a_D ._. doc_N file_N ._. Our_D basic_A idea_N so_R far_R is_V something_N like_P :_: call_V a_D Java_^ function_N on_P the_D server_N with_P the_D desired_V data_N passed_V in_R as_P a_D String_^ when_R the_D link_N is_V clicked_V generate_V the_D ._. doc_N file_N on_P the_D server_N automatically_R "_`` open_A "_'' a_D link_N to_P the_D file_N in_P the_D client's_N browser_N to_P initiate_V the_D download_N Is_V this_D possible_A ?_. If_P so_R ,_, is_V it_O feasible_A ?_. Or_& ,_, can_V you_O recommend_V a_D better_A solution_N ?_. edit_V :_: the_D data_N does_V not_R reside_V on_P the_D server_N ;_: rather_R ,_, it_O is_V queried_V from_P a_D SQL_N database_N
What_D type_N of_P web_N server_N are_V you_O using_V ?_.
a_D java_N enabled_V one_$ ,_, i_G presume_G
Yep_R ,_, its_D possible_A ._. Your_D saviour_N is_V the_D Apache_^ POI_^ library_N ._. Its_D HWPF_N library_N will_V help_V you_O generate_V Microsoft_^ word_N files_N using_V java_N ._. The_D rest_N is_V just_R clever_A use_N of_P HTTP_^ ._.
Your_D basic_A idea_N sounds_V a_D bit_N Rube-Goldbergesque_^ ._. Is_V the_D data_N you_O want_V in_P the_D document_N present_A on_P the_D server_N ?_. If_P so_R ,_, then_R all_D you_O need_V to_P do_V is_V display_V a_D plain_A HTML_^ link_N with_P GET_V parameters_N that_D describes_V the_D data_N (_G i.e._G data_N for_P customer_N X_N from_P date_N A_N to_P date_N B_^ )_^ ._. The_D link_N will_V be_V handled_V on_P the_D server_N by_P a_D Servlet_^ that_D gets_V the_D data_N and_& produces_V the_D ._. DOC_N file_N as_P its_D output_N to_P be_V downloaded_V by_P the_D browser_N -_: a_D very_R simple_A one-step_A process_N that_P doesn't_N even_R involve_V any_D JavaScript_^ ._.
no_R ,_, the_D data_N is_V being_V queried_V from_P a_D SQL_N database_N
Which_D means_V the_D server_N can_V simply_R run_V the_D same_A query_N again_R -_: it_O has_V done_V it_O before_R ,_, it's_N not_R the_D javaScript_N that_D directly_R accesses_V the_D DB_N ,_, is_V it_O ?_.
Passing_V large_A amount_N data_N as_P GET_V /_: POST_N around_R might_V not_R be_V the_D best_A idea_N ._. You_O could_V just_R pass_V in_P the_D same_A parameters_N you_O used_V to_P generate_V the_D HTML_^ page_N earlier_R ._. You_O don't_V even_R need_V to_P use_V 3rd_A party_N library_N to_P generate_V DOC_N ._. You_O could_V just_R generate_V a_D plain_A old_A HTML_^ file_N with_P DOC_N extension_N and_& Word_N will_V be_V happy_A to_P open_V it_O ._.
thats_V a_D nice_A trick_N :)_N but_& the_D file_N format_N won't_N really_R be_V DOC_N now_R ,_, will_V it_O :)_V
that's_V a_D good_A idea_N ,_, but_& it_O would_V be_V nice_A to_P keep_V the_D table_N formatting_N
True_A ,_, but_& if_P the_D user_N sees_V the_D results_N opening_V in_P Word_N ,_, nobody_N cares_V (_N from_P experience_N )_N ._. We_O did_V the_D same_A trick_N for_P export_N only_R excel_V spreadsheets_N -_: no_D problem_N with_P comma-semicolon_A separator_N unlike_P in_G csv_G ._.
Sounds_V like_P Docmosis_^ Java_^ library_N could_V help_V -_: check_V out_R theonline_A demo_N since_P shows_N it_O something_N similar_A to_P what_O you're_N asking_V -_: generating_V a_D real_A doc_N file_N from_P a_D web_N site_N based_V on_P selections_N in_P the_D web_N page_N ._. Docmosis_^ can_V query_V from_P databases_N and_& run_V pretty_R much_R anywhere_R ._.
How_R can_V I_O get_V a_D signed_A Java_^ Applet_^ to_P perform_V privileged_A operations_N when_R called_V from_P unsigned_A Javascript_^ ?_.
Use_V the_D java.security.AccessController_N class_N ._. There_X is_V a_D doPrivilegedAction_N and_& doPrivilegedExceptionAction_N that_D do_V exactly_R what_O you_O need_V ._. For_P example_N :_: AccessController.doPrivileged_G (_G new_A PrivilegedAction()_G {_G public_A Object_^ run()_^ {_^ .._^ do_V something_N that_P only_A works_N with_P signed_A applets_N .._G }_G }_G );_G
It's_N worth_A adding_V :_: make_V your_D privaction'd_G run()_G method_N as_P small_A and_& self-contained_A as_P possible_A ._. Obviously_R you_O could_V just_R have_V your_D signed_V applet's_G init()_G method_N call_V a_D privileged_A run()_N which_D in_P turn_N does_V the_D actual_A applet_N ,_, but_& that's_N just_R begging_V to_P be_V abused_V ,_, misused_V accidentally_R ,_, or_& outright_R exploited_V ._. Also_R ,_, the_D fact_N that_D signed_V applets_N lose_V their_D special_A permissions_N when_R called_V by_P JavaScript_^ is_V not_R specific_A to_P a_D particular_A browser_N or_& platform_N ._. That's_N just_R how_R it_O is_V ,_, everywhere_R ,_, all_X the_D time_N ._.
Java_^ date_N format_N to_P JavaScript_^ date_N format_N
"_`` dd_N /_: mm_N /_: yy_G (_G 07_$ /_: 06_$ /_: 2009_$ )"_N does_V not_R compute_V ,_, but_& I_O won't_V edit_V it_O because_P I'm_N not_R sure_A on_P exactly_R what_O you_O intend_V ._.
Could_V you_O give_V some_D information_N on_P how_R you_O are_V passing_V the_D Java_^ date_N to_P the_D Javascript_^ code_N ?_. e.g._G are_V you_O writing_V it_O out_R using_V a_D JSP_^ ?_. That_D will_V help_V a_D lot_N in_P answering_V your_D question_N ._.
Did_V you_O mean_V "_`` dd_N /_: mm_N /_: yy_G (_G 07_$ /_: 06_$ /_: 09_$ )"_N ?_. Otherwise_R I_O don't_V understand_V the_D difference_N between_P the_D two_$ sample_N dates_N you_O gave_V ._.
After_P reading_V this_D question_N about_P twenty_$ times_N ,_, I_O think_V Ed_^ means_V How_R do_V I_O convert_V a_D string_N used_V to_P format_N dates_N in_P Java_^ (_^ using_V SimpleDateFormat_G )_G to_P an_D equivalent_A string_N used_V to_P format_N dates_N in_P JavaScript_^ (_^ using_V Date.format_G )_G ?_.
(_N However_R I_O am_V still_R down-voting_A this_D question_N because_P if_P you_O need_V to_P do_V this_D ,_, you_O re_V doing_V it_O wrong_A )_N ._.
If_P you_O are_V using_V java_N ,_, take_V a_D look_N at_P the_D Simple_A Date_N Format_N class_N ._.
The_D javascript_N code_N in_P this_D page_N implements_V some_D date_N functions_N and_& they_O "_'' use_V the_D same_A format_N strings_N as_P the_D java.text.SimpleDateFormat_N class_N ,_, with_P a_D few_A minor_A exceptions_N "_'' ._. It_O is_V not_R the_D very_R same_A as_P you_O want_V but_& it_O can_V be_V a_D good_A start_N point_N ._.
A_D similar_A topic_N has_V been_V answered_V here_R :_: Converting_V dates_N in_P JavaScript_^ I_O personally_R have_V found_V this_D to_P be_V a_D rather_R large_A pain_N and_& took_V the_D author's_N suggestion_N and_& used_V a_D library_N ._. As_P noted_V ,_, jQuery_N datepicker_N has_V one_$ that_D is_V a_D viable_A solution_N if_P you_O can_V afford_V the_D overhead_N of_P download_N for_P your_D application_N or_& already_R using_V it_O ._.
I_O really_R think_V a_D libary_N is_V the_D way_N to_P go_V on_P this_D one_N as_R well_R ._. FWIW_N ,_, dojo_N has_V a_D good_A one_N as_R well_R ._. http://docs.dojocampus.org/dojo/date/locale_N
If_P you_O just_R need_V to_P pass_V a_D date_N from_P Java_^ to_P JavaScript_^ ,_, the_D best_A way_N to_P do_V it_O ,_, I_O think_V ,_, would_V be_V to_P convert_V the_D Java_^ date_N to_P milliseconds_N using_V date.getTime()_N ,_, create_V a_D JavaScript_^ date_N initialized_V with_P this_D milliseconds_N value_N with_P new_A Date_G (_G milliseconds_N )_N and_& then_R format_N the_D date_N with_P the_D means_N of_P the_D JavaScript_^ Date_^ object_N ,_, like_P :_: date.toLocaleString()_N ._.
I_O have_V a_D similar_A problem_N with_P Java_^ Date_^ ->_^ Javascript_^ Date_^ ->_^ DatePicker_^ ._. This_^ helped_V get_V me_O a_D lot_N closer_A ._. Thanks_N !_.
Best_N solution_N ._. Solved_V the_D fact_N that_P SimpleDateFormat_G doesn't_G provide_V a_D zero_N based_A month_N ._.
See_V this_D :_: http://www.javascripttoolbox.com/lib/date/examples.php_N
If_P you_O just_R want_V to_P format_N dates_N my_D date_N extensions_N will_V do_V that_D well_R -_: it_O also_R parses_V data_N formats_N and_& does_V a_D lot_N of_P date_N math_N /_: compares_V as_R well_R :_: DP_DateExtensions_N Library_^ Not_R sure_A if_P it'll_N help_N ,_, but_& I've_^ found_V it_O invaluable_A in_P several_A projects_N ._.
You_O could_V use_V my_D plugin_N jquery-dateFormat_N ._.
This_D JavaScript_^ library_N should_V be_V able_A to_P help_V you_O ._. http://plugins.jquery.com/project/fIsForFormat_N (_N I_$ don't_N know_V why_R they_O have_V it_O as_P a_D jQuery_^ Plugin_^ ,_, because_P it_O works_V standalone_A ._. )_G You'd_G simply_R split_V the_D original_A formatted_A date_N into_P its_D individual_A elements_N and_& then_R create_V a_D new_A Date_^ Object_^ with_P those_D elements_N ._. Then_R ,_, use_V this_D library's_N "_`` Date.f()_N "_'' method_N to_P output_N it_O into_P any_D format_N you_O could_V want_V ._. For_P example_N :_:
This_D works_V fine_A for_P me_O :_:
Check_V out_R moment.js_N !_. It's_N "_'' A_D lightweight_A javascript_N date_N library_N for_P parsing_N ,_, manipulating_V ,_, and_& formatting_N dates_N "_'' ._. It_O is_V a_D really_R powerful_A little_A library_N ._. Here's_V an_D example_N ..._: Here's_V another_D example_N ..._: Also_R ,_, its_D worth_N mentioning_V to_P checkout_N date.js_N ._. I_O think_V the_D two_$ libraries_N complement_V each_D other_A ._.
Communication_^ between_P Java_^ and_& Javascript_^ without_P Netscape_^ or_& IE_N ?_.
In_P the_D lab_N I_$ work_N in_P ,_, we_O use_V Mozilla_^ 1.7_$ for_P Sun_^ Java_^ Desktop_^ System_^ and_& Firefox_^ 2.0_$ ._. 0.4_$ ._. My_D goal_N is_V to_P modify_V an_D existing_A Java_^ application_N (_$ run_N via_P executable_A jar_N )_N to_P communicate_V with_P our_D web-based_A login_N system_N ._. I_O am_V open_A to_P the_D idea_N of_P using_V both_D Java_^ Applets_^ and_& JavaScript_^ to_P accomplish_V this_D task_N ,_, but_& I_O have_V not_R found_V a_D way_N to_P integrate_V these_D two_$ technologies_N in_P any_D browser_N but_& Netscape_^ Navigator_^ and_& Internet_^ explorer_N ._. Is_V there_X a_D way_N to_P do_V this_D using_V either_D of_P the_D two_$ aforementioned_A browsers_N ?_. A_D more_R concrete_A example_N :_: 1_$ ._. Launch_V application_N 2_$ ._. Click_V a_D "_`` login_N "_'' button_N 3_$ ._. Be_V prompted_V for_P a_D password_N 4_$ ._. In_P the_D background_N ,_, have_V the_D application_N connect_V to_P the_D web-based_A login_N server_N ,_, enter_V the_D username_A (_N known_V by_P the_D app_G )_G and_& the_D password_N ,_, navigate_V to_P the_D time_N clock_N section_N and_& "_`` click_V "_'' the_D Punch_N In_P button_N 5_$ ._. Pull_V the_D timestamp_N of_P the_D login_G (_G typically_R displayed_V on_P the_D browser_N )_N and_& display_V it_O in_P the_D app_N
From_P your_D question_N it_O is_V not_R clear_A why_R you_O need_V a_D browser_N to_P begin_V with_P ._. It_O is_V nearly_R trivial_A to_P perform_V a_D GET_V or_& POST_V from_P java_N with_P the_D login_N credentials_N and_& retrieve_V this_D time_N stamp_N ._. With_P out_A modification_N to_P the_D web_N service_N you_O can_V parse_V the_D out_P of_P the_D text_N returned_V from_P the_D GET_V or_& POST_N and_& then_R present_V the_D time_N stamp_N ._.
Look_N at_P HTTPURLConnection_N and_& perform_V POST_N of_P the_D same_A values_N login_N form_N contains_V to_P the_D same_A URL_N ._.
It_O looks_V like_P the_D GET_V and_& POST_N is_V the_D solution_N I've_N been_V looking_V for_P ._. I_O am_V able_A to_P find_V the_D credential_N fields_N and_& enter_V text_N ,_, but_& how_R does_V one_$ simulate_V a_D button_N click_V ?_. The_D line_N in_P the_D source_N code_N is_V :_: It_O seems_V I_O would_V either_R invoke_V the_D onclick_A property_N of_P the_D button_N or_& make_V a_D direct_A call_N to_P doLogin()_N ,_, but_& I_O am_V unsure_A how_R to_P do_V either_R ._. Thanks_N for_P the_D help_N so_R far_R ._.
You_O need_V to_P look_V at_P what_O the_D JavaScript_^ function_N doLogin_N is_V doing_V ._. It_O is_V most_R likely_R submitting_V the_D form_N ._.
Open_V new_A browser_N window_N on_P click_V of_P a_D form_N button_N
I_O want_V to_P open_V a_D new_A browser_N and_& load_V a_D page_N from_P the_D file_N system_N (_N which_D will_V be_V created_V on_P clicking_V that_D button_N )_N ._. My_D app_N is_V a_D java_N servlet_N ._. Basically_R I_O am_V allowing_V users_N to_P change_V some_D HTML_^ on_P their_D website_N ._. On_P clicking_V the_D button_N the_D user_N get's_N to_P see_V a_D preview_N page_N ,_, that_D shows_V what_O the_D page_N looks_V like_P with_P the_D changes_N made_V ._. What_O would_V be_V the_D easiest_A way_N to_P do_V this_D and_& what_O issues_N can_V you_O see_V ,_, and_& possibly_R how_R we_O would_V we_O get_V around_P them_O ._. I_O see_V an_D issue_N ,_, for_P example_N ,_, if_P the_D browser_N window_N tries_V to_P open_V the_D file_N immediately_R ,_, it_O won't_N even_R exist_V ._. So_P there_X needs_V to_P perhaps_R be_V some_D delay_N before_P trying_V to_P read_V the_D file_N ._.
This_D can_V be_V done_V using_V java_N script_N window.open('url','name_N '_'' ,...._G )_G you_O can_V pass_V parameters_N in_P this_D function_N ._. google_V for_P "_`` javascript_N window.open_N function_N "_'' Cheers_^
Maybe_R you_O can_V use_V jQuery_N /_: AJAX_N or_& a_D similar_A technique_N to_P post_V the_D data_N to_P the_D server_N first_R and_& then_R open_V it_O in_P a_D new_A window_N ._. see_V the_D jQuery_N documentation_N for_P an_D example_N :_: jQuery_^ Post_^ Example_^
if_P there_X is_V not_R much_A data_N to_P pass_V for_P preview_N page_N ,_, you_O may_V pass_V it_O as_P url_N params_N instead_R of_P using_V jQuery_N ._. If_P data_N is_V large_A it_O is_V better_A to_P use_V jQuery_N ._. :)_N as_P http://www.xyz.com?name=_N "_`` name_N "_'' ....._N
I'm_N not_R familliar_A with_P java_N servlets_N ,_, but_& can't_V you_O keep_V the_D uploaded_A html_N in_P a_D server-side_A session_N variable_N ,_, display_V the_D contents_N in_P your_D preview_N page_N ,_, then_R save_V the_D contents_N of_P the_D variable_N out_P to_P the_D file_N system_N once_P the_D user_N accepts_V the_D changes_N ?_.
You_O could_V use_V JavaScript_^ ._. On_P the_D button_N you_O add_V :_: and_& within_P the_D script_N part_N of_P the_D page_N you_O write_V a_D function_N like_P and_& in_P your_D Servlet_^ you_O just_R wait_V for_P the_D file_N to_P appear_V before_P delivering_V it_O ._.
How_R to_P stop_V reloading_V Java_^ applet_N when_R changing_V "_`` overflow_N "_'' style_N
When_R I_O change_V the_D "_`` overflow_N "_'' style_N on_P document.body_N from_P "_`` hidden_A "_'' to_P "_`` auto_N "_'' ,_, it_O forces_V a_D reload_N of_P a_D Java_^ applet_N that_D is_V on_P the_D page_N ._. I_O have_V set_V overflow_N to_P hidden_A because_P most_A of_P the_D time_N I_$ don't_N want_V scrollbars_N to_P be_V visible_A on_P the_D page_N ,_, but_& I'd_N like_P to_P enable_V them_O without_P losing_V state_N in_P my_D applet_N ._. Is_V this_D possible_A ,_, or_& is_V there_R another_D way_N I_O should_V be_V going_V about_P this_D problem_N ?_.
It's_N not_R possible_A ._. Different_A browsers_N behave_V in_P different_A ways_N ;_: some_D reload_V the_D applet_N with_P the_D slightest_A DOM_N change_N while_P others_N keep_V it_O running_V even_R if_P you_O set_V display_N :_: none_N ._. In_P my_D experience_N the_D Java_^ Plugin_^ has_V very_R little_A control_N over_P this_D ._. You_O have_V to_P save_V the_D state_N of_P your_D applet_N either_& by_P :_: Reading_V the_D state_N into_P a_D JavaScript_^ variable_N via_P LiveConnect_^ and_& then_R writing_V it_O back_R to_P the_D applet_N afterwards_R Storing_V the_D state_N in_P static_A variables_N and_& checking_V their_D value_N when_R the_D Applet_^ starts_V up_R
Split_G java_G strings_N in_P Rhino_N
I'm_N trying_V to_P split_V a_D java_N string_N in_P a_D Rhino_N javascript_N program_N which_D give_V me_O the_D error_N js_V :_: Can't_N find_V method_N java.lang.String.split()_N ._. The_D Rhino_^ docs_N mentioned_V that_P all_X the_D javascript_N String.prototype_N methods_N (_V like_P match_N ,_, split_N ,_, etc_G ._. )_N are_V available_A on_P java_N string_N if_P they're_N not_R already_R provided_V by_P java.lang.String_N ._. Any_D ideas_N on_P what's_N going_V on_P here_R ?_.
It_O may_V be_V that_D you're_N using_V it_O incorrectly_R ._. Doesn't_N split_N require_V a_D string_N parameter_N ?_.
Take_V a_D look_N at_P the_D Java_^ docs_N :_: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_N Doesn't_N seem_V to_P be_V a_D 0_$ parameter_N constructor_N for_P the_D split_N method_N ._. You_O gotta_R pass_V it_O a_D regular_A expression_N ._. Also_R ,_, for_P further_A clarification_N ,_, the_D split_N method_N returns_V a_D string_N array_N ,_, it's_V not_R a_D void_N method_N like_P the_D way_N you've_N used_V it_O in_P your_D sample_N code_N ._.
split_N takes_V an_D argument_N ,_, which_D is_V the_D regular_A expression_N you_O want_V to_P use_V to_P split_V your_D tokens_N ._. http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_N
Rhino_N provides_V only_R the_D methods_N that_P java.lang.String_N is_V missing_V and_& split_V obviously_R isn't_N one_$ of_P them_O ._. In_P order_N to_P use_V JavaScript's_A implementation_N of_P split_N ,_, you'll_N have_V to_P convert_V Java_^ string_N to_P JavaScript_^ one_$ :_: var_N s_N =_A String_^ (_^ new_A java.lang.String_N (_N "_'' 1_$ 2_$ 3_$ "))_N ;_: //_N Also_R valid_A :_: var_N s_N =_A ""_N +_& new_A java.lang.String_N (_N "_'' 1_$ 2_$ 3_$ ")_N ;_: print_N (_G s.split()_G );_G //_G 1_$ 2_$ 3_$
Not_R exactly_R the_D same_A context_N ,_, but_& may_V help_V someone_N ._. I_O use_V the_D JavaScript_^ function_N split()_^ in_P Rhino_^ ._. To_P get_V things_N working_V ,_, I_O follow_V the_D pattern_N :_: I_O suppose_V that_P ""_N +_& forces_N Rhino_^ to_P use_V a_D JavaScript_^ type_N of_P String_^ ._. When_R I_O forget_V to_P add_V ""_N +_& then_R I_O got_V the_D message_N
How_R to_P drag_V from_P browser_N area_N and_& deposit_N to_P the_D explorer_N area_N ?_.
Sometime_R ago_P I_O was_V facing_V the_D problem_N the_D other_A way_N around_P :_: how_R to_P drag_V an_D item_N (_N folder_N /_: file_N )_N from_P an_D explorer_N window_N (_$ be_V it_O windows_N explorer_N ,_, linux_N nautilus_N etc_N ._. )_$ to_P the_D browser_N window_N -_: that_D is_V ,_, the_D drag_N starts_V in_P one_$ application_N and_& ends_V in_P the_D browser_N ._. Since_P I_O had_V control_N over_P the_D browser_N ,_, I_O was_V able_A to_P intercept_V the_D dragend_N event_N :_: the_D one_N which_D interested_V me_O ._. Now_R ,_, I_O want_V to_P do_V this_D from_P the_D browser_N to_P the_D file_N explorer_N application_N :_: much_R like_P when_R you_O drag_V an_D image_N from_P firefox_N and_& drop_V it_O in_P a_D folder_N ._. My_D main_A problem_N is_V that_P while_P I_O can_V check_V when_R the_D drag_N event_N exited_V the_D browser_N window_N ,_, I_O have_V no_D ideea_N how_R to_P get_V the_D location_N where_R the_D drag_N event_N finished_V ._. My_D ideea_N is_V to_P create_V a_D signed_A java_N applet_N and_& somehow_R track_V the_D mouse_N movement_N on_P the_D desktop_N -_: but_& this_D seems_V a_D little_R more_A than_P overkill_N ._. Any_D pointers_N on_P this_D ?_.
You_O won't_V be_V able_A to_P do_V this_D with_P JavaScript_^ ._. JS_N is_V sandboxed_V in_P the_D browser_N and_& can't_N interact_V with_P anything_N outside_N ._.
That_P I_O know_V ._. I_O am_V going_V to_P use_V JS_^ only_R to_P detect_V the_D dragexit_N event_N from_P the_D html_N document_N ,_, and_& pass_V control_N to_P the_D java_N signed_V applet_N ._. At_P least_A ,_, that's_V the_D idea_N at_P this_D time_N ._.
According_V to_P your_D justification_N is_V is_V not_R simple_A ,_, but_& it_O can_V be_V managed_V ._. There_X is_V class_N called_V DataFlavor_^ ._. You_O had_V to_P use_V D_N D_N mechanism_N introduce_V in_P java_N using_V Transferable_A objects_N and_& provide_V correct_A mime-types_N and_& corresponding_A conversion_N ._. The_D problem_N is_V which_D mime-type_N will_V be_V accepted_V by_P explorer_N ._. I_O hope_V this_D help_N ._.
I_O guess_V it_O will_V accept_V most_A of_P the_D main_A mime-types_N ._. I_O believe_V now_R that_P when_R the_D dragexit_N happens_V ,_, I_O need_V to_P pass_V control_N over_P to_P the_D java_N applet_N and_& from_P there_X construct_N the_D Transferable_A objects_N ._.
Need_V a_D Java_^ and_& Javascript_^ diff_N tool_N written_V in_P Java_^
We_O need_V an_D accurate_A diff_N utility_N for_P Java_^ and_& Javascript_^ files_N ,_, written_V in_P Java_^ ._. It_O should_V be_V invokable_A from_P within_P an_D Eclipse_^ (_N version_N 3.2_$ or_& 3.3_$ )_N application_N ._. Preferably_R we_O need_V the_D Java_^ source_N code_N for_P this_D utility_N also_R ._. The_D utility_N should_V be_V able_A to_P compare_V two_$ files_N (_V old_A and_& new_A ,_, say_V )_N and_& determine_V the_D following_N accurately_R :_: Number_N of_P LOC_N added_V to_P the_D new_A file_N Number_N of_P LOC_N deleted_V from_P the_D old_A file_N Number_^ of_P LOC_^ changed_V in_P the_D old_A file_N Number_N of_P change_N deltas_N ,_, i.e._G ,_, contiguous_A blocks_N of_P code_N added_V /_: changed_V /_: deleted_V ._.
You_O might_V want_V to_P rephrase_V that_D to_P something_N like_P "_`` does_V anyone_N know_V of_P a_D free_A Java_^ diff_N tool_N that_D can_V do_V the_D following_N ..._: "_'' ._. As_P it_O stands_V ,_, it_O looks_V like_P a_D request_N for_P us_O to_P make_V one_$ for_P you_O in_P which_D case_N you_O should_V probably_R head_V on_P over_R to_P RentACoder_V :-)_N
Isn't_N there_X one_$ already_R built_V in_P or_& use_V one_$ of_P the_D many_A plug-ins_N that_D do_V it_O ?_. Google_^ Search_V ?_.
See_^ Diffj_^ ._.
Eclipse_^ has_V a_D very_R good_A diff_N /_: compare_V plugin_N installed_V by_P default_N ._. Have_V you_O looked_V into_P using_V and_& /_: or_& extending_V that_P (_G it's_G opensource_G )_G ?_. I_O would_V not_R think_V that_P adding_V some_D statistics_N reporting_V to_P the_D existing_V plug-in_A would_V be_V all_X that_D difficult_A ,_, though_P sometimes_R plug-in_A development_N (_N even_R just_R simple_A extension_N )_N can_V be_V deceiving_V ._. Good_A luck_N ._.
I_O needed_V a_D Java_^ diff_N implementation_N and_& found_V this_D :_: http://javacook.darwinsys.com/javasrc/textproc/Diff.java_N which_D I_O adapted_V ._.
What_O are_V FTL_N files_N
I_O am_V new_A to_P a_D project_N and_& have_V to_P learn_V it_O inside_P out_P ._. I_O see_V a_D lot_N of_P files_N with_P the_D extension_N ._. ftl_N in_P them_O ._. I'n_N not_R sure_A what_O they_O are_V ._. I_O know_V they_O can_V be_V modified_V and_& the_D user_N sees_V changes_N in_P the_D front_A end_N
Freemarker_N template_N files_N I_O believe_V ._. http://freemarker.org_N /_:
http://filext.com/file-extension/FTL_N points_N to_P http://freemarker.sourceforge.net_N ,_, does_V that_P help_V ?_.
Have_V a_D look_N here_R ._. Following_V files_N have_V FTL_N extension_N :_: Family_^ Tree_^ Legends_^ Family_^ File_^ FreeMarker_^ Template_^ Future_^ Tense_A Texture_N
freemarker_N combines_V java_N objects_N and_& view_N side_V (_^ HTML_^ /_: JQuery_N )_$ contents_N in_P a_D single_A viewable_A template_N on_P a_D browser_N ._.
FTL_N stands_V for_P FreeMarker_^ Template_^ ._. It_O is_V very_R useful_A when_R you_O want_V to_P follow_V the_D MVC_^ (_^ Model_^ View_^ Controller_^ )_^ pattern_N ._. The_D idea_N behind_P using_V the_D MVC_^ pattern_N for_P dynamic_A Web_N pages_N is_V that_P you_O separate_V the_D designers_N (_^ HTML_^ authors_N )_V from_P the_D programmers_N ._.
An_D ftl_N file_N could_V just_R have_V a_D series_N of_P html_N tags_N just_R as_P a_D JSP_^ page_N or_& it_O can_V have_V freemarker_N template_N coding_V for_P representing_V the_D objects_N passed_V on_R from_P a_D controller_N java_N file_N file_N ._. But_& ,_, its_D actual_A ability_N is_V to_P combine_V the_D contents_N of_P a_D java_N class_N and_& view_N /_: client_N side_N stuff_N (_G html_G JQuery_N javascript_N etc_G )_G ._. It_O is_V quite_R similar_A to_P velocity_N ._. You_O could_V map_V a_D method_N or_& object_N of_P a_D class_N to_P a_D freemarker_N (_N ._. ftl_G )_G page_N and_& use_V it_O as_P if_P it_O is_V a_D variable_N or_& a_D functionality_N created_V in_P the_D very_A page_N ._. ping_V me_O for_P more_A details_N ..!_$ cheers_N ..!_G :)_G
._. FLT_N is_V a_D file_N extension_N which_D is_V a_D mod_N for_P Faster_^ than_P light_A ,_, installed_V by_P Slipstream_^ Mod_^ Manager_^ ,_, which_D requires_V Java_^ ._.
Java_^ frameworks_N vs._P Javascript_^ frameworks_N
I_O am_V a_D big_A fan_N of_P the_D Dojo_^ Toolkit_^ but_& I_O see_V here_R often_R that_P there_X are_V Java_^ frameworks_N that_D do_V the_D same_A thing_N but_& they_O are_V not_R as_P extensive_A or_& as_P user_N friendly_A as_P Dojo_^ in_P my_D opinion_N ._. What_O are_V the_D main_A differences_N ?_. Can_V I_O use_V Dojo_^ for_P the_D GUI_^ and_& Java_^ as_P the_D back-end_A ?_. Is_V there_X a_D list_N of_P Java_^ frameworks_N for_P web_N development_N ?_.
http://tinyurl.com/l2apzg_N see_V the_D list_N of_P some_D java_N web_N frameworks_N
This_D is_V a_D fairly_R big_A misconception_N ._. The_D first_A chapter_N of_P every_D pretty_R much_A any_D javascript_N book_N describes_V how_R it's_N almost_R entirely_R unrelated_A to_P java_N ._.
Then_R I_O guess_V you_O don't_V understand_V my_D question_N ._. I_O saw_V multiple_A java_G gui_G frameworks_N that_D actually_R do_V the_D same_A thing_N as_P dojo_N and_& I_O am_V wondering_V what_O is_V better_A ._. I_O didn't_V say_V java_N is_V related_A to_P javascript_N ._. I_O am_V just_R searching_V for_P the_D framework_N I_O like_V the_D most_A ._.
Maybe_R if_P you_O haven't_V titled_V your_D question_N as_P Java_^ vs_& Javascript_^ ..._:
it's_G java_G vs._G javascript_N frameworks_N ._. pharhaps_V the_D title_N should_V be_V java_A framekworks_N vs_& ._. javascript_N frameworks_N if_P it_O wasn't_G clear_A enough_R ._.
isn't_V this_D equivalent_N to_P "_`` Comparing_V Apples_N with_P Oranges_N "_''
I_O dont_V think_V unless_P using_V Applets_N ,_, java_N can_V do_V the_D same_A as_P javascript_N because_P they_O have_V different_A purpose_N ._. Even_R applets_V dont_N exactly_R do_V the_D same_A thing_N ._. Read_V this_D
Well_R -_: there_X Google_^ Web_N Toolkit_N ._. A_D lot_N of_P discussion_N about_P this_D here_R :_: http://code.google.com/intl/nb-NO/events/io/sessions.html_N
GWT_^ takes_V the_D Java_^ code_N and_& translates_V it_O -literally-_$ to_P Javascript_^ code_N
Agree_V to_P all_X the_D comments_N ,_, all_D i_G wanted_V to_P say_V is_V Java_^ !_. =_A JavaScript_N
Javascript_^ is_V a_D completely_R different_A thing_N from_P Java_^ Javascript_^ is_V intended_V for_P browser_N behaviour_N ,_, Java_^ is_V a_D complete_A different_A thing_N ._. Some_D Java_^ Web_N frameworks_N use_V Dojo_G (_G like_P MyFaces_G )_G when_R rendering_V rich_A components_N and_& Java_^ is_V in_P charge_N of_P the_D backend_N ._. You_O can_V find_V many_A useful_A alternatives_N for_P Java_^ Web_N Frameworks_N in_P stackoverflow_N What_O Web_N Application_N Framework_N for_P Java_^ is_V recommended_V ?_. I_O personally_R prefer_V Spring_^ MVC_^ but_& there_X are_V many_A options_N
Where_R do_V you_O see_V MyFaces_^ uses_V dojo_N ?_.
When_R MyFaces_^ renders_V the_D HTML_^ it_O includes_V some_D dojo_N libraries_N ,_, it_O is_V mentioned_V in_P its_D documentation_N and_& even_R some_D components_N explicitly_R are_V named_V
Is_V it_O really_R a_D "_`` completely_R "_'' different_A thing_N ,_, or_& are_V we_O intended_V to_P overlook_V what_O they_O have_V in_P common_A ?_. However_R ,_, I_O think_V that_P Java_^ is_V rather_R a_D subset_N of_P Javascript_^ than_P the_D other_A way_N round_N ._. ;)_N
I_O have_V found_V this_D library_N to_P fit_V my_D needs_N ._. I_O just_R need_V a_D server_N side_N back-end_A and_& it_O looks_V very_R lightweight_A ._.
I_O don't_V think_V this_D is_V an_D answer_N for_P you_O own_A question_N ,_, hehe_N ._. I_O didn't_V down-voted_A you_N though_P
Why_R not_R ?_. Dojo_^ handles_V REST_N channels_N ._. I_O can_V write_V my_D own_A framework_N around_P it_O ._.
You_O shouldn't_R compare_V Java_^ and_& Dojo_^ ,_, they_O are_V quite_R different_A animals_N ._. Dojo_^ is_V a_D Javascript_^ toolkit_N /_: library_N so_P you_O should_V rather_R compare_V it_O to_P ExtJS_V for_P instance_N ._. And_& yes_! ,_, you_O can_V use_V whatever_D js_V script_N you_O like_V in_P the_D HTML_^ /_: jsp_N pages_N of_P your_D web_N application_N ._. Regarding_V Java_^ frameworks_N ,_, first_A and_& foremost_A look_N into_P Spring_N ._.
"_`` Java_^ is_V to_P Javascript_^ what_D car_N is_V to_P carpet_N ._. "_''
Where_R did_V you_O hear_V this_D ?_. Greg_^ Hewgill_^ posted_V it_O here_R :_: http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java/245068#245068_N ,_, but_& he_O didn't_^ remember_V where_R he_O got_V it_O from_P ._.
I_O believe_V the_D credit_N goes_V to_P Chris_^ Heilmann_^ :_: http://www.wait-till-i.com/2005/11/08/do-hr-people-even-read-their-job-ads-when-they-get-published_A /_:
*_G "_`` Java_^ is_V to_P Javascript_^ what_D subway_N is_V to_P car_N "_'' *_G
It_O is_V quite_R possible_A to_P combine_V Dojo_^ and_& a_D Java_^ web_N framework_N ._. My_D company's_A application_N uses_V both_D Dojo_^ and_& Spring_^ MVC_^ ._. The_D two_$ technologies_N address_V different_A sets_N of_P problems_N ._. Dojo_^ is_V a_D client-side_A framework_N for_P managing_V UI_^ components_N (_$ widgets_N )_^ ,_, AJAX_^ requests_N ,_, and_& providing_V a_D browser-independent_A abstraction_N on_P top_N of_P JavaScript_^ and_& the_D DOM_^ ._. Spring_^ MVC_^ is_V a_D server-side_A framework_N that_D receives_V requests_N from_P the_D browser_N ,_, provides_V entry-points_N into_P server-side_A business_N logic_N ,_, and_& directs_V page_N flow_N through_P the_D application_N ._. Having_V said_V that_P ,_, there_X are_V other_A Java_^ web_N frameworks_N that_D overlap_V some_D functionality_N that_D is_V also_R provided_V by_P JavaScript_^ tools_N like_P Dojo_^ ._. JSF_N with_P ICEfaces_N or_& RichFaces_N come_V to_P mind_V ._. In_P those_D models_N ,_, the_D server_N (_^ Java_^ )_^ has_V more_R direct_A control_N over_P how_R components_N are_V rendered_V and_& how_R their_D state_N is_V held_V ._. One_$ explicit_A goal_N of_P RichFaces_^ ,_, for_P example_N ,_, is_V to_P help_V developers_N who_O don't_V know_V JavaScript_^ (_^ or_& don't_^ want_V to_P write_V it_O )_R develop_V AJAX_N applications_N ._. But_& I_O wouldn't_V say_V one_$ approach_N is_V better_A than_P the_D other_A ._. They_O just_R focus_V on_P different_A developer_N audiences_N ._.
JavaScript_^ Frameworks_^ ._. Those_D listed_V here_R include_V :_: Prototype_^ jQuery_^ Ext_^ Script.aculo.us_^ MooTools_^ Yahoo_^ !_. UI_^ Library_^ (_^ YUI_^ )_^ Dojo_^ Toolkit_^ Backspace_^ They_O are_V among_P the_D most_R popular_A ones_N ._. I_O use_V MooTools_^ ._.
Obtaining_V in_P IE_N the_D length_N of_P a_D Java_^ array_N passed_V from_P an_D applet_N to_P its_D Javascript_^ wrapper_N
I_O have_V the_D following_A method_N in_P my_D applet_N :_: Which_D I_O call_V from_P Javascript_^ as_P follows_V :_: This_D works_V in_P Firefox_^ but_& IE_N gives_V me_O Any_D ideas_N anyone_N ?_.
Knowing_V nothing_N about_P Java_^ I_O can_V only_R ask_V if_P you've_N tried_V "_'' for_P (_G i_G in_P files_N )_G {_G /_: *_G do_V stuff_V *_G /_: }_N "_''
Don't_V you_O mean_V File_^ []_^ (_^ not_R Files[]_G )_G ?_. Other_A then_R that_P ,_, it_O would_V help_V if_P you_O alert_V (_^ files_V )_^ ._. Also_R ,_, if_P you_O have_V a_D javascript_N debugger_N (_^ DebugBar_^ ,_, for_P example_N )_N that_D would_V help_V the_D most_A ._.
