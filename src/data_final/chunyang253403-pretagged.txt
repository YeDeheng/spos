How	R
to	P
prevent	V
a	D
user	N
from	P
seeing	V
previous	A
users	N
'	,
info	N
by	P
hitting	V
the	D
"	,
Back	R
"	,
button	N

I	O
am	V
developing	V
a	D
java	N
web	N
app	N
using	V
servlet	N
,	,
in	P
order	V
to	P
prevent	V
user	N
from	P
hitting	V
the	D
back	N
button	N
to	P
see	V
previous	A
users	N
'	,
info	!
,	,
I	O
have	V
the	D
following	N
code	N
:	,
Besides	P
I	O
also	R
have	V
the	D
following	N
code	N
in	P
the	D
file	N
:	,
web	N
/	,
WEB-INF	^
/	,
web.xml	^
And	&
the	D
ResponseHeaderFilter.java	^
looks	V
like	P
this	D
:	,
So	P
far	R
it's	L
still	R
not	R
working	V
correctly	R
.	,
The	D
back	N
button	N
will	V
bring	V
up	T
a	D
warning	N
window	N
saying	V
the	D
data	N
has	V
expired	A
,	,
it	O
asks	V
if	P
the	D
user	N
wants	V
to	P
repost	V
it	O
.	,
If	P
you	O
choose	V
yes	!
,	,
it	O
will	V
still	R
display	V
the	D
previous	A
pages	N
info	N
.	,
What	O
am	V
I	O
doing	V
wrong	A
?	,
What's	L
the	D
fix	V
?	,
Frank	^
Yes	!
,	,
I	O
am	V
developing	V
a	D
web	N
app	N
for	P
a	D
PC	N
in	P
public	A
place	N
,	,
if	P
user	N
B	G
hits	V
the	D
back	N
button	N
he	O
might	V
see	V
user	N
A's	Z
private	A
info	N
.	,
I	O
was	V
trying	V
to	P
use	V
session	N
id	L
with	P
servlet	N
,	,
but	&
how	R
to	P
do	V
it	O
,	,
any	D
sample	N
code	N
?	,
I	O
also	R
tried	V
the	D
following	N
:	,
It	O
works	V
for	P
IE	^
but	&
but	&
Firefox	^
.	,

Breaking	V
the	D
back	N
button	N
is	V
a	D
cardinal	N
sin	V
of	P
web	N
development	N
.	,
but	&
you	O
could	V
try	V
a	D
bit	N
of	P
java	N
script	N
in	P
the	D
onload	N
that	O
refreshed	V
the	D
details	N
according	V
to	P
the	D
currently	R
logged	V
in	P
session	N
.	,

Breaking	V
the	D
back	N
button	N
is	V
only	R
relevant	A
within	P
a	D
single	A
session	N
.	,
For	P
example	N
,	,
I	O
can't	V
open	V
a	D
new	A
browser	N
window	N
and	&
hit	V
the	D
"	,
back	N
"	,
button	N
to	P
go	V
to	P
the	D
last	A
website	N
I	O
visited	V
.	,

I'm	L
not	R
sure	A
if	P
I	O
understand	V
your	D
problem	N
exactly	R
.	,
Are	V
you	O
concerned	V
about	P
Person	^
A	^
logging	V
off	T
,	,
Person	^
B	^
logs	V
in	P
from	P
the	D
same	A
PC	N
and	&
browser	N
instance	N
,	,
and	&
then	R
you	O
want	V
to	P
prevent	V
Person	^
B	^
from	P
seeing	V
whatever	D
A	^
was	V
viewing	N
?	,
If	P
so	R
,	,
it	O
should	V
be	V
sufficient	A
to	P
check	V
the	D
credentials	N
of	P
the	D
user	N
on	P
every	D
page	N
load	N
.	,
Check	V
that	P
the	D
current	A
user	N
is	V
authorized	V
to	P
view	N
the	D
data	N
being	V
requested	V
.	,

How	R
will	V
hitting	V
the	D
back	N
button	N
cause	P
the	D
user	N
to	P
see	V
another	D
user's	S
data	N
?	,
What	O
is	V
your	D
use	N
case	N
?	,
Is	V
it	O
designed	V
for	P
a	D
public	A
terminal	N
,	,
where	R
each	D
user	N
submits	V
data	N
and	&
then	R
leaves	V
?	,
In	P
this	D
case	N
,	,
associate	V
each	D
input	N
with	P
a	D
unique	A
session	N
id	^
.	,
Keep	V
track	N
of	P
valid	A
session	N
ids	N
in	P
your	D
server	N
.	,
Once	R
the	D
input	N
is	V
submitted	V
,	,
remove	V
that	D
session	N
id	L
from	P
the	D
valid	A
ids	N
.	,
If	P
it	O
comes	V
up	T
again	R
,	,
then	R
don't	V
display	V
the	D
information	N
.	,

I	O
agree	V
-	,
it	O
sounds	V
like	P
he's	L
trying	V
to	P
solve	V
a	D
problem	N
that	P
shouldn't	V
exist	V
...	,
running	V
the	D
session	N
as	P
a	D
singleton	^
or	&
something	N
?	,

Your	D
problem	N
is	V
that	P
you're	L
trying	V
to	P
keep	V
the	D
client	N
from	P
seeing	V
what's	L
on	P
his	D
or	&
her	D
own	A
computer	N
.	,
You	O
can't	V
keep	V
them	O
from	P
looking	V
at	P
their	D
browser	N
cache	N
.	,
You	O
can't	V
keep	V
them	O
from	P
disabling	V
JavaScript	^
(	,
and	&
thus	R
your	D
scripting	N
code	N
)	,
.	,
You	O
can't	V
keep	V
them	O
from	P
using	V
a	D
browser	N
that	O
doesn't	V
observe	V
that	O
"	,
repost	N
"	,
convention	N
that	P
you	O
mention	V
.	,
This	D
is	V
not	R
a	D
problem	N
that	P
can	V
be	V
solved	V
with	P
JavaScript	^
or	&
a	D
server-side	A
solution	N
.	,
That	D
part	N
of	P
why	R
"	,
breaking	V
the	D
back	N
button	N
"	,
is	V
frowned	V
upon	T
:	,
it	O
doesn't	V
actually	R
solve	V
anything	N
.	,

Actually	R
,	,
you	O
can	V
turn	V
caching	V
off	T
.	,
Most	A
browsers	N
respect	N
this	D
,	,
but	&
it's	L
not	R
guaranteed	A
.	,

As	P
I	O
mentioned	V
in	P
my	D
post	N
here	R
,	,
you	O
can	V
turn	V
off	T
caching	V
but	&
history	N
may	V
be	V
treated	V
differently	R
by	P
different	A
user	N
agents	N
.	,
The	^
HTTP	^
specification	N
makes	V
a	D
distinction	N
between	P
the	D
two	$
but	&
doesn't	V
really	R
define	V
the	D
concept	N
of	P
history	N
as	P
well	R
as	P
it	O
defines	V
caching	V
.	,

I	O
had	V
a	D
similar	A
problem	N
in	P
.	,
Net	N
.	,
I	O
added	V
the	D
following	V
javascript	V
to	P
my	D
logout	N
page	N
:	,
document.execCommand	E
(	,
"	,
ClearAuthenticationCache	^
"	,
,	,
"	,
false	A
")	N
;	,
now	R
if	P
you	O
press	V
the	D
back	N
button	N
you	O
need	V
to	P
authenticate	V
again	R
.	,

Have	V
you	O
considered	V
that	P
a	D
malicious	A
user	N
could	V
simply	R
turn	V
off	T
Javascript	^
?	,

It	O
sounds	V
like	P
your	D
real	A
problem	N
is	V
that	P
the	D
re-post	N
works	V
.	,
That	O
would	V
probably	R
be	V
because	P
you	O
:	,
are	V
trusting	V
credentials	N
from	P
the	D
browser	N
rather	R
than	P
the	D
current	A
session	N
,	,
or	&
are	V
not	R
checking	V
that	P
the	D
current	A
session	N
is	V
allowed	V
access	V
the	D
data	N
represented	V
by	P
a	D
key	A
/	,
identifier	A
value	N
sent	V
from	P
the	D
browser	N
I	O
recommend	V
that	O
after	P
a	D
user	N
has	V
logged	V
in	P
you	O
never	R
trust	V
a	D
user	N
name	N
submitted	V
by	P
the	D
browser	N
.	,
Ideally	R
use	V
the	D
security	N
services	N
of	P
a	D
framework	N
like	P
Spring	^
Security	N
but	&
in	P
their	D
absence	N
you	O
can	V
rely	V
on	P
HttpServletRequest.getUserPrincipal()	^
.	,
To	P
make	V
sure	A
the	D
current	A
session	N
is	V
allowed	V
access	V
the	D
data	N
you	O
could	V
use	V
an	D
Access	^
Control	^
List	^
mechanism	N
provided	V
by	P
a	D
framework	N
such	R
as	P
Spring	^
Security	N
or	&
include	V
a	D
WHERE	^
OWNER=	^
?	,
clause	N
in	P
your	D
database	N
queries	N
.	,

If	P
you're	L
worried	A
about	P
someone	O
seeing	V
what	O
was	V
in	P
a	D
form	N
in	P
a	D
previous	A
page	N
you	O
could	V
use	V
a	D
hidden	A
form	N
for	P
the	D
"	,
real	A
"	,
post	N
and	&
use	V
one	$
that's	L
just	R
for	P
display	^
for	P
the	D
user	N
.	,
When	R
the	D
user	N
submits	V
the	D
display	N
form	N
,	,
you	O
copy	N
all	R
of	P
the	D
fields	N
to	P
the	D
hidden	A
form	N
,	,
clear	V
the	D
display	N
form	N
,	,
then	R
submit	V
the	D
hidden	A
one	$
.	,
I	O
agree	V
with	P
everyone	N
else	R
-	,
fiddling	N
with	P
the	D
back	N
button	N
this	D
is	V
a	D
bad	A
way	N
to	P
handle	V
protecting	V
information	N
.	,

I'm	L
not	R
100%	$
sure	A
this	O
is	V
a	D
fix	V
to	P
your	D
issue	N
,	,
as	P
I	O
don't	V
fully	R
understand	V
how	R
you	O
would	V
get	V
another	D
user's	S
data	N
using	V
back	R
.	,
However	R
,	,
I	O
know	V
that	O
for	P
the	D
web	N
apps	V
I	O
develop	V
I	O
try	V
to	P
exclusively	R
use	V
Redirect	N
After	P
Post	N
to	P
avoid	V
back	T
button	N
and	&
refresh	V
duplicate	A
form	N
submissions	N
.	,

Jeff	^
Atwood	^
described	V
a	D
way	N
to	P
prevent	V
CSRF	^
and	&
XSRF	N
attacks	V
here	R
.	,
You	O
could	V
use	V
this	D
technique	N
to	P
solve	V
your	D
"	,
users	N
seeing	V
what	O
they	O
should	V
not	R
see	V
"	,
problem	N
.	,

I'm	L
not	R
sure	A
I	O
understand	V
your	D
problem	N
correctly	R
,	,
but	&
it	O
sounds	V
like	P
you	O
are	V
allowing	V
rePOSTs	^
.	,
One	$
approach	N
to	P
prevent	V
resubmission	N
is	V
to	P
use	V
tokens	N
.	,
Put	V
a	D
random	A
token	N
in	P
the	D
form	N
and	&
session	N
.	,
On	P
submission	N
check	V
that	P
the	D
submitted	V
token	R
matches	V
the	D
token	N
in	P
the	D
session	N
if	P
it	O
does	V
,	,
replace	V
the	D
token	N
in	P
the	D
session	N
with	P
a	D
fresh	A
one	$
and	&
process	N
the	D
request	N
otherwise	R
stop	V
processing	V
the	D
request	N
)	,
.	,

All	X
of	P
the	D
different	A
browsers	N
have	V
different	A
behaviors	N
and	&
quirks	N
when	R
it	O
comes	V
to	P
how	R
history	N
relates	V
to	P
the	D
cache	N
and	&
the	D
various	A
headers	N
available	A
to	P
control	N
it	O
.	,
Firefox	^
3	$
works	V
differently	R
from	P
Firefox	^
2	$
,	,
re-displaying	V
potentially	R
sensitive	A
data	N
when	R
a	D
user	N
clicks	V
the	D
back	N
button	N
in	P
spite	N
of	P
using	V
caching	V
directives	N
to	P
prevent	V
it	O
.	,
The	D
best	A
solution	N
is	V
to	P
use	V
a	D
session	N
cookie	N
that	O
is	V
not	R
persisted	V
and	&
inform	V
the	D
user	N
of	P
the	D
need	V
to	P
close	V
the	D
browser	N
window	N
after	P
logging	V
out	T
.	,
Especially	R
if	P
they	O
are	V
at	P
a	D
public	A
terminal	N
.	,
Painful	A
,	,
I	O
know	V
,	,
but	&
current	A
browser	N
offerings	N
and	&
the	D
HTTP	N
specification	N
do	V
not	R
provide	V
any	D
mechanisms	N
for	P
dealing	V
with	P
browser	^
history	N
.	,
History	^
may	V
be	V
treated	V
differently	R
than	P
caching	V
by	P
a	D
user	N
agent	N
according	V
to	P
the	D
HTTP	N
specification	N
.	,
See	V
13.13	^
History	^
Lists	^
as	P
defined	V
in	P
RFC	^
2616	^
Hypertext	^
Transfer	^
Protocol	^
--	,
HTTP	^
/	,
1.1	$
for	P
the	D
problem	N
and	&
rationale	N
.	,

I	O
think	V
this	D
is	V
as	R
much	A
a	D
user	N
interface	N
challenge	N
as	P
a	D
coding	N
problem	N
.	,
On	P
top	A
of	P
whatever	D
anti-caching	V
techniques	N
you	O
employ	V
,	,
you	O
need	V
to	P
make	V
it	O
clear	V
to	P
the	D
user	N
that	P
they	O
must	V
hit	V
a	D
big	A
,	,
obvious	A
"	,
Logout	^
"	,
button	N
(	,
or	&
equivalent	N
)	,
when	R
they	O
are	V
done	V
.	,

if	P
this	D
might	V
help	N
.	,
This	D
works	V
for	P
ASP	^
,	,
use	V
an	D
equivalent	N
solution	N
for	P
other	A
languages	N
.	,
%	E
response.buffer	E
=	E
true%	E
>	E
%	E
Response.CacheControl	E
=	E
"	,
no-cache	G
"	,
%	N
>	E
%	G
Response.AddHeader	^
"	,
Pragma	^
"	,
,	,
"	,
no-cache	G
"	,
%	N
>	E
%	N
Response.Expires	^
=	E
-1	$
%	N
>	E

