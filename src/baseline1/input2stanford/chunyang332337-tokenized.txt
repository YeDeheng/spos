Session management in GWT without using Java on the server ?
I am using GWT for my client side application . I am not using GWT / Java for the server . However , I am not sure how I can handle session management . The GWT application resides on one page , all server calls are done via AJAX . If a session expires on the server ... let's assume the user didn't close the browser , but left the application open , how could my server notify the application that the session has expired and that the client side portion should show the login screen again ? What is meant by client side session management ? That seems inherently insecure . I'm not looking for code . I'm looking for ideas , techniques , potential solutions etc . I've considered Comet http://en.wikipedia.org/wiki/Comet_(programming ) , but that doesn't seem like that will work very well without using Java on the server side . Maybe , I'm wrong ? I don't want to poll the server either . Any thoughts or insight ?
What should happen if the session expired on the server-side , then the next time the client sends a request to the server , it will either create a new session , or , more likely , send back a message to the client that it is trying to access a page without a session , and send them to the login screen . However , you will still need to wait until the client sends a message to the server .
Without knowing how you're doing your RPC is working , its hard to give good advice . If your AJAX service requires a user to be authenticated ( IE have a valid session ) , it is ok to just send a 401 error saying that the user is invalid . Client-side can interpret the 401 error as a message that it should set the user up for re-authentication .
I'm not using RPC , the GWT request object is just a wrapper around XMLHttpRequest . Great idea ! I've never thought about changing the http status code . I may end up using this .
We handled this in our application , by detecting when the server sent back a redirect to the login screen ( it would come through the response to the Ajax call ) , and popped up a dialog asking the user for their password again , but pre-filled their username . We then posted that to the same place the login page does , as if it was the login page , and so the user was logged into this new session automatically . Finally we just re-submitted the ajax call again , so it was a seamless process to the user ( eg : they didn't have to click the action again ) . Since we stored all the state on the client , and not in session variables we didn't have any problems trying to persist data across sessions .
