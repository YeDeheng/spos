signed applet gives AccessControlException : access denied , when calling from javascript
I have an easy self-signed an applet ( done with keytool and the jarsigner ): Basically , what it does , is that it executes ' notepad c :/ hello.txt ' . Then i embed the applet in html : When i visit the page , JRE starts and asks me if i want to start this applet and if i trust it . I press ok . Then notepad starts - as it should . No problem here . But then i add this into the HTML-page : Now when i press on this text , calc should start - right ? But this gives me : whats up with this ? Why does it give me a security exception now , but it could start notepad before ?
The Java 2 security model requires ( roughly ) that every frame on the stack must be granted a permission for the access control context ( acc ) to have that permission . JavaScript is on the stack and does not have file access permissions .
He could also have used the AccessController.doPrivileged API to elevate the privileges of the javascript function call to the one of the signed applet . http://www.inf.puc-rio.br/~roberto/java/jdk1.2/docs/guide/security/doprivileged.html
Thanks a lot , this solved my problem in a nice and clean way .
Solved the problem with , in Java : and then in JavaScript :
I agree : it is prohibited to manipulate a signed applet from javascript , and the workaround is to rewrite the applet tag in javascript in the page document . I found this source with a bit of theory proving we are right http://docs.oracle.com/javase/tutorial/deployment/applet/security.html#jsNote
Actually , calling applet from javascript behaves as calling unsigned applet ( as specified in the jsnote : http://docs.oracle.com/javase/tutorial/deployment/applet/security.html#jsNote . That is fine and is valid when you're using a class you are not allowed to change , but since you're the author of the java class you can always wrap that specific method you need to call from javascript to be executed in the privileged mode , like this : And it should work ok . ( This is what is suggested in the upvoted comment by @Jean -Philippe Jodoin but the link provided there is broken )
