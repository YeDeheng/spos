123	a = b 	D G V 
123	that's my fault 	L D N 
123	that is faulty 	O V A 
123	it's my fault 	L D N 
123	I'm android What's the equivalent of Java's thread.sleep() in javascript ? 	L ^ Z D N P Z ^ P ^ , 
123	What is the equivalent of Java's Thread.sleep() in Javascript ? 	O V D N P ^ ^ P ^ , 
123	You can either write a spin loop ( a loop that just loops for a long period of time performing some sort of computation to delay the function ) or use : This will call ' Func1() ' after 3 seconds . Edit : Credit goes to the commenters , but you can pass anonymous functions to setTimeout . This is much more efficient and does not invoke javascript's eval function . 	O V D V D V N , D N P R V P D A N P N V D N P N P V D N , & V , D V V , ^ , P $ N , ! , N V P D N , & O V V A N P ^ , D V R R A & V R V L N N , 
123	I want the current thread to go for waiting state for specified number of seconds 	O V D A N P V P V N P A N P N 
123	Spinning a loop cause High CPU utilization . 	V D N R A N N , 
123	I'd prefer to provide the function directly as an argument instead of quoting the function name : setTimeout ( function() { ... } , 3000 ); 	L V P V D N R P D N R P V D N N , E E E E ~ , , $ G 
123	You should * never * quote the first parameter for setTimeout pass an anonymous function or a function reference . The corrected version is : setTimeout ( Func1 , 3000 ); 	O V , R , V D A N P O V D A N & D N N , D A N V , N , ^ , $ G 
123	( Quoting the first parameter of setTimeout invokes " eval() " unnecessarily . ) 	, V D A N P O V , E , R , E 
123	@Steve , if you want to pass any parameters to the method , you really don't have that option , you must quote . 	@ , P O V P V D N P D N , O R V V D N , O V V , 
123	What's the downside of quoting the first parameter ? It essentially executes whatever's in that block ... is it a matter of style or are there other considerations ? 	L D N P V D A N , O R V Z P D N , V O D N P N & V R A N , 
123	@Nick : No , if you want to pass parameters , you use a closure . 	@ ~ ! , P O V P V N , O V D N , 
123	Ah , nevermind , missed your later comment . Thanks Steve . 	! , ! , V D R V , ^ ^ , 
123	@Nick : Daniel is correct you wrap the code in an anonymous function . 	@ ~ ^ V A O V D N P D A N , 
123	There's no direct equivalent , as it'd pause a webpage . However there is a setTimeout() , e.g. : Closure example ( thanks Daniel ): The second argument is milliseconds before firing , you can use this for time events or waiting before performing an operation . Edit : Updated based on comments for a cleaner result . 	L R A N , P L V D N , R R V D ^ , N , A N , ! ^ ^ ^ A N V N P V , O V V D P N N & V P V D N , ! , V V P V P D A N , 
123	Again , * never * quote the first parameter of setTimeout . See my comments on Malaxeur's answer for more info . 	R , , R , V D A N P ^ , V D N P Z N P A N , 
123	The simple answer is that there is no such function . The closest thing you have is : Note that you especially don't want to busy-wait ( e.g. in a spin loop ) , since your browser is almost certainly executing your JavaScript in a single-threaded environment . Here are a couple of other SO questions that deal with threads in JavaScript : http://stackoverflow.com/questions/30036/javascript-and-threads http://stackoverflow.com/questions/39879/why-doesnt-javascript-support-multithreading And this question may also be helpful : http://stackoverflow.com/questions/797115/javascript-settimeout-without-putting-code-into-a-string 	D A N V O R V D A N , D A N O V V , V P O R V V P V , N P D V N , , P D N V R R V D N P D A N , R V D N P A P N D N P N P ^ , U U & D N V R V A , U 
123	( +1 ) look at setTimeout() and setInterval() in javascript 	E E E V P ^ & V P D 
123	To promote good coding practices , it might be best to insert a semi-colon after " 500 " and initialise " millisecondsToWait " in the code sample ( e.g. by preceding it with " var ") ( this way , if someone copies and pastes the sample , they won't end up with an implied global ) . 	P V A N N , O V V A P V D N P , $ , & N , V , P D N N , N P V O P , ^ E , D N , P N N & N D N , O V N T P D A A , , 
123	Good catch , Steve . I've edited my answer to reflect your comments . 	A N , ^ , L V D N P V D N , 
123	ES6 will have a new operator `yield` which can be used to " simulate " threads . See http://taskjs.org for an example library . 	^ V V D A N P O V V V P , V , N , V U P D N N , 
123	Or maybe you can use the setInterval function , to call a particular function , after the specified number of milliseconds . Just do a google for the setInterval prototype.I don't quite recollect it . 	& R O V V D N N , P V D A N , P D A N P N , R V D ^ P D N ^ V R V O , 
123	Try with this code . I hope it's useful for you . 	V P D N , O V L A P O , 
123	does exactly what it is supposed to 	V R O O V A P 
123	This doesn't put the thread to sleep , it just consumes the thread with wasteful calculation that is likely to block the UI . Not recommended . 	D V V D N P V , O R V D N P A N P V R P V D ^ , R A , 
123	That's a " busy wait " a.k.a you are " burning the thread " 	L D , A N , A O V , V D N , 
123	For my unit testing purposes its useful . Surely , not for production . 	P D N V N L A , R , R P N , 
123	This eventually helped me : 	D R V O , 
123	setTimeout was already mentioned a looong time ago . and the rest of the code has nothing to do with the question . 	P V R V D N N R , & D N P D N V N P V P D N , 
123	love you baby 	V O N 
123	@ciaranyree it was on football wives , one of the players and his wife own smash burger 	@ O V P N N , $ P D N & D N N V N 
123	RT @TheRealQuailman : Currently laughing at Laker haters . 	~ @ ~ R V P ^ ^ , 
123	RT @HollywoodOompa : Sat November 6 ill be at Nashville center stage for the ice kream party for 	~ @ ~ ^ ^ $ R V P ^ N N P D N N N P 
