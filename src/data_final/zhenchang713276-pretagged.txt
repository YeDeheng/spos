Detecting	^
EOF	^
/	,
TCP	^
teardown	^
using	V
Java	^
sockets	N
from	P
Javascript	^

I'm	L
creating	V
a	D
Java	^
socket	N
in	P
Javascript	^
,	,
sending	V
an	D
HTTP	N
request	N
and	&
receiving	V
a	D
response	N
correctly	R
but	&
I	O
seem	V
to	P
be	V
unable	A
to	P
detect	V
an	D
EOF	^
or	&
the	D
server	N
closing	V
the	D
socket	N
at	P
the	D
end	N
.	,
What	O
am	V
I	O
doing	V
wrong	A
?	,
The	D
problem	N
is	V
we	O
never	R
exit	V
the	D
outermost	N
while	P
loop	N
-	,
the	D
server	N
stops	N
transmitting	V
and	&
(	,
presumably	R
)	,
closes	V
its	D
end	N
of	P
the	D
connection	N
,	,
yet	R
receiver.read()	R
never	R
returns	V
-1	$
and	&
all	X
the	D
socket	N
methods	N
return	N
state	N
consistent	A
with	P
the	D
socket	N
still	R
being	V
connected	V
.	,

Wouldn't	V
the	D
this	D
:	,
while	P
(	E
receiver.available()	E
&	&
&	&
!	,
eof	!
)	,
be	V
better	R
?	,
in	P
lieu	O
of	P
the	D
first	A
while	P
(	E
receiver.available()	E
)	E
?	,

Seems	V
a	D
bit	N
redundant	A
-	,
available()	O
is	V
defined	V
as	P
returning	V
the	D
number	N
of	P
bytes	V
of	P
data	^
available	A
to	P
read	V
without	P
blocking	V
,	,
so	P
would	V
return	V
0	$
after	P
EOF	^
.	,
Tried	V
it	O
anyway	R
just	R
in	P
case	N
;	,
doesn't	V
fix	V
the	D
problem	N
.	,

Or	&
do	V
you	O
mean	V
in	P
place	N
of	P
the	D
outermost	N
while	N
?	,
Data	O
being	V
available	A
to	P
read	V
without	P
blocking	V
is	V
independent	A
of	P
whether	P
the	D
server	N
has	V
closed	V
the	D
socket	N
-	,
there	X
could	V
be	V
pauses	V
in	P
transmission	N
,	,
and	&
the	D
OS	^
could	V
have	V
buffered	V
input	N
data	N
.	,
So	P
we	O
must	V
test	N
both	D
separately	R
.	,

No	!
,	,
I	O
meant	V
the	D
inner	A
while	N
,	,
but	&
your	D
first	A
comment	N
is	V
right	R
:	,
I'm	L
wrong	A
.	,

Ok	!
.	,
What's	L
the	D
value	N
of	P
eof	O
when	R
the	D
code	N
reaches	V
this	D
comment	N
?	,
//	L
at	P
this	D
point	N
response	N
does	V
contain	V
the	D
expected	V
HTTP	D
response	N
What's	L
the	D
symptom	N
?	,
I	O
assume	V
it's	L
an	D
infinite	A
loop	N
?	,

eof	O
is	V
still	R
0	$
at	P
that	D
point	N
(	,
otherwise	R
we'd	L
exit	V
the	D
outermost	N
while()	^
correctly	R
and	&
I'd	L
not	R
be	V
posting	V
this	D
)	,
.	,
Question	N
edited	V
-	,
hopefully	R
the	D
problem	N
is	V
clearer	R
now	R
?	,

OK	A
,	,
further	A
research	N
suggests	V
there	R
is	V
no	D
non-blocking	A
way	N
to	P
discover	V
whether	P
the	D
remote	A
side	N
has	V
closed	V
a	D
socket	N
.	,
However	R
,	,
it	O
is	V
possible	R
to	P
achieve	V
this	D
using	V
NIO	^
channels	N
:	,

When	R
the	D
end	N
of	P
the	D
stream	N
is	V
reached	V
,	,
available()	^
returns	V
0	$
,	,
so	R
in	P
your	D
code	N
,	,
you	O
never	R
read	V
the	D
-1	$

Right	!
.	,
But	&
read()	O
will	V
block	N
until	P
either	D
EOF	N
is	V
reached	V
or	&
there	R
is	V
more	A
data	N
,	,
and	&
Javascript	N
is	V
single-threaded	V
so	P
we	O
don't	V
want	V
to	P
issue	N
a	N
read	V
without	P
knowing	V
for	P
certain	A
we	O
have	V
data	N
to	P
read	V
.	,
And	&
available()	O
can	V
return	V
0	$
during	P
transmission	N
,	,
so	P
we	O
can't	V
use	V
that	O
to	P
test	N
for	P
EOF	^
.	,

