See_V Java_^ :_, Scripting_V language_N (_, macro_N )_, to_P embed_V into_P a_D Java_^ desktop_N application_N 
You_O have_V quite_R a_D few_A options_N :_, Groovy_^ -_, http://groovy.codehaus.org_U Jython_^ -_, http://www.jython.org/Project_U JRuby_^ -_, http://jruby.codehaus.org_U Possibly_R even_R BeanShell_A (_, http://www.beanshell.org_U )_, I'm_L a_D fan_N of_P Python_^ myself_O so_P I'd_L recommend_V Jython_^ ,_, but_& they're_L probably_R all_R reasonable_A options_N ._, 
what_O about_P creating_V your_D own_N specialized_V scripting_N language_N ?_, If_P your_D app_N is_V written_V with_P java_^ ,_, you_O can_V use_V ANTLR_^ (_, http://www.antlr.org_U )_, to_P create_V your_D language_N parsing_V code_N ._, The_D reason_N I_O say_V this_D is_V because_P a_D general_A purpose_N scripting_N language_N may_V provide_V too_R much_A power_N (_, because_P the_D script_N it_O to_P be_V used_V for_P quests_N only_R i_O assume_V )_, ._, But_& if_P making_V your_D own_N language_N is_V too_R hard_V then_R any_R of_P the_D above_A suggestions_N works_V -_, you_O just_R have_V to_P figure_V out_T how_R to_P bind_V the_D game's_N runtime_V into_P the_D script_N ._, I_O also_R suggest_V Lua_^ (_, http://www.lua.org_U )_, as_P another_D choice_N that_P lots_N of_P games_V use_V ._, 
I_O am_V a_D big_N fan_R of_P Python_^ /_, Jython_^ due_V to_P the_D clean_A syntax_N -_, which_O may_V suit_V you_O if_P you_O have_V some_D python_^ experience_N ._, Otherwise_^ Groovy_^ which_O is_V based_V on_P Java_^ syntax_N and_& may_V be_V an_D easier_A learning_V curve_V if_P most_R of_P your_D developers_N are_V Java_^ guys_N ._, It_O also_R has_V the_D advantage_N of_P closer_A ties_N with_P the_D Java_^ language_N and_& libraries_N ._, Beanshell_^ is_V good_A if_P you_O have_V simple_A scripting_N in_P mind_N -_, it_O doesn't_V support_V classes_N ._, However_R I_O don't_V think_V it_O has_V had_V any_D support_N over_P the_D last_A few_A years_N (_, the_D JSR_^ seemed_V to_P kill_V it_O off_T ..._, )_, so_P is_V perhaps_R a_D bad_A choice_N if_P support_N is_V important_A to_P you_O ._, 
I_O would_V have_V to_P recommend_V Javascript_^ for_P this_D purpose_N ._, Mozilla_^ Rhino_^ http://www.mozilla.org/rhino_U is_V an_D excellent_A implementation_N that_O would_V fit_V your_D needs_N perfectly_R ._, I_O recommend_V Javascript_^ over_P Jython_^ or_& JRuby_^ because_P of_P familiarity_N ._, Trivial_A Javascript_^ follows_N a_D very_R familiar_A syntax_N that_P anybody_O can_V use_V ._, However_R if_P someone_N wants_V to_P do_V something_R more_A intense_N ,_, Javascript_^ is_V a_D very_R powerful_A functional_A programming_N language_N ._, I_O regularly_V use_V Groovy_^ and_& Ruby_^ professionally_R and_& believe_V that_P their_D purpose_N is_V best_A for_P writing_V parts_N of_P applications_N with_P particularly_R complex_A logic_N where_R Java_^ is_V cumbersome_V to_P write_V ._, Javascript_^ is_V a_D much_R better_A choice_N as_P an_D embedded_V ,_, general_A scripting_N language_N to_P use_V in_P a_D game_N ._, I_O haven't_V used_V Python_^ ,_, but_& it's_L syntactically_R similar_A to_P Ruby_^ and_& I_O would_V believe_V it's_L purpose_N would_V also_R be_V similar_A ._, 
If_P you_O were_V to_P start_V from_P scratch_N in_P 2012_^ would_V you_O approach_N the_D "_, glue_^ components_N together_R "_, differently_R ?_, 
There_X is_V one_$ good_A reason_N for_P including_V a_D scripting_N language_N ,_, namely_R where_R you_O need_V to_P be_V able_A to_P add_V new_A functionality_N (_, which_D hence_N cannot_V be_V configured_V )_, without_P redeployment_N ._, 
But_& Java_^ has_V support_N for_P (_, re-_^ )_, loading_V classes_N ,_, and_& using_V some_D thought_N and_& reflection_N will_V take_V you_O a_D long_A way_N ._, If_P necessary_A ._, 
You_O still_R need_V to_P compile_V the_D revised_V Java_^ classes_N ._, 
Compiling_V should_V an_D be_V infinitesimal_A issue_N compared_V to_P incorporating_V a_D scripting_N language_N ,_, in_P all_X the_D ways_N I_O can_V think_V of_P ._, 
LuaJ_L seems_V to_P be_V a_D nice_A way_N to_P embed_V Lua_^ into_P Java_^ :_, http://sourceforge.net/projects/luaj_U /_, 
Wicket_^ +_& Javascript_^ 
I'm_L wrapping_V up_T a_D Javascript_^ widget_N in_P a_D Wicket_N component_N ._, I_O want_V to_P let_V the_D JS_^ side_N talk_V to_P the_D component_N ._, What_O I've_L got_V so_R far_R :_, Component_N in_P question_N goes_V like_V in_P constructor_N and_& then_R ,_, later_R on_P ,_, puts_N something_N like_P into_P the_D JS_^ ._, where_R GridAjaxBehavior_C extends_C AbstractDefaultAjaxBehavior_C ._, I_O want_V GridAjaxBehavior_^ to_P spit_V back_T some_D XML_^ when_R the_D JS_^ calls_V it_O ._, Am_P I_O doing_V this_D the_D right_A way_N ?_, What_O should_V GridAjaxBehaviour_^ do_V to_P spit_V back_T the_D XML_^ ?_, Thanks_N 
FYI_^ ,_, there's_Y an_D error_N in_P your_D javascript_^ emit_N ._, You're_L missing_V the_D right_A hand_N paren_N and_& semicolon_N ,_, but_& you're_L also_R missing_V quotes_V around_P the_D supplied_A string_N ._, ..._, new_A talker_N (_, ""_, +_& this.talker.getCallbackURL()_^ +_& "_C ")_C ;_C "_C ;_C or_& something_N like_P that_O ._, 
PSA_^ :_, Wicket_N ~=_, a_D Java_^ Framework_^ ._, http://wicket.apache.org/introduction.html_U 
please_V show_V a_D link_N to_P GridAjaxBehavior_^ -_, i_O know_V wicket_N a_D bit_N ,_, but_& GridAjaxBehavior_^ is_V new_A to_P me_O ._, is_V this_D a_D custom_A developed_N behavior_N 
I_O don't_V really_R know_V what_D Wicket_N is_V or_& what_O it_O does_V ,_, but_& there_R is_V a_D minor_A bug_N in_P your_D code_N (_, as_P it_O appears_V )_, ._, This_D :_, "_C var_C MyGridTalker_C =_= new_A talker_N (_, "_, +_G this.talker.getCallbackUrl()_C ;_, You_O seem_V to_P be_V missing_V your_D end_N parens_N :_, "_, var_C MyGridTalker_C =_= new_A talker_N (_, "_, +_G this.talker.getCallbackUrl()_G +_G ")"_G ;_, Anyway_N ,_, not_R a_D big_A deal_N ,_, but_& didn't_V know_V if_P it_O was_V intentional_A ._, 
Write_V a_D Servlet_N that_O Talks_V to_P JMS_^ (_, ActiveMQ_^ )_, and_& OnMessage_^ Update_V the_D Site_N 
I_O am_V building_V a_D site_N that_O uses_V a_D simple_A AJAX_^ Servlet_N to_P talk_V JMS_^ (_, ActiveMQ_^ )_, and_& when_R a_D message_N arrives_N from_P the_D topic_N to_P update_V the_D site_N ._, I_O have_V Javascript_^ that_O creates_V an_D XMLHttpRequest_^ for_P data_N ._, The_D Servlet_N processes_N the_D Get_N Request_N and_& sends_V back_T JSON_^ ._, However_R I_O have_V no_D idea_N how_R to_P connect_V my_D Servlet_N into_P my_D ActiveMQ_^ Message_N Broker_N ._, It_O just_R sends_V back_R dummy_A data_N right_R now_R ._, I_O am_V thinking_V the_D Servelt_N should_V implement_V the_D messagelistener_N ._, Then_R onMessage_G send_V data_N to_P the_D JavaScript_^ page_N ._, But_& I'm_L not_R sure_A how_R to_P do_V this_D ._, 
You_O probably_R need_V to_P get_V a_D JMS_^ connection_N from_P JNDI_^ ,_, like_P this_D :_, 
Okay_A ..._, this_D is_V a_D good_A way_N to_P connect_V to_P my_D Topic_N ,_, thanks_N ._, I_O already_R have_V code_N like_P this_D is_V another_D Java_^ Client_N ._, But_& I_O want_V the_D Servelt_N to_P implement_V the_D messagelistener_N ._, Then_R onMessage_G send_V data_N to_P the_D Javascript_^ page_N ._, 
The_D problem_N with_P having_V a_D servlet_N implement_V MessageListener_^ is_V that_D servlets_N are_V synchronous_N and_& MessageListeners_^ are_V asynchronous_A ._, Instead_R you_O should_V create_V some_D other_A object_N to_P act_V as_P the_D MessageListener_^ and_& update_V some_D state_N somewhere_N (_, possibly_R a_D database_N or_& a_D JMX_^ MBean_^ or_& a_D Stateful_A Session_N EJB_^ )_, when_R messages_N come_V in_P ._, Then_R the_D servlet_N can_V query_N that_P state_N to_P see_V if_P there's_S data_N to_P report_N back_R to_P the_D client_N ,_, and_& your_D web_N page_N can_V periodically_R ping_V the_D servlet_N to_P ask_V for_P fresh_N data_N ._, 
Thanks_N jodonnell_N .._, I_O have_V never_R wrote_V a_D JMX_^ MBean_^ or_& Stateful_^ Session_N EJB_^ but_& after_P a_D quick_N google_^ search_N I_O think_V this_D is_V the_D right_A path_N to_P look_V down_T ._, Thanks_N for_P the_D help_N ._, 
Have_V you_O tried_V reading_V the_D answers_N for_P this_D question_N which_D links_N to_P the_D ActiveMQ_^ Ajax_^ support_N ._, Basically_R ActiveMQ_^ has_V native_A support_N for_P Ajax_^ so_P you_O can_V use_V its_D JavaScript_^ library_N to_P directly_R subscribe_A from_P an_D ActiveMQ_^ topic_N ._, Also_R see_V the_D ActiveMQ_^ web_N samples_N which_O show_V how_R to_P do_V things_N like_P real_A time_N chat_C or_& real_A time_N stock_V portfolio_A screens_N using_V Ajax_^ with_P ActiveMQ_^ 
As_P James_^ Strachan_^ says_N -_, http://activemq.apache.org/ajax.html_U is_V an_D ideal_A out-of-the-box_A solution_N for_P your_D problem_N ._, If_P you_O still_R want_V to_P create_V such_A solution_N manually_R you_O can_V just_R create_V JMS_^ connection_N in_P your_D Ajax_^ servlet_N (_, connection_N per_P request_N )_, ._, Consider_V using_V Spring_^ JMS_^ template_N for_P that_D reason_N (_, http://static.springsource.org/spring/docs/2.5.x/reference/jms.html_U )_, ._, Then_R just_R receive_V the_D message_N in_P the_D Servlet_N doGet_^ /_, doPost_^ method_N ._, Consider_V low_A timeout_N value_N for_P receiving_V in_P that_D case_N ._, Such_A solution_N will_V work_V for_P the_D Queues_N and_& durable_A Topics_N ._, For_P non-durable_A Topics_N consider_V external_A message_N listener_N ._, Spring_^ MessageListenerContainer_^ is_V an_D excellent_A tool_N for_P that_D purpose_N :_, Bean_^ lastTenUpdatesCache_N will_V be_V a_D singleton_A bean_N implementing_V MesssageListener_^ ._, This_D bean_N would_V be_V responsible_A for_P caching_V last_A ten_N messages_N (_, just_R putting_V it_O into_P a_D java.util_^ list_N )_, ._, It_O will_V be_V injected_V into_P your_D Ajax_^ servlet_N so_R in_P your_D doGet_^ /_, doPost_^ method_N you_O can_V ask_V it_O about_P last_A 10_$ messages_N sent_V to_P the_D topic_N ._, 
Integration_N of_P JavaScript_^ and_& JMS_^ 
Where_R can_V I_O find_V a_D guide_N for_P integrating_V JavaScript_^ and_& JMS_^ (_, Java_^ Messaging_V Service_N )_, ?_, I_O would_V like_V a_D best_A practice_N or_& established_A technology_N that_P allows_V me_O to_P directly_R or_& indirectly_R receive_V messages_N from_P a_D topic_N and_& update_V a_D site_N based_V on_P the_D message_N ._, I_O was_V thinking_V of_P creating_V two_$ components_N ,_, a_D servlet_N for_P the_D Web_^ module_N ,_, and_& an_D MDB_^ (_, Message-Driven_^ Bean_^ )_, for_P the_D EJB_^ module_N ._, The_D web_N client_N will_V comsume_V messages_N from_P the_D JMS_^ topic_N ,_, and_& the_D MDB_^ will_V handle_V the_D onMessage_N ._, Does_V this_D sound_R correct_A ?_, Have_V you_O seen_V any_D examples_N ?_, Edit_V :_, I_O am_V using_V ActiveMQ_^ for_P the_D JMS_^ ._, 
I_O would_V try_V using_V DWR_^ to_P integrate_V JavaScript_^ with_P your_D Java_^ app_N ._, It_O makes_V Java_^ to_P JavaScript_^ communication_N transparent_N and_& only_R requires_V one_$ servlet_N +_& configuration_N of_P what_O to_P expose_N ._, I_O haven_V t_G done_V this_D with_P JMS_^ ,_, but_& it_O should_V work_V the_D same_A ._, There_X are_V three_A technologies_N that_O together_R solve_V all_X my_D integration_N problems_N ,_, Spring_^ ,_, Mule_^ ,_, and_& DWR_^ ._, 
I'll_L second_A DWR_^ -_, excellent_N (_, and_& painless_N !_, )_, to_P integrate_V any_D server-side_N based_V Java_^ and_& JavaScript_^ on_P the_D client_N front-end_N 
You'll_L find_V some_D references_N to_P the_D Dojo_^ /_, Bayeux_^ approach_N here_R http://www.pathf.com/blogs/2006/08/bayeux_a_json_p_U If_P you're_L using_V WebSphere_^ 6.0_$ or_& higher_R then_R the_D Web_^ 2.0_^ Feature_^ Pack_^ includes_V an_D implementation_N ._, 
I_O think_V this_D is_V your_D answer_N ._, Looks_N like_P it_O is_V baked_V in_P to_P ActieMQ_^ ._, I_O tried_V the_D examples_N and_& they_O seem_V to_P work_N ._, http://activemq.apache.org/ajax.html_U 
I_O was_V able_A to_P get_V the_D examples_N to_P work_V on_P Version_^ 5.0_$ of_P ActiveMQ_^ ._, However_R they_O have_V trouble_N running_V in_P 5.1_$ ._, Which_D version_N of_P ActiveMQ_^ are_V you_O running_V ?_, 
We_O did_V have_V a_D lot_N of_P problems_N with_P this_D servlet_N ,_, and_& we_O did_V abandon_V it_O completely_R ..._, 
The_D Seam_N framework_N supports_V subscription_N to_P JMS_^ topics_N from_P a_D JavaScript_^ based_V client_N :_, http://docs.jboss.com/seam/2.0.2.GA/reference/en-US/html/remoting.html#d0e14169_U 
How_R to_P conduct_A blackbox_N testing_V on_P an_D AJAX_^ application_N ?_, 
What's_L the_D best_A ,_, crossplatform_A way_N to_P perform_V blackbox_A tests_N on_P AJAX_^ web_N applications_N ?_, Ideally_R ,_, the_D solution_N should_V have_V the_D following_N attributes_N :_, Able_A to_P integrate_V into_P a_D continuous_A integration_N build_N loop_N Cross_N platform_N so_P I_O you_O can_V run_V it_O on_P Windows_^ laptops_N and_& Linux_^ continuous_N integration_N servers_N Easy_A way_N to_P script_N the_D interactions_N Free-as-in-freedom_N so_P you_O can_V adapt_V it_O into_P your_D tool_N chain_N if_P necessary_A I've_L looked_V into_P HttpUnit_^ but_& I'm_L not_R conviced_V it_O can_V handle_V AJAX-heavy_^ websites_N ._, 
Selenium_N might_V be_V what_O you're_L looking_V for_P :_, http://selenium.openqa.org_U It_O allows_V you_O to_P script_N actions_N and_& evaluate_V the_D results_N ._, It's_L open-source_N (_, Apache_^ 2.0_$ )_, ,_, cross_N platform_N ,_, and_& has_V nice_A tools_N ._, 
I_O have_V used_V Selenium_N for_P exactly_R this_D task_N ,_, but_& found_V it_O to_P be_V brittle_A ._, Check_V out_T this_D talk_N by_P two_$ Googlers_N :_, Does_V my_D button_N look_V big_V in_P this_D ?_, Building_V testable_A AJAX_^ applications_N They_O isolate_V the_D testable_A javascript_^ (_, non_R DOM-interaction_N )_, and_& test_N that_O using_V the_D Rhino_^ javascript_^ engine_N ._, 
What_O is_V the_D best_A way_N to_P use_V Ext_^ JS_^ as_P part_N of_P Java_^ /_, Spring_^ /_, Hibernate_^ based_V web_N application_N ?_, 
We_O want_V to_P try_V Ext_^ JS_^ on_P new_A project_N ._, Is_V there_X any_D well-known_N best_A practice_N for_P integrating_V Ext_^ JS_^ with_P server_N side_N Java_^ (_, Spring_^ /_, Hibernate_^ /_, JS_^ )_, application_N ?_, Is_V DWR_^ a_D good_A choice_N for_P that_O ?_, 
It's_L perfectly_R fine_A to_P build_V your_D application_N using_V Ext_^ JS_^ /_, DWR_^ /_, Spring_^ /_, Hibernate_N ._, 
Yes_! it's_L possible_A ._, I've_L done_V the_D same_A thing_N with_P ._, NET_^ :_, UI_^ in_P ext-JS_^ which_O communicates_V with_P the_D server_N trough_N JSON_^ ._, In_P ._, NET_^ world_V you_O can_V use_V DataContractSerializer_^ (_, class_N from_P WCF_^ )_, or_& JavascriptSerializer_^ (_, ASP.NET_^ )_, I'm_L sure_A that_O there's_S several_A good_A JSON_^ Serializer_N in_P the_D Java_^ world_N too_R ._, I_O used_V Jabsorb_^ (_, but_& not_R enough_A to_P give_V you_O a_D solid_A feedback_N )_, ._, It_O appears_V that_D other_A people_N have_V tried_V :_, [_, link_N text][2_N ]_, [_, 2_$ ]:_, http://extjs.com/forum/showthread.php?t=30759_U forum_N ext-js_N 
In_P our_D application_N we_O subclass_V Ext.data.DataProxy_R like_P this_D :_, You_O use_V it_O with_P a_D store_N like_P so_R :_, Our_D actual_A proxy_N class_N has_V some_D additional_N debug_V and_& error_N handling_V code_N that_P I_O left_N out_T for_P simplicity_N ._, You_O may_V also_R need_V to_P manipulate_V your_D data_N slightly_R so_R that_P the_D Ext.data.JsonReader_^ can_V handle_V it_O ,_, but_& that's_L the_D basic_A idea_N ._, SomeService_^ is_V the_D JavaScript_^ name_N you_O specified_V for_P whatever_D bean_N you_O exposed_V in_P dwr.xml_^ (_, or_& your_D Spring_N config_N )_, ._, 
My_D team_N has_V been_V using_V Ext_^ with_P DWR_^ for_P almost_R year_A a_D year_A ,_, and_& have_V had_V nothing_N but_& good_A things_N to_P say_V ._, If_P you_O take_V this_D approach_N ,_, you_O will_V end_N up_N using_V DWR's_^ generated_V JavaScript_^ classes_N for_P making_V your_D requests_N to_P the_D server_N ._, This_D will_V often_R be_V done_V in_P place_N of_P using_V the_D Ext.Ajax_^ and_& Ext.data.Connection_^ classes_N ._, When_R you_O use_V a_D class_N that_O require_V an_D Ext.data.Store_^ (_, e.g._G grip_G ,_, combo_A box_N ,_, etc_G ._, )_, and_& you_O want_V to_P fetch_A data_N from_P the_D server_N ,_, you_O will_V need_V to_P use_V a_D proxy_N that_O can_V link_N in_P with_P DWR_^ ._, The_D user-community_N provided_V Ext.ux.data.DWRProxy_^ has_V worked_V flawlessly_R for_P us_O :_, http://extjs.com/forum/showthread.php?t=23884_U ._, 
Just_R wanted_V to_P report_N that_P we_O are_V doing_V this_D now_R and_& it_O works_V quite_R good_A ._, We_O also_R are_V using_V DWRProxy_^ just_R like_P suggested_V ._, 
Take_V a_D look_V at_P Grails_^ ,_, it_O plays_V well_R together_R with_P ExtJS_^ ._, 
How_R can_V you_O run_V Javascript_^ using_V Rhino_^ for_P Java_^ in_P a_D sandbox_N ?_, 
Part_V of_P our_D java_^ application_N needs_V to_P run_V javascript_^ that_O is_V written_V by_P non-developers_N ._, These_O non-developers_R are_V using_V javascript_^ for_P data_N formatting_N ._, (_, Simple_A logic_N and_& string_N concatenation_N mostly_R )_, ._, My_D question_N is_V how_R can_V I_O setup_N the_D execution_N of_P these_D scripts_N to_P make_V sure_A scripting_N errors_N don't_V have_V a_D major_A negative_A impact_N on_P the_D rest_N of_P the_D application_N ._, Need_V to_P guard_V against_P infinite_V loops_R Guard_A against_P spawning_V new_A threads_N ._, Limit_V access_V to_P services_N and_& environment_N File_^ system_N (_, Example_N :_, If_P a_D disgruntled_A script_N writer_N decided_V to_P delete_V files_N )_, Database_N (_, Same_A thing_N delete_V database_N records_N )_, Basically_R I_O need_V to_P setup_N the_D javascript_^ scope_N to_P only_R include_V exactly_R what_O they_O need_V and_& no_D more_N ._, 
Do_V you_O mean_V to_P say_V (_, Javascript_^ using_V Rhino_^ )_, for_P (_, Java_^ in_P a_D sandbox_N )_, ,_, or_& (_, Javascript_^ using_V (_, Rhino_^ for_P Java_^ ))_, (_, in_P a_D sandbox_N )_, ?_, 
Javascript_^ is_V single-threaded_A and_& can't_V access_V the_D filesystem_N ,_, so_P I_O don't_V think_V you_O have_V to_P worry_V about_P those_O ._, I'm_L not_R sure_A if_P there's_Y a_D way_N to_P set_V a_D timeout_N to_P guard_V against_P infinite_N loops_N ,_, but_& you_O could_V always_R spawn_V a_D (_, Java_^ )_, thread_N that_O executes_V the_D script_N ,_, and_& then_R kill_V the_D thread_N after_P so_R much_A time_N ._, 
Rhino_^ has_V a_D threading_N library_N available_R to_P it_O (_, java.lang.Thread_^ !_, )_, ,_, and_& can_V access_V the_D file_N system_N ._, 
To_P guard_N against_P infinite_N loops_N ,_, you'd_L need_V to_P put_V it_O in_P a_D separate_A process_N so_P that_O it_O could_V be_V killed_V ._, To_P guard_N against_P creating_V threads_N ,_, you'd_L need_V to_P extend_V SecurityManager_^ (_, the_D default_N implementation_N allows_V untrusted_A code_N to_P access_V non-root_A thread_N groups_N )_, ._, Java_^ security_N does_V allow_V you_O to_P prevent_V access_V to_P the_D file_N system_N ._, For_P database_N restrictions_N ,_, you_O might_V be_V able_A to_P use_V the_D standard_A SQL_^ user_N security_N ,_, but_& that_O is_V quite_R weak_A ._, Otherwise_N ,_, you_O need_V to_P provide_V an_D API_^ that_O enforces_V your_D restrictions_N ._, Edit_V :_, I_O should_V point_N out_P that_P the_D version_N of_P Rhino_^ provided_V with_P JDK6_^ has_V had_V security_N work_V done_V on_P it_O ,_, but_& doesn't_V include_V the_D compiler_N ._, 
To_P guard_N against_P infinite_N loops_N ,_, you_O can_V observe_V the_D instruction_N count_V as_P the_D script_N runs_V (_, this_O works_V only_R with_P interpreted_V scripts_N ,_, not_R with_P compiled_A ones_N )_, ._, There_X is_V this_D example_N in_P the_D Rhino_^ JavaDocs_^ to_P prevent_V a_D script_N from_P running_V for_P more_R than_P ten_^ seconds_N :_, 
To_P block_V Java_^ class_N and_& method_N access_N have_V a_D look_V at_P ..._, http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java_U /_, 
I_O just_R ran_V across_P this_D blog_N post_N that_O seems_V to_P be_V useful_A for_P sandboxing_V more_R or_& less_N anything_N (_, not_R just_R Rhino_^ ):_, http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html_U 
setting_V classpath_N for_P java_^ classes_N (_, jar_^ file_N )_, in_P XUL_^ ,_, to_P access_V via_P javascript_^ 
I_O am_V implementing_V firefox_^ extension_N using_V XUL_^ ._, I_O have_V set_V of_P java_^ classes_N that_O is_V zipped_V as_P jar_^ which_O needs_V to_P be_V accessed_V through_P javascript_^ ._, If_P I_O copy_V my_D jar_N into_P jre's_^ lib_N /_, ext_V then_R javascript_^ will_V be_V able_A to_P invoke_V my_D java_^ classes_N ._, If_P I_O remove_V from_P ext_^ and_& package_N this_O jar_V in_P xpi_^ ,_, Javascript_^ is_V unable_A to_P find_V the_D classpath_N for_P my_D jar_A file_N ._, Please_V let_V me_O know_V how_R to_P set_V the_D classpath_N for_P my_D java_^ classes_N (_, jar_^ file_N )_, in_P XUL_^ environment_N at_P the_D earliest_N ._, 
javascript_^ /_, XUL_^ invoking_V java_^ ?_, interesting_A ..._, any_A ref_N ?_, 
I_O suggest_V taking_V a_D look_V at_P this_D extension_N XQuery_^ USE_^ ME_^ 1.4_$ ._, 7_$ and_& the_D following_N articles_V Calling_V java_^ from_P XUL_^ applications_N Java_^ in_P Firefox_^ Extensions_N 
Thanks_N ,_, Is_V there_X any_D easy_A way_N to_P set_V the_D classpath_A such_A that_D javascript_^ can_V find_V it_O ._, -_, Anand_C ._, 
What_O is_V the_D disadvantage_N of_P DWR_^ ?_, 
While_P using_V DWR_^ in_P a_D intranet_N ,_, will_V disadvantages_V like_P perfomance_N or_& security_N issues_N occur_N ?_, Direct_A web_N remoting_V is_V a_D tool_N which_O uses_V Ajax_^ request_N to_P contact_V a_D server_N from_P a_D js_^ file_N ._, 
One_$ thing_N I_O would_V watch_V out_T for_P is_V that_P your_D server_N will_V most_R likely_R get_V hit_V by_P more_A HTTP_^ requests_N than_P if_P you_O have_V the_D (_, normal_A )_, full_A page_N HTTP_^ delivery_N ._, Let_V me_O explain_A ._, When_R your_D web_N page_N is_V AJAX-enabled_^ ,_, your_D clients_N will_V end_N up_N creating_V more_A HTTP_^ requests_N for_P (_, say_V )_, form_N filling_V ,_, page-fragment_A regeneration_N etc_G ._, I've_L seen_V scenarios_N where_R developers_N have_V gone_N AJAX-crazy_N ,_, and_& made_V the_D web_N page_N a_D largely_R dynamic_A document_N ._, This_D results_N in_P a_D great_A user_N experience_N (_, if_P done_V well_R )_, ,_, but_& every_A request_N results_N in_P a_D server_N hit_V ,_, leading_V to_P scalability_N and_& latency_N issues_N ._, Note_V -_, this_O isn't_V particular_A to_P DWR_^ ,_, but_& is_V an_D AJAX_^ issue_N ._, I've_L used_V DWR_^ ,_, and_& it_O works_V nicely_R ._, Unfortunately_R ,_, I_O found_V that_P it_O worked_V so_R well_R ,_, and_& so_R easily_R ,_, that_D everything_N becomes_V a_D candidate_N for_P remoting_V ,_, and_& you_O can_V end_N up_N with_P huge_N numbers_N of_P small_A requests_N ._, 
I_O agree_V with_P this_D answer_N ._, I_O used_V DWR_^ in_P an_D web-based_A application_N ._, The_D application_N gives_V a_D great_A user_N experience_N ,_, but_& I_O think_V the_D application_N doesn't_V work_N fast_N ,_, because_P of_P all_X the_D JavaScript_^ and_& httprequest_U ._, 
I_O worked_V on_P a_D project_N with_P DWR_^ -_, a_D really_R nice_A tool_N ._, I'm_L not_R convinced_A about_P the_D pace_N of_P development_N though_P ._, They_O did_V post_V on_P the_D development_N log_N that_P they're_L working_V on_P getting_V 3.0_$ out_P the_D door_N ,_, but_& the_D last_A stable_A release_N -_, 2.0_N -_, was_V out_T in_P summer_^ 2006_$ ._, It's_L a_D bit_N worrying_V taken_V from_P a_D support_N perspective_N -_, bug_N fixes_V especially_R ._, 
Main_D problem_N I've_L experienced_V is_V trying_V to_P script_N a_D load_N test_N on_P a_D system_N where_R the_D main_A bulk_N of_P the_D work_N is_V done_V via_P DWR_^ calls_N ._, The_D format_N of_P the_D calls_N is_V difficult_A to_P replicate_V when_R compared_V with_P just_R replying_V a_D bunch_N of_P urls_N with_P changing_V parameters_N ._, Still_P DWR_^ is_V an_D excellent_A framework_N and_& makes_V implementing_V Javascript_^ ->_, Java_^ RPC_^ pretty_R damn_R easy_A ._, 
DWR_^ is_V a_D great_A tool_N when_R your_D site_N has_V a_D lot_N of_P ajax_^ calls_N ._, Each_D page_N that_O makes_V dwr_R rpc_A calls_N needs_V to_P include_V :_, a_D )_, an_D interface_N file_N corresponding_V to_P the_D calls_N being_V made_V ._, and_& b_G )_, a_D js_^ file_N bundled_V with_P dwr_N that_O contains_V the_D dwr_N engine_N code_N that_O makes_V these_D calls_N possible_R ._, for_P e.g._G script_N src=_V "_, /_, dwr_^ /_, engine.js_^ "_, /_, script_N one_N technique_N that_O is_V frequently_R used_A while_N optimizing_V web_N applications_N is_V to_P use_V the_D browser_N cache_V as_P much_R as_R possible_A when_R a_D resource_N (_, like_P a_D js_^ file_N )_, has_V not_R changed_V on_P a_D server_N ._, engine.js_N is_V something_N that_O will_V never_R change_V unless_P you_O upgrade_V your_D dwr_N to_P a_D newer_A version_N ._, But_& ,_, by_P default_N ,_, engine.js_^ is_V not_R a_D static_A file_N served_V by_P your_D webserver_N ._, its_L bundled_V as_P part_N of_P the_D dwr_A tool_N itsef_N and_& is_V served_V by_P the_D dwr_N controller_N /_, servlet.this_^ doesnt_V aid_A client_N side_N caching_N ._, So_P ,_, it_O is_V beneficial_A to_P save_A engine.js_N under_P the_D document_N root_N of_P your_D webserver_N and_& let_V the_D webserver_N serve_V it_O as_P a_D static_A file_N ._, 
More_R about_P caching_V engine.js_N on_P DWR's_^ site_N :_, http://directwebremoting.org/dwr/browser/engine/static.html_U 
One_$ feature_N missing_V of_P current_A DWR_^ 3.x_N that_P any_D user_N should_V take_V good_A care_N is_V that_O when_R an_D instance_N of_P a_D bean_N has_V properties_N of_P NULL_^ value_N ,_, those_D properties_N will_V be_V still_R injected_V to_P the_D JSON_^ and_& these_D redundant_A data_N DO_N affect_P the_D performance_N ._, When_R a_D property_N has_V the_D value_N of_P NULL_^ ,_, usually_R it_O should_V not_R be_V sent_V to_P frontend_N ._, Details_N of_P problem_N :_, http://dwr.2114559.n2.nabble.com/Creating-Custom-bean-converter-td6178318.html_U 
The_D biggest_A difference_N among_P other_A solutions_N to_P transfer_N objects_N (_, marshaling_N )_, is_V object_N references_N ._, For_P instance_N ,_, if_P you_O use_V it_O to_P transfer_V a_D tree_N :_, A_D |-B_^ |-C_^ in_P a_D list_N {_, A_D ,_, B_G ,_, C}_C :_C B.parent_C =_= A_D C.parent_^ =_= A_G then_R A_D is_V the_D same_A object_N in_P Javascrit_^ !_, On_P the_D bad_A side_N ,_, if_P you_O have_V complex_A structures_N with_P circular_A dependencies_N and_& lot_N of_P objects_N :_, A_D -B_G ,_, B_G -C_, ,_, C_^ -B_, ,_, C_^ ._, A_D ,..._^ it_O could_V crash_V ._, Anyway_R ,_, I_O use_V it_O in_P a_D real_A project_N used_V by_P many_A hundreds_N of_P companies_N in_P production_N to_P transfer_N thousands_N of_P objects_N to_P a_D single_A html_^ page_N in_P order_N to_P draw_V a_D complex_A graph_N and_& it_O works_V nicely_R with_P a_D good_A performance_N ._, 
Clientside_P Javascript_^ -->_G Serverside_N Java_^ -->_G user_N is_V served_V a_D ._, doc_N 
I_O am_V helping_V someone_N out_T with_P a_D javascript-based_A web_N app_N (_, even_R though_P I_O know_V next_V to_P nothing_N about_P web_N development_N )_, and_& we_O are_V unsure_A about_P the_D best_A way_N to_P implement_V a_D feature_N we'd_L like_V to_P have_V ._, Basically_R ,_, the_D user_N will_V be_V using_V our_D tool_N to_P view_N all_D kinds_N of_P boring_V data_N in_P tables_N ,_, columns_N ,_, etc_G ._, via_P javascript_^ ._, We_O want_V to_P implement_V a_D feature_N where_R the_D user_N can_V click_V a_D button_N or_& link_N that_P then_R allows_V the_D user_N to_P download_V the_D displayed_V data_N in_P a_D ._, doc_N file_N ._, Our_D basic_A idea_N so_P far_R is_V something_N like_P :_, call_V a_D Java_^ function_N on_P the_D server_N with_P the_D desired_A data_N passed_V in_P as_P a_D String_N when_R the_D link_N is_V clicked_V generate_V the_D ._, doc_N file_V on_P the_D server_N automatically_R "_, open_V "_, a_D link_N to_P the_D file_N in_P the_D client's_A browser_N to_P initiate_V the_D download_V Is_V this_D possible_A ?_, If_P so_R ,_, is_V it_O feasible_A ?_, Or_& ,_, can_V you_O recommend_V a_D better_A solution_N ?_, edit_V :_, the_D data_N does_V not_R reside_V on_P the_D server_N ;_, rather_R ,_, it_O is_V queried_V from_P a_D SQL_^ database_N 
What_^ type_N of_P web_N server_N are_V you_O using_V ?_, 
a_D java_^ enabled_V one_N ,_, i_O presume_V 
Yep_! ,_, its_L possible_A ._, Your_D saviour_N is_V the_D Apache_^ POI_^ library_N ._, Its_L HWPF_^ library_N will_V help_V you_O generate_V Microsoft_V word_A files_N using_V java_^ ._, The_D rest_N is_V just_R clever_R use_V of_P HTTP_^ ._, 
Your_D basic_A idea_N sounds_V a_D bit_N Rube-Goldbergesque_N ._, Is_V the_D data_N you_O want_V in_P the_D document_N present_V on_P the_D server_N ?_, If_P so_R ,_, then_R all_X you_O need_V to_P do_V is_V display_V a_D plain_A HTML_^ link_N with_P GET_N parameters_N that_O describes_V the_D data_N (_, i.e._G data_N for_P customer_N X_, from_P date_N A_D to_P date_N B_G )_, ._, The_D link_N will_V be_V handled_V on_P the_D server_N by_P a_D Servlet_N that_O gets_V the_D data_N and_& produces_V the_D ._, DOC_N file_V as_P its_D output_N to_P be_V downloaded_V by_P the_D browser_N -_, a_D very_R simple_A one-step_N process_N that_O doesn't_V even_R involve_V any_D JavaScript_^ ._, 
no_R ,_, the_D data_N is_V being_V queried_V from_P a_D SQL_^ database_N 
Which_D means_N the_D server_N can_V simply_R run_V the_D same_A query_N again_R -_, it_O has_V done_V it_O before_P ,_, it's_L not_R the_D javaScript_^ that_O directly_R accesses_V the_D DB_^ ,_, is_V it_O ?_, 
Passing_V large_A amount_N data_N as_P GET_V /_, POST_V around_P might_V not_R be_V the_D best_A idea_N ._, You_O could_V just_R pass_V in_P the_D same_A parameters_N you_O used_V to_P generate_V the_D HTML_^ page_N earlier_N ._, You_O don't_V even_R need_V to_P use_V 3rd_$ party_A library_N to_P generate_V DOC_^ ._, You_O could_V just_R generate_V a_D plain_A old_A HTML_^ file_N with_P DOC_^ extension_N and_& Word_^ will_V be_V happy_V to_P open_V it_O ._, 
thats_L a_D nice_A trick_N :)_E but_& the_D file_N format_V won't_V really_R be_V DOC_N now_R ,_, will_V it_O :)_E 
that's_L a_D good_A idea_N ,_, but_& it_O would_V be_V nice_A to_P keep_V the_D table_N formatting_N 
True_! ,_, but_& if_P the_D user_N sees_V the_D results_N opening_V in_P Word_^ ,_, nobody_^ cares_N (_, from_P experience_N )_, ._, We_O did_V the_D same_A trick_N for_P export_V only_R excel_A spreadsheets_N -_, no_D problem_N with_P comma-semicolon_A separator_N unlike_P in_P csv_N ._, 
Sounds_V like_P Docmosis_^ Java_^ library_N could_V help_V -_, check_V out_T theonline_A demo_N since_P shows_V it_O something_R similar_A to_P what_O you're_L asking_V -_, generating_V a_D real_A doc_N file_N from_P a_D web_N site_N based_V on_P selections_N in_P the_D web_N page_N ._, Docmosis_^ can_V query_N from_P databases_N and_& run_V pretty_R much_R anywhere_A ._, 
How_R can_V I_O get_V a_D signed_A Java_^ Applet_N to_P perform_V privileged_A operations_N when_R called_V from_P unsigned_A Javascript_^ ?_, 
Use_V the_D java.security.AccessController_^ class_N ._, There_X is_V a_D doPrivilegedAction_N and_& doPrivilegedExceptionAction_N that_O do_V exactly_R what_O you_O need_V ._, For_P example_N :_, AccessController.doPrivileged_^ (_, new_A PrivilegedAction()_^ {_, public_A Object_N run()_C {_, .._, do_V something_N that_O only_R works_V with_P signed_A applets_N .._, }_, }_, );_, 
It's_L worth_V adding_V :_, make_V your_D privaction'd_A run()_N method_N as_P small_A and_& self-contained_A as_P possible_A ._, Obviously_R you_O could_V just_R have_V your_D signed_A applet's_N init()_V method_N call_V a_D privileged_A run()_N which_O in_P turn_N does_V the_D actual_A applet_N ,_, but_& that's_L just_R begging_V to_P be_V abused_V ,_, misused_V accidentally_R ,_, or_& outright_V exploited_V ._, Also_R ,_, the_D fact_N that_O signed_V applets_V lose_V their_D special_A permissions_N when_R called_V by_P JavaScript_^ is_V not_R specific_A to_P a_D particular_A browser_N or_& platform_N ._, That's_L just_R how_R it_O is_V ,_, everywhere_N ,_, all_X the_D time_N ._, 
Java_^ date_N format_V to_P JavaScript_^ date_N format_N 
"_C dd_C /_C mm_C /_C yy_C (_C 07_C /_C 06_C /_C 2009_$ )"_, does_V not_R compute_V ,_, but_& I_O won't_V edit_V it_O because_P I'm_L not_R sure_A on_P exactly_R what_O you_O intend_V ._, 
Could_V you_O give_V some_D information_N on_P how_R you_O are_V passing_V the_D Java_^ date_N to_P the_D Javascript_^ code_N ?_, e.g._G are_V you_O writing_V it_O out_R using_V a_D JSP_^ ?_, That_O will_V help_V a_D lot_N in_P answering_V your_D question_N ._, 
Did_V you_O mean_V "_, dd_C /_C mm_C /_C yy_C (_C 07_C /_C 06_C /_C 09_C )"_C ?_C Otherwise_C I_O don't_V understand_V the_D difference_N between_P the_D two_$ sample_N dates_V you_O gave_V ._, 
After_P reading_V this_D question_N about_P twenty_N times_N ,_, I_O think_V Ed_G means_N How_R do_V I_O convert_V a_D string_N used_V to_P format_V dates_V in_P Java_^ (_, using_V SimpleDateFormat_^ )_, to_P an_D equivalent_N string_V used_V to_P format_V dates_V in_P JavaScript_^ (_, using_V Date.format_^ )_, ?_, 
(_, However_R I_O am_V still_R down-voting_V this_D question_N because_P if_P you_O need_V to_P do_V this_D ,_, you_O re_G doing_V it_O wrong_R )_, ._, 
If_P you_O are_V using_V java_^ ,_, take_V a_D look_V at_P the_D Simple_A Date_N Format_^ class_N ._, 
The_D javascript_^ code_N in_P this_D page_N implements_V some_D date_N functions_N and_& they_O "_, use_V the_D same_A format_N strings_N as_P the_D java.text.SimpleDateFormat_^ class_N ,_, with_P a_D few_A minor_A exceptions_N "_, ._, It_O is_V not_R the_D very_R same_A as_P you_O want_V but_& it_O can_V be_V a_D good_A start_V point_N ._, 
A_D similar_A topic_N has_V been_V answered_V here_R :_, Converting_V dates_V in_P JavaScript_^ I_O personally_R have_V found_V this_D to_P be_V a_D rather_R large_A pain_N and_& took_V the_D author's_N suggestion_N and_& used_V a_D library_N ._, As_P noted_^ ,_, jQuery_^ datepicker_N has_V one_N that_O is_V a_D viable_A solution_N if_P you_O can_V afford_V the_D overhead_N of_P download_V for_P your_D application_N or_& already_R using_V it_O ._, 
I_O really_R think_V a_D libary_N is_V the_D way_N to_P go_V on_P this_D one_N as_P well_R ._, FWIW_^ ,_, dojo_^ has_V a_D good_A one_N as_P well_R ._, http://docs.dojocampus.org/dojo/date/locale_U 
If_P you_O just_R need_V to_P pass_V a_D date_N from_P Java_^ to_P JavaScript_^ ,_, the_D best_A way_N to_P do_V it_O ,_, I_O think_V ,_, would_V be_V to_P convert_V the_D Java_^ date_N to_P milliseconds_N using_V date.getTime()_^ ,_, create_V a_D JavaScript_^ date_N initialized_V with_P this_D milliseconds_N value_N with_P new_A Date_N (_, milliseconds_N )_, and_& then_R format_V the_D date_N with_P the_D means_N of_P the_D JavaScript_^ Date_N object_N ,_, like_P :_, date.toLocaleString()_C ._, 
I_O have_V a_D similar_A problem_N with_P Java_^ Date_N ->_, Javascript_^ Date_N ->_, DatePicker_N ._, This_D helped_V get_V me_O a_D lot_N closer_N ._, Thanks_N !_, 
Best_A solution_N ._, Solved_V the_D fact_N that_P SimpleDateFormat_^ doesn't_V provide_V a_D zero_$ based_V month_N ._, 
See_V this_D :_, http://www.javascripttoolbox.com/lib/date/examples.php_U 
If_P you_O just_R want_V to_P format_V dates_V my_D date_N extensions_N will_V do_V that_O well_R -_, it_O also_R parses_V data_N formats_N and_& does_V a_D lot_N of_P date_N math_N /_, compares_N as_P well_R :_, DP_DateExtensions_^ Library_N Not_R sure_A if_P it'll_A help_N ,_, but_& I've_L found_V it_O invaluable_A in_P several_A projects_N ._, 
You_O could_V use_V my_D plugin_A jquery-dateFormat_^ ._, 
This_D JavaScript_^ library_N should_V be_V able_A to_P help_V you_O ._, http://plugins.jquery.com/project/fIsForFormat_U (_, I_O don't_V know_V why_R they_O have_V it_O as_P a_D jQuery_^ Plugin_^ ,_, because_P it_O works_V standalone_N ._, )_, You'd_L simply_R split_V the_D original_A formatted_A date_N into_P its_D individual_A elements_N and_& then_R create_V a_D new_A Date_N Object_N with_P those_D elements_N ._, Then_R ,_, use_V this_D library's_N "_, Date.f()_^ "_, method_N to_P output_N it_O into_P any_D format_N you_O could_V want_V ._, For_P example_N :_, 
This_O works_V fine_A for_P me_O :_, 
Check_V out_T moment.js_^ !_, It's_L "_, A_D lightweight_A javascript_^ date_N library_N for_P parsing_V ,_, manipulating_N ,_, and_& formatting_V dates_V "_, ._, It_O is_V a_D really_R powerful_A little_A library_N ._, Here's_R an_D example_N ..._, Here's_L another_A example_N ..._, Also_R ,_, its_L worth_V mentioning_V to_P checkout_N date.js_N ._, I_O think_V the_D two_$ libraries_N complement_V each_D other_N ._, 
Communication_N between_P Java_^ and_& Javascript_^ without_P Netscape_^ or_& IE_^ ?_, 
In_P the_D lab_N I_O work_V in_P ,_, we_O use_V Mozilla_^ 1.7_$ for_P Sun_^ Java_^ Desktop_^ System_^ and_& Firefox_^ 2.0_$ ._, 0.4_$ ._, My_D goal_N is_V to_P modify_V an_D existing_A Java_^ application_N (_, run_V via_P executable_A jar_^ )_, to_P communicate_V with_P our_D web-based_A login_N system_N ._, I_O am_V open_V to_P the_D idea_N of_P using_V both_D Java_^ Applets_N and_& JavaScript_^ to_P accomplish_V this_D task_N ,_, but_& I_O have_V not_R found_V a_D way_N to_P integrate_V these_D two_$ technologies_N in_P any_D browser_N but_& Netscape_^ Navigator_N and_& Internet_N explorer_N ._, Is_V there_R a_D way_N to_P do_V this_D using_V either_R of_P the_D two_$ aforementioned_A browsers_N ?_, A_D more_N concrete_V example_N :_, 1_$ ._, Launch_D application_N 2_$ ._, Click_^ a_N "_, login_N "_, button_N 3_$ ._, Be_O prompted_V for_P a_D password_N 4_$ ._, In_P the_D background_N ,_, have_V the_D application_N connect_V to_P the_D web-based_A login_N server_N ,_, enter_V the_D username_N (_, known_V by_P the_D app_N )_, and_& the_D password_N ,_, navigate_V to_P the_D time_N clock_N section_N and_& "_, click_N "_, the_D Punch_N In_P button_N 5_, ._, Pull_V the_D timestamp_N of_P the_D login_N (_, typically_R displayed_V on_P the_D browser_N )_, and_& display_V it_O in_P the_D app_N 
From_P your_D question_N it_O is_V not_R clear_A why_R you_O need_V a_D browser_N to_P begin_N with_P ._, It_O is_V nearly_R trivial_A to_P perform_V a_D GET_N or_& POST_V from_P java_^ with_P the_D login_N credentials_N and_& retrieve_V this_D time_N stamp_N ._, With_P out_T modification_N to_P the_D web_N service_N you_O can_V parse_V the_D out_T of_P the_D text_N returned_V from_P the_D GET_N or_& POST_N and_& then_R present_V the_D time_N stamp_N ._, 
Look_V at_P HTTPURLConnection_^ and_& perform_V POST_N of_P the_D same_A values_N login_V form_N contains_N to_P the_D same_A URL_^ ._, 
It_O looks_V like_P the_D GET_N and_& POST_V is_V the_D solution_N I've_L been_V looking_V for_P ._, I_O am_V able_A to_P find_V the_D credential_A fields_N and_& enter_V text_N ,_, but_& how_R does_V one_O simulate_V a_D button_N click_N ?_, The_D line_N in_P the_D source_N code_N is_V :_, It_O seems_V I_O would_V either_R invoke_V the_D onclick_N property_N of_P the_D button_N or_& make_V a_D direct_A call_N to_P doLogin()_^ ,_, but_& I_O am_V unsure_A how_R to_P do_V either_R ._, Thanks_N for_P the_D help_N so_P far_R ._, 
You_O need_V to_P look_V at_P what_O the_D JavaScript_^ function_N doLogin_^ is_V doing_V ._, It_O is_V most_R likely_R submitting_V the_D form_N ._, 
Open_V new_A browser_N window_N on_P click_N of_P a_D form_N button_N 
I_O want_V to_P open_V a_D new_A browser_N and_& load_N a_D page_N from_P the_D file_N system_N (_, which_O will_V be_V created_V on_P clicking_V that_D button_N )_, ._, My_D app_N is_V a_D java_^ servlet_N ._, Basically_R I_O am_V allowing_V users_N to_P change_V some_D HTML_^ on_P their_D website_N ._, On_P clicking_V the_D button_N the_D user_N get's_V to_P see_V a_D preview_A page_N ,_, that_O shows_V what_O the_D page_N looks_V like_P with_P the_D changes_N made_V ._, What_O would_V be_V the_D easiest_A way_N to_P do_V this_D and_& what_D issues_N can_V you_O see_V ,_, and_& possibly_R how_R we_O would_V we_O get_V around_P them_O ._, I_O see_V an_D issue_N ,_, for_P example_N ,_, if_P the_D browser_N window_N tries_N to_P open_V the_D file_N immediately_R ,_, it_O won't_V even_R exist_V ._, So_P there_X needs_V to_P perhaps_R be_V some_D delay_N before_P trying_V to_P read_V the_D file_N ._, 
This_O can_V be_V done_V using_V java_^ script_N window.open('url','name_N '_, ,...._N )_, you_O can_V pass_V parameters_N in_P this_D function_N ._, google_^ for_P "_, javascript_^ window.open_^ function_N "_, Cheers_N 
Maybe_R you_O can_V use_V jQuery_^ /_, AJAX_^ or_& a_D similar_A technique_N to_P post_V the_D data_N to_P the_D server_N first_R and_& then_R open_V it_O in_P a_D new_A window_N ._, see_V the_D jQuery_^ documentation_N for_P an_D example_N :_, jQuery_^ Post_V Example_^ 
if_P there_X is_V not_R much_A data_N to_P pass_V for_P preview_A page_N ,_, you_O may_V pass_V it_O as_P url_^ params_V instead_R of_P using_V jQuery_^ ._, If_P data_N is_V large_A it_O is_V better_R to_P use_V jQuery_^ ._, :)_E as_P http://www.xyz.com?name=_U "_, name_N "_, ....._^ 
I'm_L not_R familliar_A with_P java_^ servlets_N ,_, but_& can't_V you_O keep_V the_D uploaded_V html_^ in_P a_D server-side_A session_N variable_N ,_, display_V the_D contents_N in_P your_D preview_A page_N ,_, then_R save_V the_D contents_N of_P the_D variable_N out_T to_P the_D file_N system_V once_R the_D user_N accepts_V the_D changes_N ?_, 
You_O could_V use_V JavaScript_^ ._, On_P the_D button_N you_O add_V :_, and_& within_P the_D script_N part_N of_P the_D page_N you_O write_V a_D function_N like_P and_& in_P your_D Servlet_N you_O just_R wait_V for_P the_D file_N to_P appear_V before_R delivering_V it_O ._, 
How_R to_P stop_V reloading_V Java_^ applet_N when_R changing_V "_, overflow_N "_, style_N 
When_R I_O change_V the_D "_, overflow_N "_, style_N on_P document.body_^ from_P "_, hidden_A "_, to_P "_, auto_A "_, ,_, it_O forces_V a_D reload_N of_P a_D Java_^ applet_N that_O is_V on_P the_D page_N ._, I_O have_V set_V overflow_A to_P hidden_A because_P most_R of_P the_D time_N I_O don't_V want_V scrollbars_N to_P be_V visible_A on_P the_D page_N ,_, but_& I'd_L like_V to_P enable_V them_O without_P losing_N state_N in_P my_D applet_N ._, Is_V this_D possible_A ,_, or_& is_V there_R another_A way_N I_O should_V be_V going_V about_P this_D problem_N ?_, 
It's_L not_R possible_A ._, Different_A browsers_N behave_V in_P different_A ways_N ;_, some_D reload_V the_D applet_N with_P the_D slightest_A DOM_^ change_N while_P others_N keep_V it_O running_V even_R if_P you_O set_V display_V :_, none_N ._, In_P my_D experience_N the_D Java_^ Plugin_^ has_V very_R little_A control_N over_P this_D ._, You_O have_V to_P save_V the_D state_N of_P your_D applet_N either_R by_P :_, Reading_V the_D state_N into_P a_D JavaScript_^ variable_N via_P LiveConnect_^ and_& then_R writing_V it_O back_R to_P the_D applet_N afterwards_N Storing_V the_D state_N in_P static_A variables_N and_& checking_V their_D value_N when_R the_D Applet_N starts_V up_T 
Split_V java_^ strings_N in_P Rhino_^ 
I'm_L trying_V to_P split_V a_D java_^ string_N in_P a_D Rhino_^ javascript_^ program_N which_O give_V me_O the_D error_N js_^ :_, Can't_V find_V method_N java.lang.String.split()_^ ._, The_D Rhino_^ docs_N mentioned_V that_P all_X the_D javascript_^ String.prototype_^ methods_N (_, like_V match_V ,_, split_N ,_, etc_G ._, )_, are_V available_A on_P java_^ string_N if_P they're_L not_R already_R provided_V by_P java.lang.String_^ ._, Any_D ideas_N on_P what's_L going_V on_P here_R ?_, 
It_O may_V be_V that_P you're_L using_V it_O incorrectly_R ._, Doesn't_V split_V require_V a_D string_N parameter_N ?_, 
Take_V a_D look_V at_P the_D Java_^ docs_N :_, http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_U Doesn't_V seem_V to_P be_V a_D 0_$ parameter_N constructor_N for_P the_D split_A method_N ._, You_O gotta_V pass_V it_O a_D regular_A expression_N ._, Also_R ,_, for_P further_A clarification_N ,_, the_D split_A method_N returns_V a_D string_N array_N ,_, it's_L not_R a_D void_A method_N like_P the_D way_N you've_L used_V it_O in_P your_D sample_N code_N ._, 
split_V takes_V an_D argument_N ,_, which_O is_V the_D regular_A expression_N you_O want_V to_P use_V to_P split_V your_D tokens_N ._, http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_U 
Rhino_^ provides_V only_R the_D methods_N that_P java.lang.String_^ is_V missing_V and_& split_V obviously_R isn't_V one_$ of_P them_O ._, In_P order_N to_P use_V JavaScript's_Z implementation_N of_P split_N ,_, you'll_L have_V to_P convert_V Java_^ string_N to_P JavaScript_^ one_$ :_, var_C s_C =_= String_N (_, new_A java.lang.String_^ (_, "_, 1_$ 2_$ 3_$ "))_C ;_C //_= Also_R valid_A :_, var_C s_C =_= ""_, +_& new_A java.lang.String_^ (_, "_, 1_$ 2_$ 3_$ ")_C ;_C print_C (_C s.split()_C );_, //_= 1_$ 2_$ 3_$ 
Not_R exactly_R the_D same_A context_N ,_, but_& may_V help_N someone_N ._, I_O use_V the_D JavaScript_^ function_N split()_V in_P Rhino_^ ._, To_P get_V things_N working_V ,_, I_O follow_V the_D pattern_N :_, I_O suppose_V that_O ""_, +_& forces_V Rhino_^ to_P use_V a_D JavaScript_^ type_N of_P String_N ._, When_R I_O forget_V to_P add_V ""_, +_& then_R I_O got_V the_D message_N 
How_R to_P drag_V from_P browser_N area_N and_& deposit_V to_P the_D explorer_A area_N ?_, 
Sometime_R ago_R I_O was_V facing_V the_D problem_N the_D other_A way_N around_P :_, how_R to_P drag_V an_D item_N (_, folder_N /_, file_N )_, from_P an_D explorer_A window_N (_, be_V it_O windows_^ explorer_N ,_, linux_N nautilus_N etc_G ._, )_, to_P the_D browser_N window_N -_, that_O is_V ,_, the_D drag_N starts_V in_P one_$ application_N and_& ends_V in_P the_D browser_N ._, Since_P I_O had_V control_N over_P the_D browser_N ,_, I_O was_V able_A to_P intercept_V the_D dragend_N event_N :_, the_D one_N which_O interested_V me_O ._, Now_R ,_, I_O want_V to_P do_V this_D from_P the_D browser_N to_P the_D file_N explorer_V application_N :_, much_R like_P when_R you_O drag_V an_D image_N from_P firefox_^ and_& drop_V it_O in_P a_D folder_N ._, My_D main_A problem_N is_V that_O while_P I_O can_V check_V when_R the_D drag_N event_N exited_V the_D browser_N window_N ,_, I_O have_V no_D ideea_N how_R to_P get_V the_D location_N where_R the_D drag_N event_N finished_V ._, My_D ideea_N is_V to_P create_V a_D signed_A java_^ applet_N and_& somehow_R track_N the_D mouse_N movement_V on_P the_D desktop_N -_, but_& this_O seems_V a_D little_A more_N than_P overkill_N ._, Any_D pointers_N on_P this_D ?_, 
You_O won't_V be_V able_A to_P do_V this_D with_P JavaScript_^ ._, JS_^ is_V sandboxed_V in_P the_D browser_N and_& can't_V interact_N with_P anything_N outside_P ._, 
That_O I_O know_V ._, I_O am_V going_V to_P use_V JS_^ only_R to_P detect_V the_D dragexit_N event_N from_P the_D html_^ document_N ,_, and_& pass_V control_N to_P the_D java_^ signed_V applet_N ._, At_P least_N ,_, that's_L the_D idea_N at_P this_D time_N ._, 
According_V to_P your_D justification_N is_V is_V not_R simple_A ,_, but_& it_O can_V be_V managed_V ._, There_X is_V class_N called_V DataFlavor_^ ._, You_O had_V to_P use_V D_^ D_^ mechanism_N introduce_N in_P java_^ using_V Transferable_^ objects_N and_& provide_V correct_A mime-types_N and_& corresponding_V conversion_N ._, The_D problem_N is_V which_D mime-type_N will_V be_V accepted_V by_P explorer_R ._, I_O hope_V this_D help_N ._, 
I_O guess_V it_O will_V accept_V most_R of_P the_D main_A mime-types_N ._, I_O believe_V now_R that_P when_R the_D dragexit_N happens_V ,_, I_O need_V to_P pass_V control_N over_R to_P the_D java_^ applet_N and_& from_P there_X construct_V the_D Transferable_A objects_N ._, 
Need_V a_D Java_^ and_& Javascript_^ diff_V tool_N written_V in_P Java_^ 
We_O need_V an_D accurate_A diff_N utility_N for_P Java_^ and_& Javascript_^ files_N ,_, written_V in_P Java_^ ._, It_O should_V be_V invokable_V from_P within_P an_D Eclipse_^ (_, version_N 3.2_, or_& 3.3_$ )_, application_N ._, Preferably_R we_O need_V the_D Java_^ source_N code_N for_P this_D utility_N also_R ._, The_D utility_N should_V be_V able_A to_P compare_V two_$ files_N (_, old_A and_& new_A ,_, say_V )_, and_& determine_V the_D following_N accurately_R :_, Number_N of_P LOC_^ added_V to_P the_D new_A file_N Number_N of_P LOC_^ deleted_V from_P the_D old_A file_N Number_N of_P LOC_^ changed_V in_P the_D old_A file_N Number_N of_P change_N deltas_N ,_, i.e._G ,_, contiguous_A blocks_N of_P code_N added_V /_, changed_V /_, deleted_V ._, 
You_O might_V want_V to_P rephrase_V that_O to_P something_N like_P "_, does_V anyone_O know_V of_P a_D free_A Java_^ diff_N tool_N that_O can_V do_V the_D following_N ..._, "_, ._, As_P it_O stands_V ,_, it_O looks_V like_P a_D request_N for_P us_O to_P make_V one_$ for_P you_O in_P which_D case_N you_O should_V probably_R head_V on_P over_R to_P RentACoder_^ :-)_E 
Isn't_V there_X one_O already_R built_V in_P or_& use_V one_$ of_P the_D many_A plug-ins_N that_P do_V it_O ?_, Google_^ Search_N ?_, 
See_V Diffj_N ._, 
Eclipse_^ has_V a_D very_R good_A diff_N /_, compare_V plugin_A installed_N by_P default_N ._, Have_V you_O looked_V into_P using_V and_& /_, or_& extending_V that_O (_, it's_L opensource_N )_, ?_, I_O would_V not_R think_V that_O adding_V some_D statistics_N reporting_V to_P the_D existing_A plug-in_N would_V be_V all_X that_D difficult_A ,_, though_P sometimes_R plug-in_A development_N (_, even_R just_R simple_A extension_N )_, can_V be_V deceiving_V ._, Good_A luck_N ._, 
I_O needed_V a_D Java_^ diff_N implementation_N and_& found_V this_D :_, http://javacook.darwinsys.com/javasrc/textproc/Diff.java_U which_O I_O adapted_V ._, 
What_O are_V FTL_^ files_N 
I_O am_V new_A to_P a_D project_N and_& have_V to_P learn_V it_O inside_P out_T ._, I_O see_V a_D lot_N of_P files_N with_P the_D extension_N ._, ftl_A in_P them_O ._, I'n_L not_R sure_A what_O they_O are_V ._, I_O know_V they_O can_V be_V modified_V and_& the_D user_N sees_V changes_N in_P the_D front_A end_N 
Freemarker_A template_N files_N I_O believe_V ._, http://freemarker.org_U /_, 
http://filext.com/file-extension/FTL_U points_N to_P http://freemarker.sourceforge.net_^ ,_, does_V that_D help_N ?_, 
Have_V a_D look_N here_R ._, Following_^ files_N have_V FTL_^ extension_N :_, Family_^ Tree_^ Legends_^ Family_^ File_^ FreeMarker_^ Template_^ Future_^ Tense_^ Texture_^ 
freemarker_R combines_V java_^ objects_N and_& view_N side_N (_, HTML_^ /_, JQuery_^ )_, contents_N in_P a_D single_A viewable_A template_N on_P a_D browser_N ._, 
FTL_^ stands_V for_P FreeMarker_^ Template_N ._, It_O is_V very_R useful_A when_R you_O want_V to_P follow_V the_D MVC_^ (_, Model_^ View_N Controller_N )_, pattern_N ._, The_D idea_N behind_P using_V the_D MVC_^ pattern_N for_P dynamic_A Web_^ pages_N is_V that_P you_O separate_A the_D designers_N (_, HTML_^ authors_N )_, from_P the_D programmers_N ._, 
An_P ftl_A file_N could_V just_R have_V a_D series_N of_P html_^ tags_N just_R as_P a_D JSP_^ page_N or_& it_O can_V have_V freemarker_A template_N coding_V for_P representing_V the_D objects_N passed_V on_P from_P a_D controller_N java_^ file_N file_N ._, But_& ,_, its_L actual_A ability_N is_V to_P combine_V the_D contents_N of_P a_D java_^ class_N and_& view_N /_, client_N side_N stuff_N (_, html_^ JQuery_^ javascript_^ etc_G )_, ._, It_O is_V quite_R similar_A to_P velocity_N ._, You_O could_V map_V a_D method_N or_& object_N of_P a_D class_N to_P a_D freemarker_N (_, ._, ftl_N )_, page_N and_& use_V it_O as_P if_P it_O is_V a_D variable_N or_& a_D functionality_N created_V in_P the_D very_R page_N ._, ping_V me_O for_P more_A details_N ..!_, cheers_N ..!_, :)_E 
._, FLT_^ is_V a_D file_N extension_N which_O is_V a_D mod_N for_P Faster_^ than_P light_N ,_, installed_V by_P Slipstream_^ Mod_^ Manager_^ ,_, which_O requires_V Java_^ ._, 
Java_^ frameworks_N vs._V Javascript_^ frameworks_N 
I_O am_V a_D big_N fan_R of_P the_D Dojo_^ Toolkit_N but_& I_O see_V here_R often_R that_O there_R are_V Java_^ frameworks_N that_O do_V the_D same_A thing_N but_& they_O are_V not_R as_R extensive_A or_& as_P user_N friendly_R as_P Dojo_^ in_P my_D opinion_N ._, What_O are_V the_D main_A differences_N ?_, Can_V I_O use_V Dojo_^ for_P the_D GUI_^ and_& Java_^ as_P the_D back-end_N ?_, Is_V there_R a_D list_N of_P Java_^ frameworks_N for_P web_N development_N ?_, 
http://tinyurl.com/l2apzg_U see_V the_D list_N of_P some_D java_^ web_N frameworks_N 
This_D is_V a_D fairly_A big_N misconception_N ._, The_D first_A chapter_N of_P every_D pretty_R much_R any_A javascript_^ book_N describes_N how_R it's_L almost_R entirely_R unrelated_A to_P java_^ ._, 
Then_R I_O guess_V you_O don't_V understand_V my_D question_N ._, I_O saw_V multiple_A java_^ gui_N frameworks_N that_O actually_R do_V the_D same_A thing_N as_P dojo_^ and_& I_O am_V wondering_V what_O is_V better_R ._, I_O didn't_V say_V java_^ is_V related_V to_P javascript_^ ._, I_O am_V just_R searching_V for_P the_D framework_N I_O like_V the_D most_A ._, 
Maybe_R if_P you_O haven't_V titled_V your_D question_N as_P Java_^ vs_, Javascript_^ ..._, 
it's_L java_^ vs._A javascript_^ frameworks_N ._, pharhaps_V the_D title_N should_V be_V java_^ framekworks_N vs_^ ._, javascript_^ frameworks_N if_P it_O wasn't_V clear_A enough_A ._, 
isn't_V this_D equivalent_N to_P "_, Comparing_^ Apples_N with_P Oranges_^ "_, 
I_O dont_V think_V unless_P using_V Applets_^ ,_, java_^ can_V do_V the_D same_A as_P javascript_^ because_P they_O have_V different_A purpose_N ._, Even_R applets_V dont_V exactly_R do_V the_D same_A thing_N ._, Read_V this_D 
Well_! -_, there_R Google_^ Web_^ Toolkit_N ._, A_D lot_N of_P discussion_N about_P this_D here_R :_, http://code.google.com/intl/nb-NO/events/io/sessions.html_U 
