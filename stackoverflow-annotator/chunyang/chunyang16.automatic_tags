334425	different WAR files , shared resources	A N N , A N
334425	Suppose you have several applications which share the same code and most of the other resources , but have a somewhat different look and feel , some labels change , etc . ( think branding ) . If each web app is to go in its own WAR file , where do you put the shared resources ? I already use the classpath to share classes and property files . But what about javascript and css files ? Is the best way to create and deploy one extra WAR file that will serve these shared files to whatever other application requires them ? I also thought of a build script that does some magic and from a common source spews out the ( slightly ) different WARs , but I don't like it because it just complicates stuff unnecessarily when you need to build / test / run a single application . Any other tips and tricks would be appreciated .	V O V A N O V D A N & R P D A N , & V D R A V & V , D N V , G , , V V , , P D N N V P V P L A N N , R V O V D A N , O R V D N P V N & N N , & O P ^ & N N , V D A N P V & A $ A N V O V V O V N P D A N V O , O R V P D V N O V D A & P D N N V T D , R , A N , & O V P O P O R V V R R O V P V , N , V D A N , D A N & N V V V ,
334425	You can deploy both WARs in the same EAR and put common resources in the EAR . Then put the appropriate dependencies in the manifest of the web apps to link to the jar files in the ear .	O V P D N P D A N & V N N P D N , R V D A N P D A P D N N P N P D N N P D N ,
334425	If you don't want to go the EAR route , using tomcat , etc ; there are a few other ways to achieve the consistency you want . If you want to share just js and css , look into pack : tag . You could host the . js and css from an apache server , set up your httpd.conf so your webapps can call it , then use pack : tag from your application wars - DRY and compression in one step .	P O V V P V D N N , V ^ , G , X V D A A N P V D N O V , P O V P V R A & N , V P N , N , O V V D , ^ & N P D A N , V T D N P D N V V O , R V N , N P D N N , A & N P $ N ,
334425	Thanks for the replies so far , but I'm afraid I forgot to mention that the WARs will be deployed in different environments that are completely isolated from each other . So maybe having a common WAR deployed next to the actual application is the only option . I think I'll go with the following : WAR1 , WAR2 containing app-specific stuff CommonWAR containg common stuff ( no kidding ) EAR1 : WAR1 + CommonWAR , to be deployed in env1 EAR2 : WAR2 + CommonWAR , to be deployed in env2	N P D N R R , & L A O V P V P D N V V V P A N O V R V P D A , P R V D N N V R P D A N V D A N , O V L V P D N , ^ , ^ V A N N V N N , D V , ^ , ^ & ^ , P V V P ^ ^ , ^ & ^ , P V V P $
334425	The CommonWar serves no purpose in this case . Just put your common resources in each WAR in it's lib directory , or in the EAR itself . A war is not meant to just package resources , the EAR serves that purpose . Although less configuration is required if you simple put it in each WAR .	^ ^ V D N P D N , R V D N N P D N P L A N , & P D N O , D N V R V P R N N , D N V D N , P A N V A P O A V O P D N ,
334425	Yes , but if I put the common resources in each WAR file then I duplicate those resources : won't do that . If I put the common resources in the EAR file then it must contain all the WAR files that depend upon those resources : can't do either , one WAR must be deployed per environment .	! , & P O V D N N P D N V R O V D N , V V O , P O V D N N P D N V R O V V X D N V O V P D N , V V R , $ N V V V P N ,
334425	Since you are deploying the CommonWAR in each EAR anyway , the same duplication exists , and you have wrapped the code in a WAR for no reason .	P O V V D N P D N R , D A N V , & O V V D N P D N P D N ,
334425	The CommonWAR is deployed in two EARs , but it is the * same * CommonWAR , so it is NOT duplicated " for development " . To be honest , I have reverted to 2 EAR files and one WAR file , see my updated post :)	^ ^ V V P $ N , & O V D , A , ^ , P O V O V , P N , , P V A , O V V P $ N N & $ N N , V D V N E
334425	Update Yes , me again . I have actually changed my mind ( again :) ) . I am currently trying ( being more prudent here ): ( Common ) WAR : containing the application , common ( most part ) + some specific stuff EAR1 : CommonWAR + specific configuration file for env1 EAR2 : CommonWAR + specific configuration file for env2 The configuration file is picked up by the WAR . It is on the the EAR classpath and only contains one property ' application ' with a value . The single WAR will then use this information where appropriate to distinguish between the two apps ( config , style sheets , ... ) . With my solution of EAR1 = CommonWAR + WAR1 , EAR2 = CommonWAR + WAR2 , it was too difficult or impossible to lookup static resources in the CommonWAR without using a web url ( e.g. images in PDF documents generated with iText ) .	N ! , O R , O V R V D N , R E E , O V R V , V R A R , , ^ , N , V D N , N , A N , & D A N ^ , ^ & A N V P ^ ^ , ^ & A N V P $ D N V V V T P D N , O V P D D N ^ & A N $ N , N , P D N , D A N V R V D N R A P V P D $ N , ! , N N , ~ E , P D N P ^ ^ ^ ^ ^ , ^ ^ ^ ^ ^ , O V R A & A P ^ A N P D N P V D N N , N N P ^ N V P E , ,
334425	A strategy that I have seen used for such product-line like configurations is using WAR overlays when building with maven . You define a common WAR that contains the common stuff and overlay it with those other WARs that contain the specific stuff to generate different WARs for every application . This method is probably most useful if you deploy the WAR-variants on different machines . But I'm not sure whether I can actually recommend this . Remember to specify the overlays configuration if you actually override stuff , since otherwise the overriding order is not deterministic . It might even change with a maven-war-plugin upgrade . ( It did in our case . )	D N P O V V V P A N P N V V N V O V P ^ , O V D N N O V D N N & V O P D A N O V D A N P V A N P D N , D N V R R A P O V D ^ P A N , & L R A P O V R V D , V P V D N N P O R A N , P R D A N V R A , O V R V P D V V , , O V P D N , E
334425	How about putting your css and js in the classpath and serve them with a servlet ? Then you can build the common resources as a jar and that jar can even contain the servlet ( resource dispatcher if you like ) and the war files can contain the jar file in the WEB-INF / lib folder .	R P V D N & V P D N & V O P D N , R O V V D N N P D N & D N V R V D N , N N P O V , & D N N V V D N V P D ^ , A N ,
334425	You can also dispatch images this way	O V R N N D N
