How to Cross-Compile Java Source Code to JavaScript ?
Given a set of Java source code files , how can I compile them into one or more JavaScript files that can be used with hand-crafted JavaScript ? GWT is one option , but every example I've seen so far is aimed at building fancy websites . The simple use case of just converting Java source to Javascript that can be used together with handcrafted JavaScript hasn't been well-documented . I started a thread on the GWT mailing list on this subject , but opinions seem to be mixed on whether this is even feasible . One person gave a very useful tip , which was to check out GWT-Exporter . The problem is that neither source code nor documentation is readily available , although there's this and this . edit : GWT-Exporter source code is here I've also seen Java2Script . But again , I wasn't able to find examples of how to solve my simple use case . What's the best approach to this problem ? Is there something better I'm missing ?
This question discusses a very similar topic : compiling Java libraries to JavaScript using GWT . http://stackoverflow.com/questions/3125556/gwt-to-create-utility-javascript-library
Very thorough question . You did a great job expressing what you'd explored already . Nicely done .
You can try using Scala-js https://github.com/lampepfl/scala-js for your java project - java / scala interoperability http://www.scala-lang.org/old/faq/4 )
When you use GWT , you're basically converting the UI portion into Javascript ( and it assumes that you use the UI widgets provided when you write your Java ) . Only some of the Java libraries are accessible within Javascript . Typically in a GWT application anything that makes heavy use of Java libraries would run on the server side and connect to the Javascript as AJAX ( which GWT handles for you ) . So GWT isn't necessarily converting your full application into Javascript ( though it can if you're willing to limit your use of Java libraries and some functionality ) . At any rate , if this approach ( calling out to Java running on a server from within Javascript ) appeals to you , one nice option is DWR , which basically allows your Javascript to directly call methods in Java classes running on the server ( without you having to build a web service or other frontend ) . Not what you asked , I know . More relevantly , it looks like there's source code for a sample app demonstrating the use of gwt-exporter .
This would be for a fairly small , non-gui java library . I hadn't seen DWR , which looks like it could be very useful for larger projects . I Didn't even see the source directory for the gwt-exporter project - thanks for pointing it out . That looks promising .
gwt-exporter link is dead
Here's a new link to the sample app : http://code.google.com/p/gwt-exporter/source/browse/trunk/samples/src/main/java/exporterdemo/public/ExporterDemo.html
The new link is also dead . :/
And here's a new link : https://code.google.com/p/gwt-exporter/source/browse/samples/exporterdemo/src/main/java/exporterdemo/public/ExporterDemo.html
Also , here's a link to the project home of gwt-exporter -- that's less likely to change ( the sample app changes location when they change their directory format ): https://code.google.com/p/gwt-exporter /
Also you can use QWT It has Java2JavaScript compiler on the board .
Given a set of Java source code files , how can I compile them into one or more JavaScript files that can be used with hand-crafted JavaScript ? There is no direct correlation between both the built-in Java API and Java language features , and those of JavaScript . So any attempt at creating a " converter " is going to be incomplete . As a fundamental example , Java classes don't have a direct corresponding JavaScript idiom . Whether or not an incomplete conversion tool will work for your use case is impossible to know without the source code . That said , my suggestion to solving your problem would be to first attempt to use GWT : set up a demo project , drop in the source of your library and call it from the JavaScript side and see what GWT outputs in it's . js file . Some of the other tools suggested by other posters here are definitely worth checking out as well . If that is fruitful and gets you part of the way , great . From there , you'll need / want to do the remainder of the conversion by hand . After all , assuming you want the code to actually function correctly , a manual review would definitely be in order . Some unit tests being converted along with it would be ideal as well . You don't state how large the source of your project is , but if it's small ( let's say less than a thousand lines of code ) , even a complete conversion by hand shouldn't be extremely difficult . If it's much larger than that , I would suggest reviewing if you actually want that as JavaScript code anyway .
Here's two other options , things to look into and a third option not converting , just living together . Java2Javascript I have been wanting to try this out -- Looks closer to what's been asked . Quoting the web page : an Eclipse Java to JavaScript compiler plugin and an implementation of JavaScript version of Eclipse Standard Widget Toolkit ( SWT ) with other common utilities , such as java.lang . * and java.util . * . You can convert your SWT-base Rich Client Platform ( RCP ) into Rich Internet Application ( RIA ) by Java2Script Pacemaker . A limited Java in Javascript experience - You'd need to port your necessary dependencies or find alternatives via tools like jQuery , etc . DukeScript As I view DukeScript , it compiles some front-end Javascript and calls Java behind , from the browser's Javascript . It seems more or less a hybrid approach so you can use the Java wealth of libraries from Javascript . I will fall foul of a browser security policy for Java . A more full-Javascript on Java experience leveraging the Java-runtime . If I wanted that outside the browser environment I'd use Javascript on Java . Nashhorn Consider this as an example of using Java's resources as foundation for Javascript : Nashorn and JavaFX , as an example for a rich Javascript operated client . Anyway with a Javascript engine inside Java you're not needing to translate between a Javascript-VM to object-code to a Java-VM quite so much .
