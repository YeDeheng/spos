We	N
are	N
doing	N
a	N
web	N
application	N
with	N
AngularJS	N
and	N
we	N
like	N
the	N
idea	N
of	N
using	N
Bower	N
for	N
Dependency	N
Management	N
and	N
Grunt	N
for	N
building	N
,	N
running	N
tests	N
etc	N
.	N
(	N
Yeoman	N
)	N
The	N
server	N
is	N
done	N
with	N
Java	N
using	N
Maven	N
,	N
so	N
of	N
course	N
we	N
would	N
like	N
with	N
a	N
simple	N
mvn	N
install	N
build	N
everything	N
(	N
web	N
application	N
+	N
server	N
)	N
So	N
what	N
approach	N
you	N
took	N
and	N
why	N
?	N
1	N
)	N
Treat	N
them	N
as	N
two	N
different	N
applications	N
,	N
which	N
in	N
fact	N
they	N
are	N
.	N
So	N
using	N
different	N
building	N
methods/tools	N
is	N
acceptable	N
.	N
2	N
)	N
Forget	N
about	N
Grunt	N
Bower	N
,	N
use	N
Maven	N
plugins	N
to	N
build	N
,	N
run	N
tests	N
,	N
manage	N
dependencies	N
for	N
the	N
web	N
application	N
.	N
If	N
that	N
is	N
the	N
case	N
,	N
which	N
ones	N
?	N
3	N
)	N
Use	N
Maven	N
exec	N
plugin	N
to	N
call	N
Grunt	N
to	N
build	N
the	N
front-end	N
webapp	N
.	N
I	N
see	N
this	N
more	N
as	N
a	N
hack	N
than	N
a	N
solution	N
.	N
4	N
)	N
Other	N
.	N
Approach	N
easier	N
to	N
integrate	N
with	N
Jenkins	N
is	N
a	N
plus	N
.	N
Thanks	N
in	N
advance	N
!	N
Actually	N
,	N
you	N
just	N
need	N
to	N
include	N
the	N
yeoman-maven-plugin	N
and	N
this	N
allows	N
you	N
to	N
put	N
all	N
the	N
JavaScript	N
config	N
stuff	N
(	N
bower	N
,	N
npm	N
,	N
grunt	N
)	N
as	N
siblings	N
to	N
the	N
pom	N
.	N
xml	N
(	N
exactly	N
where	N
these	N
files	N
should	N
belong	N
IMO)	N
,	N
and	N
upon	N
mvn	N
install	N
it	N
will	N
build	N
just	N
everything	N
-	N
including	N
your	N
webapp	N
under	N
src/main/webapp	N
.	N
Took	N
me	N
less	N
than	N
half	N
an	N
hour	N
to	N
port	N
an	N
existing	N
project	N
to	N
that	N
structure	N
.	N
Of	N
course	N
you	N
should	N
have	N
a	N
look	N
at	N
the	N
example	N
app	N
at	N
github.com/jhipster/jhipster-sample-app	N
