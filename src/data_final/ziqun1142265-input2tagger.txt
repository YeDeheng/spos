Mozilla	N
Rhino	N
:	N
Default	N
JavaScript	N
Compliance	N
Level	N

to	N
execute	N
JavaScript	N
in	N
Rhino	N
one	N
has	N
to	N
create	N
an	N
execution	N
context	N
for	N
the	N
script	N
.	N
The	N
constructor	N
of	N
the	N
Context	N
class	N
uses	N
the	N
JavaScript	N
compliance	N
level	N
VERSION_DEFAULT	N
.	N
As	N
I	N
cannot	N
find	N
a	N
mapping	N
of	N
VERSION_DEFAULT	N
to	N
any	N
of	N
the	N
actual	N
VERSION_XXX	N
constants	N
in	N
the	N
API	N
,	N
I'm	N
wondering	N
which	N
JavaScript	N
compliance	N
level	N
VERSION_DEFAULT	N
is	N
.	N
The	N
release	N
note	N
of	N
Rhino	N
1.7	N
R1	N
(	N
*	N
ttps	N
:/	N
/	N
developer.mozilla.org/en/New_in_Rhino_1.7R1	N
)	N
states	N
that	N
one	N
has	N
to	N
specify	N
the	N
JavaScript	N
version	N
explicitly	N
,	N
but	N
it	N
does	N
not	N
mention	N
which	N
version	N
is	N
used	N
when	N
Context.setLanguageVersion()	N
is	N
omitted	N
.	N

it's	N
open	N
source	N
...	N

Maybe	N
you	N
should	N
ask	N
this	N
question	N
on	N
the	N
Mozilla	N
Rhino	N
mailing	N
list	N
.	N

Having	N
had	N
a	N
look	N
through	N
most	N
of	N
the	N
Rhino	N
code	N
,	N
it	N
looks	N
like	N
most	N
of	N
the	N
testing	N
against	N
language	N
version	N
is	N
negative	N
testing	N
,	N
e.g.	N
if	N
(	N
getLanguageVersion()	N
!	N
=	N
Context.VERSION_1_2	N
)	N
{	N
return	N
paramCount	N
;	N
}	N
VERSION_DEFAULT	N
is	N
defined	N
as	N
'	N
0	N
'	N
,	N
so	N
the	N
one	N
place	N
where	N
it	N
looks	N
like	N
it	N
would	N
need	N
to	N
be	N
set	N
as	N
1.7	N
is	N
to	N
support	N
the	N
"	N
let	N
"	N
and	N
"	N
yield	N
"	N
keywords	N
because	N
of	N
this	N
code	N
from	N
TokenStream	N
:	N
if	N
((	N
result	N
==	N
Token.LET	N
||	N
result	N
==	N
Token.YIELD	N
)	N
&	N
&	N
parser.compilerEnv.getLanguageVersion()	N
Context.VERSION_1_7	N
)	N
{	N
//	N
LET	N
and	N
YIELD	N
are	N
tokens	N
only	N
in	N
1.7	N
and	N
later	N
result	N
=	N
Token.NAME	N
;	N
}	N

