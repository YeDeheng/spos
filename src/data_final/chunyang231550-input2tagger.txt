Has	N
anyone	N
used	N
or	N
written	N
an	N
Ant	N
task	N
to	N
compile	N
(	N
Rhino	N
)	N
JavaScript	N
to	N
Java	N
bytecode	N
?	N

I'd	N
like	N
to	N
use	N
the	N
Rhino	N
JavaScript	N
compiler	N
to	N
compile	N
some	N
JavaScript	N
to	N
.	N
class	N
bytecode	N
files	N
for	N
use	N
in	N
a	N
project	N
.	N
It	N
seems	N
like	N
this	N
should	N
already	N
exist	N
,	N
since	N
there	N
are	N
groovyc	N
,	N
netrexxc	N
,	N
and	N
jythonc	N
tasks	N
for	N
Groovy	N
,	N
NetREXX	N
(	N
!	N
)	N
and	N
Jython	N
,	N
respectively	N
.	N
Has	N
anyone	N
used	N
or	N
written	N
such	N
an	N
Ant	N
task	N
,	N
or	N
can	N
anyone	N
provide	N
some	N
tips	N
on	N
how	N
to	N
write	N
one	N
?	N
Ideally	N
it	N
would	N
have	N
some	N
way	N
to	N
resolve	N
dependencies	N
among	N
JavaScript	N
or	N
Java	N
classes	N
.	N

Why	N
not	N
simply	N
use	N
java	N
task	N
?	N
Any	N
objections	N
?	N

Hmm	N
,	N
the	N
main	N
concern	N
is	N
handling	N
dependencies	N
among	N
Java	N
and	N
JavaScript	N
classes	N
.	N
Still	N
,	N
this	N
might	N
be	N
enough	N
to	N
work	N
for	N
now	N
--	N
thanks	N
.	N

Here	N
is	N
a	N
sample	N
build.xml	N
I	N
use	N
for	N
my	N
rhino	N
applications	N
.	N
If	N
you	N
have	N
lots	N
of	N
javascript	N
files	N
you	N
just	N
need	N
to	N
keep	N
adding	N
more	N
tags	N
~	N
:	N
ant	N
compile	N
jar	N
run	N
~	N

I'm	N
using	N
RequireJS	N
in	N
my	N
project	N
,	N
which	N
includes	N
a	N
script	N
that	N
traces	N
out	N
dependencies	N
between	N
modules	N
,	N
and	N
combines	N
them	N
into	N
a	N
single	N
JavaScript	N
file	N
.	N
Optionally	N
,	N
it	N
can	N
also	N
minify	N
the	N
combined	N
js	N
file	N
with	N
the	N
Google	N
Closure	N
compiler	N
.	N
Once	N
it's	N
in	N
this	N
form	N
,	N
where	N
all	N
dependencies	N
are	N
included	N
in	N
a	N
single	N
js	N
file	N
,	N
the	N
file	N
can	N
be	N
easily	N
compiled	N
using	N
jsc	N
.	N
Here's	N
a	N
segment	N
of	N
my	N
ant	N
script	N
which	N
I	N
use	N
to	N
create	N
the	N
single	N
combined	N
js	N
file	N
,	N
compile	N
it	N
to	N
a	N
class	N
file	N
,	N
and	N
then	N
create	N
an	N
executable	N
JAR	N
:	N
The	N
complete	N
build	N
script	N
can	N
be	N
found	N
here	N
.	N

