setting_V classpath_N for_P java_N classes_N (_$ jar_N file_N )_N in_P XUL_^ ,_, to_P access_V via_P javascript_N
I_O am_V implementing_V firefox_N extension_N using_V XUL_^ ._. I_O have_V set_V of_P java_N classes_N that_D is_V zipped_V as_P jar_N which_D needs_V to_P be_V accessed_V through_P javascript_N ._. If_P I_O copy_V my_D jar_N into_P jre's_G lib_G /_: ext_N then_R javascript_N will_V be_V able_A to_P invoke_V my_D java_N classes_N ._. If_P I_O remove_V from_P ext_N and_& package_N this_D jar_N in_G xpi_G ,_, Javascript_^ is_V unable_A to_P find_V the_D classpath_N for_P my_D jar_N file_N ._. Please_! let_V me_O know_V how_R to_P set_V the_D classpath_N for_P my_D java_N classes_N (_$ jar_N file_N )_N in_P XUL_N environment_N at_P the_D earliest_A ._.
javascript_N /_: XUL_N invoking_V java_N ?_. interesting_A ..._: any_D ref_N ?_.
I_O suggest_V taking_V a_D look_N at_P this_D extension_N XQuery_N USE_N ME_N 1.4_$ ._. 7_$ and_& the_D following_A articles_N Calling_V java_N from_P XUL_N applications_N Java_^ in_P Firefox_^ Extensions_N
Thanks_N ,_, Is_V there_R any_D easy_A way_N to_P set_V the_D classpath_N such_A that_P javascript_N can_V find_V it_O ._. -_: Anand_^ ._.
What_O is_V the_D disadvantage_N of_P DWR_^ ?_.
While_P using_V DWR_^ in_P a_D intranet_N ,_, will_V disadvantages_V like_P perfomance_N or_& security_N issues_N occur_V ?_. Direct_A web_N remoting_N is_V a_D tool_N which_D uses_V Ajax_^ request_N to_P contact_V a_D server_N from_P a_D js_N file_N ._.
One_$ thing_N I_O would_V watch_V out_R for_P is_V that_P your_D server_N will_V most_R likely_R get_V hit_V by_P more_A HTTP_N requests_N than_P if_P you_O have_V the_D (_N normal_A )_$ full_A page_N HTTP_N delivery_N ._. Let_V me_O explain_V ._. When_R your_D web_N page_N is_V AJAX-enabled_A ,_, your_D clients_N will_V end_V up_R creating_V more_A HTTP_N requests_N for_P (_N say_V )_N form_N filling_N ,_, page-fragment_N regeneration_N etc_N ._. I've_V seen_V scenarios_N where_R developers_N have_V gone_V AJAX-crazy_A ,_, and_& made_V the_D web_N page_N a_D largely_R dynamic_A document_N ._. This_D results_V in_P a_D great_A user_N experience_N (_N if_P done_V well_R )_$ ,_, but_& every_D request_N results_V in_P a_D server_N hit_N ,_, leading_V to_P scalability_N and_& latency_N issues_N ._. Note_V -_: this_D isn't_N particular_A to_P DWR_^ ,_, but_& is_V an_D AJAX_^ issue_N ._. I've_^ used_V DWR_^ ,_, and_& it_O works_V nicely_R ._. Unfortunately_R ,_, I_O found_V that_P it_O worked_V so_R well_R ,_, and_& so_R easily_R ,_, that_P everything_N becomes_V a_D candidate_N for_P remoting_N ,_, and_& you_O can_V end_V up_R with_P huge_A numbers_N of_P small_A requests_N ._.
I_O agree_V with_P this_D answer_N ._. I_O used_V DWR_^ in_P an_D web-based_A application_N ._. The_D application_N gives_V a_D great_A user_N experience_N ,_, but_& I_O think_V the_D application_N doesn't_N work_N fast_R ,_, because_P of_P all_X the_D JavaScript_N and_& httprequest_N ._.
I_O worked_V on_P a_D project_N with_P DWR_N -_: a_D really_R nice_A tool_N ._. I'm_N not_R convinced_A about_P the_D pace_N of_P development_N though_P ._. They_O did_V post_N on_P the_D development_N log_N that_D they're_V working_V on_P getting_V 3.0_$ out_P the_D door_N ,_, but_& the_D last_A stable_A release_N -_: 2.0_$ -_: was_V out_R in_P summer_N 2006_$ ._. It's_V a_D bit_N worrying_V taken_V from_P a_D support_N perspective_N -_: bug_N fixes_N especially_R ._.
Main_^ problem_N I've_N experienced_V is_V trying_V to_P script_N a_D load_N test_N on_P a_D system_N where_R the_D main_A bulk_N of_P the_D work_N is_V done_V via_P DWR_N calls_N ._. The_D format_N of_P the_D calls_N is_V difficult_A to_P replicate_V when_R compared_V with_P just_R replying_V a_D bunch_N of_P urls_N with_P changing_V parameters_N ._. Still_R DWR_^ is_V an_D excellent_A framework_N and_& makes_V implementing_V Javascript_^ ->_^ Java_^ RPC_^ pretty_R damn_R easy_A ._.
DWR_^ is_V a_D great_A tool_N when_R your_D site_N has_V a_D lot_N of_P ajax_N calls_N ._. Each_D page_N that_D makes_V dwr_N rpc_N calls_V needs_N to_P include_V :_: a_D )_N an_D interface_N file_N corresponding_V to_P the_D calls_N being_V made_V ._. and_& b_N )_G a_G js_G file_N bundled_V with_P dwr_N that_D contains_V the_D dwr_N engine_N code_N that_D makes_V these_D calls_N possible_A ._. for_P e.g._G script_N src=_N "_'' /_: dwr_N /_: engine.js_N "_'' /_: script_N one_$ technique_N that_D is_V frequently_R used_V while_P optimizing_V web_N applications_N is_V to_P use_V the_D browser_N cache_N as_R much_A as_P possible_A when_R a_D resource_N (_N like_P a_D js_N file_N )_N has_V not_R changed_V on_P a_D server_N ._. engine.js_N is_V something_N that_D will_V never_R change_V unless_P you_O upgrade_V your_D dwr_N to_P a_D newer_A version_N ._. But_& ,_, by_P default_N ,_, engine.js_N is_V not_R a_D static_A file_N served_V by_P your_D webserver_N ._. its_D bundled_V as_P part_N of_P the_D dwr_N tool_N itsef_N and_& is_V served_V by_P the_D dwr_N controller_N /_: servlet.this_G doesnt_G aid_N client_N side_N caching_N ._. So_R ,_, it_O is_V beneficial_A to_P save_V engine.js_N under_P the_D document_N root_N of_P your_D webserver_N and_& let_V the_D webserver_N serve_V it_O as_P a_D static_A file_N ._.
More_R about_P caching_G engine.js_G on_P DWR's_N site_N :_: http://directwebremoting.org/dwr/browser/engine/static.html_N
One_$ feature_N missing_V of_P current_A DWR_N 3.x_N that_P any_D user_N should_V take_V good_A care_N is_V that_P when_R an_D instance_N of_P a_D bean_N has_V properties_N of_P NULL_N value_N ,_, those_D properties_N will_V be_V still_R injected_V to_P the_D JSON_N and_& these_D redundant_A data_N DO_N affect_V the_D performance_N ._. When_R a_D property_N has_V the_D value_N of_P NULL_^ ,_, usually_R it_O should_V not_R be_V sent_V to_P frontend_N ._. Details_N of_P problem_N :_: http://dwr.2114559.n2.nabble.com/Creating-Custom-bean-converter-td6178318.html_N
The_D biggest_A difference_N among_P other_A solutions_N to_P transfer_V objects_N (_G marshaling_G )_G is_V object_N references_N ._. For_P instance_N ,_, if_P you_O use_V it_O to_P transfer_V a_D tree_N :_: A_D |-B_N |-C_N in_P a_D list_N {_N A_N ,_, B_N ,_, C}_N :_: B.parent_N =_A A_N C.parent_N =_A A_N then_R A_D is_V the_D same_A object_N in_P Javascrit_^ !_. On_P the_D bad_A side_N ,_, if_P you_O have_V complex_A structures_N with_P circular_A dependencies_N and_& lot_N of_P objects_N :_: A_D -B_N ,_, B_N -C_N ,_, C_N -B_N ,_, C_N ._. A_D ,..._N it_O could_V crash_V ._. Anyway_R ,_, I_O use_V it_O in_P a_D real_A project_N used_V by_P many_A hundreds_N of_P companies_N in_P production_N to_P transfer_V thousands_N of_P objects_N to_P a_D single_A html_N page_N in_P order_N to_P draw_V a_D complex_A graph_N and_& it_O works_V nicely_R with_P a_D good_A performance_N ._.
Clientside_^ Javascript_^ -->_P Serverside_^ Java_^ -->_P user_N is_V served_V a_D ._. doc_N
I_O am_V helping_V someone_N out_R with_P a_D javascript-based_A web_N app_G (_G even_R though_P I_O know_V next_A to_P nothing_N about_P web_N development_N )_N and_& we_O are_V unsure_A about_P the_D best_A way_N to_P implement_V a_D feature_N we'd_N like_P to_P have_V ._. Basically_R ,_, the_D user_N will_V be_V using_V our_D tool_N to_P view_V all_D kinds_N of_P boring_A data_N in_P tables_N ,_, columns_N ,_, etc_G ._. via_P javascript_N ._. We_O want_V to_P implement_V a_D feature_N where_R the_D user_N can_V click_V a_D button_N or_& link_N that_D then_R allows_V the_D user_N to_P download_V the_D displayed_V data_N in_P a_D ._. doc_N file_N ._. Our_D basic_A idea_N so_R far_R is_V something_N like_P :_: call_V a_D Java_^ function_N on_P the_D server_N with_P the_D desired_V data_N passed_V in_R as_P a_D String_^ when_R the_D link_N is_V clicked_V generate_V the_D ._. doc_N file_N on_P the_D server_N automatically_R "_`` open_A "_'' a_D link_N to_P the_D file_N in_P the_D client's_N browser_N to_P initiate_V the_D download_N Is_V this_D possible_A ?_. If_P so_R ,_, is_V it_O feasible_A ?_. Or_& ,_, can_V you_O recommend_V a_D better_A solution_N ?_. edit_V :_: the_D data_N does_V not_R reside_V on_P the_D server_N ;_: rather_R ,_, it_O is_V queried_V from_P a_D SQL_N database_N
What_D type_N of_P web_N server_N are_V you_O using_V ?_.
a_D java_N enabled_V one_$ ,_, i_G presume_G
Yep_R ,_, its_D possible_A ._. Your_D saviour_N is_V the_D Apache_^ POI_^ library_N ._. Its_D HWPF_N library_N will_V help_V you_O generate_V Microsoft_^ word_N files_N using_V java_N ._. The_D rest_N is_V just_R clever_A use_N of_P HTTP_^ ._.
Your_D basic_A idea_N sounds_V a_D bit_N Rube-Goldbergesque_^ ._. Is_V the_D data_N you_O want_V in_P the_D document_N present_A on_P the_D server_N ?_. If_P so_R ,_, then_R all_D you_O need_V to_P do_V is_V display_V a_D plain_A HTML_^ link_N with_P GET_V parameters_N that_D describes_V the_D data_N (_G i.e._G data_N for_P customer_N X_N from_P date_N A_N to_P date_N B_^ )_^ ._. The_D link_N will_V be_V handled_V on_P the_D server_N by_P a_D Servlet_^ that_D gets_V the_D data_N and_& produces_V the_D ._. DOC_N file_N as_P its_D output_N to_P be_V downloaded_V by_P the_D browser_N -_: a_D very_R simple_A one-step_A process_N that_P doesn't_N even_R involve_V any_D JavaScript_^ ._.
no_R ,_, the_D data_N is_V being_V queried_V from_P a_D SQL_N database_N
Which_D means_V the_D server_N can_V simply_R run_V the_D same_A query_N again_R -_: it_O has_V done_V it_O before_R ,_, it's_N not_R the_D javaScript_N that_D directly_R accesses_V the_D DB_N ,_, is_V it_O ?_.
Passing_V large_A amount_N data_N as_P GET_V /_: POST_N around_R might_V not_R be_V the_D best_A idea_N ._. You_O could_V just_R pass_V in_P the_D same_A parameters_N you_O used_V to_P generate_V the_D HTML_^ page_N earlier_R ._. You_O don't_V even_R need_V to_P use_V 3rd_A party_N library_N to_P generate_V DOC_N ._. You_O could_V just_R generate_V a_D plain_A old_A HTML_^ file_N with_P DOC_N extension_N and_& Word_N will_V be_V happy_A to_P open_V it_O ._.
thats_V a_D nice_A trick_N :)_N but_& the_D file_N format_N won't_N really_R be_V DOC_N now_R ,_, will_V it_O :)_V
that's_V a_D good_A idea_N ,_, but_& it_O would_V be_V nice_A to_P keep_V the_D table_N formatting_N
True_A ,_, but_& if_P the_D user_N sees_V the_D results_N opening_V in_P Word_N ,_, nobody_N cares_V (_N from_P experience_N )_N ._. We_O did_V the_D same_A trick_N for_P export_N only_R excel_V spreadsheets_N -_: no_D problem_N with_P comma-semicolon_A separator_N unlike_P in_G csv_G ._.
Sounds_V like_P Docmosis_^ Java_^ library_N could_V help_V -_: check_V out_R theonline_A demo_N since_P shows_N it_O something_N similar_A to_P what_O you're_N asking_V -_: generating_V a_D real_A doc_N file_N from_P a_D web_N site_N based_V on_P selections_N in_P the_D web_N page_N ._. Docmosis_^ can_V query_V from_P databases_N and_& run_V pretty_R much_R anywhere_R ._.
How_R can_V I_O get_V a_D signed_A Java_^ Applet_^ to_P perform_V privileged_A operations_N when_R called_V from_P unsigned_A Javascript_^ ?_.
Use_V the_D java.security.AccessController_N class_N ._. There_X is_V a_D doPrivilegedAction_N and_& doPrivilegedExceptionAction_N that_D do_V exactly_R what_O you_O need_V ._. For_P example_N :_: AccessController.doPrivileged_G (_G new_A PrivilegedAction()_G {_G public_A Object_^ run()_^ {_^ .._^ do_V something_N that_P only_A works_N with_P signed_A applets_N .._G }_G }_G );_G
It's_N worth_A adding_V :_: make_V your_D privaction'd_G run()_G method_N as_P small_A and_& self-contained_A as_P possible_A ._. Obviously_R you_O could_V just_R have_V your_D signed_V applet's_G init()_G method_N call_V a_D privileged_A run()_N which_D in_P turn_N does_V the_D actual_A applet_N ,_, but_& that's_N just_R begging_V to_P be_V abused_V ,_, misused_V accidentally_R ,_, or_& outright_R exploited_V ._. Also_R ,_, the_D fact_N that_D signed_V applets_N lose_V their_D special_A permissions_N when_R called_V by_P JavaScript_^ is_V not_R specific_A to_P a_D particular_A browser_N or_& platform_N ._. That's_N just_R how_R it_O is_V ,_, everywhere_R ,_, all_X the_D time_N ._.
Java_^ date_N format_N to_P JavaScript_^ date_N format_N
"_`` dd_N /_: mm_N /_: yy_G (_G 07_$ /_: 06_$ /_: 2009_$ )"_N does_V not_R compute_V ,_, but_& I_O won't_V edit_V it_O because_P I'm_N not_R sure_A on_P exactly_R what_O you_O intend_V ._.
Could_V you_O give_V some_D information_N on_P how_R you_O are_V passing_V the_D Java_^ date_N to_P the_D Javascript_^ code_N ?_. e.g._G are_V you_O writing_V it_O out_R using_V a_D JSP_^ ?_. That_D will_V help_V a_D lot_N in_P answering_V your_D question_N ._.
Did_V you_O mean_V "_`` dd_N /_: mm_N /_: yy_G (_G 07_$ /_: 06_$ /_: 09_$ )"_N ?_. Otherwise_R I_O don't_V understand_V the_D difference_N between_P the_D two_$ sample_N dates_N you_O gave_V ._.
After_P reading_V this_D question_N about_P twenty_$ times_N ,_, I_O think_V Ed_^ means_V How_R do_V I_O convert_V a_D string_N used_V to_P format_N dates_N in_P Java_^ (_^ using_V SimpleDateFormat_G )_G to_P an_D equivalent_A string_N used_V to_P format_N dates_N in_P JavaScript_^ (_^ using_V Date.format_G )_G ?_.
(_N However_R I_O am_V still_R down-voting_A this_D question_N because_P if_P you_O need_V to_P do_V this_D ,_, you_O re_V doing_V it_O wrong_A )_N ._.
If_P you_O are_V using_V java_N ,_, take_V a_D look_N at_P the_D Simple_A Date_N Format_N class_N ._.
The_D javascript_N code_N in_P this_D page_N implements_V some_D date_N functions_N and_& they_O "_'' use_V the_D same_A format_N strings_N as_P the_D java.text.SimpleDateFormat_N class_N ,_, with_P a_D few_A minor_A exceptions_N "_'' ._. It_O is_V not_R the_D very_R same_A as_P you_O want_V but_& it_O can_V be_V a_D good_A start_N point_N ._.
A_D similar_A topic_N has_V been_V answered_V here_R :_: Converting_V dates_N in_P JavaScript_^ I_O personally_R have_V found_V this_D to_P be_V a_D rather_R large_A pain_N and_& took_V the_D author's_N suggestion_N and_& used_V a_D library_N ._. As_P noted_V ,_, jQuery_N datepicker_N has_V one_$ that_D is_V a_D viable_A solution_N if_P you_O can_V afford_V the_D overhead_N of_P download_N for_P your_D application_N or_& already_R using_V it_O ._.
I_O really_R think_V a_D libary_N is_V the_D way_N to_P go_V on_P this_D one_N as_R well_R ._. FWIW_N ,_, dojo_N has_V a_D good_A one_N as_R well_R ._. http://docs.dojocampus.org/dojo/date/locale_N
If_P you_O just_R need_V to_P pass_V a_D date_N from_P Java_^ to_P JavaScript_^ ,_, the_D best_A way_N to_P do_V it_O ,_, I_O think_V ,_, would_V be_V to_P convert_V the_D Java_^ date_N to_P milliseconds_N using_V date.getTime()_N ,_, create_V a_D JavaScript_^ date_N initialized_V with_P this_D milliseconds_N value_N with_P new_A Date_G (_G milliseconds_N )_N and_& then_R format_N the_D date_N with_P the_D means_N of_P the_D JavaScript_^ Date_^ object_N ,_, like_P :_: date.toLocaleString()_N ._.
I_O have_V a_D similar_A problem_N with_P Java_^ Date_^ ->_^ Javascript_^ Date_^ ->_^ DatePicker_^ ._. This_^ helped_V get_V me_O a_D lot_N closer_A ._. Thanks_N !_.
Best_N solution_N ._. Solved_V the_D fact_N that_P SimpleDateFormat_G doesn't_G provide_V a_D zero_N based_A month_N ._.
See_V this_D :_: http://www.javascripttoolbox.com/lib/date/examples.php_N
If_P you_O just_R want_V to_P format_N dates_N my_D date_N extensions_N will_V do_V that_D well_R -_: it_O also_R parses_V data_N formats_N and_& does_V a_D lot_N of_P date_N math_N /_: compares_V as_R well_R :_: DP_DateExtensions_N Library_^ Not_R sure_A if_P it'll_N help_N ,_, but_& I've_^ found_V it_O invaluable_A in_P several_A projects_N ._.
You_O could_V use_V my_D plugin_N jquery-dateFormat_N ._.
This_D JavaScript_^ library_N should_V be_V able_A to_P help_V you_O ._. http://plugins.jquery.com/project/fIsForFormat_N (_N I_$ don't_N know_V why_R they_O have_V it_O as_P a_D jQuery_^ Plugin_^ ,_, because_P it_O works_V standalone_A ._. )_G You'd_G simply_R split_V the_D original_A formatted_A date_N into_P its_D individual_A elements_N and_& then_R create_V a_D new_A Date_^ Object_^ with_P those_D elements_N ._. Then_R ,_, use_V this_D library's_N "_`` Date.f()_N "_'' method_N to_P output_N it_O into_P any_D format_N you_O could_V want_V ._. For_P example_N :_:
This_D works_V fine_A for_P me_O :_:
Check_V out_R moment.js_N !_. It's_N "_'' A_D lightweight_A javascript_N date_N library_N for_P parsing_N ,_, manipulating_V ,_, and_& formatting_N dates_N "_'' ._. It_O is_V a_D really_R powerful_A little_A library_N ._. Here's_V an_D example_N ..._: Here's_V another_D example_N ..._: Also_R ,_, its_D worth_N mentioning_V to_P checkout_N date.js_N ._. I_O think_V the_D two_$ libraries_N complement_V each_D other_A ._.
Communication_^ between_P Java_^ and_& Javascript_^ without_P Netscape_^ or_& IE_N ?_.
In_P the_D lab_N I_$ work_N in_P ,_, we_O use_V Mozilla_^ 1.7_$ for_P Sun_^ Java_^ Desktop_^ System_^ and_& Firefox_^ 2.0_$ ._. 0.4_$ ._. My_D goal_N is_V to_P modify_V an_D existing_A Java_^ application_N (_$ run_N via_P executable_A jar_N )_N to_P communicate_V with_P our_D web-based_A login_N system_N ._. I_O am_V open_A to_P the_D idea_N of_P using_V both_D Java_^ Applets_^ and_& JavaScript_^ to_P accomplish_V this_D task_N ,_, but_& I_O have_V not_R found_V a_D way_N to_P integrate_V these_D two_$ technologies_N in_P any_D browser_N but_& Netscape_^ Navigator_^ and_& Internet_^ explorer_N ._. Is_V there_X a_D way_N to_P do_V this_D using_V either_D of_P the_D two_$ aforementioned_A browsers_N ?_. A_D more_R concrete_A example_N :_: 1_$ ._. Launch_V application_N 2_$ ._. Click_V a_D "_`` login_N "_'' button_N 3_$ ._. Be_V prompted_V for_P a_D password_N 4_$ ._. In_P the_D background_N ,_, have_V the_D application_N connect_V to_P the_D web-based_A login_N server_N ,_, enter_V the_D username_A (_N known_V by_P the_D app_G )_G and_& the_D password_N ,_, navigate_V to_P the_D time_N clock_N section_N and_& "_`` click_V "_'' the_D Punch_N In_P button_N 5_$ ._. Pull_V the_D timestamp_N of_P the_D login_G (_G typically_R displayed_V on_P the_D browser_N )_N and_& display_V it_O in_P the_D app_N
From_P your_D question_N it_O is_V not_R clear_A why_R you_O need_V a_D browser_N to_P begin_V with_P ._. It_O is_V nearly_R trivial_A to_P perform_V a_D GET_V or_& POST_V from_P java_N with_P the_D login_N credentials_N and_& retrieve_V this_D time_N stamp_N ._. With_P out_A modification_N to_P the_D web_N service_N you_O can_V parse_V the_D out_P of_P the_D text_N returned_V from_P the_D GET_V or_& POST_N and_& then_R present_V the_D time_N stamp_N ._.
Look_N at_P HTTPURLConnection_N and_& perform_V POST_N of_P the_D same_A values_N login_N form_N contains_V to_P the_D same_A URL_N ._.
It_O looks_V like_P the_D GET_V and_& POST_N is_V the_D solution_N I've_N been_V looking_V for_P ._. I_O am_V able_A to_P find_V the_D credential_N fields_N and_& enter_V text_N ,_, but_& how_R does_V one_$ simulate_V a_D button_N click_V ?_. The_D line_N in_P the_D source_N code_N is_V :_: It_O seems_V I_O would_V either_R invoke_V the_D onclick_A property_N of_P the_D button_N or_& make_V a_D direct_A call_N to_P doLogin()_N ,_, but_& I_O am_V unsure_A how_R to_P do_V either_R ._. Thanks_N for_P the_D help_N so_R far_R ._.
You_O need_V to_P look_V at_P what_O the_D JavaScript_^ function_N doLogin_N is_V doing_V ._. It_O is_V most_R likely_R submitting_V the_D form_N ._.
Open_V new_A browser_N window_N on_P click_V of_P a_D form_N button_N
I_O want_V to_P open_V a_D new_A browser_N and_& load_V a_D page_N from_P the_D file_N system_N (_N which_D will_V be_V created_V on_P clicking_V that_D button_N )_N ._. My_D app_N is_V a_D java_N servlet_N ._. Basically_R I_O am_V allowing_V users_N to_P change_V some_D HTML_^ on_P their_D website_N ._. On_P clicking_V the_D button_N the_D user_N get's_N to_P see_V a_D preview_N page_N ,_, that_D shows_V what_O the_D page_N looks_V like_P with_P the_D changes_N made_V ._. What_O would_V be_V the_D easiest_A way_N to_P do_V this_D and_& what_O issues_N can_V you_O see_V ,_, and_& possibly_R how_R we_O would_V we_O get_V around_P them_O ._. I_O see_V an_D issue_N ,_, for_P example_N ,_, if_P the_D browser_N window_N tries_V to_P open_V the_D file_N immediately_R ,_, it_O won't_N even_R exist_V ._. So_P there_X needs_V to_P perhaps_R be_V some_D delay_N before_P trying_V to_P read_V the_D file_N ._.
This_D can_V be_V done_V using_V java_N script_N window.open('url','name_N '_'' ,...._G )_G you_O can_V pass_V parameters_N in_P this_D function_N ._. google_V for_P "_`` javascript_N window.open_N function_N "_'' Cheers_^
Maybe_R you_O can_V use_V jQuery_N /_: AJAX_N or_& a_D similar_A technique_N to_P post_V the_D data_N to_P the_D server_N first_R and_& then_R open_V it_O in_P a_D new_A window_N ._. see_V the_D jQuery_N documentation_N for_P an_D example_N :_: jQuery_^ Post_^ Example_^
if_P there_X is_V not_R much_A data_N to_P pass_V for_P preview_N page_N ,_, you_O may_V pass_V it_O as_P url_N params_N instead_R of_P using_V jQuery_N ._. If_P data_N is_V large_A it_O is_V better_A to_P use_V jQuery_N ._. :)_N as_P http://www.xyz.com?name=_N "_`` name_N "_'' ....._N
I'm_N not_R familliar_A with_P java_N servlets_N ,_, but_& can't_V you_O keep_V the_D uploaded_A html_N in_P a_D server-side_A session_N variable_N ,_, display_V the_D contents_N in_P your_D preview_N page_N ,_, then_R save_V the_D contents_N of_P the_D variable_N out_P to_P the_D file_N system_N once_P the_D user_N accepts_V the_D changes_N ?_.
You_O could_V use_V JavaScript_^ ._. On_P the_D button_N you_O add_V :_: and_& within_P the_D script_N part_N of_P the_D page_N you_O write_V a_D function_N like_P and_& in_P your_D Servlet_^ you_O just_R wait_V for_P the_D file_N to_P appear_V before_P delivering_V it_O ._.
How_R to_P stop_V reloading_V Java_^ applet_N when_R changing_V "_`` overflow_N "_'' style_N
When_R I_O change_V the_D "_`` overflow_N "_'' style_N on_P document.body_N from_P "_`` hidden_A "_'' to_P "_`` auto_N "_'' ,_, it_O forces_V a_D reload_N of_P a_D Java_^ applet_N that_D is_V on_P the_D page_N ._. I_O have_V set_V overflow_N to_P hidden_A because_P most_A of_P the_D time_N I_$ don't_N want_V scrollbars_N to_P be_V visible_A on_P the_D page_N ,_, but_& I'd_N like_P to_P enable_V them_O without_P losing_V state_N in_P my_D applet_N ._. Is_V this_D possible_A ,_, or_& is_V there_R another_D way_N I_O should_V be_V going_V about_P this_D problem_N ?_.
It's_N not_R possible_A ._. Different_A browsers_N behave_V in_P different_A ways_N ;_: some_D reload_V the_D applet_N with_P the_D slightest_A DOM_N change_N while_P others_N keep_V it_O running_V even_R if_P you_O set_V display_N :_: none_N ._. In_P my_D experience_N the_D Java_^ Plugin_^ has_V very_R little_A control_N over_P this_D ._. You_O have_V to_P save_V the_D state_N of_P your_D applet_N either_& by_P :_: Reading_V the_D state_N into_P a_D JavaScript_^ variable_N via_P LiveConnect_^ and_& then_R writing_V it_O back_R to_P the_D applet_N afterwards_R Storing_V the_D state_N in_P static_A variables_N and_& checking_V their_D value_N when_R the_D Applet_^ starts_V up_R
Split_G java_G strings_N in_P Rhino_N
I'm_N trying_V to_P split_V a_D java_N string_N in_P a_D Rhino_N javascript_N program_N which_D give_V me_O the_D error_N js_V :_: Can't_N find_V method_N java.lang.String.split()_N ._. The_D Rhino_^ docs_N mentioned_V that_P all_X the_D javascript_N String.prototype_N methods_N (_V like_P match_N ,_, split_N ,_, etc_G ._. )_N are_V available_A on_P java_N string_N if_P they're_N not_R already_R provided_V by_P java.lang.String_N ._. Any_D ideas_N on_P what's_N going_V on_P here_R ?_.
It_O may_V be_V that_D you're_N using_V it_O incorrectly_R ._. Doesn't_N split_N require_V a_D string_N parameter_N ?_.
Take_V a_D look_N at_P the_D Java_^ docs_N :_: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_N Doesn't_N seem_V to_P be_V a_D 0_$ parameter_N constructor_N for_P the_D split_N method_N ._. You_O gotta_R pass_V it_O a_D regular_A expression_N ._. Also_R ,_, for_P further_A clarification_N ,_, the_D split_N method_N returns_V a_D string_N array_N ,_, it's_V not_R a_D void_N method_N like_P the_D way_N you've_N used_V it_O in_P your_D sample_N code_N ._.
split_N takes_V an_D argument_N ,_, which_D is_V the_D regular_A expression_N you_O want_V to_P use_V to_P split_V your_D tokens_N ._. http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html_N
Rhino_N provides_V only_R the_D methods_N that_P java.lang.String_N is_V missing_V and_& split_V obviously_R isn't_N one_$ of_P them_O ._. In_P order_N to_P use_V JavaScript's_A implementation_N of_P split_N ,_, you'll_N have_V to_P convert_V Java_^ string_N to_P JavaScript_^ one_$ :_: var_N s_N =_A String_^ (_^ new_A java.lang.String_N (_N "_'' 1_$ 2_$ 3_$ "))_N ;_: //_N Also_R valid_A :_: var_N s_N =_A ""_N +_& new_A java.lang.String_N (_N "_'' 1_$ 2_$ 3_$ ")_N ;_: print_N (_G s.split()_G );_G //_G 1_$ 2_$ 3_$
Not_R exactly_R the_D same_A context_N ,_, but_& may_V help_V someone_N ._. I_O use_V the_D JavaScript_^ function_N split()_^ in_P Rhino_^ ._. To_P get_V things_N working_V ,_, I_O follow_V the_D pattern_N :_: I_O suppose_V that_P ""_N +_& forces_N Rhino_^ to_P use_V a_D JavaScript_^ type_N of_P String_^ ._. When_R I_O forget_V to_P add_V ""_N +_& then_R I_O got_V the_D message_N
How_R to_P drag_V from_P browser_N area_N and_& deposit_N to_P the_D explorer_N area_N ?_.
Sometime_R ago_P I_O was_V facing_V the_D problem_N the_D other_A way_N around_P :_: how_R to_P drag_V an_D item_N (_N folder_N /_: file_N )_N from_P an_D explorer_N window_N (_$ be_V it_O windows_N explorer_N ,_, linux_N nautilus_N etc_N ._. )_$ to_P the_D browser_N window_N -_: that_D is_V ,_, the_D drag_N starts_V in_P one_$ application_N and_& ends_V in_P the_D browser_N ._. Since_P I_O had_V control_N over_P the_D browser_N ,_, I_O was_V able_A to_P intercept_V the_D dragend_N event_N :_: the_D one_N which_D interested_V me_O ._. Now_R ,_, I_O want_V to_P do_V this_D from_P the_D browser_N to_P the_D file_N explorer_N application_N :_: much_R like_P when_R you_O drag_V an_D image_N from_P firefox_N and_& drop_V it_O in_P a_D folder_N ._. My_D main_A problem_N is_V that_P while_P I_O can_V check_V when_R the_D drag_N event_N exited_V the_D browser_N window_N ,_, I_O have_V no_D ideea_N how_R to_P get_V the_D location_N where_R the_D drag_N event_N finished_V ._. My_D ideea_N is_V to_P create_V a_D signed_A java_N applet_N and_& somehow_R track_V the_D mouse_N movement_N on_P the_D desktop_N -_: but_& this_D seems_V a_D little_R more_A than_P overkill_N ._. Any_D pointers_N on_P this_D ?_.
You_O won't_V be_V able_A to_P do_V this_D with_P JavaScript_^ ._. JS_N is_V sandboxed_V in_P the_D browser_N and_& can't_N interact_V with_P anything_N outside_N ._.
That_P I_O know_V ._. I_O am_V going_V to_P use_V JS_^ only_R to_P detect_V the_D dragexit_N event_N from_P the_D html_N document_N ,_, and_& pass_V control_N to_P the_D java_N signed_V applet_N ._. At_P least_A ,_, that's_V the_D idea_N at_P this_D time_N ._.
According_V to_P your_D justification_N is_V is_V not_R simple_A ,_, but_& it_O can_V be_V managed_V ._. There_X is_V class_N called_V DataFlavor_^ ._. You_O had_V to_P use_V D_N D_N mechanism_N introduce_V in_P java_N using_V Transferable_A objects_N and_& provide_V correct_A mime-types_N and_& corresponding_A conversion_N ._. The_D problem_N is_V which_D mime-type_N will_V be_V accepted_V by_P explorer_N ._. I_O hope_V this_D help_N ._.
I_O guess_V it_O will_V accept_V most_A of_P the_D main_A mime-types_N ._. I_O believe_V now_R that_P when_R the_D dragexit_N happens_V ,_, I_O need_V to_P pass_V control_N over_P to_P the_D java_N applet_N and_& from_P there_X construct_N the_D Transferable_A objects_N ._.
Need_V a_D Java_^ and_& Javascript_^ diff_N tool_N written_V in_P Java_^
We_O need_V an_D accurate_A diff_N utility_N for_P Java_^ and_& Javascript_^ files_N ,_, written_V in_P Java_^ ._. It_O should_V be_V invokable_A from_P within_P an_D Eclipse_^ (_N version_N 3.2_$ or_& 3.3_$ )_N application_N ._. Preferably_R we_O need_V the_D Java_^ source_N code_N for_P this_D utility_N also_R ._. The_D utility_N should_V be_V able_A to_P compare_V two_$ files_N (_V old_A and_& new_A ,_, say_V )_N and_& determine_V the_D following_N accurately_R :_: Number_N of_P LOC_N added_V to_P the_D new_A file_N Number_N of_P LOC_N deleted_V from_P the_D old_A file_N Number_^ of_P LOC_^ changed_V in_P the_D old_A file_N Number_N of_P change_N deltas_N ,_, i.e._G ,_, contiguous_A blocks_N of_P code_N added_V /_: changed_V /_: deleted_V ._.
You_O might_V want_V to_P rephrase_V that_D to_P something_N like_P "_`` does_V anyone_N know_V of_P a_D free_A Java_^ diff_N tool_N that_D can_V do_V the_D following_N ..._: "_'' ._. As_P it_O stands_V ,_, it_O looks_V like_P a_D request_N for_P us_O to_P make_V one_$ for_P you_O in_P which_D case_N you_O should_V probably_R head_V on_P over_R to_P RentACoder_V :-)_N
Isn't_N there_X one_$ already_R built_V in_P or_& use_V one_$ of_P the_D many_A plug-ins_N that_D do_V it_O ?_. Google_^ Search_V ?_.
See_^ Diffj_^ ._.
Eclipse_^ has_V a_D very_R good_A diff_N /_: compare_V plugin_N installed_V by_P default_N ._. Have_V you_O looked_V into_P using_V and_& /_: or_& extending_V that_P (_G it's_G opensource_G )_G ?_. I_O would_V not_R think_V that_P adding_V some_D statistics_N reporting_V to_P the_D existing_V plug-in_A would_V be_V all_X that_D difficult_A ,_, though_P sometimes_R plug-in_A development_N (_N even_R just_R simple_A extension_N )_N can_V be_V deceiving_V ._. Good_A luck_N ._.
I_O needed_V a_D Java_^ diff_N implementation_N and_& found_V this_D :_: http://javacook.darwinsys.com/javasrc/textproc/Diff.java_N which_D I_O adapted_V ._.
What_O are_V FTL_N files_N
I_O am_V new_A to_P a_D project_N and_& have_V to_P learn_V it_O inside_P out_P ._. I_O see_V a_D lot_N of_P files_N with_P the_D extension_N ._. ftl_N in_P them_O ._. I'n_N not_R sure_A what_O they_O are_V ._. I_O know_V they_O can_V be_V modified_V and_& the_D user_N sees_V changes_N in_P the_D front_A end_N
Freemarker_N template_N files_N I_O believe_V ._. http://freemarker.org_N /_:
http://filext.com/file-extension/FTL_N points_N to_P http://freemarker.sourceforge.net_N ,_, does_V that_P help_V ?_.
Have_V a_D look_N here_R ._. Following_V files_N have_V FTL_N extension_N :_: Family_^ Tree_^ Legends_^ Family_^ File_^ FreeMarker_^ Template_^ Future_^ Tense_A Texture_N
freemarker_N combines_V java_N objects_N and_& view_N side_V (_^ HTML_^ /_: JQuery_N )_$ contents_N in_P a_D single_A viewable_A template_N on_P a_D browser_N ._.
FTL_N stands_V for_P FreeMarker_^ Template_^ ._. It_O is_V very_R useful_A when_R you_O want_V to_P follow_V the_D MVC_^ (_^ Model_^ View_^ Controller_^ )_^ pattern_N ._. The_D idea_N behind_P using_V the_D MVC_^ pattern_N for_P dynamic_A Web_N pages_N is_V that_P you_O separate_V the_D designers_N (_^ HTML_^ authors_N )_V from_P the_D programmers_N ._.
An_D ftl_N file_N could_V just_R have_V a_D series_N of_P html_N tags_N just_R as_P a_D JSP_^ page_N or_& it_O can_V have_V freemarker_N template_N coding_V for_P representing_V the_D objects_N passed_V on_R from_P a_D controller_N java_N file_N file_N ._. But_& ,_, its_D actual_A ability_N is_V to_P combine_V the_D contents_N of_P a_D java_N class_N and_& view_N /_: client_N side_N stuff_N (_G html_G JQuery_N javascript_N etc_G )_G ._. It_O is_V quite_R similar_A to_P velocity_N ._. You_O could_V map_V a_D method_N or_& object_N of_P a_D class_N to_P a_D freemarker_N (_N ._. ftl_G )_G page_N and_& use_V it_O as_P if_P it_O is_V a_D variable_N or_& a_D functionality_N created_V in_P the_D very_A page_N ._. ping_V me_O for_P more_A details_N ..!_$ cheers_N ..!_G :)_G
._. FLT_N is_V a_D file_N extension_N which_D is_V a_D mod_N for_P Faster_^ than_P light_A ,_, installed_V by_P Slipstream_^ Mod_^ Manager_^ ,_, which_D requires_V Java_^ ._.
Java_^ frameworks_N vs._P Javascript_^ frameworks_N
I_O am_V a_D big_A fan_N of_P the_D Dojo_^ Toolkit_^ but_& I_O see_V here_R often_R that_P there_X are_V Java_^ frameworks_N that_D do_V the_D same_A thing_N but_& they_O are_V not_R as_P extensive_A or_& as_P user_N friendly_A as_P Dojo_^ in_P my_D opinion_N ._. What_O are_V the_D main_A differences_N ?_. Can_V I_O use_V Dojo_^ for_P the_D GUI_^ and_& Java_^ as_P the_D back-end_A ?_. Is_V there_X a_D list_N of_P Java_^ frameworks_N for_P web_N development_N ?_.
http://tinyurl.com/l2apzg_N see_V the_D list_N of_P some_D java_N web_N frameworks_N
This_D is_V a_D fairly_R big_A misconception_N ._. The_D first_A chapter_N of_P every_D pretty_R much_A any_D javascript_N book_N describes_V how_R it's_N almost_R entirely_R unrelated_A to_P java_N ._.
Then_R I_O guess_V you_O don't_V understand_V my_D question_N ._. I_O saw_V multiple_A java_G gui_G frameworks_N that_D actually_R do_V the_D same_A thing_N as_P dojo_N and_& I_O am_V wondering_V what_O is_V better_A ._. I_O didn't_V say_V java_N is_V related_A to_P javascript_N ._. I_O am_V just_R searching_V for_P the_D framework_N I_O like_V the_D most_A ._.
Maybe_R if_P you_O haven't_V titled_V your_D question_N as_P Java_^ vs_& Javascript_^ ..._:
it's_G java_G vs._G javascript_N frameworks_N ._. pharhaps_V the_D title_N should_V be_V java_A framekworks_N vs_& ._. javascript_N frameworks_N if_P it_O wasn't_G clear_A enough_R ._.
isn't_V this_D equivalent_N to_P "_`` Comparing_V Apples_N with_P Oranges_N "_''
I_O dont_V think_V unless_P using_V Applets_N ,_, java_N can_V do_V the_D same_A as_P javascript_N because_P they_O have_V different_A purpose_N ._. Even_R applets_V dont_N exactly_R do_V the_D same_A thing_N ._. Read_V this_D
Well_R -_: there_X Google_^ Web_N Toolkit_N ._. A_D lot_N of_P discussion_N about_P this_D here_R :_: http://code.google.com/intl/nb-NO/events/io/sessions.html_N
GWT_^ takes_V the_D Java_^ code_N and_& translates_V it_O -literally-_$ to_P Javascript_^ code_N
Agree_V to_P all_X the_D comments_N ,_, all_D i_G wanted_V to_P say_V is_V Java_^ !_. =_A JavaScript_N
Javascript_^ is_V a_D completely_R different_A thing_N from_P Java_^ Javascript_^ is_V intended_V for_P browser_N behaviour_N ,_, Java_^ is_V a_D complete_A different_A thing_N ._. Some_D Java_^ Web_N frameworks_N use_V Dojo_G (_G like_P MyFaces_G )_G when_R rendering_V rich_A components_N and_& Java_^ is_V in_P charge_N of_P the_D backend_N ._. You_O can_V find_V many_A useful_A alternatives_N for_P Java_^ Web_N Frameworks_N in_P stackoverflow_N What_O Web_N Application_N Framework_N for_P Java_^ is_V recommended_V ?_. I_O personally_R prefer_V Spring_^ MVC_^ but_& there_X are_V many_A options_N
Where_R do_V you_O see_V MyFaces_^ uses_V dojo_N ?_.
When_R MyFaces_^ renders_V the_D HTML_^ it_O includes_V some_D dojo_N libraries_N ,_, it_O is_V mentioned_V in_P its_D documentation_N and_& even_R some_D components_N explicitly_R are_V named_V
Is_V it_O really_R a_D "_`` completely_R "_'' different_A thing_N ,_, or_& are_V we_O intended_V to_P overlook_V what_O they_O have_V in_P common_A ?_. However_R ,_, I_O think_V that_P Java_^ is_V rather_R a_D subset_N of_P Javascript_^ than_P the_D other_A way_N round_N ._. ;)_N
I_O have_V found_V this_D library_N to_P fit_V my_D needs_N ._. I_O just_R need_V a_D server_N side_N back-end_A and_& it_O looks_V very_R lightweight_A ._.
I_O don't_V think_V this_D is_V an_D answer_N for_P you_O own_A question_N ,_, hehe_N ._. I_O didn't_V down-voted_A you_N though_P
Why_R not_R ?_. Dojo_^ handles_V REST_N channels_N ._. I_O can_V write_V my_D own_A framework_N around_P it_O ._.
You_O shouldn't_R compare_V Java_^ and_& Dojo_^ ,_, they_O are_V quite_R different_A animals_N ._. Dojo_^ is_V a_D Javascript_^ toolkit_N /_: library_N so_P you_O should_V rather_R compare_V it_O to_P ExtJS_V for_P instance_N ._. And_& yes_! ,_, you_O can_V use_V whatever_D js_V script_N you_O like_V in_P the_D HTML_^ /_: jsp_N pages_N of_P your_D web_N application_N ._. Regarding_V Java_^ frameworks_N ,_, first_A and_& foremost_A look_N into_P Spring_N ._.
"_`` Java_^ is_V to_P Javascript_^ what_D car_N is_V to_P carpet_N ._. "_''
Where_R did_V you_O hear_V this_D ?_. Greg_^ Hewgill_^ posted_V it_O here_R :_: http://stackoverflow.com/questions/245062/whats-the-difference-between-javascript-and-java/245068#245068_N ,_, but_& he_O didn't_^ remember_V where_R he_O got_V it_O from_P ._.
I_O believe_V the_D credit_N goes_V to_P Chris_^ Heilmann_^ :_: http://www.wait-till-i.com/2005/11/08/do-hr-people-even-read-their-job-ads-when-they-get-published_A /_:
*_G "_`` Java_^ is_V to_P Javascript_^ what_D subway_N is_V to_P car_N "_'' *_G
It_O is_V quite_R possible_A to_P combine_V Dojo_^ and_& a_D Java_^ web_N framework_N ._. My_D company's_A application_N uses_V both_D Dojo_^ and_& Spring_^ MVC_^ ._. The_D two_$ technologies_N address_V different_A sets_N of_P problems_N ._. Dojo_^ is_V a_D client-side_A framework_N for_P managing_V UI_^ components_N (_$ widgets_N )_^ ,_, AJAX_^ requests_N ,_, and_& providing_V a_D browser-independent_A abstraction_N on_P top_N of_P JavaScript_^ and_& the_D DOM_^ ._. Spring_^ MVC_^ is_V a_D server-side_A framework_N that_D receives_V requests_N from_P the_D browser_N ,_, provides_V entry-points_N into_P server-side_A business_N logic_N ,_, and_& directs_V page_N flow_N through_P the_D application_N ._. Having_V said_V that_P ,_, there_X are_V other_A Java_^ web_N frameworks_N that_D overlap_V some_D functionality_N that_D is_V also_R provided_V by_P JavaScript_^ tools_N like_P Dojo_^ ._. JSF_N with_P ICEfaces_N or_& RichFaces_N come_V to_P mind_V ._. In_P those_D models_N ,_, the_D server_N (_^ Java_^ )_^ has_V more_R direct_A control_N over_P how_R components_N are_V rendered_V and_& how_R their_D state_N is_V held_V ._. One_$ explicit_A goal_N of_P RichFaces_^ ,_, for_P example_N ,_, is_V to_P help_V developers_N who_O don't_V know_V JavaScript_^ (_^ or_& don't_^ want_V to_P write_V it_O )_R develop_V AJAX_N applications_N ._. But_& I_O wouldn't_V say_V one_$ approach_N is_V better_A than_P the_D other_A ._. They_O just_R focus_V on_P different_A developer_N audiences_N ._.
JavaScript_^ Frameworks_^ ._. Those_D listed_V here_R include_V :_: Prototype_^ jQuery_^ Ext_^ Script.aculo.us_^ MooTools_^ Yahoo_^ !_. UI_^ Library_^ (_^ YUI_^ )_^ Dojo_^ Toolkit_^ Backspace_^ They_O are_V among_P the_D most_R popular_A ones_N ._. I_O use_V MooTools_^ ._.
Obtaining_V in_P IE_N the_D length_N of_P a_D Java_^ array_N passed_V from_P an_D applet_N to_P its_D Javascript_^ wrapper_N
I_O have_V the_D following_A method_N in_P my_D applet_N :_: Which_D I_O call_V from_P Javascript_^ as_P follows_V :_: This_D works_V in_P Firefox_^ but_& IE_N gives_V me_O Any_D ideas_N anyone_N ?_.
Knowing_V nothing_N about_P Java_^ I_O can_V only_R ask_V if_P you've_N tried_V "_'' for_P (_G i_G in_P files_N )_G {_G /_: *_G do_V stuff_V *_G /_: }_N "_''
Don't_V you_O mean_V File_^ []_^ (_^ not_R Files[]_G )_G ?_. Other_A then_R that_P ,_, it_O would_V help_V if_P you_O alert_V (_^ files_V )_^ ._. Also_R ,_, if_P you_O have_V a_D javascript_N debugger_N (_^ DebugBar_^ ,_, for_P example_N )_N that_D would_V help_V the_D most_A ._.
@annakata_N :_: Yes_^ ,_, I've_^ tried_V it_O ._. It_O doesn't_N work_N in_P either_& Firefox_N or_& IE_N ._. @laginimaineb_N :_: Corrected_V question_N ._. Thanks_N !_. Also_R ,_, alert_A (_N files_V )_G doesn't_G help_N much_A but_& I'm_N going_V to_P try_V kizzx2's_N suggestion_N below_P to_P peek_N into_P files_N '_G structure_N ._.
You_O can_V use_V Firebug_^ Lite_^ in_P IE_N to_P investigate_V what's_N going_V on_R with_P files_N First_A ,_, include_V Firebug_^ Lite_^ in_P your_D file_N Now_R log_V it_O in_P the_D console_N with_P Now_R you_O can_V investigate_V what_D object_N was_V actually_R being_V returned_V by_P getFiles()_N I_O give_V this_D suggestion_N because_P IE_N said_V length_N is_V null_A not_R or_& not_R an_D object_N instead_R of_P files_N is_V null_A or_& not_R an_D object_N ,_, so_R maybe_R files_N have_V other_A methods_N that_P you_O can_V use_V ._. Use_^ Firebug_^ to_P reflect_V those_D ._.
Not_R sure_A how_R widely_R supported_V passing_V a_D Java_^ array_N to_P javascript_N is_V ._. A_D workaround_N is_V to_P return_V the_D array_N as_P a_D delimited_V string_N as_P shown_V in_P the_D following_V example_N http://www.rgagnon.com/javadetails/java-0183.html_N
Already_R seen_V this_D link_N ._. Approach_N is_V not_R viable_A since_P getFiles_N returns_V an_D array_N of_P non-string_A objects_N ._.
I_O realise_V that_P ,_, you_O build_V the_D string_N from_P the_D string_N attributes_N required_V from_P the_D File_^ array_N ,_, eg_G ._. the_D file_N path_N ._. you_O can_V then_R get_V the_D details_N required_V from_P the_D file_N using_V that_P path_N
Work-around_N found_V ._. Instead_R of_P returning_V an_D array_N ,_, return_V a_D list_N instead_R ._. Then_R iterate_V through_P it_O using_V the_D get_V and_& size_V methods_N ._. Works_^ in_P both_& IE_N and_& Firefox_^ ._. So_R ,_, the_D applet_N method_N should_V be_V :_: And_& to_P use_V it_O Javascript-side_A :_:
Should_V have_V checked_V https://developer.mozilla.org/en/LiveConnect_N first_R ._. Clearly_R stated_V there_R that_P arrays_N are_V dodgy_A in_P a_D certain_A LiveConnect_^ version_N ._.
Can_V I_O create_V a_D '_G window_N '_'' object_N for_P javascript_N running_V in_P the_D Java6_N Rhino_^ Script_^ Engine_^
I_O want_V to_P run_V some_D Javascript_^ on_P my_D Java6_N server_N -_: i.e._G using_V the_D javax.script_N API_N ,_, specifically_R the_D Rhino_^ Script_^ Engine_^ ._. (_N Although_P another_D solution_N would_V be_V acceptable_A )_N The_D script_N file_N is_V created_V supported_V by_P a_D third_A party_N ,_, so_P I_^ don't_^ want_V to_P download_V it_O and_& edit_V it_O in_P case_N it_O changes_V over_P time_N ._. The_D script_N directly_R references_N the_D '_G window_N '_G object_N (_N and_& probably_R the_D '_G document_N '_G object_N etc_N ._. )_$ which_D Rhino_N does_V not_R seem_V to_P support_V ._. Can_V I_O do_V this_D ,_, and_& if_P so_R ,_, how_R ?_.
..._: of_P course_N ,_, they_O won't_V do_V a_D lot_N of_P good_A unless_P you_O populate_V them_O with_P the_D properties_N that_P the_D script_N is_V trying_V to_P access_V ._. You_O can't_V just_R populate_V them_O with_P the_D standard_A browser_N APIs_N -_: most_A of_P them_O don't_N make_V sense_N outside_P the_D context_N of_P the_D browser_N ._.
See_^ John_^ Resig's_^ blog_N :_: Bringing_V the_D Browser_N to_P the_D Server_N
That_D looks_V awesome_A !_. I'll_N try_N that_D -_: cheers_N ._.
Can_V Not_R Read_V id_N on_P JSF_^ Components_^
I_O have_V a_D little_A problem_N I_O am_V trying_V to_P use_V MartkItUp_G JQuery_G rich_A text_N editor_N on_P JSF_N textarea_N component_N ._. My_D form_N looks_V like_P this_D :_: The_D problem_N is_V that_P on_P output_N it_O gives_V me_O the_D id_N for_P textarea_N like_P that_P When_R I_O try_V in_P JQuery_N to_P point_V to_P it_O nothing_N happens_V ._. I_O had_V a_D plain_A textarea_N before_P ,_, and_& there_X was_V no_D problem_N ._. Now_R ,_, I_O have_V a_D lot_N of_P them_O ._. How_R do_V I_O point_V to_P id_V in_P JQuery_N ,_, thats_N looks_V like_P comment_N :_: commentBody_^ P.S_^ :_: I_O know_V i_G can_V point_V to_P this_D text_N area_N by_P $('textarea_G ')_G ._. markItUp_G (_G mySettings_G );_G however_R i_G am_R looking_V for_P solution_N to_P point_N to_P specific_A text_N area_N by_P it's_^ ID_^ ._.
try_V this_D :_: this_D will_V select_V text_N area_N having_V ID_N ending_V with_P commentBody_N ._. to_P select_V control_N with_P ID_N starting_V with_P particular_A string_N replace_V $_$ with_P ^_N
Got_V an_D error_N when_R was_V trying_V to_P use_V your_D method_N ._. But_& either_D way_N ,_, thanks_N for_P trying_V to_P help_V
Try_V this_D ,_, $_$ (_$ '_G #comment_N :_: commentBody_G ')_G ,_, for_P JQuery_N version_N 1.1_$ ._. 3_$ or_& greater_A ._.
It's_N worked_V well_R ._. Thanks_N
You_O can_V read_V about_P JSF_N IDs_N here_R ,_, but_& in_P this_D case_N you_O may_V also_R find_V the_D h_N :_: form_V prependId_A attribute_N useful_A ._.
Exemplary_A work_N ._. +1_N
What_D compilers_N target_V JavaScript_^ runtimes_N ?_.
I_O am_V using_V GWT_^ ,_, which_D includes_V a_D Java-to-JavaScript_A compiler_N ._. Before_P this_D project_N ,_, targeting_V the_D JavaScript_^ runtime_N from_P a_D different_A language_N hadn't_N occurred_V to_P me_O ,_, and_& I'm_N enjoying_V the_D GWT_N experience_N ._. A_D quick_A search_N revealed_V Java2Script_N as_P another_D Java-to-JavaScript_^ solution_N ._. Are_V there_X any_D other_A mature_A compilers_N that_D target_V the_D JavaScript_^ runtime_N ?_.
We_O develop_V http://websharper.com_N that_D compiles_V F#_N to_P JavaScript_^ ._.
OpenLaszlo_^ is_V on_P open_A source_N XML_N ->_$ Javascript_^ (_^ technically_R DHTML_^ ,_, also_R can_V compile_V to_P Flash_V )_G compiler_G ._. I've_N played_V with_P it_O a_D little_A bit_N and_& it_O seemed_V interesting_A ,_, although_P have_V never_R used_V it_O seriously_R (_$ bad_A IDE_N support_N when_R I_O tried_V it_O )_^ ._. Objective-j_N is_V a_D similar_A project_N that_D resembles_V objective-c_N ,_, although_P runs_N as_P javascript_N (_$ not_R sure_A if_P it_O compiles_V it_O or_& has_V a_D js_A interpreter_N )_N ._. I_O don't_V know_V much_R about_P it_O ,_, but_& do_V see_V posts_N about_P it_O on_P the_D Ajaxian_N from_P time_N to_P time_N ._.
objective-j_N compiles_V either_& at_P runtime_N or_& ahead_R of_P time_N ._. It's_N mostly_R javascript_V with_P a_D few_A extra_A constructs_N though_R ._.
Objective-j_N is_V interpreted_V (_N by_P a_D javascript_N engine_N )_N ._. It_O looks_V a_D bit_N weird_A for_P my_D tastes_N personally_R ,_, but_& this_D http://280atlas.com_N is_V written_V in_P objective-j_N ,_, and_& it_O looks_V awesome_A ._. Though_^ i_G m_N sure_R a_D similar_A thing_N is_V possible_A in_P GWT_^ ._.
Objective-J_N code_N looks_V ugly_A ._. I_O hate_V Objective-C_N code_N as_R well_R so_P ..._: OpenLaszio_^ looks_V great_A actually_R ,_, I_O might_V even_R try_V it_O some_D time_N ._.
Script_N #_# JSC_^ cappuccino_G (_G sort_N of_P )_N
While_P there_X are_V other_A products_N which_D compile_V to_P javascript_V (_^ noted_V in_P the_D other_A comments_N )_$ ,_, I_O believe_V that_P GWT_^ is_V ,_, by_P far_R ,_, the_D most_R mature_A one_$ out_P there_R ,_, in_P terms_N of_P real-world_A usage_N ._. The_D simple_A fact_N that_P a_D number_N of_P Google's_N core_N applications_N use_V GWT_^ (_^ e.g._^ :_: the_D new_A adwords_N GUI_^ ,_, Google_^ wave_N ,_, etc_G )_G means_V you_O can_V have_V confidence_N the_D product_N is_V going_V to_P be_V maintained_V for_P at_P least_A the_D next_A few_A years_N ,_, it_O isn't_N just_R going_V to_P fade_V away_R anytime_R soon_R ._. Another_D thing_N to_P keep_V in_P mind_N is_V that_P GWT_^ is_V far_R more_A than_P a_D java-to-javascript_A compiler_N ,_, it_O also_R is_V an_D optimizing_V compiler_N ,_, it_O has_V hosted_V mode_N ,_, it_O is_V fully_R interoperable_A with_P native_A javascript_N ,_, it_O does_V image_N bundling_V ,_, it_O does_V code_V spliting_V in_P the_D new_A version_N ,_, etc_N ._.
Google_^ suspended_V Wave_^ development_N less_A than_P 3_$ months_N after_P its_D public_A release_N ,_, so_R in_P retrospect_G I'm_G not_R sure_A that_D was_V the_D best_A example_N of_P GWT's_A anticipated_A longevity_N ._. :-)_N
Parenscript_^ is_V "_`` a_D translator_N from_P a_D small_A Lispy_A language_N to_P JavaScript_^ "_`` ._. It's_N not_R Common_^ Lisp_^ --_: it's_N mostly_R just_R Lisp_^ syntax_N for_P Javascript_^ ,_, though_P for_P simple_A things_N you_O can_V write_V the_D same_A code_N to_P target_V both_D ,_, if_P you're_N careful_A ._. I'm_N not_R sure_A I'd_N call_V it_O "_`` mature_A "_'' ,_, either_R ._.
Pyjamas_^ compiles_V Python_^ to_P JavaScript_^ ._. HotRuby_^ runs_V Ruby_^ source_N code_N under_P JavaScript_^ and_& Flash_^ ._. Orto_^ is_V (_^ was_V ?_. )_$ a_D JVM_N implemented_V in_P JavaScript_^ ._. (_^ Original_^ site_N is_V down_R ;_: link_N is_V to_P a_D blog_N entry_N ._. )_$ The_D ZK_N framework_N ,_, which_D likes_V to_P compare_V themselves_O favorably_R against_P GWT_^ ,_, uses_V Java_^ and_& XML_N to_P generate_V JavaScript_^ ._. (_N They_O claim_V that_P it_O takes_V far_R less_A code_N than_P GWT_^ to_P do_V the_D same_A stuff_N ._. )_$ And_& I_O have_V heard_V it_O well-argued_A that_P jQuery_N is_V a_D separate_A language_N that_D happens_V to_P be_V implemented_V in_P ,_, and_& run_V under_P ,_, JavaScript_^ ._. :-)_N
You_O also_R have_V haXe_N ._. It_O features_V static_A ,_, structural_A ,_, strong_A and_& inferred_V typing_N ;_: algebraic_A data_N types_N ;_: lambda_N expressions_N with_P closure_N support_N ;_: a_D module_N system_N and_& can_V compile_V not_R only_R to_P JavaScript_^ but_& also_R Flash_^ ,_, C++_^ ,_, Neko_^ ,_, PHP_^ ._. Java_^ support_N is_V under_P development_N too_R ._.
Here's_V a_D shameless_A plug_N for_P a_D project_N I_O started_V and_& am_R continuing_V to_P develop_V :_: scxml-js_N ,_, a_D Statecharts-to-JavaScript_A compiler_N
List_N of_P languages_N that_D compile_V to_P JS_N
The_D inventors_N of_P Clojure_G (_G a_D JVM_N based_V Lisp_^ dialect_N )_N launched_V ClojureScript_^ in_P mid-2011_^ ._. ClojureScript_^ compiles_V Clojure_^ source_N code_N into_P JavaScript_^ ,_, making_V use_N of_P the_D Google_^ Closure_^ compiler_N and_& the_D Closure_^ framework_N ._. ClojureScript_N code_N can_V run_V both_& in_P the_D browser_N client_N ,_, or_& on_P node.js_A servers_N ._.
Native_A Javascript_N method_N in_P GWT_N
I_O have_V a_D native_A Javascript_^ method_N in_P one_$ of_P my_D GWT_^ Java_^ classes_N ,_, but_& I'm_N having_V trouble_N calling_V my_D Java_^ methods_N from_P the_D native_A Javascript_^ code_N ._. I_O tried_V to_P follow_V this_D as_R closely_R as_P I_O could_V ,_, but_& I_O can't_V get_V it_O to_P work_V ._. I_O compiled_V it_O and_& ran_V it_O in_P Firefox_^ ,_, and_& the_D error_N console_N said_V "_`` Error_N :_: this.lc_N is_V not_R a_D function_N "_'' ._. I_O tried_V changing_V all_X the_D methods_N to_P public_N ,_, but_& that_P didn't_N seem_V to_P make_V a_D difference_N ._. What_O am_V I_O doing_V wrong_A ?_.
In_P all_X the_D code_N I've_N done_V in_P the_D past_N ,_, I've_N never_R used_V '_'' this_D '_'' to_P identify_V my_D class_N ,_, I_O have_V passed_V the_D class_N in_P ._. Eg_N :_: Change_^ this_D :_: To_P this_D :_:
Perfect_^ !_. This_D makes_V sense_N ,_, but_& I_O wish_V it_O was_V documented_V better_R on_P the_D GWT_N site_N ._.
I_O found_V a_D better_A way_N ._. It's_N similar_A to_P what_O you_O do_V in_P JavaScript_^ ,_, where_R you_O set_V "_`` var_N that_P =_A this_D "_`` ._. Using_V this_D approach_N ,_, you_O don't_V have_V to_P pass_V this_D to_P listenForPostMessage()_N :_:
Javascript_Java_Interaction_N applet_N "_`` Codebase_N "_'' problem_N
I_O saw_V an_D article_N about_P Javascript_Java_Interaction_N today_N at_P :_: ============================================================================================_G ==========================================================================================_G It_O displayed_V the_D applet_N on_P the_D page_N [_^ Javascript_Java_Interaction.html_^ ]_^ ,_, but_& if_P I_N type_N in_P some_D text_N and_& click_V the_D button_N ,_, nothing_N happens_V ,_, the_D problem_N is_V in_P the_D following_A line_N :_: So_P I_O copied_V the_D class_N file_N into_P the_D same_A dir_N as_P the_D html_N files_V [_N C_N :/_G Dir_Fit_G /_: ]_N and_& changed_V the_D above_A line_N to_P :_: now_R it_O works_V ,_, it_O will_V display_V an_D alert_A window_N ._. So_R ,_, my_D question_N is_V why_R it_O didn't_N work_N when_R I_O specified_V the_D codebase_N ?_. According_V to_P Java_^ document_N if_P the_D class_N file_N is_V in_P a_D different_A dir_N ,_, you_O can_V tell_V it_O by_P codebase_N ,_, the_D applet_N will_V show_V up_R but_& if_P you_O type_N in_P some_D text_N and_& click_V the_D button_N ,_, nothing_N will_V happen_V ,_, I've_N tried_V different_A ways_N to_P specify_V the_D code_N base_N :_: Yet_& ,_, none_N of_P them_O works_V ,_, why_R ?_. I_O don't_V want_V the_D class_N file_N to_P be_V in_P the_D same_A dir_N as_P the_D htmls_N ._. What's_V the_D fix_N ?_. Frank_^
It_O might_V have_V something_N to_P do_V with_P the_D changes_N made_V in_P Java_^ 6_$ Update_^ 10_$ ._. After_P the_D release_N my_D applets_N started_V to_P fail_V with_P ClassNotFoundExceptions_N independent_A of_P the_D browser_N -_: strangely_R they_O worked_V with_P 6u7_N before_P that_D ._. First_^ I_^ thought_V about_P a_D messed_V up_R installment_N or_& configuration_N but_& then_R others_N have_V experienced_V the_D same_A thing_N in_P their_D system_N ._. My_D trial-and-error_N came_V up_R with_P the_D very_R same_A result_N as_P your_D observation_N ,_, namely_R if_P I_O specify_V even_R an_D empty_A codebase_N attribute_N ,_, my_D applet_N fails_V ._. Googling_V around_P (_N today_N )_N does_V not_R come_V up_R with_P any_D meaningful_A results_N or_& bug_N reports_N issued_V ._. I_O would_V guess_V the_D rules_N for_P the_D codebase_N attribute_N usage_N changed_V between_P versions_N -_: maybe_R the_D old_A one_$ wasn't_N restrictive_A enough_R or_& wasn't_G conformant_G to_P some_D specification_N ._.
scripting_V in_P java_N -_: javascript_N from_P a_D server-side_A class_N file_N in_P Java_^ 1.5_$
I_O have_V three_$ types_N of_P get_V requests_N that_D are_V delivered_V to_P a_D class_N file_N on_P web_N application_N from_P a_D mobile_A device_N ._. Because_P the_D mobile_A device_N provides_V no_D cookies_N ,_, the_D log_N file_N hit_N only_R has_V If_P I_O can_V instantiate_V javascript_N in_P my_D class_N file_N ,_, and_& generate_V a_D javascript_N function_N call_N to_P urchinTracker()_N from_P inside_P the_D class_N file_N ,_, I_O can_V replace_V that_P useless_A cookieArrayLength=0_N ;_: with_P some_D useful_A data_N urchin_N can_V read_V from_P the_D log_N file_N into_P analytics_N reports_N ._. We_O have_V been_V looking_V at_P scripting_N in_P Java_^ with_P Rhino_N ;_: Safari_^ Bookshelf_^ has_V :_: Scripting_N in_P JavaTM_N :_: Languages_N ,_, Frameworks_N ,_, and_& Patterns_N which_D helped_V us_O immediately_R demo_V that_P we_O can_V run_V javascript_N in_P class_N files_N --_: this_D works_V out-of-the-box_A on_P Java_^ 6_$ ._. Anyone_N know_V any_D resources_N for_P scripting_V with_P Rhino_N on_P Java_^ 1.5_$ or_& 1.4_$ ?_. Alternately_R ,_, any_D suggestions_N for_P running_V javascript_N from_P java_N 1.5_$ would_V be_V appreciated_V ._.
thanks_N for_P the_D resource_N links_N ;_: we_O are_V able_A to_P use_V the_D stripped-down_A Rhino_^ in_P Java_^ 6_$ via_P javax.scripting_N to_P compile_V test.js_G (_G javascript_N )_N to_P class_N file_N and_& call_V tests()_N locally_R but_& have_V not_R been_V successful_A in_P compiling_V the_D __utm.js_N and_& calling_V urchinTracker()_N compiling_V from_P source_N and_& trying_V again_R ,_, but_& at_P the_D moment_N it_O looks_V like_P /_: users_N /_: 58787_$ /_: unknown-google_A may_V be_V right_A in_P comment_N below_P ._.
We_O followed_V Rhino_^ docs_N to_P run_V JavaScript_^ interpreter_N from_P Java_^ 1.4_$ and_& 1.5_$ ._.
See_^ Server-side_^ JavaScript_^ for_P list_N of_P projects_N that_D runs_V JavaScript_^ at_P the_D server-side_N ._. For_P your_D usage_N ,_, using_V Rhino_^ seems_V like_P the_D way_N to_P go_V ._.
[_G I'm_G posting_V in_P an_D answer_N ,_, because_P I_^ don't_^ have_V enough_A points_N to_P post_V a_D comment_N on_P the_D question_N itself_O ._. ]_N Are_V you_O sure_A that_P the_D urchinTracker()_N function_N will_V operate_V outside_N of_P a_D web_N browser_N ?_. Running_V the_D Rhino_^ JavaScript_^ interpreter_N (_N which_D isn't_V too_R difficult_A )_G won't_G be_V enough_R if_P the_D function_N relies_V on_P various_A browser_N objects_N ,_, like_P the_D Document_^ Object_^ Model_^ (_^ DOM_^ )_^ or_& XmlHttpRequest_^ ._. I_O suggest_V that_P you_O at_P least_A scan_V the_D internals_N of_P the_D urchinTracker()_N function_N to_P see_V if_P this_D is_V the_D case_N ._.
not_R sure_A yet_R ,_, but_& was_V unable_A this_D morning_N to_P pass_V values_N via_P urchinTracker()_N through_P javax.scripting_G (_G Java_^ 6_$ test_N environment_N )_N so_P it_O is_V unlikely_A to_P work_V on_P dev_N ._. will_V know_V by_P tomorrow_N ..._:
This_D is_V correct_A ._. __utm.js_N has_V dependancies_N on_P various_A browser_N objects_N ._. Thanks_N !_.
Just_R wanted_V to_P point_V out_R the_D envjs_A project_N :_: "_'' envjs_N is_V a_D pure_A JavaScript_^ browser_N environment_N that_D runs_V in_P Rhino_^ ._. "_`` Blog_^ Posting_^ :_: http://ejohn.org/blog/bringing-the-browser-to-the-server_^ Discussion_^ Group_^ :_: http://groups.google.com/group/envjs_^ Source_^ Repository_^ :_: http://github.com/thatcher/env-js/tree/master_N
Java_^ ScriptEngine_^ :_: using_V value_N on_P Java_^ side_N ?_.
In_P a_D Java_^ program_N I'm_N invoking_V a_D user-defined_A JavaScript_^ program_N :_: Now_R I_O would_V like_V to_P use_V '_G result_N '_'' :_: how_R can_V I_O have_V an_D access_N to_P it_O ?_. Can_V I_O identify_V it_O as_P an_D array_N (_N Can_V I_O iterate_V threw_V its_D members_N )_N ,_, a_D String_^ ,_, an_D Integer_N ,_, etc_N ..._: ?_. Thanks_N EDITED_N :_: I_O just_R know_V that_P my_D user_N gave_V me_O a_D script_N returning_V the_D last_A value_N ._. I_O don't_V know_V anything_N about_P this_D value_N ._. Is_V it_O a_D String_^ ,_, an_D array_N ,_, etc_G .._G ?_. I_O don't_V known_A but_& I_O want_V to_P use_V it_O ._.
This_D link_N may_V be_V helpful_A ._. It_O seems_V that_P the_D best_A you_O can_V do_V is_V to_P rely_V on_P an_D implementation_N specific_A class_N ._.
Except_P perhaps_R for_P simple_A values_N ,_, I_O would_V rather_R let_V the_D scripting_V engine_N coerce_V its_D values_N to_P Java_^ types_N ._. Even_R if_P you_O can't_V edit_V the_D script_N ,_, you_O could_V take_V the_D return_N value_N and_& pass_V it_O through_P your_D own_A generated_V script_N to_P do_V the_D coercion_N ._. This_D assumes_V you_O know_V something_N about_P the_D value_N being_V returned_V ._. EDIT_^ :_: since_P nothing_N is_V known_V about_P the_D return_N value_N ,_, I_O would_V first_R test_V it_O using_V Java_^ (_^ getClass()_^ )_^ to_P see_V if_P it_O was_V one_$ of_P the_D java.lang_N types_N ._. If_P the_D returned_V object_N is_V from_P some_D API_N private_A to_P the_D library_N ,_, I_O would_V introspect_V it_O using_V the_D scripting_V language_N (_N in_P this_D case_N JavaScript_^ )_^ ,_, possibly_R coercing_V it_O to_P a_D Java_^ type_N or_& pushing_V its_D properties_N into_P some_D Java_^ data_N structure_N during_P the_D process_N ._. My_^ JavaScript_^ is_V rusty_A ,_, but_& John_^ Leach's_^ tutorial_N looks_V quite_R good_A :_: JavaScript_^ Introspection_^ ._. (_N You_O may_V be_V able_A to_P use_V Java_^ reflection_N ,_, but_& since_P the_D engine_N implementation_N could_V vary_V between_P Java_^ versions_N /_: JREs_N /_: JavaScript_^ engines_N ,_, I_N wouldn't_N rely_V on_P it_O ._. )_N
Passing_V variable_A name_N into_P GWT's_G JSNI_G
Using_V the_D JavaScript_^ Native_A Interface_^ of_P GWT_^ I_O can_V perform_V the_D following_N :_: Which_D will_V return_V the_D contents_N of_P a_D JavaScript_^ variable_A called_V foo_N ._. How_R can_V I_O expand_V upon_P this_D to_P accept_V the_D variable_A name_N as_P a_D parameter_N ?_. ie_G :_: Simply_R using_V the_D variable_A name_N inside_P the_D native_A code_N like_P one_$ would_V to_P call_V :_: results_V in_P the_D JavaScript_^ hunting_N for_P a_D declaration_N of_P a_D variable_A named_V foo_N and_& not_R one_$ named_V with_P the_D value_N of_P foo_N ._. Thanks_N very_R much_R !_.
Does_V not_R work_V ?_. You_O may_V also_R want_V to_P look_V at_P the_D GWT_^ '_G Dictionary_^ '_G class_N ._. It's_N ideal_A for_P loading_V values_N ,_, i.e._G parameters_N from_P the_D host_N page_N ._.
Brilliant_A !_. I'll_A look_N into_P the_D Dictionary_^ too_R although_P we're_N aiming_V for_P re-usable_A JSP_^ tags_N which_D can_V grab_V particular_A session_N attributes_N and_& dump_V them_O to_P pages_N where_R they're_N needed_V ._. It's_^ not_R perfect_A but_& the_D Dictionary_^ still_R requires_V two_$ things_N to_P think_V about_P and_& the_D tags_N give_V us_O easy_A validation_N against_P a_D TLD_N ._. Thanks_N !_.
Should_V web_N developers_N still_R learn_V JavaScript_^ ?_.
Now_R that_P frameworks_N like_P GWT_^ ,_, Morfik_^ etc_N exist_V which_D compile_V Java_^ client_N side_N code_N into_P major_A JavaScript_^ dialects_N ,_, is_V it_O still_R worth_A learning_V JavaScript_^ ?_.
In_P my_D book_N ,_, yes_! ._. I'm_N a_D strong_A believer_N in_P understanding_V the_D underlying_V technology_N beneath_P whatever_D toolkits_N you're_V using_V ._. Abstractions_N are_V leaky_A -_: you'll_N run_V into_P trouble_N down_P the_D line_N if_P you_O try_V to_P get_V away_R with_P only_R understanding_V a_D high-level_A toolkit_N ,_, and_& not_R the_D underlying_V technology_N ._. Sooner_R or_& later_R you'll_A need_N to_P debug_V your_D project_N at_P the_D JavaScript_^ (_$ or_& whatever_D )_N level_N ._.
Not_R really_R worth_A it's_N own_V answer_N ,_, so_R put_V here_R ._. If_P you_O use_V one_$ of_P the_D Java_^ ->_$ Javascript_^ converters_N ,_, you_O lose_V a_D lot_N of_P javascript_N features_N such_A as_P dynamic_A typing_N ,_, and_& the_D ability_N to_P use_V functions_N as_P proper_A objects_N ._. I_O don't_V really_R see_V why_R people_N look_V at_P javascript_N as_P a_D low_A level_N language_N ._. Combined_^ with_P frameworks_N (_N written_V in_P javascript_G )_G such_A as_P jQuery_N ,_, it's_V a_D easy_A to_P use_V and_& powerful_A language_N ._.
@Macha_N :_: Well_^ said_V ._. JS_N in_G it's_G own_A right_N is_V extremely_R powerful_A (_N and_& very_R different_A from_P Java_^ )_^ ._. Why_R cover_V it_O up_R with_P abstractions_N ?_.
Agreed_V ._. Using_V stuff_N like_P Gwt_N without_P knowing_V JS_N is_V like_P using_V some_D database_N tool_N without_P knowing_V SQL_^ ._. While_P that_D may_V work_V ,_, you're_N going_V to_P get_V better_A results_N if_P you_O actually_R know_V what's_N going_V on_R ._.
Understanding_V the_D technology_N behind_P your_D framework_N reduces_V the_D time_N spending_N on_P debugging_V the_D things_N you_O do_V with_P your_D framework_N ._. so_R in_P my_D opinion_N it's_N always_R good_A to_P know_V whats_N going_V on_R behind_P the_D scene_N ._.
Yes_R ,_, ..._: and_& I_O speak_V with_P experience_N :_: I've_N never_R learned_V javascript_N and_& only_R used_A parts_N of_P it_O ,_, when_R I_O encountered_V it_O in_P google_N searches_N for_P questions_N ._. Now_R that_D I'm_N building_V a_D Web_N application_N ,_, I_O notice_V that_P not_R all_D abstractions_N away_R from_P javascript_N have_V the_D desired_V functionality_N ,_, and_& I_O need_V to_P go_V into_P javascript_N to_P solve_V it_O ._. I_O notice_V that_P I_O miss_V the_D fundamental_A knowledge_N I_O have_V with_P other_A languages_N ,_, just_R like_P I_O miss_V the_D '_G javascript_N programming_N language_N '_'' book_N (_G I'm_G not_R sure_A it_O exists_V but_& I_O have_V similar_A copies_N for_P C_N ,_, C++_^ and_& Java_^ )_^ ._. So_P today_N I_O ordered_V Javascript_^ :_: The_D good_A parts_N and_& I_O will_V learn_V it_O ..._:
I_O would_V suggest_V cross-referencing_V the_D two_$ ;_: for_P the_D language_N features_V that_P Crockford_^ leaves_V out_P of_P The_D Good_^ Parts_^ ,_, I_^ wouldn't_^ spend_V too_R much_A time_N studying_V them_O while_P reading_V The_D Definitive_A Guide_^ ._. You_O may_V eventually_R need_V to_P understand_V those_D features_N ,_, but_& part_N of_P Crockford's_N point_N is_V that_P a_D bunch_N of_P things_N in_P the_D Javascript_^ language_N were_V poorly_R designed_V and_& really_R shouldn't_N be_V there_R ._. I've_N found_V that_P ,_, for_P the_D most_A part_N ,_, I've_N agreed_V with_P him_O ._. (_N I_O also_R learned_V a_D fair_A amount_N from_P him_O ._. )_N
Dreas_N :_: Thanks_N for_P the_D tip_N ,_, I_O will_V get_V the_D book_N soon_R so_P I_O will_V see_V if_P I_O still_R miss_V some_D fundamentals_N ._. Note_V that_D I've_N learned_V already_R a_D lot_N of_P different_A languages_N ,_, so_P I_O will_V probably_R understand_V more_A of_P it_O that_P a_D full_A beginner_N ._.
I_O think_V the_D reality_N of_P browser_N bugs_N will_V make_V being_V able_A to_P diagnose_V and_& understand_V the_D generated_V JavaScript_^ necessary_A for_P a_D long_A time_N ._. I_O worked_V with_P a_D Spreadsheet_N company_N for_P OS_^ /_: 2_$ ,_, and_& they_O had_V to_P read_V the_D generated_V assembler_N from_P the_D C++_^ code_N because_P the_D IBM_^ compiler_N would_V generate_V buggy_N machine_N code_N at_P times_N ._. So_R while_P they_O may_V not_R have_V known_V enough_A Assembler_^ to_P write_V a_D whole_A project_N in_P it_O ,_, they_O certainly_R had_V to_P know_V enough_R to_P track_V down_R problems_N ._. That_P being_V said_V ,_, there_X are_V also_R many_A web_N frameworks_N that_D require_V you_O to_P code_V your_D own_A javascript_N ,_, and_& a_D given_V toolkit_N won't_N necessarily_R do_V everything_N that_P you_O need_V to_P do_V without_P directly_R writing_V some_D javascript_N ._. You_O can_V choose_V frameworks_N that_D avoid_V it_O if_P you_O prefer_V ,_, but_& it_O isn't_N at_P all_D obvious_A that_P ,_, unlike_P say_^ Assembler_^ for_P application_N development_N ,_, the_D Web_N development_N community_N has_V decided_V to_P abstract_A away_R any_D involvement_N with_P it_O ._. You_O may_V well_R end_V up_R on_P projects_N that_D need_V it_O ._.
ABSOLUTELY_R ._. In_P my_D opinion_N ,_, abstraction_N is_V important_A ,_, but_& knowing_V how_R that_D abstraction_N works_V is_V equally_R as_R important_A ._. I've_V seen_V developers_N who_O live_V and_& die_V by_P their_D frameworks_N (_$ javascript_N :_: jquery_N ,_, yui_N ,_, etc_N ..._: or_& php_N :_: zend_N ,_, cake_N ,_, etc_N ..._: )_N ,_, but_& have_V no_D clue_N how_R to_P do_V anything_N productive_A without_P them_O ._. Who_O would_V you_O rather_R be_V (_$ or_& hire_V )_^ ?_. The_D guy_N who_O knows_V how_R everything_N works_V ,_, but_& improves_V his_D productivity_N by_P using_V frameworks_N and_& libraries_N ..._: or_& the_D guy_N who_O uses_V these_D resources_N with_P no_D idea_N how_R they_O actually_R work_V ?_.
Actually_R ,_, drawing_V a_D parallel_N to_P assembly_N language_N is_V a_D bit_N missing_V the_D point_N ._. Assembly_^ was_V platform_N specific_A and_& the_D move_N to_P C_N enabled_V a_D certain_A level_N of_P platform_N agnosticism_N ,_, allowing_V the_D developer_N to_P be_V more_R productive_A on_P multiple_A platforms_N ._. Hence_R ,_, there_X was_V a_D real_A productivity_N effect_N ._. Learning_^ all_D your_D rich_A web_N chops_N on_P something_N like_P GWT_^ is_V more_R limiting_V ._. It_O is_V ,_, after_P all_D ,_, based_V on_P Java_^ ,_, and_& the_D web_N is_V way_R larger_A in_P scope_N than_P just_R Java_^ ._. You'd_N be_V seriously_R limiting_V yourself_O if_P all_D you_O know_V is_V GWT_^ but_& not_R the_D inner_A workings_N of_P the_D generated_V Javascript_^ (_G Can't_G comment_N on_P Morfik_^ as_P I_^ don't_^ know_V it_O )_^ ._. However_R ,_, employing_V something_N like_P JQuery_N in_P order_N to_P be_V more_R productive_A when_R coding_V Javascript_^ is_V much_R better_A ._. JQuery_N can_V be_V used_V on_P any_D browser_N running_V on_P any_D OS_^ ,_, so_P it_O doesn't_N limit_N you_O ._.
I'd_N say_V yes_R ._. I've_N met_V people_N who_O claimed_V to_P know_V javascript_N ,_, when_R all_D they_O could_V do_V is_V do_V a_D couple_N of_P jquery_N function_N calls_V ._. Javascript_^ (_^ ECMAscript_^ )_^ is_V a_D beatiful_A little_A (_N ok_N ,_, not_R so_R little_A )_A language_N ._. Abstracting_V a_D bit_N from_P javascript_N -_: define_V "_`` worth_A learning_N "_'' ._. This_D kind_N of_P thinking_N was_V always_R a_D conundrum_N to_P me_O ._. Are_V you_O ,_, per_P chance_N ,_, afraid_A of_P learning_V something_N new_A ?_. I_O guess_V ,_, this_D kind_N of_P thinking_N is_V what_O really_R separates_V a_D coder_N from_P a_D programmer_N ._.
A_D web_N developer_N who_O does_V not_R know_V Javascript_^ is_V like_P an_D auto_N mechanic_N who_O does_V not_R know_V how_R to_P change_V a_D tire_N ._.
JavaScript_^ is_V the_D core_N of_P interactive_A client-side_A development_N ._. It_O is_V absolutely_R essential_A ._. After_P you_O know_V JavaScript_^ you_O might_V decide_V to_P try_V out_R other_A things_N that_D compile_V to_P JavaScript_^ if_P you_O find_V them_O easier_A ._. Also_R if_P you_O want_V to_P work_V professional_A in_P web_N development_N for_P some_D company_N then_R you_O are_V going_V to_P have_V to_P know_V JavaScript_^ ._. Besides_R ,_, JavaScript_^ is_V getting_V more_A and_& more_R popular_A as_P the_D execution_N of_P the_D language_N in_P the_D browser_N gets_V faster_A and_& as_P it_O becomes_V more_R popular_A in_P Server-side_A development_N as_R well_R ._.
Accessing_V the_D JavaScript_^ Table_^ DOM_^ in_P a_D Java_^ Servlet_^
HTML_^ tables_N can_V be_V interpreted_V by_P Excel_^ ._. That_D said_V ,_, all_D you_O need_V is_V the_D markup_N and_& a_D content-type_N of_P "_`` application_N /_: ms-excel_A "_''
Apparently_R you_O are_V generating_V the_D table_N in_P the_D JSP_^ so_R why_R don't_N you_O just_R output_N the_D data_N you_O are_V creating_V the_D Table_^ from_P ?_. For_P the_D actual_A JavaScript_^ implementation_N just_R take_V a_D look_N at_P Ajax_^ functionality_N and_& Dom_^ Manipulation_^ with_P jQuery_^ (_^ http://jquery.com_^ )_^
I_O don't_V understand_V ,_, is_V there_R a_D question_N in_P here_R ?_.
POST_N the_D table_N to_P the_D server_N ._. If_P you_O want_V to_P access_V the_D DOM_^ like_P you_O would_V in_P JavaScript_^ ,_, you_O are_V going_V to_P need_V Rhino_^ ._. But_& I_O recommend_V just_R sticking_V with_P something_N easier_A to_P drop_V in_R like_P JDOM_^ ._. Then_R echo_V back_R the_D table_N with_P the_D content-type_N modified_V in_P the_D header_N to_P be_V "_`` application_N /_: ms-excel_N "_'' ._.
I'd_N serialize_V the_D data_N from_P the_D cells_N into_P a_D simple_A JSON_N object_N ,_, then_R use_V one_$ of_P the_D many_A JSON_^ libraries_N available_A on_P the_D Java-side_N to_P convert_V it_O back_R into_P a_D usable_A object_N ._. Something_N like_P this_D :_: This_D uses_V the_D Public_^ Domain_N JSON.stringify()_N routine_A ,_, available_A directly_R here_R ._. You_O can_V now_R take_V this_D string_N ,_, pass_V it_O to_P a_D server_N ,_, and_& re-hydrate_V the_D object_N in_P Java-land_N ._. You'll_N get_V a_D multidimensional_A array_N of_P values_N corresponding_V directly_R to_P the_D contents_N of_P the_D table_N ._. NOTE_V :_: This_D retrieves_V the_D entire_A table_N ._. If_P you_O just_R want_V to_P get_V the_D table's_N body_N ,_, you'll_N have_V to_P modify_V the_D above_A code_N to_P iterate_V over_P the_D tBodies_N ,_, like_P this_D :_:
Issue_N with_P IE_N security_N on_P page_N opened_V from_P javascript_N
I_O have_V a_D Java_^ web_N application_N running_V in_P JBOSS_^ with_P Tomcat_^ with_P two_$ web_N applications_N (_$ contexts_N )_$ running_V on_P it_O ._. A_D button_N press_N on_P one_$ of_P the_D applications_N opens_V runs_V a_D javascript_N command_N to_P open_V a_D new_A window_N with_P a_D page_N from_P the_D other_A ._. The_D problem_N I_O seem_V to_P be_V having_V is_V that_P this_D raises_V a_D security_N alert_N in_P IE_N ._. with_P the_D following_A message_N :_: I_O can't_V really_R ask_V my_D customer_N to_P add_V an_D exception_N to_P "_`` http://_N "_'' what_O are_V the_D likely_A causes_N for_P it_O not_R picking_V up_R the_D site_N ?_. The_D browser_N is_V correctly_R pointed_V at_P the_D full_A url_N for_P the_D page_N (_G Ie_G www.something.net:8080/blah/somepage.jsp_G )_G the_D browser_N is_V IE7_N with_P enhanced_V security_N running_V on_P windows_N 2003_$ ._.
"_`` I_O can't_V really_R ask_V my_D customer_N to_P add_V an_D exception_N to_P "_`` http://_G ""_G -_: you_O can_V ask_V ,_, but_& they_O won't_V be_V able_A to_P do_V it_O ._. IE_A doesn't_N let_V you_O enter_V exceptions_N that_D are_V that_P wide-ranging_A ._.
Do_V the_D two_$ applications_N have_V different_A domains_N ?_. IE_N is_V preventing_V the_D cross-site_A scripting_N ._. Can_V you_O not_R just_R have_V a_D link_N to_P the_D other_A site_N ?_. EDIT_^ :_: If_P this_D is_V on_P Windows_^ Server_N 2003_$ ,_, then_R the_D only_A way_N that_P I've_N managed_V to_P get_V around_P it_O is_V to_P disable_V to_P enhanced_V browser_N security_N ._. If_P this_D is_V the_D case_N ,_, then_R you_O shouldn't_V really_R be_V browsing_V from_P a_D server_N in_P the_D first_A place_N ._. Edit2:I'm_N guessing_V that_P it_O is_V the_D enhanced_V browser_N security_N that_D is_V doing_V this_D ._. Check_V out_R this_D link_N :_: http://support.microsoft.com/kb/815141_N on_P info_N about_P it_O ._. Your_D choices_N are_V to_P either_& to_P disable_V it_O ,_, add_V an_D exception_N for_P that_D site_N ,_, or_& use_V another_D browser_N ._.
No_D they_O both_D have_V the_D same_A domain_N one_$ is_V www.example.com/app1/page.jsp_^ the_D other_A is_V www.example.com/app2/anotherpage.jsp_N
see_V edit2_N in_P answer_N
My_D issue_N is_V that_P there_X is_V no_D "_`` site_N "_'' to_P add_V as_P an_D exception_N ._. It's_N complaining_V about_P "_`` http://_N "_'' not_R another_D website_N ._.
Can_V you_O post_V the_D code_N ?_.
Unfortunately_R I_O can't_V post_P the_D source_N A_N :_: Because_P of_P an_D NDA_N B_N :_: The_D Javaprojects_^ are_V Huge_A The_D javascript_N that_P loads_N the_D page_N is_V just_R window.open_G (_G "_`` URL_N ")_N ;_: nothing_N special_A
Thats_N irritating_V I_O just_R noticed_V that_P SO_^ had_V parsed_V "_`` h-t-t-p_N "_'' as_P a_D link_N ..._:
IE_A Enhanced_V Security_N Configuration_N is_V deliberately_R designed_V to_P prevent_V general_A purpose_N browsing_V from_P servers_N ._. Folks_N who_O want_V to_P do_V workstation-style_A browsing_N and_& just_R happen_V to_P be_V on_P a_D server_N SKU_^ should_V disable_V ESC_^ ._. What's_V the_D exactly_R line_N of_P code_N ?_. window.open_G (_G "_`` http://fullURL_N "_'' ,_, etc_G )_G ,_, or_& something_N like_P var_A v=_N window.open_N (_N "_'' about_P :b_G lank_G ")_N ;_: v.location.href_G =etc_G ?_.
it's_G window.open_G (_G "_`` path_N ")_N ;_: If_P thats_V the_D case_N then_R I_O needn't_V worry_N about_P it_O though_P I_O was_V just_R testing_V that_P an_D install_V had_V worked_V by_P running_V it_O locally_R ._.
You_O need_V to_P uninstall_V "_`` Explorer_^ Enhanced_V Security_N "_'' ,_, which_D is_V on_P by_P default_N in_P Windows_^ Servers_^ ,_, before_P IE_N will_V act_V like_P a_D normal_A browser_N ._. :)_G Workstations_G shouldn't_G get_V this_D problem_N ._.
Gantt_^ Chart_^ -_: JavaScript_N /_: JSP_^ /_: Java_^ /_: Groovy_A /_: Grails_N
I'm_N looking_V to_P add_V the_D ability_N to_P create_V a_D gantt_N chart_N to_P my_D web_N application_N ._. Currently_^ my_D application_N is_V Grails_^ based_V running_V on_P Tomcat_^ ._. Research_^ around_P SO_^ seems_V to_P indicate_V that_P JFreeChart_^ (_^ http://www.jfree.org/jfreechart_^ )_^ and_& Google_^ Charts_^ both_D might_V provide_V me_O with_P the_D ability_N to_P create_V charts_N that_P I_O could_V mold_N into_P what_O I_O need_V ._. Before_P I_O went_V down_P that_D route_N ,_, though_R ,_, I_O wanted_V to_P see_V if_P there_X was_V something_N that_D is_V more_R specifically_R tailored_V to_P project_V management_N type_N charts_N ._. [_^ Edit_^ :_: I_O am_V open_A to_P using_V JavaScript_^ modules_N as_R well_R ]_$
If_P you_O are_V not_R averse_A to_P Javascript_^ ,_, you_O could_V take_V a_D look_N at_P http://code.google.com/p/jsgantt_N /_:
Wow_! ._. That's_V pretty_R slick_A ._. I'm_N definitely_R going_V to_P consider_V that_D ._.
try_N :_: http://www.fusioncharts.com/free_N it_O is_V free_A (_N and_& you_O can_V get_V commercial_A one_$ )_$ it_O is_V flash_N based_A .._N you_O can_V customized_V it_O from_P your_D gsp_N ._.
Have_V a_D look_N at_P http://www.bryntum.com/products/gantt_N ._. 100%_$ JavaScript_^ based_V on_P ExtJS_N ,_, not_R free_A though_P ._. DISCLAIMER_N :_: I_O wrote_V it_O ._.
Unkown_A error_N when_R calling_V Java_^ applet_N from_P JavaScript_^
Here's_V the_D JavaScript_^ (_^ on_P an_D aspx_A page_N ):_G pdfXML_G is_V got_V from_P pdfData_N which_D is_V a_D hidden_A field_N on_P the_D page_N containing_V the_D XML_N that_D contains_V base64_R encoded_V pdf_N data_N which_D is_V passed_V to_P the_D java_N applet_N ._. All_X the_D other_A values_N being_V passed_V have_V within_P range_N sensible_A values_N ._. The_D XML_N is_V like_P this_D The_D contents_N of_P the_D element_N PDF_N is_V a_D lot_N bigger_A than_P displayed_V here_R The_D signature_N of_P the_D Java_^ method_N is_V :_: It_O seems_V that_P when_R the_D size_N of_P the_D PDF_N data_N gets_V large_A the_D applet_N fails_V to_P be_V called_V and_& the_D error_N '_G Unknown_A Error_N '_'' is_V thrown_V in_P the_D JS_^ ._. The_D PDF_N doc_V the_D data_N of_P which_D is_V producing_V this_D error_N is_V about_P 4Mb_N in_P size_N ._. Many_A thanks_N in_P advance_N for_P any_D help_N ._.
Does_V the_D WriteDocument_N method_N exit_N successfully_R ?_. It_O might_V be_V worth_A adding_V a_D try_N /_: catch_V inside_R if_P it's_N not_R possible_A to_P tell_V ._.
Since_P QA_^ saw_V this_D error_N I've_N stuck_V some_D logging_V in_P right_N at_P the_D beginning_N of_P the_D WriteDocument_N function_N (_G it's_G a_D signed_A trusted_V app_N so_P I_O can_V write_V to_P a_D log_N file_N in_P the_D user's_A home_N directory_N )_N and_& that_P doesn't_N happen_V ._. I'm_N beginning_V to_P suspect_V that_P the_D failure_N is_V happening_V at_P the_D method_N invocation_N ._. I_O just_R don't_N know_V why_R ?_. I've_N added_V some_D further_A clarification_N to_P the_D question_N ._.
Does_V your_D applet_N tag_N contain_V mayscript=_N "_`` mayscript_N "_'' ?_.
Also_R you_O could_V try_V to_P get_V the_D form_N field_N value_N from_P within_P the_D applet_N and_& not_R pass_V it_O in_R as_P parameter_N ?_.
No_D it_O doesn't_G ._. I_O wasn't_V aware_A of_P that_D attribute_N and_& it's_N usage_N ._. I_O wasn't_V aware_A the_D Java_^ applet_N could_V access_V form_N elements_N directly_R ._. That_D might_V be_V something_N to_P try_V ._. I'm_N still_R a_D little_R concerned_A that_P I_O don't_V know_V why_R this_D is_V happening_V ._.
Thanks_N for_P responding_V chaps_N but_& I've_N sorted_V the_D problem_N ._. How_R ?_. I_O took_V JRE_N 1.6_$ update_V 12_$ off_A and_& stuck_A update_V 7_$ (_N which_D is_V the_D version_N we_O reccomend_V to_P those_D who_O use_V our_D website_N )_N on_P my_D machine_N ._. Why_R update_V 12_$ stopped_V working_V I_^ don't_^ know_V ._. Why_R update_V 7_$ is_V stable_A I_N don't_N know_V ._. [_$ sigh_N ]_G It's_G things_N like_P this_D that_D make_V me_O glad_A I_N work_N mostly_R with_P a_D '_G long_A time_N between_P releases_N '_G framework_N like_P ._. net_N ._.
Which_D serverside_N Java_^ technology_N to_P use_V with_P ExtJS_N
We_O are_V plannnig_A to_P upgrade_V the_D UI_^ framework_N for_P our_D 6-8_$ year_N old_A application_N written_V using_V Struts_^ /_: JSP_^ /_: EJB_N to_P ExtJS_N ._. Just_R curious_A as_P to_P what_O is_V the_D most_R popular_A Java_^ technology_N on_P the_D server_N people_N have_V been_V using_V ._. We_O were_V looking_V into_P several_A alternatives_N like_P DWR_^ RestEasy_^ Restlet_^ Struts-Json_^ We_O are_V diving_A more_R towards_P using_V DWR_N but_& just_R wanted_V to_P know_V if_P the_D programming_N community_N has_V some_D food_N for_P thought_N on_P this_D ._. For_P backward_R compatiblity_N reasons_V the_D migration_N will_V happen_V incrementally_R and_& during_P that_D period_N we_O will_V try_V to_P make_V ExtJS_G coexist_G with_P the_D old_A Web1.0_N style_N pages_N ._. We_O are_V not_R changing_V anything_N on_P the_D business_N tier_N but_& just_R the_D web_N tier_N will_V change_V from_P JSP_^ to_P ExtJs_V pages_N ._.
If_P you're_N going_V to_P use_V ExtJS_N anyway_R ,_, have_V you_O considered_V using_V ExtGWT_N instead_R ?_. That'll_N give_V you_O much_R better_A Java_^ integration_N ._.
but_& that_D would_V be_V at_P expense_N of_P loosing_V control_N over_P generated_V content_N ._. What_O if_P your_D website_N is_V not_R just_R EXT_N ,_, but_& has_V twitter_V Bootstrap_^ frontend_N as_R well_R ?_.
ExtGWT_N if_P you_O are_V willing_A to_P go_V with_P GWT_N ,_, or_& I_O would_V recommend_V Metro_^ (_^ or_& any_D Java_^ RESTful_N implementation_N -_: JSR_N 311_$ )_N +_& ExtJS_N ,_, it_O works_V great_A ._.
We've_N been_V using_V Restlet_^ with_P good_A success_N ,_, and_& it_O can_V be_V used_V on_P applications_N that_D aren't_V 100%_$ RESTful_A (_G we've_G got_V areas_N where_R we're_N a_D bit_N cavalier_A )_N ._. It's_V not_R a_D full_A solution_N ,_, but_& it_O comes_V with_P decent_A integrations_N to_P other_A technologies_N ._. For_P instance_N we_O generate_V our_D XHTML_N /_: CSS_N pages_N using_V Restlet's_N support_N for_P the_D Apache_^ FreeMarker_^ template_N generator_N ._. Our_D generated_V pages_N happen_V use_N jQuery_N ,_, and_& ExtJS_N ought_V to_P work_V equally_R well_R ._. Restlet_^ has_V a_D GWT_^ module_N too_R ._.
Also_R have_V a_D look_N at_P Jersey_^ ._. It's_V a_D very_R useful_A implementation_N of_P JAX-RS_G (_G JSR_N 311_$ )_N that_D is_V easy_A to_P integrate_V into_P an_D existing_V project_N like_P yours_D ._. If_P I_O were_V you_O I'd_R create_V a_D separate_A package_N (_$ or_& even_R EAR_N /_: WAR_N )_N with_P classes_N that_D just_R talked_V to_P your_D existing_V EJBs_N and_& were_V exposed_V as_P REST_N services_N that_P ExtJS_N can_V communicate_V with_P ._.
I_O wonder_V ,_, how_R would_V you_O serve_V non_A REST_N content_N through_P Jersey_^ e.g._^ templated_V htmls_N and_& other_A stuff_N ._. I_O mean_V something_N similar_A to_P what_O @Jim_N ferrans_N did_V with_P RestLet_^ ._.
You_O could_V use_V it_O with_P a_D templating_V library_N like_P Mustache_G (_G http://mustache.github.com/)_N
I've_N been_V using_V for_P similiar_A project_N jabsorb_N ,_, which_D is_V very_R similiar_A to_P DWR_^ ,_, but_& conforms_V to_P JSON-RPC_N ._.
You_O might_V want_V to_P check_V out_R Myna_^ (_^ http://mynajs.org_^ )_^ ._. This_D is_V a_D Server-Side_^ JavaScript_^ application_N platform_N that_D is_V deployed_V as_P a_D J2EE_N war_N file_N ._. Being_V server-side_A JavaScript_^ it_O integrates_V well_R with_P Ext_N ._. In_P fact_N ,_, all_X the_D internal_A management_N UI_N is_V written_V in_P Ext_^ ._. Myna_^ has_V several_A features_N you_O may_V find_V useful_A :_: Web-based_A adminstrator_N application_N ._. No_D need_N to_P edit_V XML_N files_V Web-based_A Database_N adminstrator_N ._. Can_V run_V queries_N ,_, create_V /_: edit_N /_: drop_N tables_N ,_, and_& generate_V Myna_N and_& SQL_N code_N from_P GUI_^ Centralized_^ Datasource_^ management_N and_& pooling_V DB_N connections_N A_D Web_N Service_N class_N that_D supports_V SOAP_N ,_, XML-RPC_N ,_, JSON-RPC_N ,_, and_& MYNA-JSON_N with_P Ext.Direct_N coming_V soon_R !_. Support_N for_P handling_V PUT_^ ,_, POST_^ ,_, GET_V ,_, and_& DELETE_V HTTP_N requests_N Support_N for_P loading_V POJO's_N in_P your_D JavaScript_^ code_N (_^ Via_^ Rhino_^ )_^ Runtime_^ Object_^ Relatinal_^ Mapping_N ._. No_D need_N to_P edit_V XML_N files_N or_& recompile_N classes_N when_R the_D database_N tables_N change_V Javascript_^ preprocessor_N supports_V multi-line_A SQL_N queries_N with_P implicit_A prepared_A statements_N and_& typed_V parameters_N Queries_N support_V paging_N and_& returning_V total_A rows_N ,_, which_D works_V well_R with_P Ext's_N grids_N and_& PagingToolbar_N Full_A Disclosure_N :_: I'm_N the_D primary_A developer_N for_P Myna_^
My_D team_N also_R was_V using_V using_V Struts_^ in_P the_D past_N ._. We_O have_V moved_V forward_R and_& are_V using_V DWR_^ ,_, and_& we_O love_V it_O ._. Our_D experience_N with_P DWR_N and_& Ext_N has_V been_V great_A ._. So_R much_A boiler_N plate_N code_N ,_, both_D with_P DWR_N on_P the_D Java_^ end_N ,_, and_& Ext_N on_P the_D JavaScript_^ end_N ,_, has_V been_V reduced_V ._. There_X is_V also_R a_D ExtJsWithDwr_^ project_N to_P help_V with_P integrating_V the_D two_$ :_: http://github.com/BigLep/ExtJsWithDwr_N ._.
Regexp_N to_P match_V Javascript_^ string_N literals_N with_P a_D specific_A keyword_N using_V Java_^
After_P much_A revision_N (_N see_V edit_N history_N ,_, viewers_N at_P home_N :)_N ,_, I_O believe_V this_D is_V my_D final_A answer_N :_:
It_O does_V when_R I_O test_V it_O ..._: test_N case_N 3_$ matches_N properly_R as_P 2_$ string_N literals_N ._. Here_R is_V where_R the_D original_A regex_N came_V from_P http://blog.stevenlevithan.com/archives/match-quoted-string_N
Oops_! ,_, I_O see_V ._. Yeah_! ,_, it's_N relying_V on_P the_D non-greedy_A behavior_N for_P that_D ,_, which_D you_O can't_V use_V the_D same_A way_N because_P you're_N anchoring_V to_P a_D keyword_N ._. Editing_N ..._:
That_D should_V work_V but_& the_D problem_N in_P my_D case_N would_V be_V false-positives_N ._. The_D probability_N of_P a_D string_N literal_A having_V the_D special_A keyword_N is_V about_P 1%_$ ._. And_& I_O have_V to_P process_V a_D lot_N of_P files_N with_P hundreds_N of_P lines_N every_D time_N ._. If_P no_D one_N can_V come_V up_R with_P a_D way_N to_P pre-screen_V the_D literals_N for_P the_D special_A keyword_N before_P processing_V them_O ,_, I'll_N go_V with_P your_D solution_N ._.
Maybe_R further_A developments_N will_V help_V ..._:
It_O seems_V to_P match_V a_D lot_N more_A than_P needed_V ._. In_P my_D test_N case_N chunk_N above_P ,_, it_O matched_V :_: "_`` test_N "_'' ;_: var_N v2_N =_A "_`` testkeyword_N "_'' ;_: var_N v3_N =_A "_`` test_N "_'' ;_: var_N v4_N =_A "_`` testkeyword_N "_'' ;_:
Tim's_A modification_N of_P your_D Regexp_N above_P works_N correctly_R ._.
Cool_A ._. Glad_A to_P have_V helped_V ,_, anyhow_R ._.
How_R about_R this_D modification_N :_:
Perfect_^ !_. Works_^ as_P needed_V !_.
You_O need_V to_P write_V two_$ patterns_N for_P either_& single_A or_& double_A quoted_V strings_N ,_, as_P there_X is_V no_D way_N to_P make_V the_D regex_N remember_V which_D opened_V the_D string_N ._. Then_R you_O can_V or_& them_O together_R with_P |_N ._.
Consider_V using_V code_N from_P Rhino_^ --_: JS_^ in_P Java_^ --_: to_P get_V the_D real_A String_^ literals_N ._. Or_& ,_, if_P you_O want_V to_P use_V regex_N ,_, consider_V one_O find_V for_P the_D whole_A literal_A ,_, then_R a_D nested_A test_N if_P the_D literal_A contains_V '_G keyword_N '_'' ._. I_O think_V Tim's_N construction_N works_V ,_, but_& I_O wouldn't_V bet_R on_P it_O in_P all_D situations_N ,_, and_& the_D regex_N would_V have_V to_P get_V insanely_R unwieldy_A if_P it_O had_V to_P deal_V with_P literals_N that_P don't_N want_V to_P be_V found_V (_R as_P if_P trying_V to_P sneak_V by_P your_D testing_N )_N ._. For_P example_N :_: Separate_A from_P any_D solution_N ,_, my_D secret_A weapon_N for_P interactively_R working_V out_R regexes_N is_V a_D tool_N I_O made_V called_V Regex_^ Powertoy_^ ,_, which_D unlike_P many_A such_A utilities_N runs_V in_P any_D browser_N with_P Java_^ applet_N support_N ._.
The_D test_N case_N you_O mentioned_V does_V not_R apply_V to_P my_D situation_N ._. I'm_N guaranteed_V that_P '_G keyword_N '_'' will_V appear_V just_R like_P that_D ,_, in_P ASCII_^ ._. Doing_V two_$ tests_N (_$ first_A test_N for_P string_N literal_A ,_, then_R test_N for_P presence_N of_P keyword_G )_G will_V produce_V a_D lot_N of_P false-positives_N in_P my_D case_N because_P probability_N of_P a_D literal_A having_V a_D keyword_N is_V about_P 1%_$ ._.
Interesting_A observation_N ._. Do_V you_O happen_V to_P have_V a_D test_N case_N that_D will_V break_V Tim's_A solution_N ?_. It_O seems_V to_P be_V holding_V up_P to_P all_D of_P my_D test_N cases_N ._.
Hooking_V a_D GWT_^ event_N onto_P an_D element_N in_P an_D external_A iframe_N
I_O am_V writing_V a_D GWT_N app_N that_D involves_V interacting_V with_P an_D external_A document_N in_P an_D iframe_N ._. As_P a_D proof_N of_P concept_N ,_, I_O am_V trying_V to_P attach_V a_D click_V handler_N to_P a_D button_N ._. The_D following_N works_V in_P javascript_N Trying_V to_P do_V the_D equivalent_N in_P GWT_^ ,_, I_O did_V the_D following_N :_: The_D following_N is_V the_D ElementWrapper_^ class_N :_: The_D code_N to_P find_V the_D button_N works_V fine_N but_& the_D actual_A click_V event_N handler_N is_V not_R getting_V invoked_V ._. Has_V anybody_N had_V a_D similar_A issue_N before_P ,_, and_& how_R did_V you_O resolve_V it_O ?_. Thanks_N in_P advance_N ,_, Tin_N
You_O could_V use_V JSNI_^ to_P reuse_V your_D JavaScript_^ piece_N of_P code_N ._. Your_D javascript_N code_N would_V call_V a_D gwt_N method_N on_P an_D object_N that_D would_V throw_V it_O on_P behalf_N of_P the_D button_N in_P the_D iframe_N ._. As_P to_P why_R GWT_^ code_N does_V not_R work_V --_: I_O guess_V that_D is_V because_P they_O use_V some_D layer_N on_P top_N of_P regular_A browser_N events_N that_D probably_R cannot_V span_N more_A than_P 1_$ frame_N ._. That's_V just_R a_D guess_N though_P ._. You_O could_V file_V this_D as_P a_D feature_N /_: bug_N request_N agains_N GWT_^ team_N ._. If_P I_O am_V right_R your_D code_N looks_V just_R fine_A ._.
Cool_A ,_, thanks_N for_P the_D reply_N ._. I_O guess_V I'll_N explore_V the_D JSNI_^ path_N ,_, though_P I_O want_V to_P stay_V away_R from_P writing_V custom_N javascript_N as_R much_A as_P possible_A ._.
After_P researching_V this_D further_R ,_, I_O found_V that_P the_D iframe_N is_V irrelevant_A ._. The_D same_A behaviour_N doesn't_N work_N on_P a_D normal_A button_N on_P the_D host_N page_N ._. I_O basically_R fixed_V it_O by_P using_V JSNI_N to_P replicate_V part_N of_P GWT's_A event_N handling_N mechanism_N ._. The_D following_A works_N :_: Where_R CustomElementWrapper_^ is_V :_: Finally_R ,_, the_D ClickEventManager_^ ,_, where_R the_D actual_A work_N happens_V is_V :_: Personally_R ,_, I_O hate_V this_D solution_N because_P I_O appear_V to_P be_V duplicating_V GWT's_A event_N handling_N and_& quite_R possibly_R introducing_V nasty_A javascript_N memory_N leaks_N ._. Any_D ideas_N on_P why_R my_D first_A post_N doesn't_N work_N (_N remembering_V that_P the_D iframe_N aspect_N is_V a_D red_A herring_N )_N ,_, would_V be_V appreciated_V ._. Thanks_N ,_, Tin_N
Thank_V you_O ,_, thank_V you_O !_. This_D was_V exactly_R what_O I_O needed_V to_P get_V it_O to_P work_V in_P IE7_N !_.
I_O expect_V the_D problem_N is_V that_P the_D GWT_N method_N onAttach()_N is_V not_R called_V when_R you_O use_V the_D wrapping_N as_P in_P your_D first_A example_N ._. You_O can_V try_V to_P use_V the_D static_A wrap_N method_N on_P the_D Button_^ widget_N ._. Although_P to_P use_V this_D the_D input_N must_V be_V of_P type_N button_N ._. Or_& have_V a_D look_N at_P the_D implementation_N of_P the_D wrap_N method_N ._. Here_R is_V the_D modified_V code_N when_R using_V the_D wrap_N method_N :_:
Hilbrand_^ is_V right_A about_P the_D problem_N being_V that_P the_D GWT_N method_N onAttach()_N was_V not_R called_V ._. I_O implemented_V your_D original_A solution_N ,_, adding_V the_D following_V method_N to_P ElementWrapper_^ :_: And_& called_V added_V wrapper.onAttach()_N after_P the_D ElementWrapper_^ is_V created_V ._. Works_^ like_P a_D charm_N !_.
Thank_V you_O !_. I_O knew_V there_X had_V to_P be_V a_D cleaner_A way_N :)_N
Please_V see_V my_D previous_A answer_N ._. A_D slight_A modification_N to_P your_D original_A solution_N will_V make_V it_O work_V ._.
You_O may_V find_V this_D helpful_A :_: You_O will_V then_R be_V able_A to_P make_V arbitrary_A containers_N into_P widget_N containers_N :_: And_& bind_V events_N to_P arbitrary_A elements_N :_: Specifically_R in_P your_D case_N ,_, try_V this_D :_: It's_N always_R mystified_V me_O that_P GWT_^ makes_V doing_V this_D so_R difficult_A and_& poorly_R documented_V ._.
Instead_R of_P using_V iframes_G i_G suggest_V you_O simply_R make_V a_D http_A request_N from_P GWT_N via_P com.google.gwt.http.client.RequestBuilder_N ._. Like_P so_R :_:
Best_N way_N to_P grab_V website_N content_N externally_R
There's_V a_D search_N site_N whose_D search_N results_N are_V generated_V dynamically_R by_P javascript_N ._. So_P the_D user_N enters_V a_D query_N ,_, and_& the_D site_N displays_V the_D content_N on_P the_D page_N ,_, without_P refreshing_V ._. I_O need_V to_P grab_V those_D search_N results_N programmatically_R (_V say_V from_P a_D Java_^ program_N or_& a_D perl_N /_: python_N script_N )_N ._. So_P ideally_R ,_, I_O can_V launch_V my_D program_N with_P 100_$ queries_N as_P user_N inputs_N ,_, and_& then_R the_D program_N would_V hit_V that_D website_N with_P each_D query_N and_& spit_V out_R on_P my_D screen_N all_X the_D search_N results_V as_P returned_V by_P the_D website_N ._. The_D obvious_A problem_N is_V that_P the_D site_N is_V in_P javasript_N instead_R of_P simple_A HTML_^ ,_, so_R sending_V a_D URL_N request_N and_& parsing_V the_D resultant_A output_N is_V not_R going_V to_P work_V (_N as_P the_D source_N code_N for_P this_D page_N is_V always_R just_R a_D bunch_N of_P reference_N to_P various_A ._. js_N files_V )_^ ._. Given_P the_D above_A conditions_N ,_, what_O are_V my_D options_N ?_.
Almost_R all_D search_N provider_N has_V some_D APIs_N ,_, but_& the_D free_A ones_N impose_V some_D constraints_N about_P how_R often_R can_V you_O search_V ,_, how_R many_A times_N in_P a_D day_N and_& how_R many_A results_N you_O get_V ._.
This_D site_N has_V no_D API_^ ._. And_& assume_V there's_N no_D limits_N on_P how_R many_A searches_N I_O can_V do_V or_& how_R often_R ._.
Can_V you_O give_V some_D hints_N about_P which_D site_N you_O want_V to_P use_V for_P searching_V ?_. If_P the_D search_N is_V a_D local_A search_N ,_, you_O could_V ask_V a_D publicly_R API-ed_A search_N provider_N to_P search_V only_R within_P this_D site_N ._.
Ok_N ._. Here's_V the_D site_N :_: http://tinyurl.com/ley3eh_N
Install_^ Firebug_^ ,_, study_V the_D requests_N that_D are_V made_V by_P the_D site's_N javascript_N and_& mimic_V them_O in_P your_D program_N ._. Chances_N are_V there_X is_V a_D single_A request_N that_D needs_V to_P be_V made_V and_& the_D resulds_N would_V come_V in_P some_D nice_A form_N like_P JSON_N
Unless_P the_D search_N provider_N gives_V you_O an_D API_N to_P work_V with_P (_N either_& via_P backchannel_N agreement_N or_& a_D publicly_R available_A one_$ )_$ ,_, then_R nothing_N you_O do_V will_V be_V likely_A to_P work_V for_P very_R long_A ._. You_O may_V go_V to_P great_A pains_N to_P fool_V the_D site_N into_P believing_V you_O are_V an_D ordinary_A website_N user_N ._. Then_R ,_, they_O will_V make_V some_D minor_A change_N to_P how_R their_D site_N works_V (_N because_P they_O have_V no_D idea_N someone_N is_V using_V it_O in_P the_D fashion_N you_O are_V )_N and_& all_D of_P a_D sudden_A your_D hack_N won't_N work_N ._. Sometime_R later_R ,_, they_O may_V notice_V that_P you_O are_V using_V them_O in_P this_D fashion_N ,_, and_& detect_V your_D usage_N and_& flat_A out_R block_V it_O ._. Basically_R ,_, unless_P they_O give_V you_O an_D API_^ ,_, you_O are_V essentially_R stealing_V ,_, and_& should_V expect_V to_P receive_V all_X the_D courtesy_N that_D deserves_V ..._: none_N ._. Lest_P you_O think_V I_O am_V judging_V you_O ,_, I'll_N let_V you_O know_V I_O speak_V from_P experience_N ;)_N
What_O about_P Dyanmic_^ Data_^ Exchange_^ ?_. Can't_N you_O use_V that_D to_P grab_V any_D content_N from_P any_D window_N in_P windows_N ?_. So_P I_O can_V just_R grab_V the_D content_N from_P my_D browser_N ,_, and_& parse_V it_O in_P my_D program_N ?_.
@Saobi_N ,_, you_O do_V realize_V that_P DDE_^ is_V very_R ,_, very_R old_A and_& not_R used_V in_P modern_A web_N browsers_N ?_.
what_O problems_N will_V I_O run_V into_P with_P DDE_^ ?_.
Javascript_^ does_V http_V requests_N almost_R just_R like_P a_D browser_N does_V ,_, once_R you_O figure_V out_R what_O they_O are_V you_O can_V try_V to_P re-create_V them_O in_P perl_N /_: python_N /_: etc_G ._. With_P Firefox+Firebug_N you_O can_V see_V the_D requests_N in_P the_D '_'' Net_^ '_G panel_N ._. Things_N you_O might_V have_V to_P take_V into_P account_N are_V user-agent_A string_N ,_, cookies_N ,_, the_D fact_N that_P sometimes_R the_D returned_V data_N is_V meant_V to_P be_V run_V /_: interpreted_V by_P Javascript_^ etc_G ._. Maybe_^ your_D language_N of_P choice_N has_V a_D nice_A httpbrowser_N class_N you_O can_V use_V ?_. Just_R took_V a_D look_N ,_, searching_V for_P IBM_^ ,_, took_V the_D post_N data_N from_P Firebug_^ ,_, replaced_V newlines_N with_P '_'' '_'' and_& put_V it_O after_P the_D request_N url_N :_: but_& it_O returns_V and_& no_D data_N .._V So_P it_O looks_V like_P you_O have_V to_P script_N a_D post_N request_N ._. Looking_V at_P their_D restrictions_N and_& guidelines_N ,_, maybe_R you_O should_V just_R get_V in_P touch_N and_& ask_V if_P there's_G a_D public_A API_N ?_.
Ok_P I_O used_V the_D Net_A panel_N monitoring_N of_P Firebug_^ ._. And_& whenever_R I_O submit_V a_D query_N on_P that_D website_N ,_, the_D request_N is_V a_D POST_N ,_, but_& the_D URL_N has_V search.dwr_N appended_V to_P it_O ,_, not_R the_D actual_A query_N I_O submitted_V ._.
The_D search_N is_V handled_V by_P Javascript_^ ,_, so_P it_O can_V put_V together_R and_& use_V any_D url_N it_O wants_V ,_, obviously_R ._. You'd_N have_V to_P look_V into_P the_D source_N to_P see_V how_R it_O does_V that_P ,_, or_& just_R see_V what_O it_O posts_V where_R and_& try_V to_P mimic_V that_P in_P your_D code_N ._. Is_V the_D search_N site_N public_N ?_.
But_& that_P POST_N request_N I_O saw_V in_P Firebug_^ ,_, how_R can_V I_O dig_V deeper_A to_P see_V the_D equivalent_A http_A request_N (_N preferably_R with_P a_D search_N query_N appended_V )_^ ?_. Yes_^ this_D is_V a_D public_A site_N ._.
The_D POST_N request_N *_N is_V *_G the_D http_A request_N ,_, the_D Net_A panel_N should_V also_R show_V what_O post_N data_N was_V sent_V along_R ._. You_O can_V try_V taking_V that_D apart_R and_& tacking_V it_O onto_P the_D URL_N it's_N posted_V to_P as_R GET_V parameters_N ,_, but_& that_D won't_N necessarily_R work_V (_^ depends_V on_R if_P the_D server_N supports_V GET_V queries_N )_$ ._. But_& maybe_R you_O need_V to_P use_V curl_V or_& somesuch_V to_P do_V an_D actual_A post_N from_P your_D script_N ._. Basically_R the_D script_N has_V to_P behave_V like_P a_D browser_N ._.
Saw_V your_D sample_N search_N above_P ._. So_P it_O looks_V like_P this_D is_V not_R easily_R doable_A ?_. You_O managed_V to_P figure_V out_R the_D exact_A request_N to_P send_V ._. But_& that's_V not_R enough_A ...._N
That's_A right_A :-)_N As_P I_O said_V ,_, you'd_A need_N to_P re-create_V the_D POST_N request_N in_P your_D scripting_N language_N ._. For_P PHP_^ ,_, I'd_N point_N you_O at_P http://www.php.net/curl_N and_& http://www.php.net/manual/en/function.curl-setopt.php_N ,_, search_N for_P '_'' post_N '_'' ._.
Mozilla_^ Rhino_^ :_: Default_^ JavaScript_^ Compliance_^ Level_^
to_P execute_V JavaScript_^ in_P Rhino_^ one_$ has_V to_P create_V an_D execution_N context_N for_P the_D script_N ._. The_D constructor_N of_P the_D Context_^ class_N uses_V the_D JavaScript_^ compliance_N level_N VERSION_DEFAULT_N ._. As_P I_O cannot_V find_V a_D mapping_N of_P VERSION_DEFAULT_N to_P any_D of_P the_D actual_A VERSION_XXX_N constants_N in_P the_D API_N ,_, I'm_N wondering_V which_D JavaScript_^ compliance_N level_N VERSION_DEFAULT_N is_V ._. The_D release_N note_N of_P Rhino_N 1.7_$ R1_N (_N *_G ttps_G :/_G /_: developer.mozilla.org/en/New_in_Rhino_1.7R1_^ )_^ states_V that_P one_O has_V to_P specify_V the_D JavaScript_^ version_N explicitly_R ,_, but_& it_O does_V not_R mention_V which_D version_N is_V used_V when_R Context.setLanguageVersion()_N is_V omitted_V ._.
it's_A open_A source_N ..._:
Maybe_R you_O should_V ask_V this_D question_N on_P the_D Mozilla_^ Rhino_^ mailing_N list_N ._.
Having_V had_V a_D look_N through_P most_A of_P the_D Rhino_N code_N ,_, it_O looks_V like_P most_A of_P the_D testing_N against_P language_N version_N is_V negative_A testing_N ,_, e.g._G if_P (_G getLanguageVersion()_G !_. =_A Context.VERSION_1_2_N )_G {_G return_N paramCount_N ;_: }_^ VERSION_DEFAULT_^ is_V defined_V as_P '_'' 0_$ '_'' ,_, so_P the_D one_$ place_N where_R it_O looks_V like_P it_O would_V need_V to_P be_V set_V as_P 1.7_$ is_V to_P support_V the_D "_`` let_V "_'' and_& "_`` yield_N "_'' keywords_N because_P of_P this_D code_N from_P TokenStream_^ :_: if_P ((_N result_V ==_^ Token.LET_^ ||_^ result_N ==_^ Token.YIELD_^ )_^ &_& &_& parser.compilerEnv.getLanguageVersion()_^ Context.VERSION_1_7_^ )_^ {_^ //_^ LET_^ and_& YIELD_^ are_V tokens_N only_R in_P 1.7_$ and_& later_A result_N =_A Token.NAME_N ;_: }_N
How_R to_P relate_V ga_N :_: campaign_N and_& ga_G :p_G agePath_G (_G content_N )_N on_P Google_^ Analytics_^ Export_^ API_^ ?_.
Using_V custom_N reports_N you_O are_V able_A to_P drill_V down_R on_P a_D specific_A campaign_N and_& then_R choose_V the_D Landing_N Page_^ or_& content_A page_N that_P the_D individual_A visitor_N choose_V ._. When_R I_O try_V to_P retrieve_V the_D same_A information_N through_P the_D Google_^ Analytics_^ Export_^ API_^ ,_, I_O get_V an_D error_N if_P I_O try_V to_P relate_V those_D two_$ dimensions_N in_P my_D feed_N ._. Is_V there_X any_D success_N story_N about_P getting_V this_D information_N together_R ._. I_O know_V is_V possible_A ,_, we_O just_R don't_N know_V what_O is_V the_D correct_A combination_N ._. Since_P I_O had_V no_D progress_N on_P this_D issue_N during_P the_D last_A week_N I_O thought_V about_P giving_V a_D little_R more_A information_N ._. I_O am_V presenting_V below_P a_D screen_N shot_N of_P an_D actual_A report_N of_P the_D Google_^ Analytics_^ UI_G givin_G the_D information_N that_P I_O am_V trying_V to_P pull_V and_& I_O am_V getting_V no_D info_N ._. Basically_R the_D campaing_V information_N group_N by_P the_D pagePage_N landed_V ._. So_P I_O am_V able_A to_P know_V who_O clicked_V on_P my_D emails_N and_& where_R that_D person_N landed_V ._. I_O just_R found_V other_A people_N with_P the_D same_A questions_N on_P the_D Google_^ Analytic_^ Help_V Forum_^ ._.
I_O just_R tried_V it_O with_P some_D GA_N data_N ._. It_O seems_V to_P be_V picky_A about_P what_D metric_N you_O join_V it_O to_P but_& ga_G :p_G ageviews_G works_V ._. Both_& ga_N :_: campaign_N and_& ga_G :p_G agePath_N are_V dimensions_N and_& you_O need_V to_P join_V them_O to_P a_D metric_N ._. You_O can_V reference_V GA_N documentation_N here_R regarding_V what_O are_V the_D valid_A combinations_N ._. As_P an_D example_N ,_, I_O managed_V to_P retrieve_V a_D really_R long_A report_N using_V (_N replace_V with_P your_D profile_N id_G ):_G Hope_^ this_D helps_V ._.
Thanks_N for_P your_D reply_N ._. I_O am_V trying_V to_P execute_V your_D sample_N with_P my_D table_N id_N ,_, but_& I_O cannot_V get_V it_O to_P work_V ._. I_O am_V getting_V an_D Authorization_^ Required_^ ._. I_O am_V authenticating_V with_P Google_^ Analytics_^ before_P requesting_V the_D URI_^ ._. Let_V me_O know_V if_P you_O know_V what_O steps_N to_P take_V before_P executing_V the_D script_N ._. Thanks_N again_R ._.
You_O need_V to_P authenticate_V to_P GA_N separately_R by_P sending_V an_D extra_A header_N in_P the_D http_A request_N ._. See_V http://code.google.com/apis/gdata/articles/using_cURL.html_N and_& http://code.google.com/apis/analytics/docs/gdata/1.0/gdataProtocol.html_N
If_P you_O are_V using_V java_N or_& servlet_N ,_, you_O can_V use_V authentication_N method_N in_P analytics_N api_V to_P authenticate_V first_R ,_, and_& then_R you_O can_V retrieve_V data_N from_P the_D profile_N of_P that_D user_N ._.
Servlets_^ and_& AJAX_^ communication_N
i_G do_V have_V a_D communication_N probleme_N here_R between_P my_D java_N servlet_N and_& an_D ajax_N request_N ._. more_R about_P it_O :_: Absolute_A path_N to_P the_D index.html_G (_G including_V javascript_N /_: ajax_N request_N ):_G http://localhost:9080/chat/index.html_G In_P the_D same_A folder_N the_D servlet_N :_: MyChat.class_N And_& the_D Request_^ is_V working_V like_P this_D :_: var_N url_N =_A "_`` http://localhost:9080/chat_N "_'' ;_: var_N name_N =_A document.getElementById_G (_G "_`` username_A ")_N ._. getAttribute_G (_G "_`` value_N ")_N ;_: var_N message_N =_A document.getElementById_G (_G "_`` message_N ")_N ._. getAttribute_G (_G "_`` value_N ")_N ;_: var_N tosend_N =_A name+_A "_`` ,_, "_'' +message_N ;_: request.open('GET_N '_'' ,_, url_N ,_, true_A );_G request.send_G (_G tosend_G );_G request.onreadystatechange_N =_A interpretRequest_N ;_: I'm_N having_V a_D formular_N where_R a_D user_N just_R types_N in_P the_D name_N and_& the_D message_N and_& "_`` username_A "_'' and_& "_`` message_N "_'' are_V tags_N in_P my_D html_N file_N ._. The_D ajax_N request_N works_V ,_, that's_G sure_A ,_, but_& it_O doesn't_R communicate_V with_P the_D servlet_N ._. I_O also_R don't_N have_V an_D idea_N where_R the_D output_N from_P System.out.println()_N goes_V ._. No_D log_N file_N is_V filled_V ..._: And_& the_D servlet_N looks_V like_P this_D :_: public_A class_N MyChat_^ extends_V HttpServlet_^ {_$ private_A static_A final_A long_A serialVersionUID_N =_A 1L_N ;_: }_N
Try_V calling_V the_D servlet_N from_P the_D address_N bar_N to_P find_V out_R if_P the_D problem_N is_V in_P the_D JavaScript_^ or_& the_D servlet_N ._. (_$ Something_N like_P localhost_N :_: 9080_$ /_: chat_N /_: index.html_N ?_. username=Lenni_G )_G
won't_N work_N because_P i'm_R getting_V the_D username_N from_P an_D input_N tag_N ._. looks_V like_P :_:
Well_R ,_, then_R just_R dumb_A it_O down_R a_D little_A and_& return_V a_D Hello_! World_^ and_& try_V that_D ._.
The_D URL_N you've_N specified_V isn't_N to_P your_D servlet_N ._. Just_R like_P the_D URL_N to_P the_D index_N page_N is_V http://_A server_N :_: port_N /_: webapp_A name_N /_: resource_N the_D URL_N to_P your_D servlet_N needs_V a_D mapping_N in_P the_D web.xml_N file_N that_D corresponds_V to_P the_D resource_N part_N of_P the_D url_N ._. For_P example_N ,_, if_P you_O had_V a_D controller_N servlet_N you'd_N expect_V something_N like_P the_D following_N in_P your_D web.xml_N :_: The_D URLs_N that_D would_V invoke_V the_D '_G controller_N '_'' servlet_N would_V then_R follow_V the_D form_N http://_N server_N :_: port_N /_: webapp_A name_N /_: anything_N ._. do_V ._.
just_R added_V the_D web.xml_N ._. it's_N within_P the_D folder_N where_R the_D html_N file_N is_V and_& my_D class_N file_N ._. as_P i_G start_V the_D request_N i'm_N getting_V a_D request_N status_N that_D is_V not_R 200_$ so_R ..._: request_N fails_V
The_D web.xml_N file_N need_V to_P be_V in_P a_D WEB-INF_N directory_N in_P the_D root_N of_P the_D web_N app_N ._. Take_V a_D look_N at_P this_D tutorial_N for_P the_D details_N on_P packaging_N a_D web_N app_N -_: http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/WebComponents.html_N
and_& where_R do_V i_G have_V to_P place_V the_D class_N file_N then_R ?_. :-(_$
The_D classes_N go_V in_P WEB-INF_N /_: classes_N ._. If_P you_O use_V ANT_^ the_D WAR_N task_N will_V do_V it_O all_D for_P you_O ._.
Share_V an_D applet_N across_P many_A jsp_N pages_N
In_P my_D web_N application_N ,_, a_D series_N of_P jsp_N pages_N are_V navigated_V ._. These_D jsp_N pages_N appear_V on_P the_D Right_^ Hand_V side_A (_N frame_N )_N of_P the_D screen_N ._. On_P the_D left_A frame_N ,_, I_O have_V an_D applet_N ._. This_D applet_N is_V common_A to_P all_D jsps_N ._. From_P all_D of_P the_D jsps_N ,_, I_O want_V to_P invoke_V a_D method_N on_P the_D applet_N ._. The_D javascript_N code_N is_V inside_A of_P each_D jsp_N ._. Is_V there_X a_D way_N to_P do_V this_D ?_. Any_D approaches_N ,_, suggestion_N ,_, Code_^ snippets_N most_R welcome_A ._. The_D applet_N basically_R displays_V an_D image_N ._. Based_V on_P the_D user_N interaction_N in_P the_D jsp_N pages_N ,_, the_D image_N needs_V to_P change_V /_: rotate_V and_& so_R on_P ._. But_& the_D applet_N is_V common_A to_P all_D and_& should_V not_R be_V loaded_V on_P each_D of_P the_D jsps_N load_V ._. Thats_^ why_R I_O am_V looking_V for_P a_D way_N for_P all_D jsps_N to_P communicate_V to_P the_D single_A applet_N (_N via_P javascripts_N of_P course_N )_N ._.
Its_D possible.See_N here_R for_P details_N How_R to_P invoke_V invisible_A applet_N methods_N
But_& I_O dont_V want_V to_P embed_V the_D applet_N in_P each_D of_P the_D jsps_N ._. That_D is_V the_D catch_N ._. The_D applet_N needs_V to_P be_V invoked_V from_P a_D jsp_N where_R it_O is_V NOT_^ embedded_V ._.
Let's_N say_V that_P the_D Applet_^ is_V in_P Frame_N F1_N ,_, your_D javascript_N is_V in_P Frame_N F2_N then_R you_O can_V call_V your_D Applet_^ method_N from_P F2_N with_P :_: Your_D Frameset_^ :_: The_D page_N with_P with_P the_D applet_N is_V Bye_^ ._.
Using_V Bing_^ as_P local_A search_N
So_R if_P I'm_N reading_V your_D question_N right_N ,_, you_O need_V a_D way_N to_P go_V from_P zip_N code_N /_: city_N /_: state_N to_P longitude_N and_& latitude_N ?_. If_P that's_G the_D case_N ,_, there_X are_V a_D number_N of_P free_A and_& paid_V databases_N out_R there_R that_D have_V this_D information_N ._. The_D free_A ones_N are_V generally_R not_R 100%_$ up_P to_P date_N ,_, but_& the_D paid_V ones_N are_V pretty_R reasonably_R priced_V and_& would_V include_V periodic_A updates_N with_P the_D latest_A and_& greatest_A data_N ._.
so_R you're_A suggesting_V I_O do_V the_D geocoding_N on_P the_D server_N because_P it's_N limited_V enough_R ?_.
@Russell_N -_: A_D couple_N ways_N you_O could_V do_V it_O ._. You_O could_V do_V the_D geocoding_N on_P your_D server_N with_P a_D database_N (_N as_P I_O suggested_V in_P my_D answer_N )_N or_& you_O could_V create_V a_D service_N on_P your_D server_N that_P you_O call_V via_P HTTPS_N which_D would_V then_R call_V out_R to_P Bing_^ /_: Google_^ via_P plain_A old_A HTTP_N ._. This_D would_V keep_V the_D pages_N as_P HTTPS_^ ,_, but_& just_R use_V normal_A HTTP_N under_P the_D hood_N -_: if_P that's_N acceptable_A from_P a_D security_N perspective_N on_P your_D end_N anyways_N ._.
That_D is_V actually_R how_R we_O interface_N with_P Bing_^ now_R ,_, but_& it_O doesn't_R do_V geocoding_V ._. We_O could_V do_V the_D geocoding_N with_P google_N ,_, but_& it_O has_V request_N limits_N that_P our_D server_N would_V surpass_V ._.
Yahoo_^ has_V geocoding_V with_P rate_N limit_N of_P 5000_$ per_P day_N on_P a_D REST_N service_N ._. http://developer.yahoo.com/maps/rest/V1/geocode.html_N Have_V you_O looked_V into_P Yahoo_^ !_. Maps_N with_P YQL_N ?_.
signed_V applet_N gives_V AccessControlException_^ :_: access_N denied_V ,_, when_R calling_V from_P javascript_N
I_O have_V an_D easy_A self-signed_A an_D applet_N (_N done_V with_P keytool_N and_& the_D jarsigner_N ):_N Basically_R ,_, what_O it_O does_V ,_, is_V that_P it_O executes_V '_G notepad_A c_N :/_G hello.txt_G '_'' ._. Then_R i_G embed_G the_D applet_N in_P html_N :_: When_R i_G visit_V the_D page_N ,_, JRE_N starts_V and_& asks_V me_O if_P i_G want_V to_P start_V this_D applet_N and_& if_P i_G trust_N it_O ._. I_O press_V ok_A ._. Then_R notepad_N starts_V -_: as_P it_O should_V ._. No_D problem_N here_R ._. But_& then_R i_G add_V this_D into_P the_D HTML-page_N :_: Now_R when_R i_G press_N on_P this_D text_N ,_, calc_N should_V start_V -_: right_A ?_. But_& this_D gives_V me_O :_: whats_V up_R with_P this_D ?_. Why_R does_V it_O give_V me_O a_D security_N exception_N now_R ,_, but_& it_O could_V start_V notepad_N before_P ?_.
The_D Java_^ 2_$ security_N model_N requires_V (_N roughly_R )_V that_P every_D frame_N on_P the_D stack_V must_V be_V granted_V a_D permission_N for_P the_D access_N control_N context_N (_^ acc_^ )_^ to_P have_V that_D permission_N ._. JavaScript_^ is_V on_P the_D stack_V and_& does_V not_R have_V file_N access_N permissions_N ._.
He_O could_V also_R have_V used_V the_D AccessController.doPrivileged_A API_N to_P elevate_V the_D privileges_N of_P the_D javascript_N function_N call_N to_P the_D one_$ of_P the_D signed_A applet_N ._. http://www.inf.puc-rio.br/~roberto/java/jdk1.2/docs/guide/security/doprivileged.html_N
Thanks_N a_D lot_N ,_, this_D solved_V my_D problem_N in_P a_D nice_A and_& clean_A way_N ._.
Solved_V the_D problem_N with_P ,_, in_P Java_^ :_: and_& then_R in_P JavaScript_^ :_:
I_O agree_V :_: it_O is_V prohibited_V to_P manipulate_V a_D signed_A applet_N from_P javascript_N ,_, and_& the_D workaround_N is_V to_P rewrite_V the_D applet_N tag_N in_P javascript_N in_P the_D page_N document_N ._. I_O found_V this_D source_N with_P a_D bit_N of_P theory_N proving_N we_O are_V right_A http://docs.oracle.com/javase/tutorial/deployment/applet/security.html#jsNote_N
Actually_R ,_, calling_V applet_N from_P javascript_N behaves_V as_P calling_V unsigned_A applet_N (_N as_P specified_V in_P the_D jsnote_N :_: http://docs.oracle.com/javase/tutorial/deployment/applet/security.html#jsNote_N ._. That_D is_V fine_N and_& is_V valid_A when_R you're_N using_V a_D class_N you_O are_V not_R allowed_V to_P change_V ,_, but_& since_P you're_N the_D author_N of_P the_D java_N class_N you_O can_V always_R wrap_V that_P specific_A method_N you_O need_V to_P call_V from_P javascript_N to_P be_V executed_V in_P the_D privileged_A mode_N ,_, like_P this_D :_: And_& it_O should_V work_V ok_R ._. (_^ This_^ is_V what_O is_V suggested_V in_P the_D upvoted_A comment_N by_P @Jean_G -Philippe_G Jodoin_^ but_& the_D link_N provided_V there_X is_V broken_A )_N
Communcation_N between_P Java_^ and_& applet_N
How_R do_V I_O get_V the_D (_N updated_V )_N value_N of_P Java_^ Class's_^ variable_N which_D is_V dynamically_R modified_V from_P an_D applet_N ?_. The_D problem_N here_R is_V ,_, since_P the_D applet_N is_V loaded_V in_P separate_A class_N loaders_V the_D updated_V value_N is_V not_R available_A when_R the_D applet_N is_V loaded_V a_D second_A and_& subsequent_A times_N ._.
Do_V you_O mean_V server_N side_N Java_^ ,_, or_& JavaScript_^ as_P your_D tag_N indicate_V ?_.
In_P fact_N simple_A desktop_N java_G ...._G java_G script_N is_V there_R to_P indicate_V the_D use_N of_P applet_N by_P the_D java_N script_N from_P an_D html_A page_N
I'm_N not_R sure_A what_O you_O are_V trying_V to_P achieve_V -_: are_V there_X two_$ classes_N ,_, one_$ in_P an_D applet_N and_& another_D ,_, where_R ?_.
Is_V this_D question_N still_R open_V ?_. If_P yes_! ,_, please_V make_V clear_A what_O you_O want_V to_P do_V ._. Is_V your_D applet_N embedded_V in_P your_D desktop_N Java_^ application_N ,_, or_& in_P a_D web_N browser_N ?_.
See_^ Java-to-Javascript_^ Communication_^ ,_, Java_^ -_: Javascript_N interaction_N ,_, and_& Interaction_N without_P LiveConnect_^ for_P JavaScript_^ interaction_N ._.
See_V http://rostislav-matl.blogspot.com/2011/10/java-applets-building-with-maven.html_N for_P working_V example_N ._.
Open_V an_D HttpURLConnection_N in_P a_D browser_N
I_O am_V working_V on_P a_D jsp_N page_N which_D uses_V a_D bean_N to_P create_V an_D OAuth_N authenticated_V HttpURLConnection_^ and_& am_R able_A to_P connect_V successfully_R ._. Is_V there_X anyway_R that_P I_O can_V take_V that_D open_A HttpURLConnection_N and_& somehow_R display_V the_D contents_N in_P a_D browser_N window_N ?_.
The_D only_A way_N to_P display_V the_D contents_N of_P a_D stream_N from_P another_D web_N page_N in_P a_D jsp_N is_V if_P you_O do_V not_R get_V the_D output_N stream_N yourself_O ._. If_P I_O remember_V right_A ,_, the_D output_N stream_N for_P a_D jsp_N is_V automatically_R retrieved_V when_R an_D output_N character_N outside_P the_D scriptlet_N tags_N is_V envountered_V by_P the_D parser_N ._. This_D would_V be_V better_R done_V in_P a_D servlet_N proper_A rather_R than_P a_D jsp_N ._. Just_R get_V the_D url_N connection_N ,_, get_V the_D output_N stream_N and_& pipe_N it_O to_P the_D servlet's_N output_N stream_N using_V a_D loop_N ._.
Wicket_^ &_& jQuery_^ Overlap_^ /_: Collision_N
I_O am_V currently_R working_V on_P a_D web_N app_N using_V Wicket_^ and_& started_V using_V jQuery_N core_N (_^ UI_^ also_R )_$ in_P it_O today_N ._. I_O ran_V into_P an_D issue_N I_O troubleshooted_V as_P a_D jQuery_N function_N (_G show()_G ,_, slideDown()_G )_G colliding_V with_P some_D of_P the_D javascript_N Wicket_^ auto-generated_A for_P an_D external_A form_N link_N ._. Before_P I_O get_V deeper_A into_P this_D project_N I_O am_V wondering_V if_P anyone_N has_V had_V similar_A experiences_N ._. Are_V there_X a_D lot_N of_P places_N where_R the_D jQuery_N effects_N /_: actions_N collide_V with_P Wicket_N generated_V javascript_N /_: HTML_^ ?_. Are_V there_R clean_A ways_N to_P avoid_V this_D ,_, or_& mitigate_V it_O ?_. I_O have_V seen_V Wicketext_^ as_P possibly_R a_D cleaner_N "_`` integrator_N "_'' of_P the_D two_$ ,_, but_& mostly_R it_O seems_V to_P just_R be_V a_D way_N of_P doing_V more_A of_P the_D jQuery-ish_N code_N in_P the_D Java_^ instead_R of_P JS_^ ._.
This_D is_V an_D interesting_A problem_N since_P jQuery_N occupies_V it's_A own_A namespace_N ._. I'm_N guessing_V that_P there_X is_V a_D conflict_N with_P the_D $_$ jQuery_A variable_N ._. To_P get_V around_P this_D you_O can_V have_V jQuery_N occupy_V a_D different_A namespace_N like_P so_R :_: You_O can_V do_V this_D after_P you've_N loaded_V both_D sets_N of_P code_N and_& the_D $_$ will_V be_V returned_V to_P its_D original_A value_N ._. A_D bit_N of_P a_D headache_N but_& it_O can_V fix_V things_N in_P a_D pinch_N ._. See_V using_V jQuery_N with_P other_A libraries_N for_P more_A info_N ._.
Thanks_N codeincarnate_V !_. I'll_N give_V it_O a_D try_N on_P monday_^ and_& see_V what_O happens_V ._.
So_R this_D didn't_N work_N ,_, but_& I_O believe_V it_O to_P be_V another_D issue_N with_P Wicket_^ generated_V JS_^ ._. Had_V it_O been_V a_D library_N collision_N I_O think_V your_D answer_N is_V spot_N on_P so_P I_O am_V accepting_V it_O ._.
Upload_N image_N thumbnail_A to_P server_N ,_, without_P uploading_V whole_A image_N
As_R far_R as_P I_O know_V ,_, what_O I_O ask_V here_R isn't_N possible_A ,_, but_& I_O thought_V I'd_N ask_V anyway_R in_P case_N I'm_N missing_V something_N ._. Suppose_V you_O want_V to_P let_V users_N upload_V JPG_N images_N ,_, and_& these_D images_N are_V scaled_V into_P smaller_A icons_N and_& the_D original_A images_N are_V always_R discarded_V and_& never_R required_V again_R ._. Is_V there_R any_D way_N that_D would_V commonly_R work_V in_P most_A modern_A browsers_N that_D would_V let_V the_D user_N select_V a_D single_A image_N on_P their_D hard_A drive_N ,_, have_V that_P LOCALLY_R turned_V into_P a_D thumbnail_N and_& upload_V the_D created_V thumbnail_N to_P a_D server_N ?_. In_P a_D case_N where_R the_D server_N just_R needs_V a_D small_A image_N ,_, it_O would_V be_V wasteful_A both_& in_P user_N time_N and_& server_N resources_N to_P proceed_V uploading_V the_D whole_A image_N ,_, only_R to_P immediately_R discard_V it_O ._. It_O would_V be_V much_R better_A to_P just_R scale_V it_O on_P the_D client_N ._. I_O can_V imagine_V three_$ options_N ._. Just_R plain_A HTML_^ /_: Javascript_^ ,_, using_V Flash_N or_& using_V Java_^ ._. If_P this_D were_V possible_A with_P Flash_^ ,_, that_D would_V seem_V like_P the_D best_A option_N ._. But_& reading_V flash.net.FileReference_N documentation_N ,_, it_O seems_V that_P you_O can_V upload_V a_D file_N from_P the_D HD_^ yes_! ,_, but_& you_O cannot_V look_V inside_P the_D file_N you_O are_V uploading_V ._. On_P the_D other_A hand_N ,_, if_P you_O enable_V "_'' can_V access_V local_A files_N "_'' in_G Flash_G publishing_N options_N ,_, it_O seems_V that_P you_O can_V then_R no_R longer_A access_N the_D net_N ,_, so_P that_P doesn't_N work_N ._. With_P HTML_^ /_: Javascript_^ ,_, it_O is_V possible_A to_P load_V images_N and_& display_V them_O on_P a_D canvas_N ,_, but_& if_P you_O try_V to_P access_V the_D pixels_N of_P these_D images_N ,_, you_O get_V security_N violations_N ,_, so_P that_P doesn't_N seem_V to_P work_V ._. Java_^ I_O hesitate_V to_P use_V ,_, because_P only_R 96.52_$ %_N of_P my_D users_N have_V it_O installed_V ,_, and_& the_D file_N upload_N dialogs_N I_O have_V seen_V implemented_V in_P Java_^ (_^ at_P Facebook_^ for_P example_N )_N have_V not_R worked_V well_R (_$ unresponsive_A interface_N )_N ._. I_O wonder_V though_P if_P Java_^ is_V the_D only_A thing_N allowing_V resizing_V images_N from_P local_A HD_N ?_.
I_O think_V if_P there_X was_V a_D reasonably_R reliable_A and_& user-friendly_A way_N to_P accomplish_V this_D ,_, it'd_N be_V done_V on_P sites_N like_P Facebook_^ already_R ._. People_N are_V used_V to_P having_V to_P upload_V the_D original_A image_N ..._: it's_N always_R nice_A to_P be_V able_A to_P improve_V on_P an_D established_A UX_N ,_, but_& if_P you_O can_V only_R match_V it_O ,_, you're_N not_R exactly_R losing_V out_R ._. JavaScript_^ is_V out_R ,_, because_P JS_G cannot_G read_N anything_N directly_R from_P the_D client_N ;_: it_O can_V only_R direct_V the_D browser_N to_P load_V a_D pre-defined_A local_A path_N ,_, or_& load_N bytes_N from_P the_D server_N ._. Flash's_N security_N sandbox_N also_R prevents_V this_D ,_, as_P you_O pointed_V out_R ._. Java_^ has_V a_D different_A set_N of_P problems_N -_: people_N rarely_R install_V applets_N these_D days_N unless_P they_O trust_V the_D site_N more_A than_P their_D own_A family_N members_N ._. It's_N also_R apparently_R extremely_R difficult_A to_P build_V something_N reliable_A and_& usable_A ,_, as_P evidenced_V by_P Facebook-esque_A companies_N which_D have_V practically_R unlimited_A resources_N to_P throw_V at_P the_D problem_N and_& still_R fail_V ._. So_R ,_, in_P summary_N -_: no_R ,_, and_& don't_N worry_V too_R much_A about_P it_O ._.
If_P the_D jpeg_N image_N is_V progressive_A ,_, you_O could_V stop_V uploading_V after_P a_D certain_A amount_N of_P resolution_N is_V acquired_V ._. This_D will_V require_V a_D bit_N of_P your_D own_A processing_N of_P the_D jpeg_N loader_N and_& http_A handling_N code_N ._. It's_N also_R a_D pretty_R big_A "_`` IF_P "_'' ,_, since_P most_A jpegs_N are_V not_R progressive_A by_P default_N ._.
"_`` If_P this_D were_V possible_A with_P Flash_^ ,_, that_D would_V seem_V like_P the_D best_A option_N ._. "_'' As_P I_O understand_V it_O ,_, it_O is_V possible_A with_P Flash_^ Player_^ 10_$ ._. Here's_V an_D example_N :_: http://blog.kukiel.net/2009/02/file-manipulation-client-side-with.html_N Flash_^ Player_^ 10_$ currently_R has_V a_D general_A market_N penetration_N of_P about_P 85-90%_$ ,_, so_R if_P you_O hesitate_V to_P use_V Java_^ because_P only_R 96.52_$ %_N of_P your_D user_N have_V it_O installed_V ,_, I_O guess_V you_O wouldn't_N want_V to_P require_V Flash_^ Player_^ 10_$ either_R ._.
Good_^ Link_^ ._. Since_P FlashPlayer_^ 10_$ ,_, it's_N possible_A to_P manipulate_V ,_, or_& ,_, better_R said_V ,_, interpret_V data_N on_P client_N side_N ._.
Another_D way_N is_V to_P use_V Google's_^ Gears_^ ,_, ex_G ._. :_: Gears_^ Uploader_^ ._.
I_O think_V that_P you_O can_V upload_V the_D image_N to_P server_N ,_, then_R show_V it_O in_P the_D browser_N ,_, then_R the_D user_N will_V be_V resize_V it_O using_V javascript_N ,_, but_& not_R real_R resize_V ,_, only_R capture_V the_D coordenate_N of_P it_O ,_, then_R you_O can_V use_V the_D coordeante_N to_P resize_V the_D image_N in_P the_D server_N and_& save_V the_D new_A image_N (_N thumb_N )_N and_& discard_V the_D original_N ._.
How_R to_P evalute_V prototype_N js_P files_N through_P rhino_N script_N engine_N in_P Java_^
I_O am_V having_V problems_N evaluating_V a_D script.js_N file_N which_D is_V dependent_A of_P prototype.js_N ._. When_R i_G am_R trying_V to_P evaluate_V the_D script.js_N file_V through_P rhino_N script_N engine_N in_P java_G i_G got_V Script_^ Exception_^ like_P "_`` TypeError_^ :_: $H_N is_V not_R a_D function_N ,_, it_O is_V java.lang.String_N ._. "_'' ._. How_R do_V I_O evaluate_V the_D files_N and_& how_R to_P include_V prototype.js_N and_& to_P define_V the_D prototype_N objects_N ?_.
have_V you_O evaluated_V them_O in_P the_D correct_A order_N ?_. They_O need_V to_P be_V evaluated_V from_P the_D bottom_N up_R
You_O cannot_V evaluate_V prototype.js_N using_V Rhino_N only_R ._. prototype.js_N have_V many_A references_N to_P the_D HTML_^ DOM_^ which_D is_V not_R implemented_V in_P Rhino_N /_: Java_^ ._. For_P example_N (_N from_P prototype.js_G ):_G document.createTextNode_G (_G '')_G The_D document_N global_A object_N is_V not_R defined_V in_P Rhino_N context_N and_& createTextNode_N is_V not_R defined_V too_R ._. The_D solution_N is_V to_P remove_V all_D Objects_N /_: Functions_N from_P your_D copy_N of_P prototype.js_N that_P references_N the_D document_N ,_, window_N or_& navigator_N objects_N ._. (_$ assuming_V your_D js_N file_N does_V not_R use_V them_O )_G
You_O could_V also_R get_V away_R with_P declaring_V some_D dummy_N objects_N for_P document_N ,_, window_N ,_, navigator_N and_& so_R on_P ._. This_D way_N you_O do_V not_R have_V to_P change_V prototype.js_N ._.
Yes_R ,_, that's_N cool_V :)_N
Take_V a_D look_N at_P env-js_N ,_, which_D is_V a_D mock_A browser_N environment_N for_P Rhino_^ ._. It's_N based_V on_P some_D work_N by_P John_^ Resig_^ to_P get_V JQuery_N working_V in_P Rhino_^ ._. I_O wouldn't_V be_V surprised_V if_P Prototype_^ worked_V as_R well_R ._.
GWT_N conditional_A compile_V
I'm_N using_V the_D same_A source_N code_N for_P a_D GWT_N 1.5_$ and_& GWT_N 1.7_$ application_N ._. I'm_N wondering_V is_V there_R a_D way_N to_P conditionally_R compile_V parts_N of_P the_D java_N code_N for_P one_$ or_& the_D other_A version_N ._. I_O know_V there_X is_V a_D way_N to_P do_V it_O for_P widgets_N and_& browsers_N in_P the_D module_N XML_N file_N ._.
I_O don't_V think_V so_R ._. Why_R would_V you_O compile_V for_P two_$ GWT_N sources_N ?_. We_O went_V from_P 1.5_$ to_P 1.7_$ without_P problems_N ._.
We_O did_V to_P ._. But_& in_P one_$ case_N the_D old_A (_N 1.5_$ )_N and_& the_D new_A (_$ 1.7_$ )_$ compiled_V code_N does_V not_R behave_V the_D same_A ._. It's_V a_D combination_N of_P java_N and_& native_A inserted_V scripts_N ._. Moving_V the_D old_A (_$ 1.5_$ )_$ code_N to_P the_D new_A interfaces_N removing_V all_D deprecated_V calls_N is_V currently_R to_P much_A work_N ._.
If_P you_O really_R want_V to_P do_V that_P I_O guess_V the_D approach_N would_V be_V to_P use_V a_D Generator_^ ._. With_P a_D generator_N you_O can_V have_V deferred_V binding_V (_$ a_D bit_N a_D poor_A man's_G introspection_G )_G ._. To_P get_V access_N to_P the_D 1.5_$ or_& 1.7_$ code_N you_O then_R have_V to_P define_V the_D generic_A API_N in_P an_D interface_N and_& use_V GWT.create_N on_P it_O to_P get_V the_D concrete_A implementation_N ._.
The_D solution_N is_V very_R simple_A ._.
if_P (_G version.startsWith_G (_G "_`` 1.5_$ "))_G {_G //_N do_V something_N the_D 1.5_$ ._. *_G way_N }_N Is_V actually_R kind_N of_P a_D bad_A idea_N ._. Ideally_R you_O should_V use_V absolute_A string_N values_N here_R ,_, because_P the_D GWT_^ compiler_N will_V evaluate_V equality_N and_& trim_V unreachable_A code_N inside_P an_D if_P conditional_A from_P the_D compiled_V output_N ._. Using_V ._. startsWith_N means_V that_P all_X the_D code_N will_V end_V up_R in_P the_D final_A application_N ._. Unfortunately_R GWT_^ version_N is_V not_R a_D compile_V time_N property_N ._. Perhaps_R the_D best_A way_N to_P do_V it_O would_V be_V to_P create_V an_D empty_A Generator_N implementation_N that_D just_R returns_V "_`` ClassName15_N "_'' or_& "_`` ClassName17_N "_'' from_P a_D call_N in_P your_D module_N for_P "_`` ClassName_^ "_'' ._. You_O can_V then_R ,_, at_P compile_V time_N ,_, call_V About.version()_N from_P the_D generator_N and_& find_V out_R what_O the_D version_N is_V at_P compile_V time_N ._.
Thanks_N for_P pointing_V that_P out_P ,_, but_& this_D is_V the_D only_A solution_N I_O have_V found_V ._. And_& it_O is_V only_R for_P a_D small_A code_N snippet_N ._. So_P the_D solution_N works_V just_R fine_A for_P me_O ._.
How_R to_P parse_V javascript_N for_P links_N with_P java_N ?_.
I'm_N writing_V a_D program_N (_^ in_P Java_^ )_^ that_D needs_V to_P extract_V links_N from_P webpages_N ._. I'm_N using_V htmlParser_N (_N http://htmlparser.sourceforge.net/)_N but_& I'm_N only_R able_A to_P extract_V html_N links_N (_N defined_V with_P a_D href=_N "_'' ..._: "_'' )_N and_& I_N don't_N know_V how_R to_P handle_V javascript_N code_N to_P extract_V links_N from_P ..._: can_V you_O help_V me_O ??_V
There_X are_V some_D missing_V parts_N in_P your_D question_N ._. Is_V it_O formatting_V issue_N ?_.
Please_V edit_V your_D question_N :_: it's_N hard_A to_P understand_V what_O you_O mean_V ._.
I_O can't_V understand_V why_R it's_N hard_A to_P understand_V what_O I_O mean_V ,_, is_V it_O because_P of_P my_D poor_A english_N ?_. Please_! tell_V me_O more_A ._.
You_O can_V use_V Rhino_N with_P DOM_N environment_N ,_, written_V in_P JavaScript_^ ._. By_P the_D way_N it_O is_V written_V by_P John_^ Resig_^ ._.
I've_N never_R played_V with_P DOM_^ ,_, but_& I'll_^ take_V a_D look_N at_P your_D link_N ,_, thanks_N ._.
HTML_^ Parser_^ from_P sourceforge_N is_V useful_A ._. I_O have_V used_V it_O to_P parse_V a_D whole_A bunch_N of_P HTML_^ already_R ._. However_R ,_, parsing_V JS_^ is_V different_A ._. Cheers_^ ._.
This_D is_V probally_R the_D most_R comprehensive_A tool_N out_R there_R ._. Rhino_^ ._. Everything_^ you_O want_V to_P do_V can_V be_V done_V with_P Rhino_N ._.
Kill_V Java_^ Applet_^ via_P Javascript_^
I_O am_V working_V for_P a_D developing_V firm_N and_& am_R doing_V a_D major_A redesign_N on_P a_D Web_N Application_N ,_, which_D reloaded_V everything_N after_P each_D click_V ,_, to_P make_V extensive_A use_N of_P Javascript_^ ,_, so_P it_O actually_R feels_V like_P a_D real_A Web_N application_N ._. One_$ of_P the_D Features_^ is_V to_P use_V a_D web-based_A Painter_^ (_^ think_N of_P MSPaint_N on_P the_D Web_N )_N ,_, which_D I_O embed_V on_P the_D Page_^ on_P Demand_N ._. After_P the_D image_N is_V painted_V and_& uploaded_V ,_, the_D Web-app_N then_R unloads_V the_D applet_N and_& proceeds_N to_P show_V the_D directory_N where_R the_D file_N was_V uploaded_V to_P ._. This_D is_V where_R Trouble_N starts_V ._. It_O all_D works_N on_P IE_N and_& Safari_^ ,_, but_& not_R on_P Firefox_^ 3.5_$ (_$ 3.0_$ works_N perfectly_R though_P )_^ ._. Firebug_^ tells_V me_O that_P the_D expando_N property_N is_V missing_V ._. The_D Web-app_A Tiparlo_^ which_D I_O was_V working_V on_P before_R had_V a_D similar_A Problem_^ (_N in_P fact_N ,_, any_D manipulation_N done_V on_P an_D applet_N via_P jQuery_N is_V faulty_A )_N but_& solved_V that_P Problem_^ by_P wrapping_V a_D div_N around_R and_& controlling_V (_^ hide_V and_& show_V )_$ the_D div_N instead_R of_P the_D applet_N ._. This_^ ,_, unfortunately_R isn't_N applicable_A on_P this_D Web-app_N ,_, because_P the_D Applet_^ has_V to_P be_V destroyed_V and_& not_R just_R hidden_V and_& shown_V ,_, as_P it_O takes_V up_R too_R much_A resources_N to_P be_V run_V the_D entire_A time_N where_R it_O is_V not_R needed_V ._. To_P make_V it_O short_A :_: Is_V it_O possible_A to_P make_V an_D Applet_N destroy_V itself_O via_P Javascript_^ ?_. Alternatively_R :_: Is_V there_X a_D workaround_N on_P the_D jQuery_N /_: expando_N /_: applet_N problem_N ?_. I_O know_V that_D applet_N is_V deprecated_V in_P HTML_^ 4.01_$ strict_A but_& changing_V it_O to_P object_N is_V not_R an_D option_N right_R now_R ._. EDIT_^ :_: I_O have_V added_V a_D Picture_^ of_P Firefox_^ +_& Firebug_^ to_P show_V you_O the_D actual_A Error_^ Message_^ ._. Posting_^ Code_^ does_V no_D god_N ,_, since_P it_O works_V flawless_A on_P every_D other_A Browser_N and_& is_V a_D Firefox_^ 3.5_$ specific_A Problem_^ ._. Here_R be_V pictures_N Note_V :_: You_O can_V ignore_V the_D JS_N Bug_N coming_V from_P button.js_N ._.
What_O happens_V if_P you_O destroy_V the_D DIV_N that_D surrounds_V the_D applet_N ?_. (_$ not_R hide_V it_O ,_, destroy_V it_O with_P removeElement_N and_& delete_V
I_O tried_V that_P ,_, but_& to_P no_D avail_N ._. My_^ Theory_^ :_: I_O imagine_V that_P by_P hiding_V the_D parent_N div_N ,_, the_D Browser_^ itself_O takes_V care_N of_P hiding_V the_D children_N too_R and_& not_R Javascript_^ ._. But_^ ,_, when_R deleting_V the_D parent_N div_N ,_, it_O is_V also_R Javascript's_^ Job_^ to_P delete_V the_D child_N applet_N hence_R causing_V the_D expando_A Bug_N to_P arise_V ._. I_O have_V been_V looking_V at_P the_D jQuery_N Bug_N Tracker_N and_& that_P particular_A Bug_N is_V listed_V on_P the_D Roadmap_^ for_P the_D 1.3_$ ._. 3_$ release_N ._. Since_P I_O cannot_V wait_N for_P it_O to_P fix_V itself_O (_R be_V fixed_V by_P jQuery_N dev_N Team_^ )_^ ,_, I_O have_V to_P find_V a_D workaround_N ._.
I_O would_V suggest_V that_P you_O create_V a_D class_N that_D monitors_V the_D applet_N to_P be_V killed_V ._. run_V the_D monitor_N as_P some_D sort_N of_P servlet_N and_& get_V javascript_N to_P post_V '_G kill_N applet_N '_'' commands_V when_R it_O needs_V to_P be_V killed_V ._.
You_O could_V always_R load_V the_D applet_N in_P a_D an_D iframe_N and_& just_R navigate_V away_R from_P the_D page_N where_R the_D applet_N is_V loaded_V ._. This_D will_V kill_V it_O ._. Your_D other_A option_N if_P you_O want_V to_P call_V the_D destroy_V from_P javascript_N would_V be_V to_P put_V something_N like_P this_D in_P ._. This_D is_V not_R a_D nice_A way_N to_P kill_V an_D applet_N but_& on_P newer_A browsers_N it_O does_V not_R throw_V a_D JS_N error_N ,_, on_P older_A ones_N like_P IE6_N it_O will_V throw_V a_D js_N error_N ._.
Yep_R ,_, this_D one_N solves_V the_D problem_N (_N generates_V a_D new_A one_$ but_& I_O can_V handle_V that_P one_$ )_N ._.
What_O was_V the_D new_A problem_N it_O created_V ,_, just_R curious_A ._.
If_P you_O kill_V the_D applet_N after_P the_D javascript_N call_N finishes_V it_O will_V probably_R avoid_V the_D error_N ._. You_O can_V do_V this_D with_P java.util.Timer.schedule()_N ._.
why_R not_R use_V the_D nuilt_N in_P Applet's_G stop()_G method_N ?_.
How_R to_P wait_V for_P a_D Java_^ applet_N to_P finish_V loading_V on_P Safari_^ ?_.
This_D doesn't_N work_N in_P Safari_^ :_: myMethod_N is_V a_D public_A method_N declared_V in_P MyAppletClass_^ ._. When_R I_O first_R load_V the_D page_N in_P Safari_^ ,_, it_O shows_V the_D alert_N before_P the_D applet_N has_V finished_V loading_V (_N so_P the_D message_N box_N displays_V undefined_A )_N ._. If_P I_O refresh_V the_D page_N ,_, the_D applet_N has_V already_R been_V loaded_V and_& the_D alert_N displays_V function_N myMethod()_^ {_^ [_^ native_A code_N ]_G }_G ,_, as_P you'd_N expect_V ._. Of_P course_N ,_, this_D means_V that_P the_D applet_N methods_N are_V not_R available_A until_P it_O has_V loaded_V ,_, but_& Safari_G isn't_G blocking_V the_D JavaScript_^ from_P running_V ._. The_D same_A problem_N happens_V with_P body_N onLoad_N ._. What_O I_O need_V is_V something_N like_P body_N onAppletLoad=_N "_`` doSomething()_N "_'' ._. How_R do_V I_O work_V around_P this_D issue_N ?_. Thanks_N PS_N :_: I'm_N not_R sure_A if_P it's_N relevant_A ,_, but_& the_D JAR_N is_V signed_V ._.
I_O use_V a_D timer_N that_D resets_V and_& keeps_V checking_V a_D number_N of_P times_N before_P it_O gives_V up_P ._. Note_V that_P this_D assumes_V that_P the_D applet_N will_V run_V in_P Safari_^ ._. I've_N had_V some_D instances_N where_R an_D applet_N required_V Java_^ 6_$ that_D simply_R hangs_V Safari_^ even_R with_P code_N similar_A to_P the_D above_A ._. I_O chose_V to_P do_V browser_N detection_N on_P the_D server_N and_& redirect_V the_D user_N to_P an_D error_N page_N when_R the_D browser_N doesn't_N support_V the_D applet_N ._.
Thank_V you_O ._. It's_V a_D shame_N there_X isn't_N a_D cleaner_A way_N of_P doing_V this_D !_.
You_O can_V also_R simply_R check_V for_P applet_N ._. At_P least_A ,_, you_O can_V in_P Firefox_^ ._. I_O haven't_V checked_V in_P Chrome_^ &_& IE_N ._. That_D way_N ,_, you_O don't_V have_V to_P modify_V the_D applet_N to_P have_V a_D particular_A method_N ._.
I_O had_V a_D similar_A problem_N some_D time_N ago_R and_& adding_V MAYSCRIPT_^ to_P the_D applet_N tag_N solved_V my_D problem_N ._. Take_V a_D peek_N at_P this_D page_N :_: http://www.htmlcodetutorial.com/applets/%5FAPPLET%5FMAYSCRIPT.html_N Hope_^ it_O helps_V !_.
I_O don't_V see_V how_R this_D is_V relevant_A to_P waiting_V for_P the_D applet_N to_P load_V ._. Also_R ,_, the_D example_N on_P the_D page_N doesn't_N work_N in_P Firefox_^ 3.5_$ ._. 4_$ on_P Snow_^ Leopard_^ ._.
AFAIU_N that_D only_R applies_V to_P IE_N ._. In_P other_A words_N ,_, not_R OS_N X_N &_& not_R Safari_^ ._.
Here_R is_V a_D generic_A function_N I_O wrote_V to_P do_V just_R this_D :_: Call_V it_O like_P this_D :_:
You_O could_V also_R try_V document.getElementById_^ (_^ applet_id_^ )_^ ._. isActive_N to_P test_V if_P the_D applet_N is_V loaded_V in_P the_D above_A example_N ,_, it_O worked_V for_P me_O ._. :)_N
But_& if_P you_O do_V that_D ,_, document.getElementById_^ (_^ applet_id_^ )_^ will_V return_V null_A when_R it_O doesn't_G exist_V ,_, and_& then_R it_O will_V throw_V a_D null_A reference_N exception_N of_P "_`` ._. isActive_N "_'' ._. I_O didn't_V want_V to_P have_V to_P test_V by_P exception_N ,_, that_D is_V very_R ,_, very_R slow_A in_P JS_^ ._.
As_R far_R as_P my_D tests_N go_V ,_, `_`` typeof_G (_G document.getElementById_G (_G applet_id_G ))`_G always_R return_V `_`` object_V `_`` ._. Did_V you_O mean_V `_`` typeof_G (_G document.getElementById_G (_G applet_id_G )_G ._. someFunction_N )`_N ?_.
I_O think_V that_D depends_V on_P what_O your_D applet_N is_V and_& how_R it's_N configured_V ._. You_O may_V have_V to_P test_V both_& the_D element_N and_& the_D function_N ._. You_O can't_V just_R test_N typeof_G (_G document.getElementById_G (_G applet_id_G )_G ._. someFunction_N )_N by_P it's_N self_N ,_, as_P document.getElementById_^ (_^ applet_id_^ )_^ may_V return_V null_A early_R in_P the_D life_N cycle_N ,_, throwing_V an_D invalid_A object_N exception_N when_R trying_V to_P access_V ._. someFunction_N ._.
ESRI_N frameworks_N :_: java_N vs_& javascript_N
I'm_N about_P to_P develop_V a_D web_N mapping_N application_N with_P ESRI_^ Products_^ like_P ArcGIS_N Server_N and_& Image_N Server_N ._. I_O can't_V find_V a_D good_A comparison_N between_P the_D Java_^ Web_N ADF_N and_& the_D Javascript_^ Framework_^ ._. They're_N of_P course_N different_A because_P one_$ is_V a_D full_A environment_N and_& the_D other_A is_V only_R client_N side_N but_& it's_N much_R more_R concise_A and_& the_D step_N to_P start_V is_V minimal_A ._. Another_D problem_N is_V that_P the_D Java_^ Web_N ADF_N is_V not_R compatible_A with_P our_D current_A application_N server_N (_G JBoss_G 4.2_$ ._. 2_$ )_N and_& require_V an_D old_A 4.0_$ ._. 2_$ version_N ._. Someone_N out_P there_X has_V experience_N that_D can_V help_V me_O ?_. Many_A thanks_N ._.
Seems_V that_P everybody_N hate_V the_D Java_^ Web_N ADF_N ,_, http://www.spatiallyadjusted.com/2008/01/30/esris-web-adf-is-one-horrific-development-platform_N /_:
I_O don't_V have_V direct_A experience_N with_P the_D Java_^ Web_N ADF_N ,_, but_& I_O have_V worked_V with_P the_D ._. Net_A version_N and_& am_V now_R working_V with_P the_D Flex_^ API_^ ._. The_D main_A problem_N with_P the_D Web_N ADFs_N that_P I_O have_V seen_V and_& heard_V from_P other_A developers_N is_V that_P they're_N very_R cumbersome_A to_P use_V ._. The_D newer_A frameworks_N (_^ Javascript_^ ,_, Silverlight_^ ,_, and_& Flex_^ )_^ are_V much_A lighter-weight_N ,_, easier_A to_P use_V ,_, and_& you_O can_V up_R to_P speed_V much_R quicker_A with_P them_O ._. For_P example_N ,_, a_D test_N application_N I_O wrote_V withg_N the_D ._. Net_^ ADF_^ took_V me_O almost_R three_$ weeks_N before_P I_O gave_V up_R on_P it_O ._. At_P that_D time_N I_O gave_V up_R using_V the_D ADF_N and_& just_R did_V WebService_^ calls_V against_P ArcGIS_N Server_N since_P that_D was_V easier_A to_P do_V than_P to_P try_V to_P figure_V out_R the_D ADF_^ ._. Contrast_^ that_P to_P using_V the_D Flex_^ API_^ on_P a_D similar_A project_N ,_, which_D I_O just_R started_V last_A week_N ,_, and_& I_O have_V an_D almost_R complete_A app_N as_P of_P this_D morning_N ._. I_O would_V avoid_V the_D ADFs_N and_& go_V with_P the_D Javascript_^ API_^ ._.
What_O you_O need_V depends_V on_P what_O you_O want_V ._. If_P you_O want_V to_P create_V just_R a_D viewer_G (_G as_P opposed_V to_P an_D application_N in_P which_D users_N can_V add_V (_G e.g._G draw_N )_$ geographical_A data_N )_N ,_, by_P all_D means_N ,_, use_V the_D javascript_N api_N !_. I've_N been_V working_V with_P the_D web_N adf_G (_G v9.3_G )_G for_P some_D time_N now_R and_& am_R still_R frustrated_A at_P every_D turn_N ._. Primarily_R for_P its_D lack_N of_P proper_A documentation_N ,_, but_& also_R for_P various_A other_A reasons_N ,_, such_A as_P these_D :_: It_O requires_V you_O to_P use_V the_D jsf_N reference_N implementation_N ,_, but_& it_O does_V not_R allow_V you_O to_P use_V some_D of_P its_D basic_A functionality_N ,_, such_A as_P (_G f_G :)_G subviews_G ._. This_D makes_V it_O impossible_A to_P use_V any_D templating_V systems_N ,_, such_A as_P facelets_N ._. Lots_N of_P stuff_N you_O want_V to_P be_V able_A to_P configure_V is_V hardcoded_V in_G esri's_G jar_N files_N ._. For_P example_N ,_, the_D map_N MUST_^ be_V directly_R under_P form_N >_A which_D must_V be_V the_D first_A element_N of_P the_D DOM_^ tree_N ._. If_P not_R ,_, map-movement_A listeners_N such_A as_P the_D ContinueousPanListener_^ are_V unable_A to_P find_V the_D map_N and_& hence_R fail_V at_P updating_V the_D map_N position_N ._. It's_N impossible_A to_P code_V your_D jsp_N pages_N in_P xml_N style_N ,_, since_P the_D web_N adf_G inlines_G pieces_N of_P at_P a_D lot_N of_P places_N in_P your_D code_N ,_, with_P xslt_N ._. Its_D learning_N curve_N is_V very_R steep_A and_& without_P the_D proper_A docs_N ,_, you'll_N be_V looking_V for_P days_N or_& even_R weeks_N on_P how_R to_P do_V the_D most_R trivial_A things_N ._. Some_D of_P these_D end_N up_P to_P be_V downright_A impossible_A or_& impractical_A ,_, because_P you're_N not_R adopting_V esri's_N mindset_N ._. The_D default_N interface_N is_V not_R very_R intuitive_A ._. You_O may_V still_R end_V up_R doing_V lots_N of_P work_N in_P javascript_N to_P get_V the_D way_N the_D application_N draws_V to_P your_D liking_N ._. The_D undo_V functionality_N requires_V a_D versioned_A database_N ,_, which_D is_V impractical_A /_: impossible_A for_P application_N that_D serves_V more_A than_P 10_$ or_& so_R users_N at_P the_D same_A time_N ,_, plus_& ,_, the_D round_A trip_N to_P the_D server_N for_P every_D undo_V action_N is_V a_D waste_N ._. In_P short_A :_: You_O can_V make_V some_D interesting_A apps_N and_& if_P you_O know_V your_D stuff_N ,_, there's_N work_V a_D plenty_N to_P be_V found_V in_P the_D sector_N ,_, but_& if_P its_D just_R for_P '_'' some_D project_N '_'' ,_, I'd_N switch_N to_P some_D .._N any_D !_. other_A framework_N ,_, such_A as_P openGeo_G .._G
I_O accepted_V your_D answer_N because_P is_V the_D most_R complete_A ,_, but_& thanks_N to_P everybody_N for_P yours_D time_N ._.
Web_N ADF_N was_V ESRI's_A first_A attempt_N to_P create_V an_D ArcGIS_N Server_N simplified_V API_^ ._. However_R ,_, as_P time_N progressed_V ,_, the_D Web_N ADF_N ended_V up_R with_P its_D own_A abstractions_N that_D were_V as_R complicated_V as_P the_D "_`` standard_A "_'' ArcGIS_N Server_N ArcObjects_V API_N and_& not_R as_R powerful_A ._. Therefore_R ,_, I_O would_V recommend_V the_D later_A incarnations_N ..._: javascript_N ,_, flex_N ,_, etc_N
Its_D depends_V on_P the_D requirements_N ._. I_O java_V web_N adf_N you_O could_V have_V more_A flexiblity_N to_P use_V arcobjects_N compared_V to_P java_V script_N api_N ._. i_G am_R using_V ._. net_A adf_G i_G was_V wanted_V to_P move_V to_P jsapi_V ._. but_& due_A to_P limitation_N of_P arcobject_N usage_N in_P jsapi_G i_G am_R still_R with_P web_N adf_N ._. I_O think_V still_R jsapi_N is_V not_R grown_V as_P compared_V to_P web_N adf_N ._. for_P just_R viwer_A small_A task_N js_G api_G is_V fine_A ._. but_& if_P you_O are_V creating_V complex_A tasks_N geoprocessing_V then_R its_D worth_N to_P stick_V with_P web_N adf_N ._.
there_X is_V good_A blog_N post_N on_P ESRI_^ Developer_^ Blog_^ today_N ._. have_V a_D look_N ._.
If_P you_O need_V to_P edit_V geospatial_A data_N then_R you_O have_V to_P use_V the_D Web_N ADF_N which_D is_V access_N to_P the_D ArcObjects_^ ._. If_P you_O are_V just_R working_V with_P viewing_V data_N maybe_R some_D redlines_N that_D are_V not_R saved_V to_P your_D geodatabase_N then_R JavaScript_^ API_^ works_V nice_A ._. Geoprocessing_N can_V be_V done_V in_P the_D JSAPI_^ ._. You_O can_V also_R publish_V models_N and_& use_V them_O in_P the_D JSAPI_^ ._. I_O hear_V that_P the_D newer_A APIs_N -_: JavaScript_^ API_^ will_V have_V the_D ability_N to_P edit_V in_P the_D near_A future_N ._. As_P is_V mentioned_V the_D web_N ADF_N is_V broad_A and_& fairly_R complex_A ._. It_O has_V a_D good_A learning_N curve_N to_P it_O ._. I_O have_V just_R started_V getting_V my_D head_N around_P it_O and_& figuring_V out_R the_D logic_N ._. I_O am_V using_V the_D ._. NET_^ ADF_^ v9.3.1_N I_O have_V not_R had_V many_A problems_N with_P it_O once_R I_O started_V figuring_V out_R the_D API_^ ._. It_O is_V not_R for_P the_D casual_A user_N ._.
You_O can_V do_V editing_N via_P the_D JSAPI_N using_V a_D geoprocessing_V service_N too_R ._. Version_N 2.0_$ (_N due_A out_R with_P ArcGIS_N Server_N 9.4_$ )_N will_V have_V editing_N capabilities_N built_V in_P ._. That_D said_V ,_, if_P a_D plan_N involves_V exposing_V editing_N of_P geospatial_A data_N via_P a_D public_A facing_V webpage_N ,_, that_P plan_N needs_V to_P be_V rethought_V ._. If_P you_O are_V working_V internally_R ,_, ArcGIS_^ Engine_^ is_V probably_R a_D better_A option_N ._.
Stay_^ far_R ,_, far_R away_R from_P the_D Java_^ Web_N ADF_N ._. I_O would_V rather_R stick_V hot_A irons_N in_P my_D eyes_N than_P develop_V with_P the_D ADF_^ ._. It_O doesn't_N work_N well_R with_P other_A JSF_N frameworks_N ,_, any_D custom_N functionality_N results_V in_P you_O trying_V to_P develop_V javascript_N -_: but_& only_R by_P first_R embedding_V the_D javascript_N within_P XSL_N page_N fragments_N ._. It_O is_V cumbersome_A ,_, confusing_A ,_, but_& -_: at_P least_A it_O is_V slow_A ._. ESRI_N is_V not_R recommending_V the_D Java_^ Web_N ADF_N for_P any_D new_A applications_N ._.
We've_N just_R gone_V through_P the_D same_A thing_N and_& it_O would_V appear_V the_D ESRI_^ REST_^ APIs_N are_V the_D way_N to_P go_V if_P you_O want_V a_D lightweight_A services_N based_V application_N with_P a_D '_'' rich_A '_G front_A end_N ,_, rather_R than_P the_D ADF_N bloat_N ._. There's_V a_D good_A summary_N of_P all_X the_D ESRI_^ frameworks_N on_P their_D UK_^ site_N here_R ._.
Editing_N with_P the_D REST_N API_N and_& the_D client_N API's_^ (_^ JS_^ ,_, Flex_^ ,_, Silverlight_^ )_^ will_V be_V available_A at_P version_N 10_$ (_N verison_N 9.4_$ renamed_V )_$ which_D will_V be_V released_V in_P Summer_^ 2010_$ ._. This_D thread_N is_V a_D bit_N old_A now_R ,_, but_& I_O concur_V with_P those_D who_O suggest_V not_R using_V the_D Java_^ ADF_^ ._. Use_^ the_D JavaScript_^ ,_, Flex_^ or_& Silver_^ light_A API's_N as_P they_O scale_V much_R better_A ._. If_P you_O need_V to_P perform_V GIS_^ actions_N on_P the_D server_N then_R use_V the_D SOAP_N API_N in_P a_D custom_N web_N service_N ._. Only_R look_V at_P ArcObjects_^ when_R you_O definitely_R have_V to_P and_& then_R make_V sure_A you_O use_V a_D Server_N Object_^ Utility_^ or_& extension_N to_P give_V yourself_O the_D best_A chance_N of_P making_V a_D online_A application_N that_D runs_V quickly_R ._. http://edndoc.esri.com/arcobjects/9.2/net_server_doc/developer/samples/web_applications/arcgis_simple_server_object_extension/8e8b2bf6-1877-4c48-80fe-266f5fa70f57.htm_N
Is_V it_O possible_A to_P create_V arbitrary_A Java_^ objects_N from_P JavaScript_^ in_G ie_G ?_.
LiveConnect_^ is_V a_D Mozilla_^ technology_N that_D bridges_V Java_^ and_& JavaScript_^ ._. Amazingly_R ,_, they've_N started_V maintaining_V it_O again_R for_P recent_A versions_N of_P Firefox_^ ._. In_P Firefox_^ I_O can_V write_V e.g._^ or_& use_V the_D Packages_N ._. namespace_N if_P it's_N not_R a_D java.something_N or_& I_O could_V go_V crazy_A and_& call_V a_D factory_N method_N in_P swing_N easily_R instantiating_V any_D Java_^ object_N ._. Is_V there_X an_D equivalent_N that_D works_V in_G ie_G ?_.
Why_R don't_V you_O try_V it_O ?_.
"_`` Java_^ has_V as_R much_A in_P common_A with_P JavaScript_^ as_P a_D car_N has_V with_P a_D carpet_N ._. "_'' If_P you_O can_V do_V this_D in_P Firefox_^ ,_, it's_^ leaking_V abstractions_N badly_R ,_, not_R to_P mention_V allowing_V external_A webpage_N to_P run_V locally_R executed_V code_N on_P visitor's_N computer_N ._.
Of_P course_N I_O tried_V it_O ,_, and_& of_P course_N it_O doesn't_A work_N this_D way_N in_G ie_G ._. It_O should_V be_V obvious_A that_P the_D question_N means_V '_'' what_O is_V the_D syntax_N for_P doing_V the_D same_A thing_N in_P ie_N '_'' ._.
@Esko_N :_: If_P it_O is_V a_D leaky_A abstraction_N ,_, then_R Firefox_^ is_V leaking_V all_D over_P computers_N everywhere_R ._. The_D security_N model_N protects_V you_O from_P doing_V silly_A things_N like_P being_V able_A to_P access_V the_D local_A file_N system_N :_: `_`` var_G f_G =_A new_A java.io.File_N (_N "_'' test.txt_G ")_G ;_: document.write_G (_G f.exists()_G );_G `_`` results_V in_P :_: `_`` Error_N :_: uncaught_A exception_N :_: Error_N calling_V method_N on_P NPObject_N !_. [_G plugin_G exception_N :_: java.security.AccessControlException_N :_: access_N denied_V (_^ java.io.FilePermission_^ test.txt_^ read_V )_^ ]_^ ._. `_`` However_R ,_, `_`` var_N s_N =_A new_A java.lang.StringBuilder_N (_N "_'' Hello_! ")_N ;_: s.append_G (_G "_`` ,_, World_^ !_. ")_N ;_: document.write_N (_$ s_N );_N `_`` works_V just_R fine_A :_: `_`` Hello_! ,_, World_^ !_. `_``
@joeforker_N :_: I_O really_R wished_V this_D worked_V everywhere_R ._. Imagine_V having_V the_D entire_A Java_^ class_N library_N (_N minus_N anything_N forbidden_V by_P access_N control_N )_$ at_P your_D disposal_N in_P client-side_A JavaScript_^ !_.
@Grant_N As_P of_P JDK_N 6_$ update_V 10_$ ,_, applets_N *_G have_V *_G that_D ._. Packages_N object_V exposing_V the_D entire_A Java_^ class_N library_N ,_, even_R in_G ie_G ._. Who_O knew_V ?_.
As_R far_R as_P I_O know_V ,_, I_O don't_V think_V this_D is_V possible_A -_: Java_^ and_& Javascript_^ are_V completely_R different_A ._. It_O just_R so_R happens_V that_P the_D JS_^ API_^ contains_V a_D Date_N object_N ,_, as_P does_V the_D Java_^ API_^ ._. Edit_^ :_: The_^ Java_^ Scripting_^ API_^ (_^ http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer%5Fguide/index.html#jsengine_^ )_^ seems_V to_P be_V the_D closest_A you_O can_V get_V to_P what_O you're_N trying_V to_P do_V ._.
@Tom_N :_: His_D code_N is_V actually_R creating_V a_D Java_^ `_`` Date_V `_`` and_& referencing_V it_O from_P client-side_A JavaScript_^ ._. Consider_V :_: `_`` var_N r_N =_A new_A java.util.Random()_N ;_: document.write_G (_G r.nextBoolean()_N +_& '_'' ;_: '_'' +_& r.nextDouble()_N +_& '_'' ;_: '_'' +_& r.nextFloat()_N +_& '_'' ;_: '_'' +_& r.nextGaussian()_N +_& '_'' ;_: '_'' +_& r.nextInt()_N +_& '_'' ;_: '_'' +_& r.nextLong()_G );_G `_`` Client-side_A JavaScript_^ doesn't_^ have_V a_D `_`` Random()_N `_`` object_N ,_, and_& it_O certainly_R doesn't_N have_V any_D `_`` next*_G (_G )`_G methods_N available_A ._.
You_O are_V using_V LiveConnect_^ which_D is_V a_D Mozilla-specific_A JavaScript_^ /_: Java_^ bridge_N ._. It_O is_V not_R supported_V in_P other_A browsers_N ._.
What_O you_O can_V do_V in_P Internet_^ Explorer_^ is_V load_N an_D applet_N into_P the_D page_N which_D exposes_V methods_N that_D do_V the_D things_N you_O want_V to_P do_V ._. You_O get_V a_D reference_N to_P the_D applet_N ,_, then_R invoke_V methods_N on_P that_D reference_N ._. In_P your_D applet_N you'd_N need_V a_D public_A method_N getDateFromApplet()_N that_D returns_V a_D java.util.Date_N ._. Note_V that_P what_O I_O present_V should_V work_V ,_, but_& it_O has_V been_V years_N since_P I_O did_V this_D (_N it_O worked_V in_P NS4_N ,_, 6_$ and_& IE_N 4+_$ at_P the_D time_N )_N ._. I_O didn't_V use_N getElementById()_N however_R ,_, I_O used_V var_A applet_N =_A document.myAppletName_N ;_: ._. The_D other_A complication_N to_P this_D is_V that_P if_P you_O want_V this_D to_P execute_V on_P page_N load_N ,_, the_D applet_N will_V almost_R certainly_R not_R be_V ready_A ,_, which_D requires_V code_N something_N like_P :_: Lastly_R ,_, it_O might_V (_V should_V )_R be_V possible_A to_P do_V this_D with_P the_D object_N tag_N ,_, but_& as_P I_O said_V ,_, it_O has_V been_V years_N since_P I_O needed_V to_P interact_V with_P a_D Java_^ applet_N in_P this_D way_N from_P client-side_A JavaScript_^ ,_, so_P I_O haven't_V tested_V it_O ._.
The_D applet_N should_V just_R call_V a_D method_N on_P the_D page_N when_R it_O is_V ready_A ?_.
How_R about_R if_P "_`` the_D thing_N I_O want_V to_P do_V "_'' is_V the_D Rhino_G eval()_G statement_N bundled_V with_P Java_^ 6_$ :-)_N
@joeforker_N :_: 1_$ )_G I'm_G not_R sure_A the_D applet_N can_V call_V a_D method_N on_P the_D page_N ._. You_O have_V to_P wait_V for_P the_D applet_N to_P be_V ready_A ,_, then_R call_V into_P it_O from_P JavaScript_^ ._. 2_$ )_^ Yes_^ ,_, the_D applet_N could_V potentially_R have_V a_D single_A public_N `_`` do()_G `_`` or_& `_`` eval()_G `_`` method_N that_P you_O just_R pass_V Java_^ as_P plain_A text_N to_P and_& have_V it_O execute_V inside_P the_D applet_N on_P the_D browser_N ._.
If_P JavaScript_^ tries_V to_P call_V applet_N methods_N before_P it's_N ready_A ,_, the_D plugin_N will_V make_V the_D call_N wait_N until_P it's_N ready_A ._.
Still_R works_N ,_, years_N ago_P MS_N released_V a_D javascript_N /_: java_N applet_N rpc_N proxy_N ,_, called_V MSRS_N (_N microsoft_N remote_A scripting_N )_N ._. I_O had_V to_P mantain_V a_D web_N application_N built_V using_V MSRS_N ,_, and_& works_V well_R in_P IE7_N ._. The_D javascript_N library_N calls_V a_D public_A method_N of_P the_D java_N class_N ,_, so_P I_O think_V your_D approach_N to_P this_D question_N will_V do_V the_D job_N too_R ._. http://www.ashleyit.com/rs_N /_:
You_O could_V possibly_R use_V DWR_N or_& some_D other_A reverse_A ajax_N library_N that_D will_V allow_V you_O to_P create_V Java_^ objects_N on_P the_D server_N side_N via_P Javascript_^ objects_N ._.
Interesting_A interpretation_N of_P the_D question_N ._.
As_P of_P Java_^ 1.6_$ update_V 10_$ ,_, the_D Inter-Language_^ LiveConnect_^ Bridge_^ attaches_V a_D Packages_N object_V to_P applets_N within_P the_D page_N ,_, just_R like_P the_D Packages_N object_V available_A in_P Firefox_^ ._. So_R in_P a_D page_N with_P at_P least_A one_$ applet_N ,_, even_R in_P Internet_^ Explorer_^ ,_, returns_V the_D current_A date_N ._. It's_N also_R possible_A to_P register_V new_A converters_N for_P convenient_A access_N to_P non-Java_A languages_N running_V in_P the_D Java_^ virtual_A machine_N ._. Of_P course_N JavaFX_N implements_V such_X a_D bridge_N ._. It's_N not_R supposed_V to_P be_V necessary_A to_P wait_V for_P the_D applet_N to_P load_V before_P calling_V it_O from_P JavaScript_^ but_& it's_^ probably_R a_D good_A idea_N ._. The_D Java_^ plugin_N will_V make_V JavaScript_^ wait_V until_P the_D applet_N finishes_N loading_V or_& has_V an_D error_N ._. It_O is_V possible_A for_P the_D applet_N to_P call_V JavaScript_^ in_P the_D web_N page_N as_R soon_R as_P Applet.init()_N is_V called_V ._.
You_O could_V make_V the_D properties_N of_P your_D objects_N available_A through_P a_D JSON_N response_N from_P your_D servlet_N in_P JAVA_^ ?_. Since_P JS_N can_V readily_R use_V JSON_^ and_& it_O is_V light_A weight_N it_O makes_V for_P an_D easy_A way_N to_P crate_V JS_N Objects_N from_P your_D Java_^ Objects_^ ._. Also_R look_V at_P the_D Rhino_^ JavaScript_^ engine_N and_& making_V Java_^ resources_N available_A from_P JavaScript_^ ._. https://developer.mozilla.org/en-US/docs/Rhino_documentation_N
captcha_N Image_N link_N on_P html_N page_N
HI_N ,_, I_O am_V using_V a_D bot_N program_N in_P which_D i_G want_V to_P find_V out_R the_D link_N of_P captcha_N image_N so_P that_P i_G can_V display_V on_P a_D Jframe_^ ._. When_R i_G am_R looking_V to_P page_N source_N their_D is_V no_D image_N link_N of_P captcha_N on_P it.It_N is_V generated_V on_R by_P javascript_N ._. Please_V some_D body_N help_V me_O ._. Thanks_N in_P advance_N ._.
What_O about_P if_P you_O inspect_V the_D dom_N using_V firebug_N ?_. It_O should_V show_V up_R then_R ,_, then_R you_O can_V grab_V it_O dynamically_R with_P javascript_N if_P you_O need_V to_P ._.
Not_R to_P put_V too_R fine_A a_D point_N on_P it_O ,_, but_& the_D captcha_N is_V there_X _for_G a_G reason__G ._. If_P you_O need_V the_D content_N behind_P it_O ,_, contact_V the_D publisher_N ;_: they_O clearly_R don't_N want_V it_O grabbed_V by_P bots_N ._.
Why_R do_V you_O want_V to_P do_V this_D ?_. It_O is_V likely_A that_P looking_V at_P the_D requirement_N rather_R than_P the_D technical_A solution_N would_V be_V the_D best_A option_N here_R ._. If_P you_O have_V a_D bot_N that_D wishes_V to_P spider_N information_N "_'' protected_V "_'' by_P a_D Captcha_^ then_R contacting_V the_D providers_N and_& asking_V for_P direct_A access_N to_P the_D data_N would_V likely_R be_V a_D much_R better_A option_N that_P the_D cat_N mouse_N game_N you_O will_V enter_V without_P the_D providers_N permission_N to_P access_N said_V content_N ._. You_O could_V use_V a_D JavaScript_^ interpreter_N to_P run_V the_D script_N ._. Java_^ 6_$ comes_V with_P one_$ built_V in_P or_& you_O could_V embed_V the_D complete_A HTML_^ frame_N in_P a_D browser_N for_P the_D manual_A part_N ._.
How_R is_V this_D an_D answer_N ._.
Java_^ <_A ->_$ Javascript_N for_P non-Applets_N ?_.
I'm_N working_V with_P an_D existing_V Java_^ codebase_N which_D ,_, while_P it_O can_V be_V invoked_V from_P an_D HTML_^ page_N using_V an_D APPLET_N tag_N ,_, does_V not_R actually_R subclass_V the_D Applet_^ class_N ._. The_D same_A jars_N are_V also_R used_V in_P a_D non-browser_A context_N ,_, so_P they_O did_V not_R subclass_V Applet_^ ._. Now_R I_O need_V to_P communicate_V some_D values_N from_P Java_^ back_R to_P the_D Javascript_^ of_P the_D invoking_V page_N ._. Normally_R one_O would_V do_V this_D using_V JSObject_N ,_, but_& so_R far_R as_P I_O can_V one_O has_V to_P use_V JSObject.getWindow_N which_D only_R works_V for_P subclasses_N of_P Applet_^ ._. Is_V there_R either_& :_: a_D way_N to_P use_V JSObject_N from_P something_N which_D isn't_V an_D Applet_G subclass_G ?_. some_D other_A mechanism_N to_P communicate_V back_R to_P the_D Javascript_^ of_P the_D invoking_V page_N ?_.
Call_V JSObject.getWindow_G (_G this_D )_N in_P the_D applet_N ._. Then_R pass_V the_D JSObject_N into_P the_D code_N that_D needs_V it_O in_P the_D usual_A fashion_N ._.
I_O think_V you're_N actually_R going_V to_P need_V to_P implement_V an_D applet_N in_P a_D jar_N file_N to_P handle_V the_D communication_N between_P your_D code_N and_& the_D browser_N itself_O ._. Perhaps_R just_R use_V the_D non-applet_A jar_N as_P a_D class_N lib_N and_& make_V the_D applet_N jar_N a_D simple_A wrapper_N that_P proxies_N your_D calls_N between_P the_D browser_N and_& the_D Java_^ code_N ._.
What's_N wrong_A with_P returning_V a_D value_N ?_. From_P Javascript_^ You_O can_V access_V the_D Java-object_N by_P using_V getElementById_N (_N "_'' id-of-embed-tag_G ")_G ._. Then_R you_O can_V invoke_V any_D public_A method_N on_P that_D object_N ._. The_D Java_^ object_N returned_V by_P that_D method_N will_V be_V available_A to_P your_D Javascript_^ code_N ._.
Thats_V an_D approach_N I_O had_V not_R considered_V ._. I'd_N end_V up_R polling_N from_P the_D Javascript_^ until_P something_N changes_N ,_, but_& that_D might_V work_V ._.
URL_N decoding_N in_P Javascript_^
I_O want_V to_P decode_V a_D string_N that_D has_V been_V encoded_V using_V the_D java.net.URLEncoder.encode()_N method_N ._. I_O tried_V using_V the_D unescape()_A function_N in_P javascript_N ,_, but_& a_D problem_N occurs_V for_P blank_A spaces_N because_P java.net.URLEncoder.encode()_N converts_V a_D blank_A space_N to_P '_'' +_& '_'' but_& unescape()_G won't_G convert_V '_'' +_& '_'' to_P a_D blank_A space_N ._.
Try_V decodeURI_^ (_^ "")_^ or_& decodeURIComponent_^ (_^ "")_^ !_. -_: )_N
Just_R because_P it_O takes_V a_D string_N as_P argument_N !_. -_: )_N
Using_V JavaScript's_N escape_N /_: unescape_A function_N is_V almost_R always_R the_D wrong_A thing_N ,_, it_O is_V incompatible_A with_P URL-encoding_A or_& any_D other_A standard_A encoding_N on_P the_D web_N ._. Non-ASCII_A characters_N are_V treated_V unexpectedly_R as_R well_R as_P spaces_N ,_, and_& older_A browsers_N don't_N necessarily_R have_V the_D same_A behaviour_N ._. As_P mentioned_V by_P roenving_N ,_, the_D method_N you_O want_V is_V decodeURIComponent()_^ ._. This_D is_V a_D newer_A addition_N which_D you_O won't_V find_V on_P IE_N 5.0_$ ,_, so_R if_P you_O need_V to_P support_V that_D browser_N (_G let's_G hope_N not_R ,_, nowadays_R !_. )_G you'd_G need_V to_P implement_V the_D function_N yourself_O ._. And_& for_P non-ASCII_A characters_N that_D means_V you_O need_V to_P implement_V a_D UTF-8_N encoder_N ._. Code_^ is_V available_A if_P you_O need_V it_O ._.
decodeURI[Component_^ ]_^ doesn't_^ handle_V +_& as_P space_N either_& (_N at_P least_A on_P FF3_N ,_, where_R I_O tested_V )_^ ._. Simple_A workaround_N :_: Indeed_R ,_, unescape_A chokes_N on_P this_D URL_N :_: it_O knows_V only_R UTF-16_N chars_V like_P %u2318_N which_D are_V not_R standard_A (_N see_V Percent-encoding_A )_N ._.
Try_V
How_R to_P register_V a_D JavaScript_^ callback_N in_P a_D Java_^ Applet_^ ?_.
I_O am_V brand_N new_A to_P Java_^ ->_^ JavaScript_^ communication_N ,_, as_P I_O planned_V to_P explore_V it_O this_D week_N ._. A_D good_A opportunity_N here_R ..._: :-)_$ After_P some_D tests_N ,_, it_O seems_V you_O cannot_V pass_V a_D JS_N function_N to_P a_D Java_^ applet_N ._. Unless_P I_O am_V doing_V it_O the_D wrong_A way_N ..._: I_O tried_V :_: where_R Call_^ is_V (_^ are_V )_R defined_V as_P :_: When_R I_O pass_V a_D JS_N function_N (_$ all_D tests_N in_P FF3_N )_N ,_, I_O get_V a_D null_N on_P the_D Java_^ side_N ._. Note_V that_P the_D following_A Java_^ routine_N allows_V to_P display_V the_D JS_^ code_N of_P DumberTest_^ function_N !_. To_P the_D point_N :_: I_O made_V a_D JS_N function_N :_: I_O extract_V the_D name_N of_P the_D JS_N function_N from_P the_D toString_N result_N and_& pass_V it_O to_P Java_^ applet_N ._. I_O don't_V think_V we_O can_V handle_V anonymous_A functions_N because_P Java_^ call_V JS_N functions_N by_P name_N ._. Java_^ side_N :_:
win.eval()_N will_V call_V a_D predefined_A javascript_N ._.
eval_N is_V more_R generic_A ,_, hence_R less_R efficient_A than_P call_N for_P this_D precise_A task_N ,_, and_& it_O is_V more_R complex_A to_P pass_V parameters_N to_P the_D JS_N function_N ._.
Why_R is_V it_O not_R advisable_A to_P use_V JavaScript_^ in_P JSP_^ ?_.
Why_R is_V it_O not_R advisable_A to_P use_V JavaScript_^ in_P JSP_^ ?_. One_$ rationale_N that_P I_O can_V think_V of_P is_V turning_V off_R the_D feature_N in_P browser_N would_V stop_V the_D code_N from_P executing_V ._. Is_V there_R any_D other_A reason_N behind_P this_D ?_.
downvoted_V -_: questions_N like_P this_D should_V give_V references_N to_P any_D such_A assertion_N
@Alnitak_N -_: could_V you_O be_V more_R specific_A
JSP_^ is_V a_D server_N side_N technology_N ._. That_D is_V -_: Server_N parses_V /_: compiles_V all_X the_D information_N and_& then_R sends_V it_O to_P the_D client_N (_G i.e._G your_D browser_N )_N ._. And_& then_R .._$ If_P received_V data_N contains_V ANY_^ javascript_N then_R browser_N interprets_V it_O in_P its_D own_A javascript_N VM_N and_& server_N is_V long_R forgotten_V by_P then_R since_P HTTP_N is_V stateless_A protocol_N ._. Considering_V "_`` not_R recommending_V JS_N in_P web_N "_`` I_N wouldn't_N bother_V about_P it_O ._. Most_A of_P the_D sites_N use_V JS_N extensively_R thus_R turning_V it_O off_R on_P the_D client_N side_N would_V render_V them_O mostly_R useless_A ._.
Afaik_^ ,_, there_X is_V no_D problem_N in_P using_V javascript_N in_P jsp_N ,_, and_& many_A sites_N do_V use_V it_O ._. Especially_R if_P your_D site_N is_V a_D web_N app_N ,_, you_O will_V have_V to_P use_V both_D side_N by_P side_N ._. They_O are_V completely_R independent_A ._. You_O just_R have_V to_P make_V sure_A that_P what_O you_O are_V using_V each_D for_P is_V appropriate_A ._. As_P for_P the_D part_N about_P turning_V off_R javascript_N in_P a_D browser_N making_V the_D site_N unusable_A ,_, it_O is_V true_A whenever_R you_O use_V javascript_N ,_, with_P or_& without_P jsp_N ._.
If_P you_O have_V many_A clients_N ,_, then_R it_O may_V be_V a_D good_A idea_N to_P put_V calculations_N on_P the_D clients_N with_P JavaScript_^ ._. If_P you_O do_V everything_N on_P the_D server_N ,_, you_O are_V just_R going_V to_P waste_V the_D many_A processing_N powers_N provided_V by_P the_D client's_N browsers_N ,_, and_& the_D speed_N advantage_N of_P Java_^ would_V be_V for_P naught_N if_P too_R many_A clients_N make_V the_D server_N busy_A ._. (_$ Thanks_N to_P @Subtenante_V in_P the_D comments_N for_P pointing_V this_D out_R !_. )_$ ._. But_& on_P the_D other_A side_N ,_, Java_^ running_V on_P the_D server_N is_V faster_R than_P JavaScript_^ on_P the_D client_N ,_, and_& it_O won't_G suffer_V from_P redundant_A code_N on_P the_D client_N ,_, for_P testing_N which_D browser_N the_D client_N runs_V ._. JavaScript_^ has_V its_D uses_N as_P trex_N pointed_V out_R ,_, though_R ._. Since_P it_O runs_V on_P the_D client_N ,_, it_O can_V for_P example_N validate_N form_N fields_N before_P sending_V it_O to_P the_D server_N ._.
Java_^ is_V faster_R than_P JS_N ,_, ok_N ,_, but_& you_O have_V one_$ server_N ,_, and_& there_X may_V be_V LOTS_^ of_P clients_N ._. Heavy_A functionalities_N may_V show_V a_D gain_N of_P performance_N when_R left_V out_R to_P the_D client_N ,_, relieving_V the_D server_N from_P it_O ._.
Thanks_N for_P the_D comment_N ._. I_O agree_V with_P you_O ,_, and_& amended_V my_D answer_N ._. I_O feel_V today_N that_P i_G don't_G in_P particular_A like_P my_D answer_N very_R much_R ._. If_P i_G could_V ,_, i_G would_V delete_V my_D answer_N and_& tell_V the_D questioner_N to_P select_V another_D one_$ from_P below_P :)_^ But_^ i_G hope_N you_O agree_V with_P my_D answer_N now_R :)_$
He's_N got_V to_P mean_V "_`` don't_N use_N java_N scriptlets_N "_'' ,_, which_D is_V the_D stuff_N between_P %_N %_N >_A ._. The_D biggest_A reason_N has_V got_V to_P be_V maintainability_N and_& debugging_N ;_: scriptlets_N make_V everything_N make_V both_D very_R difficult_A ._. On_P the_D other_A hand_N ,_, if_P you_O implement_V taglibs_N ,_, you_O can_V extract_V any_D logic_N to_P a_D real_A java_N class_N ,_, which_D is_V easily_R debugged_V ,_, and_& you_O will_V still_R be_V able_A to_P open_V things_N up_R in_P a_D visual_A xml_N /_: html_N editor_N ,_, since_P taglibs_N are_V a_D valid_A xml_N structure_N ._. Now_R ,_, it_O is_V a_D bad_A idea_N to_P do_V validation_N on_P the_D client_N side_A (_N in_P javascript_N )_N ._. Users_N can_V disable_V javascript_N or_& even_R access_V a_D url_N directly_R to_P get_V around_P validation_N ,_, which_D opens_V you_O up_R to_P exploits_N ._.
"_`` Now_R ,_, it_O is_V a_D bad_A idea_N to_P do_V validation_N on_P the_D client_N side_A (_N in_P javascript_N )_N ._. "_'' It's_N bad_A to_P *_N only_R *_G validate_V on_P the_D client_N side_N ._. Doing_V it_O in_P *_N addition*_N ,_, however_R ,_, makes_V for_P better_A responsiveness_N (_$ no_D need_N to_P wait_V for_P the_D server_N to_P reject_V it_O and_& reduction_N of_P load_N of_P the_D server_N )_N ._.
I_O would_V not_R disagree_V with_P this_D ._.
Online_A exam_N web_N application_N
I_O am_V developing_V an_D online_A exam_N using_V JSP_^ /_: Servlets_N which_D is_V nearing_V completion_N ._. I'm_N planning_V to_P add_V timer_N function_N for_P the_D entire_A exam_N that_P shows_N elapsed_V time_N in_P minutes_N ._. How_R do_V I_O implement_V this_D with_P a_D fool-proof_A technique_N to_P implement_V this_D ,_, because_P using_V javascript_N would_V mean_V that_P the_D user_N can_V turn_V off_R the_D feature_N in_P the_D browser_N ._. Any_D help_N on_P this_D would_V be_V highly_R appreciated_V ._.
You_O can_V find_V a_D very_R good_A script_N here_R :_: http://codecanyon.net/item/online-skills-assessment/9379895_N It_O is_V a_D good_A starting_N point_N for_P people_N looking_V to_P develop_V Online_^ Exam_^ System_^
Server_N Side_^ Store_^ the_D time_N elapsed_V in_P the_D users_N session_N ._. Your_D pages_N can_V display_V the_D time_N remaining_V in_P javascript_N ,_, People_N can_V mess_N with_P the_D javascript_N but_& they_O have_V no_D capability_N of_P messing_V with_P your_D timing_N logic_N always_R get_V the_D time_N remaining_V from_P server_N ._. Current_^ Time_^ -_: Start_^ Time_^ on_P all_D answers_N etc_N
Record_V the_D time_N that_P the_D user_N started_V and_& finished_V on_P the_D server_N ._. The_D user_N will_V have_V to_P press_V a_D button_N to_P indicate_V that_P they've_N started_V the_D exam_N ,_, which_D can_V trigger_V the_D server_N to_P stamp_V the_D start_N time_N ;_: when_R the_D final_A answer_N is_V submitted_V ,_, the_D server_N can_V record_V the_D total_A time_N taken_V ._.
You_O can_V make_V javascript_N a_D requirement_N in_P the_D user's_N browser_N ,_, and_& use_V javascript+AJAX_N -_: every_D minute_N ,_, get_V the_D updated_V time_N from_P the_D server_N or_& make_V sure_A the_D times_N are_V synchronised_V ._.
you_O can_V make_V javascript_N a_D requirement_N OR_N use_N ajax_G ????_G huh_G ?_.
my_D bad_N ..._: meant_V '_'' and_& '_''
At_P Terracotta_^ ,_, we_O recently_R developed_V a_D reference_N web_N application_N for_P online_A exam-taking_N ._. We_O also_R implemented_V a_D client-side_A timer_N with_P Javascript_N and_& the_D code_N is_V open-source_A if_P you'd_N like_P to_P take_V a_D look_N ._. The_D main_A page_N for_P the_D docs_N and_& live_A demo_N is_V http://reference.terracotta.org_N The_D project_N source_N for_P the_D last_A release_N is_V here_R :_: http://svn.terracotta.org/svn/forge/projects/exam/tags/release-1.0.1_N The_D actual_A Javascript_^ timer_N code_N is_V here_R ._. Hopefully_R that's_G enough_A pointers_N to_P go_V on_R ._.
The_D better_A way_N to_P manage_V timer_N is_V on_P client_N side_N instead_R of_P server_N side_N ._. What_O will_V happen_V if_P the_D network_N is_V very_R slow_A ?_. A_D guy_N with_P poor_A internet_N speed_N can_V not_R finish_V exam_N since_P your_D logic_N is_V on_P server_N side_N ._. You_O may_V look_V Skill_N Evaluation_N Lab_N exam_N software_N timer_N management_N and_& implement_V like_P this_D ._.
I_O prefer_V you_O buy_V available_A online_A scripts_N in_P market_N as_P starting_V point_N for_P it_O ._. This_D will_V save_V you_O time_N ,_, cost_N and_& testing_N efforts_N ._. Below_^ is_V one_$ of_P the_D fine_A scripts_N that_P I_O worked_V it_O and_& it_O worked_V like_P charm_N ._. Using_V this_D as_P base_N I_O developed_V a_D online_A testing_N portal_N of_P over_P 1000_$ users_N using_V computer_N adaptive_A test_N ._. http://codecanyon.net/item/online-skills-assessment/9379895_N It_O is_V a_D good_A starting_N point_N for_P people_N looking_V to_P develop_V Online_^ Exam_^ System_^
Session_N management_N in_P GWT_N without_P using_V Java_^ on_P the_D server_N ?_.
I_O am_V using_V GWT_^ for_P my_D client_N side_N application_N ._. I_O am_V not_R using_V GWT_N /_: Java_^ for_P the_D server_N ._. However_R ,_, I_O am_V not_R sure_A how_R I_O can_V handle_V session_N management_N ._. The_D GWT_^ application_N resides_V on_P one_$ page_N ,_, all_D server_N calls_N are_V done_V via_P AJAX_^ ._. If_P a_D session_N expires_V on_P the_D server_N ..._: let's_N assume_V the_D user_N didn't_N close_V the_D browser_N ,_, but_& left_V the_D application_N open_N ,_, how_R could_V my_D server_N notify_V the_D application_N that_P the_D session_N has_V expired_V and_& that_P the_D client_N side_N portion_N should_V show_V the_D login_N screen_N again_R ?_. What_O is_V meant_V by_P client_N side_N session_N management_N ?_. That_D seems_V inherently_R insecure_A ._. I'm_N not_R looking_V for_P code_N ._. I'm_N looking_V for_P ideas_N ,_, techniques_N ,_, potential_A solutions_N etc_G ._. I've_N considered_V Comet_^ http://en.wikipedia.org/wiki/Comet_(programming_^ )_^ ,_, but_& that_P doesn't_N seem_V like_P that_D will_V work_V very_R well_R without_P using_V Java_^ on_P the_D server_N side_N ._. Maybe_R ,_, I'm_N wrong_A ?_. I_O don't_V want_V to_P poll_V the_D server_N either_R ._. Any_D thoughts_N or_& insight_N ?_.
What_O should_V happen_V if_P the_D session_N expired_V on_P the_D server-side_N ,_, then_R the_D next_A time_N the_D client_N sends_V a_D request_N to_P the_D server_N ,_, it_O will_V either_R create_V a_D new_A session_N ,_, or_& ,_, more_R likely_A ,_, send_V back_R a_D message_N to_P the_D client_N that_P it_O is_V trying_V to_P access_V a_D page_N without_P a_D session_N ,_, and_& send_V them_O to_P the_D login_N screen_N ._. However_R ,_, you_O will_V still_R need_V to_P wait_V until_P the_D client_N sends_V a_D message_N to_P the_D server_N ._.
Without_P knowing_V how_R you're_N doing_V your_D RPC_^ is_V working_V ,_, its_D hard_A to_P give_V good_A advice_N ._. If_P your_D AJAX_^ service_N requires_V a_D user_N to_P be_V authenticated_V (_A IE_N have_V a_D valid_A session_N )_N ,_, it_O is_V ok_A to_P just_R send_V a_D 401_$ error_N saying_V that_P the_D user_N is_V invalid_A ._. Client-side_N can_V interpret_V the_D 401_$ error_N as_P a_D message_N that_P it_O should_V set_V the_D user_N up_R for_P re-authentication_N ._.
I'm_N not_R using_V RPC_^ ,_, the_D GWT_^ request_N object_N is_V just_R a_D wrapper_N around_P XMLHttpRequest_N ._. Great_A idea_N !_. I've_N never_R thought_V about_P changing_V the_D http_A status_N code_N ._. I_O may_V end_V up_R using_V this_D ._.
We_O handled_V this_D in_P our_D application_N ,_, by_P detecting_V when_R the_D server_N sent_V back_R a_D redirect_N to_P the_D login_N screen_N (_N it_O would_V come_V through_P the_D response_N to_P the_D Ajax_^ call_N )_N ,_, and_& popped_V up_R a_D dialog_N asking_V the_D user_N for_P their_D password_N again_R ,_, but_& pre-filled_V their_D username_N ._. We_O then_R posted_V that_P to_P the_D same_A place_N the_D login_N page_N does_V ,_, as_P if_P it_O was_V the_D login_N page_N ,_, and_& so_R the_D user_N was_V logged_V into_P this_D new_A session_N automatically_R ._. Finally_R we_O just_R re-submitted_V the_D ajax_N call_N again_R ,_, so_P it_O was_V a_D seamless_A process_N to_P the_D user_N (_G eg_G :_: they_O didn't_V have_V to_P click_V the_D action_N again_R )_^ ._. Since_P we_O stored_V all_X the_D state_N on_P the_D client_N ,_, and_& not_R in_P session_N variables_N we_O didn't_V have_V any_D problems_N trying_V to_P persist_V data_N across_P sessions_N ._.
different_A WAR_N files_N ,_, shared_A resources_N
Suppose_V you_O have_V several_A applications_N which_D share_V the_D same_A code_N and_& most_A of_P the_D other_A resources_N ,_, but_& have_V a_D somewhat_R different_A look_N and_& feel_N ,_, some_D labels_N change_V ,_, etc_G ._. (_N think_V branding_V )_N ._. If_P each_D web_N app_N is_V to_P go_V in_P its_D own_A WAR_N file_N ,_, where_R do_V you_O put_V the_D shared_A resources_N ?_. I_O already_R use_V the_D classpath_N to_P share_N classes_N and_& property_N files_N ._. But_& what_O about_P javascript_N and_& css_N files_N ?_. Is_V the_D best_A way_N to_P create_V and_& deploy_V one_$ extra_A WAR_N file_N that_D will_V serve_V these_D shared_V files_N to_P whatever_D other_A application_N requires_V them_O ?_. I_O also_R thought_V of_P a_D build_V script_N that_D does_V some_D magic_N and_& from_P a_D common_A source_N spews_V out_R the_D (_N slightly_R )_$ different_A WARs_N ,_, but_& I_O don't_V like_P it_O because_P it_O just_R complicates_V stuff_N unnecessarily_R when_R you_O need_V to_P build_V /_: test_N /_: run_V a_D single_A application_N ._. Any_D other_A tips_N and_& tricks_N would_V be_V appreciated_V ._.
You_O can_V deploy_V both_D WARs_N in_P the_D same_A EAR_N and_& put_V common_A resources_N in_P the_D EAR_N ._. Then_R put_V the_D appropriate_A dependencies_N in_P the_D manifest_A of_P the_D web_N apps_N to_P link_V to_P the_D jar_N files_N in_P the_D ear_N ._.
If_P you_O don't_V want_V to_P go_V the_D EAR_N route_N ,_, using_V tomcat_N ,_, etc_N ;_: there_X are_V a_D few_A other_A ways_N to_P achieve_V the_D consistency_N you_O want_V ._. If_P you_O want_V to_P share_V just_R js_N and_& css_N ,_, look_V into_P pack_N :_: tag_N ._. You_O could_V host_V the_D ._. js_V and_& css_V from_P an_D apache_A server_N ,_, set_V up_R your_D httpd.conf_N so_P your_D webapps_N can_V call_V it_O ,_, then_R use_V pack_N :_: tag_N from_P your_D application_N wars_N -_: DRY_N and_& compression_N in_P one_$ step_N ._.
Thanks_N for_P the_D replies_N so_R far_R ,_, but_& I'm_N afraid_A I_O forgot_V to_P mention_V that_P the_D WARs_N will_V be_V deployed_V in_P different_A environments_N that_D are_V completely_R isolated_V from_P each_D other_A ._. So_P maybe_R having_V a_D common_A WAR_N deployed_V next_A to_P the_D actual_A application_N is_V the_D only_A option_N ._. I_O think_V I'll_N go_V with_P the_D following_N :_: WAR1_N ,_, WAR2_N containing_V app-specific_A stuff_N CommonWAR_N containg_V common_A stuff_N (_N no_D kidding_G )_G EAR1_N :_: WAR1_N +_& CommonWAR_N ,_, to_P be_V deployed_V in_P env1_N EAR2_N :_: WAR2_N +_& CommonWAR_N ,_, to_P be_V deployed_V in_P env2_N
The_D CommonWar_^ serves_V no_D purpose_N in_P this_D case_N ._. Just_R put_V your_D common_A resources_N in_P each_D WAR_N in_P it's_G lib_G directory_N ,_, or_& in_P the_D EAR_N itself_O ._. A_D war_N is_V not_R meant_V to_P just_R package_V resources_N ,_, the_D EAR_N serves_V that_P purpose_N ._. Although_P less_A configuration_N is_V required_V if_P you_O simple_A put_V it_O in_P each_D WAR_N ._.
Yes_R ,_, but_& if_P I_O put_V the_D common_A resources_N in_P each_D WAR_N file_N then_R I_O duplicate_V those_D resources_N :_: won't_N do_V that_D ._. If_P I_O put_V the_D common_A resources_N in_P the_D EAR_N file_N then_R it_O must_V contain_V all_X the_D WAR_N files_N that_D depend_V upon_P those_D resources_N :_: can't_N do_V either_R ,_, one_$ WAR_N must_V be_V deployed_V per_P environment_N ._.
Since_P you_O are_V deploying_V the_D CommonWAR_N in_P each_D EAR_N anyway_R ,_, the_D same_A duplication_N exists_V ,_, and_& you_O have_V wrapped_V the_D code_N in_P a_D WAR_N for_P no_D reason_N ._.
The_D CommonWAR_N is_V deployed_V in_P two_$ EARs_N ,_, but_& it_O is_V the_D *_N same_A *_N CommonWAR_N ,_, so_P it_O is_V NOT_R duplicated_A "_'' for_P development_N "_'' ._. To_P be_V honest_A ,_, I_O have_V reverted_V to_P 2_$ EAR_N files_N and_& one_$ WAR_N file_N ,_, see_V my_D updated_V post_N :)_N
Update_^ Yes_^ ,_, me_O again_R ._. I_O have_V actually_R changed_V my_D mind_N (_N again_R :)_G )_G ._. I_O am_V currently_R trying_V (_N being_V more_R prudent_A here_R ):_G (_G Common_A )_N WAR_N :_: containing_V the_D application_N ,_, common_A (_^ most_A part_N )_N +_& some_D specific_A stuff_N EAR1_N :_: CommonWAR_N +_& specific_A configuration_N file_N for_P env1_N EAR2_N :_: CommonWAR_N +_& specific_A configuration_N file_N for_P env2_N The_D configuration_N file_N is_V picked_V up_R by_P the_D WAR_N ._. It_O is_V on_P the_D the_D EAR_N classpath_N and_& only_R contains_V one_$ property_N '_'' application_N '_'' with_P a_D value_N ._. The_D single_A WAR_N will_V then_R use_V this_D information_N where_R appropriate_A to_P distinguish_V between_P the_D two_$ apps_N (_G config_G ,_, style_N sheets_N ,_, ..._: )_N ._. With_P my_D solution_N of_P EAR1_N =_A CommonWAR_N +_& WAR1_N ,_, EAR2_N =_A CommonWAR_N +_& WAR2_N ,_, it_O was_V too_R difficult_A or_& impossible_A to_P lookup_V static_A resources_N in_P the_D CommonWAR_N without_P using_V a_D web_N url_N (_G e.g._G images_N in_P PDF_N documents_N generated_V with_P iText_G )_G ._.
A_D strategy_N that_P I_O have_V seen_V used_V for_P such_A product-line_N like_P configurations_N is_V using_V WAR_N overlays_N when_R building_V with_P maven_N ._. You_O define_V a_D common_A WAR_N that_D contains_V the_D common_A stuff_N and_& overlay_N it_O with_P those_D other_A WARs_N that_D contain_V the_D specific_A stuff_N to_P generate_V different_A WARs_N for_P every_D application_N ._. This_D method_N is_V probably_R most_R useful_A if_P you_O deploy_V the_D WAR-variants_N on_P different_A machines_N ._. But_& I'm_N not_R sure_A whether_P I_O can_V actually_R recommend_V this_D ._. Remember_V to_P specify_V the_D overlays_N configuration_N if_P you_O actually_R override_V stuff_N ,_, since_P otherwise_R the_D overriding_V order_N is_V not_R deterministic_A ._. It_O might_V even_R change_V with_P a_D maven-war-plugin_A upgrade_N ._. (_$ It_O did_V in_P our_D case_N ._. )_N
How_R about_P putting_V your_D css_N and_& js_N in_P the_D classpath_N and_& serve_V them_O with_P a_D servlet_N ?_. Then_R you_O can_V build_V the_D common_A resources_N as_P a_D jar_N and_& that_P jar_N can_V even_R contain_V the_D servlet_G (_G resource_N dispatcher_N if_P you_O like_P )_N and_& the_D war_N files_N can_V contain_V the_D jar_N file_N in_P the_D WEB-INF_N /_: lib_N folder_N ._.
You_O can_V also_R dispatch_V images_N this_D way_N
Which_D JavaScript_^ library_N you_O recommend_V to_P use_V with_P Java_^ EE_^ +_& Struts_^ +_& iBatis_^ ?_.
Which_D JavaScript_^ library_N you_O recommend_V to_P use_V with_P Java_^ EE_^ +_& Struts_^ +_& iBatis_^ ?_. Something_N like_P Ext_^ JS_^ ,_, Dojo_^ ,_, frameworks_N that_D can_V be_V easily_R integrated_V with_P Struts_^ ._.
What_O are_V you_O using_V the_D JS_N library_N for_P ?_. Do_V you_O need_V widgets_N and_& advanced_A UI_N components_N ?_. What_O are_V your_D licensing_N restrictions_N ?_.
I_O need_V JS_N for_P display_N enhancements_N ,_, and_& I_O need_V free_A libraries_N
There_X exists_V a_D framework_N that_D is_V supposed_V to_P tie_V in_P nicely_R with_P Java_^ Server_N /_: Middleware_^ called_V JSON-RPC_N However_R I_O have_V never_R used_V it_O and_& cannot_G vouch_G for_P it_O .._V Aside_R from_P that_D my_D favourite_A framework_N is_V cough_N jQuery_N edit_N after_P reading_V more_R closely_R ,_, the_D JSON-RPC_N is_V not_R quite_R what_O you_O are_V looking_V for_P .._N but_& it_O still_R might_V be_V useful_A for_P ya_O to_P look_V into_P ;)_N
Here's_V a_D good_A article_N on_P Dojo_^ for_P Java_^ Developers_^ ._.
Some_D more_R recent_A :_: http://www.sitepen.com/blog/2008/05/06/dojo-json-rpc-java_N AND_& http://www.sitepen.com/blog/2011/01/03/many-comet-solutions-for-your-real-time-apps_N /_:
You_O must_V choose_V the_D Javascript_^ library_N based_V on_P what_O you_O expect_V from_P the_D library_N ,_, not_R based_V on_P the_D server_N libraries_N ._. The_D tipical_A JS_N libraries_N (_G Ext_G JS_N ,_, JQuery_N ,_, Prototype_^ ,_, Dojo_^ ,_, YUI_^ ,_, etc_G )_G work_N on_P the_D browser_N and_& don't_N have_V any_D dependence_N on_P server_N tecnology_N ._. If_P you_O are_V looking_V for_P a_D way_N to_P use_V your_D server_N POJO's_N from_P javascript_N take_V a_D look_N at_P DWR_^ ._. This_D library_N is_V now_R part_N of_P the_D dojo_N foundation_N ,_, but_& I've_^ used_V it_O with_P jQuery_N and_& Prototype_N with_P ease_N ._.
would_V suggest_V you_O go_V for_P Struts_^ 2_$ ._. It_O has_V built_V in_P dojo_N and_& also_R has_V options_N to_P plugin_V other_A libraries_N like_P prototype_N ,_, jquery_N ,_, gwt_N ,_, yui_N ,_, etc_G ._. Should_V be_V really_R handy_A ,_, since_P you're_N using_V Struts_^ as_P your_D web_N layer_N .._N
Sorting_V domain_N names_N
Has_V anyone_N implemented_V sorting_V a_D list_N of_P domain_N names_N ?_. I_O have_V seen_V some_D applications_N sort_V them_O as_P flat_A strings_N ,_, but_& the_D problem_N is_V that_P you_O end_V up_R scattering_V all_X the_D related_A hosts_N in_P a_D domain_N :_: a.me.com_G a.you.com_G b.me.com_G b.you.com_G So_R ,_, the_D basic_A logic_N I_O came_V up_R with_P reverse_N the_D order_N of_P the_D labels_N ,_, then_R sort_N ._. FQDNs_N of_P one_$ label_N should_V be_V treated_V as_P hostnames_N ,_, and_& probably_R sorted_V separately_R ,_, maybe_R at_P the_D top_N ._. Ideally_R I_O am_V looking_V for_P javascript_N and_& java_N versions_N ._. I_O also_R don't_V know_V if_P this_D design_N works_V well_R for_P the_D newer_A internationalized_A domain_N names_N ._.
Err_N ,_, what's_N wrong_A with_P doing_V exactly_R what_O you_O suggest_V ,_, reversing_V the_D strings_N and_& sorting_V alphabetically_R ?_.
You_O could_V split_V the_D domain_N names_N into_P individual_A fields_N and_& do_V successive_A sorts_N ._. You_O can_V create_V a_D domain_N name_N object_N to_P have_V three_$ fields_N and_& create_V a_D list_N of_P domain_N names_N to_P sort_V ._. For_P each_D of_P the_D three_$ fields_N ,_, do_V a_D sort_N ._. At_P the_D end_N ,_, you_O have_V a_D sort_N list_N of_P domain_N names_N with_P related_A hosts_N together_R ._.
split_V by_P "_`` ._. "_'' then_R piece_N together_R "_`` ._. com.au_G "_`` and_& "_'' ._. co.uk_N "_'' vs_& "_'' ._. com_N "_''
@Bala_N :_: Three_$ fields_N ?_.
From_P the_D few_A examples_N given_V ,_, I_O assumed_V there_X were_V three_$ fields_N (_G foo.bar.com)_G ._. If_P there_X were_V only_R two_$ fields_N (_G foo.com)_G ,_, then_R the_D third_A field_N would_V be_V null_A ._.
I_O don't_V know_V about_P Java_^ and_& Javascript_^ in_P particular_A ,_, but_& many_A languages_N provide_V some_D sort_N of_P array_N data_N structure_N that_D can_V be_V lexicographically_R sorted_V ._. So_R ,_, like_P you_O said_V ,_, convert_V "_`` a.example.com_N "_'' into_P {_A "_`` com_N "_'' ,_, "_`` example_N "_'' ,_, "_'' a_D "_`` }_N ,_, and_& just_R let_V the_D default_N sorting_N rules_N run_V ._. A_D lexicographical_A sort_N will_V then_R do_V exactly_R what_O you_O want_V ._. If_P you_O have_V a_D list_N of_P local_A domains_N as_R well_R as_P FQDNs_N ,_, I_O agree_V you'd_N want_V to_P separate_V those_D out_P ._. Anything_N that_P doesn't_N have_V a_D period_N in_P it_O could_V be_V filtered_V out_R first_R ._. Or_& ,_, you_O could_V resolve_V those_D all_D to_P FQDNs_N and_& then_R just_R sort_V the_D whole_A list_N ._. Some_D Python_^ code_N that_D does_V this_D (_N should_V map_V to_P Javascript_^ fairly_R closely_R ):_^ This_^ prints_V :_:
Based_V on_P Tom's_N answer_N ..._: The_D print_N statements_N work_V (_$ when_R uncommented_A )_N in_P the_D SquareFree_^ JavaScript_^ Development_^ Environment_^ ,_, a_D handy_A place_N to_P test_V out_R javascript_N fragments_N ..._:
Thank_V you_O for_P the_D translation_N ,_, Stobor_^ !_.
This_D is_V how_R it's_N done_V in_P Perl_^ :_:
Best_N source_N code_N formatter_N for_P Javascript_^ ?_.
I've_V been_V digging_N through_P Stack_^ Overflow_^ as_R well_R as_P a_D number_N of_P Google_^ searches_N ,_, and_& I_O cannot_V find_V a_D satisfactory_A code_N formatter_N for_P Javascript_^ ._. I_O have_V found_V several_A related_A tools_N ,_, such_A as_P syntax_N highlighters_N and_& pretty-printers_N ,_, but_& I_O am_V looking_V for_P a_D tool_N that_P I_O can_V ideally_R create_V a_D wrapper_N for_P in_P Eclipse_^ and_& simply_R run_V from_P the_D menu_N bar_N ._. Hence_R ,_, if_P any_D Java-based_A ones_N are_V available_A ,_, that_D is_V a_D big_A plus_N ._. Free_^ and_& /_: or_& open-source_N is_V preferred_V as_R well_R ._. I_O am_V looking_V for_P something_N that_P my_D development_N group_N can_V use_V to_P maintain_V a_D consistent_A code_N style_N ._. Thanks_N ._. [_G EDIT_G ]_G Thank_V you_O for_P the_D incredibly_R fast_A responses_N !_. I_O would_V upvote_V you_O both_D if_P I_O had_V any_D karma_N ._. But_& especially_R kRON_N for_P linking_V to_P the_D format_N customizations_N page_N ._. [_G EDIT_G ]_G Related_V question_N on_P Stack_^ Overflow_^ ._.
In_P one_$ breath_N :_: Aptana_^ Studio_^ !_. Yes_^ ,_, it's_^ Java_^ based_V and_& free_A (_^ Eclipse_^ ,_, as_P standalone_N or_& plugin_G )_G ._. You_O can_V also_R customize_V the_D formatting_N ._.
If_P you_O already_R use_V Eclipse_^ ,_, I_O recommend_V you_O to_P try_V Aptana_^ ,_, you_O can_V install_V it_O as_P an_D Eclipse_^ Plugin_^ ._.
If_P you_O also_R need_V Java_^ programming_N i_G can_V recommend_V '_G IntelliJ_A IDEA_N '_'' It_O offers_V excellent_A JavaScript_^ formatting_V and_& refactoring_V out_P of_P the_D box_N ._.
This_D is_V by_P far_R the_D best_A I've_N come_V across_P :_: http://jsbeautifier.org_N Its_D an_D online_N tool_N ,_, but_& source_N is_V available_A ._.
Have_V you_O tried_V jsfiddler_N ._. It's_N great_A for_P trying_V things_N out_R with_P Javascript_^ ._. Built_V in_G JSLint_G something_N called_V Tidy_^ ._. Not_R sure_A whether_P that_D infers_G jstidy_G Piotr_^ Zalewa_^ is_V the_D guy_N who_O wrote_V it_O ._. May_V be_V worth_A giving_V him_O a_D Tweet_^ @zalun_N to_P confirm_V ._.
If_P you_O need_V source_N code_N ,_, you_O might_V check_V out_R the_D code_N I_$ present_A in_P the_D article_N A_^ JavaScript_^ Formatter_^ ._.
If_P you_O are_V using_V notepad++_A ,_, you_O can_V try_V jsminnpp_N plugin_N
For_P Eclipse_^ IDE_^ you_O can_V use_V JavaScript_^ Code_^ Formatter_^ based_V on_P Goolge's_^ Style_^ Guide_^ For_P IntelliJ_^ IDEA_^ you_O can_V use_V the_D same_A js_N code_N formatter_N xml_N file_N ,_, but_& previously_R you_O have_V to_P install_V a_D special_A plugin_N Eclipse_^ Code_^ Formatter_^ Plugin_^ ,_, which_D solves_V the_D problem_N of_P maintaining_V a_D common_A code_N style_N in_P team_N environments_N where_R both_D IDEA_^ and_& Eclipse_^ are_V used_V
Java_^ method_N never_R called_V while_P using_V JSON_^ RPC_^ in_P Struts2_N
I'm_N trying_V to_P get_V some_D code_N working_V that_P a_D previous_A developer_N has_V written_V ._. Yep_^ ,_, he_O now_R left_V the_D company_N ._. :-(_$ I_O have_V a_D JSON_N RPC_N call_N being_V made_V from_P the_D JS_^ code_N ._. The_D JS_N all_R runs_V fine_N and_& the_D callback_N method_N gets_V an_D object_N back_R (_$ not_R an_D error_N object_N )_N ._. But_& the_D method_N on_P the_D Java_^ class_N never_R gets_V hit_V ._. The_D smd_N method_N does_V get_V hit_V though_R ._. I'm_N stumped_V as_P to_P why_R ,_, or_& what_D I'm_N missing_V ._. I've_N read_V JSON_N plugin_N page_N over_P and_& over_P ._. I_O think_V I_O just_R need_V another_D set_N of_P eyes_N ._. Note_V :_: no_D errors_N in_P the_D Tomcat_^ console_N ,_, no_D JS_N errors_N ._. Anyone_N got_V any_D clues_N ?_. Cheers_^ Jeff_^ Porter_^
I'm_N guessing_V that_P you_O need_V to_P update_V the_D smd()_N method_N to_P actually_R call_V updateRowValueForField()_N rather_R than_P simply_R return_V immediately_R ._. Looks_V like_P the_D previous_A developer_N never_R actually_R hooked_V up_R the_D methods_N ._.
You_O forgot_V to_P include_V the_D javascript_N code_N ._. From_P the_D example_N :_: Are_V you_O sure_A you_O call_V service.updateRowValueForField_G (_G key_N ,_, value_N ,_, fieldname_G )_G and_& not_R something_N different_A ?_. Further_R ,_, your_D method_N returns_V a_D void_N (_G e.g._G doesn't_G return_N anything_N )_N ._. What_O did_V you_O expect_V to_P get_V ?_.
New_A version_N fixes_N my_D problems_N ._. Google_^ JSON_^ plugin_N
I_O know_V its_D old_A post_N ..._: but_& i_G am_R not_R able_A to_P get_V this_D work_N either_& ..._: i_G am_R on_P 2.2_$ ._. 3_$ and_& in_P javascript_N when_R i_G say_V service.doSomething_N ..._: it_O says_V doSomething_N not_R defined_V ..._: sounds_N logical_A as_P there_X is_V no_D method_N saying_V doSomething_N in_P Json_N service_N ._. That_D example_N is_V not_R correct_A .._N something_N is_V missing_V there_R ..._:
How_R can_V I_O set_V globals_N to_P JSLint_V to_P ignore_V for_P a_D whole_A set_N of_P files_N ?_.
I'd_N like_P to_P run_V JSLint4Java_N as_P part_N of_P my_D build_V process_N ._. I_O have_V about_P 1000_$ JS_N files_N in_P a_D library_N ,_, and_& don't_N really_R want_V to_P add_V a_D header_N to_P each_D of_P them_O --_: especially_R since_P many_A of_P them_O are_V from_P an_D external_A library_N (_^ Dojo_^ )_^ ._. If_P I_O don't_V add_V the_D header_N ,_, though_R ,_, JSLint_N complains_V about_P the_D same_A five_$ globals_N on_P nearly_R every_D single_A file_N ._. Is_V there_X a_D way_N to_P tell_V JSLint_N to_P ignore_V them_O ?_. Some_D things_N I've_V thought_N of_P so_R far_R :_: Some_D sort_N of_P AntFileMap_^ task_N that_D creates_V a_D virtual_A directory_N hierarchy_N that's_V an_D exact_A copy_N of_P another_D hierarchy_N ,_, but_& has_V a_D filter_N applied_V to_P each_D file_N (_N in_P this_D case_N ,_, prepend_N with_P a_D /_: *globals_N *_G /_: header_G )_G ._. Hack_V JSLint4Java_N to_P accept_V a_D set_N of_P globals_N which_D it_O prepends_V as_P a_D comment_N to_P the_D beginning_N of_P every_D file_N it_O processes_V ._. I've_N never_R seen_V anything_N like_P (_N 1_$ )_N ._. (_N 2_$ )_N seems_V relatively_R easy_A ,_, but_& I'd_N prefer_V to_P use_V original_A tools_N if_P possible_A ._. Any_D better_A suggestions_N ?_.
Hi_^ James_^ ,_, I'm_N curious_A if_P you_O ever_R worked_V out_R a_D solution_N to_P this_D ._.
From_P http://www.ohloh.net/p/jslint4java_^ News_^ 2009-12-02_$ ._. jslint4java_N 1.3_$ ._. 3_$ is_V released_V ._. Noteworthy_A alterations_N :_: Add_V support_N for_P the_D predef_N option_N ,_, to_P allow_V specifying_V a_D list_N of_P predefined_A global_A variables_N ._. Sounds_V like_P what_O you_O might_V be_V looking_V for_P ._. Try_V the_D --_: help_N option_N to_P get_V the_D syntax_N ,_, maybe_R ?_.
You_O can_V also_R use_V LintRoller_^ -_: a_G Node.js_G utility_N for_P checking_V entire_A directories_N or_& projects_N against_P JSLint_N ,_, JSHint_N and_& other_A validations_N ._.
I've_N been_V playing_V with_P DWR_N and_& converters_N for_P a_D while_N and_& I_O really_R wanted_V to_P map_V my_D Java_^ classes_N to_P JavaScript_^ classes_N ._. Using_V DWR_N converters_N ,_, I_O have_V the_D option_N to_P point_V out_R what_O is_V the_D name_N of_P my_D JS_N constructor_N given_V a_D Java_^ class_N ._. So_R far_R so_R good_A ..._: The_D problem_N arises_V when_R my_D JS_N constructor_N is_V within_P a_D JS_N package-like_A name_N (_N just_R like_P YUI's_N package_N system_N ,_, eg_G my.beautiful.package.MyClass_G )_G ._. DWR's_V current_A implementation_N doesn't_N allow_V me_O to_P use_V this_D kind_N of_P construct_N ,_, giving_V me_O a_D SyntaxError_^ when_R I_O try_V to_P use_V it_O ._. Is_V there_X an_D elegant_A way_N arround_P this_D limitation_N ?_.
I_O don't_V have_V a_D workaround_N ,_, but_& for_P your_D information_N there_X is_V an_D opened_V issue_N about_P this_D :_: http://bugs.directwebremoting.org/bugs/browse/DWR-103_N If_P I_O am_V wrong_A and_& it_O is_V not_R the_D same_A problem_N as_P what_O you_O described_V ,_, let_V me_O know_V and_& I_O will_V delete_V this_D comment_N ._.
Thats_N right_R ,_, I_O wonder_V if_P they_O will_V fix_V it_O only_R for_P version_N 3_$ ._. Here_R we_O use_V version_N 2_$ yet_R ._.
As_R far_R as_P I_O know_V the_D this_D isn't_N possible_A directly_R ._. I_O have_V in_P my_D current_A work_N project_N experimented_V with_P enhancing_V each_D returned_V object_N on_P the_D client_N side_N with_P methods_N from_P a_D Javascript_^ class_N ,_, which_D gets_V the_D result_N that_P I_O think_V you_O are_V interested_A in_P ._. I'll_N have_V to_P check_V at_P work_N on_P monday_^ (_^ now_R is_V sunday_^ )_^ that_P augmentProto_^ is_V correct_A one_$ to_P use_V ,_, but_& I_O think_V it_O is_V ._. There_X may_V even_R be_V a_D better_A hook_N into_P DWR_N that'll_N allow_V you_O to_P do_V this_D on_P the_D fly_N automagically_R ._.
One_$ thing_N that_P I_O did_V ,_, I_O "_`` globalized_V "_'' all_D needed_V constructors_N used_V by_P DWR_N ,_, (_N using_V the_D notation_N as_P follows_V *_N my_beautiful_package_MyClass_N *_N )_N although_P it_O works_V ,_, its_D not_R that_P elegant_A =/_N
I'd_N like_P to_P use_V the_D Rhino_^ JavaScript_^ compiler_N to_P compile_V some_D JavaScript_^ to_P ._. class_N bytecode_N files_N for_P use_N in_P a_D project_N ._. It_O seems_V like_P this_D should_V already_R exist_V ,_, since_P there_X are_V groovyc_N ,_, netrexxc_N ,_, and_& jythonc_N tasks_N for_P Groovy_^ ,_, NetREXX_^ (_^ !_. )_^ and_& Jython_^ ,_, respectively_R ._. Has_V anyone_N used_V or_& written_V such_X an_D Ant_N task_N ,_, or_& can_V anyone_N provide_V some_D tips_N on_P how_R to_P write_V one_$ ?_. Ideally_R it_O would_V have_V some_D way_N to_P resolve_V dependencies_N among_P JavaScript_^ or_& Java_^ classes_N ._.
Why_R not_R simply_R use_V java_N task_N ?_. Any_D objections_N ?_.
Hmm_N ,_, the_D main_A concern_N is_V handling_V dependencies_N among_P Java_^ and_& JavaScript_^ classes_N ._. Still_R ,_, this_D might_V be_V enough_A to_P work_V for_P now_R --_: thanks_N ._.
Here_R is_V a_D sample_N build.xml_N I_O use_V for_P my_D rhino_N applications_N ._. If_P you_O have_V lots_N of_P javascript_N files_V you_O just_R need_V to_P keep_V adding_V more_A tags_N ~_N :_: ant_N compile_V jar_N run_N ~_N
I'm_N using_V RequireJS_N in_P my_D project_N ,_, which_D includes_V a_D script_N that_P traces_N out_R dependencies_N between_P modules_N ,_, and_& combines_V them_O into_P a_D single_A JavaScript_^ file_N ._. Optionally_^ ,_, it_O can_V also_R minify_V the_D combined_A js_N file_N with_P the_D Google_^ Closure_^ compiler_N ._. Once_P it's_N in_P this_D form_N ,_, where_R all_D dependencies_N are_V included_V in_P a_D single_A js_N file_N ,_, the_D file_N can_V be_V easily_R compiled_V using_V jsc_N ._. Here's_V a_D segment_N of_P my_D ant_N script_N which_D I_O use_V to_P create_V the_D single_A combined_A js_N file_N ,_, compile_V it_O to_P a_D class_N file_N ,_, and_& then_R create_V an_D executable_A JAR_N :_: The_D complete_A build_V script_N can_V be_V found_V here_R ._.
*_G Punches_^ in_P the_D arm*_N ._. According_V to_P wikipedia_N ,_, I_O am_V required_V to_P do_V so_R after_P you_O jinxed_V me_O and_& before_P I_O can_V speak_V again_R ._. http://en.wikipedia.org/wiki/Jinx_N
You_O misread_V that_P -_: I_O get_V to_P punch_V you_O now_R ._. And_& get_V me_O my_D Coke_^ ._.
Everything_^ ._. JavaScript_^ was_V named_V this_D way_N by_P Netscape_^ to_P confuse_V the_D unwary_A into_P thinking_V it_O had_V something_N to_P do_V with_P Java_^ ,_, the_D buzzword_N of_P the_D day_N ,_, and_& it_O succeeded_V ._. The_D two_$ languages_N are_V entirely_R distinct_A ._.
Javascript_^ was_V originally_R called_V Livescript_^ ,_, and_& the_D world_N would_V probably_R be_V a_D better_A place_N today_N if_P they_O hadn't_V renamed_V it_O !_.
I_O doubt_V it_O was_V to_P cause_V confusion_N -_: what's_V the_D benefit_N to_P the_D company_N of_P that_D ?_. I_O suspect_V the_D _intent__N was_V to_P ride_V on_P the_D success_N of_P Java_^ ,_, although_P the_D _effect__N was_V what_O you_O stated_V ._.
"_`` ride_V the_D success_N of_P java_N "_'' by_P calling_V something_N unrelated_A with_P a_D similar_A name_N ?_. That_D sounds_V very_R much_R like_P "_`` causing_V confusion_N for_P marketing_N purposes_N "_'' to_P me_O ._.
Sun_^ tried_V this_D naming_N trick_N again_R with_P the_D "_`` Sun_^ Java_^ Desktop_^ "_`` ,_, which_D was_V essentially_R a_D branded_A version_N of_P Gnome_^ and_& had_V nothing_N to_P do_V with_P Java_^ ._.
@Pax_N -_: Put_V another_D way_N ,_, it_O confused_V the_D unwary_A into_P thinking_V it_O had_V something_N to_P do_V with_P Java_^ ,_, the_D buzzword_N of_P the_D day_N ._.
Yeah_! ,_, and_& it_O worked_V ._. @Greg_^ Hewgill_^ ,_, the_D world_N might_V be_V a_D better_A place_N ,_, but_& Javascript_^ probably_R wouldn't_N be_V where_R it_O is_V today_N ._.
@Just_V Some_D Guy_^ -_: Well_^ said_V ._. I_O improved_V my_D answer_N by_P adding_V some_D of_P your_D wit_N ._.
The_D reason_N they_O changed_V the_D name_N was_V to_P in_P some_D way_N pacify_V Sun_^ who_O at_P that_D point_N were_V involved_V with_P Netscape_^
Java_^ and_& Javascript_^ are_V similar_A like_P Car_^ and_& Carpet_^ are_V similar_A ._.
Awesome_A answer_N ._. I_O need_V to_P remember_V it_O !_.
from_P ddaa_A import_N wit_N #_# I_O wish_V I_O had_V come_V up_R with_P that_D one_$ !_.
That_D is_V the_D best_A answer_N ever_R ._. If_P it_O is_V original_A (_G i.e._G you_O hadn't_V heard_V it_O from_P somewhere_R else_A )_N you_O are_V a_D genius_N ._. I_O am_V going_V to_P start_V quoting_V this_D ..._:
Unfortunately_R ,_, I_O can't_V claim_N originality_N ._. I_O don't_V recall_N where_R I_O first_R heard_V it_O ,_, however_R ._.
Damn_^ ,_, this_D answer_N earned_V you_O 690_$ rep_N atleast_N ._. It_O is_V a_D great_A answer_N still_R ._.
Great_A answer_N ._. Simple_A and_& lets_V you_O get_V the_D idea_N ._.
He_O didn't_V ._. 200_$ max_N per_P day_N ._.
i_G don't_G think_V it's_N a_D flaw_N ._. he_O deserved_V his_D points_N ._. this_D is_V a_D short_A answer_N ,_, and_& all_D he_O needs_V to_P know_V ._.
lol_N ,_, very_R nice_A comparison_N ._.
I_O would_V vote_V this_D up_R twice_R if_P I_O could_V ._. Great_A analogy_N !_.
+1_G (_G just_R to_P help_V Tim_^ !_. )_G
I_O would_V have_V said_V car_N and_& bus_N ._.
@Ian_^ Quigley_^ :_: Ah_N ,_, that_D must_V have_V been_V where_R I_O saw_V it_O !_. Thanks_N ._.
Greg_^ Hewgil_^ ,_, you're_^ my_D new_A hero_N man_N !_.
I_O prefer_V the_D version_N about_P ham_N and_& hamster_N ._.
This_D is_V a_D bad_A answer_N ._. Javascript_^ and_& Java_^ are_V both_D languages_N for_P writing_V code_N ,_, but_& they_O are_V used_V in_P different_A contexts_N ._. Car_^ and_& Carpet_^ are_V nothing_N at_P all_D like_P each_D other_A ._. Javascript_^ and_& Java_^ are_V easy_A to_P confuse_V for_P a_D beginner_N
2_$ years_N late_R ,_, but_& thank_V you_O so_R much_A for_P this_D thoughtful_A explanation_N ._. It's_A way_N more_R useful_A and_& informative_A than_P the_D selected_V answer_N ,_, and_& deserves_V far_R more_A votes_N IMO_^
I_O upvote_V both_& in_P such_A cases_N ._. We_O need_V the_D right_A answer_N ,_, but_& holy_A shmoly_N ,_, geeks_N like_P us_O we_O really_R need_V more_A of_P this_D humor_N
You_O might_V also_R here_R strongly-typed_A and_& loosely-typed_A instead_R of_P statically-typed_A and_& dynamically-typed_A ._.
One_$ is_V essentially_R a_D toy_N ,_, designed_V for_P writing_V small_A pieces_N of_P code_N ,_, and_& traditionally_R used_V and_& abused_V by_P inexperienced_A programmers_N ._. The_D other_A is_V a_D scripting_V language_N for_P web_N browsers_N ._.
Overtly_R trollish_A ,_, but_& somewhat_R funny_A ._.
Gave_V me_O a_D chuckle_N ._. Enough_^ for_P +1_N
If_P we_O could_V do_V categorical_A votes_N ,_, I'd_N vote_N +1_$ funny_A ,_, but_& otherwise_R ,_, meh_N ._.
I_O was_V about_P to_P berate_V you_O for_P dissing_V Javascript_^ when_R it_O had_V come_V so_R far_R in_P the_D last_A few_A years_N ._. Then_R I_O rid_V the_D second_A paragraph_N and_& L'dOL_N ._. But_& ,_, hang_V on_P a_D mo_N ,_, Java_^ is_V my_D main_A income_N earner_N ..._: :-)_N
I_O downvoted_V this_D ,_, then_R read_V it_O properly_R ,_, then_R upvoted_V it_O ._.
Poetry_^ ,_, Shog_^ ._. Sheer_^ poetry_N ._.
Perfect_^ -_: +1_N for_P humor_N ,_, as_P someone_N else_R said_V ,_, but_& -1_$ for_P actually_R answering_V the_D question_N ._.
downvoted_V for_P dissing_V Javascript_^ ,_, then_R noticing_V you_O were_V talking_V about_P JAVA_^ and_& upvoted_G (_G and_& lol'ed_G alot_G )_G ._.
-1_$ factually_R incorrect_A and_& not_R that_P funny_A ._.
It's_N sad_A that_P I_O can_V only_R upvote_V once_R ._. This_D is_V going_V on_P my_D Facebook_^ profile_N somewhere_R ..._:
ROFL_N ..._: That_D was_V funny_A ._.
But_& which_D language_N goes_V with_P which_D description(wasn't_G java_G meant_V to_P be_V used_V as_P a_D well_R not_R quite_R scripting_N but_& everything_N else_R for_P the_D net_N during_P some_D point_N in_P the_D 90s-by_A sun_N and_& netscape_G )_G ?_. Also_R who_O writes_V small_A pieces_N of_P code_N in_P java_N ?_.
@Roman_V well_R of_P course_N ,_, the_D proper_A Java_^ way_N is_V to_P write_V at_P least_A 20_$ different_A classes_N using_V intricate_A inheritance_N and_& other_A cool_A OOP_N features_N to_P complete_V a_D FizzBuzz_G :)_G
Jeeez_^ ._. I_O almost_R downvoted_V the_D answer_N ,_, when_R I_O started_V to_P read_V the_D first_A sentence_N :D_N
twitted_V right_R after_P finishing_V laughing_N ..._:
Oh_! my_D gosh_N ..._: hilarious_A !_. +1_$
Actually_R ,_, javascript_N isn't_N just_R for_P browsers_N ._. It's_V a_D complete_A scripting_N language_N often_R used_V for_P many_A applications_N that_D requires_V scripts_N ._. And_& Java_^ isn't_^ just_R for_P inexperienced_A or_& idiots_N ._. It_O can_V acomplish_V many_A things_N within_P no_D time_N ._.
Brilliant_A ._. A_D heartfelt_A +1_N
They_O are_V independent_A languages_N with_P unrelated_A lineages_N ._. Brendan_^ Eich_^ created_V Javascript_^ originally_R at_P Netscape_^ ._. It_O was_V initially_R called_V Mocha_^ ._. The_D choice_N of_P Javascript_^ as_P a_D name_N was_V a_D nod_N ,_, if_P you_O will_V ,_, to_P the_D then_R ascendant_A Java_^ programming_N language_N ,_, developed_V at_P Sun_^ by_P Patrick_^ Naughton_^ ,_, James_^ Gosling_^ ,_, et_^ ._. al_G ._.
Javascript_^ isn't_^ just_R for_P HTML_^ pages_N ,_, Java6_N now_R includes_V it_O ,_, BIRT_^ uses_V it_O for_P report_N scripting_N -_: I'm_N sure_A that_P there_X are_V other_A non-HTML_A uses_N beyond_P these_D two_$ ._.
You're_V right_R ._. With_P the_D development_N of_P Rhino_N ,_, and_& some_D of_P the_D other_A developments_N you_O mentioned_V ,_, Javascript_^ has_V come_V pretty_R far_R out_P of_P the_D browser_N sandbox_N ._.
Scripting_^ is_V simply_R one_$ particular_A kind_N of_P programming_N ..._: instead_R you_O should_V say_V perhaps_R that_P Java_^ is_V a_D compiled_V programming_N language_N and_& javascript_N is_V a_D scripting_N or_& interpreted_V programming_N language_N ._.
Take_V a_D look_N at_P the_D Wikipedia_^ link_N JavaScript_^ ,_, despite_P the_D name_N ,_, is_V essentially_R unrelated_A to_P the_D Java_^ programming_N language_N ,_, although_P both_D have_V the_D common_A C_N syntax_N ,_, and_& JavaScript_^ copies_N many_A Java_^ names_N and_& naming_N conventions_N ._. The_D language_N was_V originally_R named_V "_`` LiveScript_^ "_'' but_& was_V renamed_V in_P a_D co-marketing_A deal_N between_P Netscape_^ and_& Sun_^ ,_, in_P exchange_N for_P Netscape_^ bundling_V Sun's_^ Java_^ runtime_N with_P their_D then-dominant_A browser_N ._. The_D key_A design_N principles_N within_P JavaScript_^ are_V inherited_V from_P the_D Self_N and_& Scheme_N programming_N languages_N ._.
They_O have_V nothing_N to_P do_V with_P each_D other_A ._. Java_^ is_V statically_R typed_V ,_, compiles_V ,_, runs_V on_P its_D own_A VM_^ ._. Javascript_^ is_V dynamically_R typed_V ,_, interpreted_V ,_, and_& runs_V in_P a_D browser_N ._. It_O also_R has_V first-class_A functions_N and_& anonymous_A functions_N ,_, which_D Java_^ does_V not_R ._. It_O has_V direct_A access_N to_P web-page_A elements_N ,_, which_D makes_V it_O useful_A for_P doing_V client-side_A processing_N ._. They_O are_V also_R somewhat_R similar_A in_P syntax_N ,_, but_& that's_V about_P it_O ._.
Like_P everybody's_N saying_V ,_, they're_N pretty_R much_R entirely_R different_A ._. However_R ,_, if_P you_O need_V a_D scripting_V language_N for_P your_D Java_^ application_N ,_, Javascript_^ is_V actually_R a_D really_R good_A choice_N ._. There_X are_V ways_N to_P get_V Javascript_^ running_V in_P the_D JVM_^ and_& you_O can_V access_V and_& manipulate_V Java_^ classes_N pretty_R seamlessly_R once_P you_O do_V ._.
In_P addittion_N to_P being_V entirely_R different_A languages_N ,_, in_P my_D experience_N :_: Java_^ looks_V nice_A at_P first_A ,_, later_R it_O gets_V annoying_A ._. JavaScript_^ looks_V awful_A and_& hopeless_A at_P first_A ,_, then_R gradually_R you_O really_R start_V to_P like_V it_O ._. (_$ But_& this_D may_V just_R have_V more_A to_P do_V with_P my_D preference_N of_P functional_A programming_N over_P OO_^ programming_N ..._: ;)_N
Same_A experience_N here_R ._.
Practically_R every_D PC_N in_P the_D world_N sells_V with_P at_P least_A one_$ JavaScript_^ interpreter_N installed_V on_P it_O ._. Most_^ (_^ but_& not_R "_`` practically_R all_D ")_$ PCs_N have_V a_D Java_^ VM_^ installed_V ._.
A_D Re-Introduction_^ to_P Javascript_^ by_P the_D Mozilla_^ team_N (_N they_O make_V Firefox_^ )_^ should_V explain_V it_O ._.
It's_N like_P they_O didn't_V bother_V to_P edit_V it_O even_R a_D little_A ._.
Java_^ is_V to_P JavaScript_^ as_P ham_N is_V to_P hamster_N
Where_R do_V you_O think_V ham_N comes_V from_P ?_. ;)_N
It_O comes_V from_P a_D big_A hamster_N ;_: it's_N so_R big_A that_P you_O could_V confuse_V it_O with_P a_D pig_N ._. `_`` ;)_$ `_``
Don't_N be_V confused_V with_P name_N .._^ Java_^ was_V created_V at_P Sun_^ Microsystems_^ (_^ now_R Oracle_^ )_^ ._. But_^ ,_, JavaScript_^ was_V created_V at_P Netscape_^ (_^ now_R Mozilla_G )_G in_P the_D early_A days_N of_P the_D Web_N ,_, and_& technically_R ,_, Java-Script_^ is_V a_D trademark_N licensed_V from_P Sun_^ Microsystems_^ used_V to_P describe_V Netscape_^ s_N implementation_N of_P the_D language_N ._. Netscape_^ submitted_V the_D language_N for_P standardization_N to_P ECMA_^ (_^ European_^ Computer_^ Manufacturer_^ s_N Association_^ )_^ and_& because_P of_P trademark_N issues_N ,_, the_D standardized_A version_N of_P the_D language_N was_V stuck_V with_P the_D awkward_A name_N ECMAScript_N ._. For_P the_D same_A trademark_N reasons_N ,_, Microsoft_^ s_N version_N of_P the_D language_N is_V formally_R known_V as_P JScript_N ._. In_P practice_N ,_, just_R about_P everyone_N calls_V the_D language_N JavaScript_^ ._. The_D real_A name_N is_V ECMAScript_^ ._. Both_D are_V fully_R different_A languages_N !!!_V
Actually_R ,_, now_R that_P I_O read_V it_O over_P ,_, I_O think_V I_O actually_R don't_V need_N to_P escape_V the_D string_N I'm_N sending_V back_R at_P all_D ..._: That_D is_V ,_, StringEscapeUtils.escapeJavaScript_N would_V be_V useful_A if_P the_D resulting_V value_N was_V printed_V in_P the_D page_N ,_, like_P :_: Or_& am_V I_O missing_V something_N and_& there_X would_V still_R be_V a_D valid_A reason_N to_P do_V the_D escape_N in_P the_D original_A case_N ?_. (_$ when_R it_O is_V returned_V as_P a_D series_N of_P bytes_N back_R to_P an_D ajax_N onreadystatechange_N handler_N and_& assigned_V to_P a_D js_R variable_A )_N
I'm_N not_R sure_A if_P I_O understand_V your_D problem_N exactly_R ._. Are_V you_O concerned_A about_P Person_N A_N logging_V off_R ,_, Person_N B_N logs_N in_P from_P the_D same_A PC_N and_& browser_N instance_N ,_, and_& then_R you_O want_V to_P prevent_V Person_N B_N from_P seeing_V whatever_D A_N was_V viewing_V ?_. If_P so_R ,_, it_O should_V be_V sufficient_A to_P check_V the_D credentials_N of_P the_D user_N on_P every_D page_N load_N ._. Check_V that_P the_D current_A user_N is_V authorized_V to_P view_V the_D data_N being_V requested_V ._.
How_R will_V hitting_V the_D back_A button_N cause_V the_D user_N to_P see_V another_D user's_N data_N ?_. What_O is_V your_D use_N case_N ?_. Is_V it_O designed_V for_P a_D public_A terminal_N ,_, where_R each_D user_N submits_V data_N and_& then_R leaves_V ?_. In_P this_D case_N ,_, associate_V each_D input_N with_P a_D unique_A session_N id_N ._. Keep_V track_N of_P valid_A session_N ids_N in_P your_D server_N ._. Once_R the_D input_N is_V submitted_V ,_, remove_V that_P session_N id_N from_P the_D valid_A ids_N ._. If_P it_O comes_V up_R again_R ,_, then_R don't_N display_V the_D information_N ._.
I_O agree_V -_: it_O sounds_V like_P he's_N trying_V to_P solve_V a_D problem_N that_P shouldn't_N exist_V ..._: running_V the_D session_N as_P a_D singleton_N or_& something_N ?_.
Your_D problem_N is_V that_P you're_N trying_V to_P keep_V the_D client_N from_P seeing_V what's_N on_P his_D or_& her_D own_A computer_N ._. You_O can't_V keep_V them_O from_P looking_V at_P their_D browser_N cache_N ._. You_O can't_V keep_V them_O from_P disabling_V JavaScript_^ (_^ and_& thus_R your_D scripting_N code_N )_N ._. You_O can't_V keep_V them_O from_P using_V a_D browser_N that_P doesn't_N observe_V that_P "_`` repost_A "_'' convention_N that_P you_O mention_V ._. This_D is_V not_R a_D problem_N that_D can_V be_V solved_V with_P JavaScript_N or_& a_D server-side_A solution_N ._. That_D part_N of_P why_R "_`` breaking_V the_D back_A button_N "_'' is_V frowned_V upon_P :_: it_O doesn't_N actually_R solve_V anything_N ._.
Actually_R ,_, you_O can_V turn_V caching_V off_R ._. Most_A browsers_N respect_V this_D ,_, but_& it's_N not_R guaranteed_V ._.
As_P I_O mentioned_V in_P my_D post_N here_R ,_, you_O can_V turn_V off_R caching_N but_& history_N may_V be_V treated_V differently_R by_P different_A user_N agents_N ._. The_D HTTP_^ specification_N makes_V a_D distinction_N between_P the_D two_$ but_& doesn't_N really_R define_V the_D concept_N of_P history_N as_R well_R as_P it_O defines_V caching_N ._.
I_O had_V a_D similar_A problem_N in_P ._. Net_^ ._. I_O added_V the_D following_V javascript_N to_P my_D logout_A page_N :_: document.execCommand_G (_G "_`` ClearAuthenticationCache_^ "_'' ,_, "_'' false_A ")_N ;_: now_R if_P you_O press_V the_D back_A button_N you_O need_V to_P authenticate_V again_R ._.
Have_V you_O considered_V that_P a_D malicious_A user_N could_V simply_R turn_V off_R Javascript_^ ?_.
It_O sounds_V like_P your_D real_A problem_N is_V that_P the_D re-post_A works_N ._. That_D would_V probably_R be_V because_P you_O :_: are_V trusting_V credentials_N from_P the_D browser_N rather_R than_P the_D current_A session_N ,_, or_& are_V not_R checking_V that_P the_D current_A session_N is_V allowed_V access_N the_D data_N represented_V by_P a_D key_N /_: identifier_N value_N sent_V from_P the_D browser_N I_O recommend_V that_P after_P a_D user_N has_V logged_V in_P you_O never_R trust_V a_D user_N name_N submitted_V by_P the_D browser_N ._. Ideally_R use_V the_D security_N services_N of_P a_D framework_N like_P Spring_^ Security_^ but_& in_P their_D absence_N you_O can_V rely_V on_P HttpServletRequest.getUserPrincipal()_N ._. To_P make_V sure_A the_D current_A session_N is_V allowed_V access_N the_D data_N you_O could_V use_V an_D Access_N Control_N List_N mechanism_N provided_V by_P a_D framework_N such_A as_P Spring_^ Security_^ or_& include_V a_D WHERE_G OWNER=_G ?_. clause_N in_P your_D database_N queries_N ._.
If_P you're_N worried_V about_P someone_N seeing_V what_O was_V in_P a_D form_N in_P a_D previous_A page_N you_O could_V use_V a_D hidden_A form_N for_P the_D "_`` real_A "_'' post_N and_& use_V one_$ that's_N just_R for_P display_N for_P the_D user_N ._. When_R the_D user_N submits_V the_D display_N form_N ,_, you_O copy_V all_D of_P the_D fields_N to_P the_D hidden_A form_N ,_, clear_A the_D display_N form_N ,_, then_R submit_V the_D hidden_A one_$ ._. I_O agree_V with_P everyone_N else_R -_: fiddling_V with_P the_D back_A button_N this_D is_V a_D bad_A way_N to_P handle_V protecting_V information_N ._.
I'm_N not_R 100%_$ sure_A this_D is_V a_D fix_N to_P your_D issue_N ,_, as_P I_O don't_V fully_R understand_V how_R you_O would_V get_V another_D user's_N data_N using_V back_R ._. However_R ,_, I_O know_V that_P for_P the_D web_N apps_N I_O develop_V I_O try_V to_P exclusively_R use_V Redirect_^ After_P Post_^ to_P avoid_V back_R button_N and_& refresh_N duplicate_V form_N submissions_N ._.
Jeff_^ Atwood_^ described_V a_D way_N to_P prevent_V CSRF_N and_& XSRF_N attacks_N here_R ._. You_O could_V use_V this_D technique_N to_P solve_V your_D "_`` users_N seeing_V what_O they_O should_V not_R see_V "_`` problem_N ._.
I'm_N not_R sure_A I_O understand_V your_D problem_N correctly_R ,_, but_& it_O sounds_V like_P you_O are_V allowing_V rePOSTs_N ._. One_$ approach_N to_P prevent_V resubmission_N is_V to_P use_V tokens_N ._. Put_V a_D random_A token_A in_P the_D form_N and_& session_N ._. On_P submission_N check_N that_P the_D submitted_V token_A matches_N the_D token_A in_P the_D session_N if_P it_O does_V ,_, replace_V the_D token_A in_P the_D session_N with_P a_D fresh_A one_$ and_& process_V the_D request_N otherwise_R stop_V processing_V the_D request_N )_N ._.
All_D of_P the_D different_A browsers_N have_V different_A behaviors_N and_& quirks_N when_R it_O comes_V to_P how_R history_N relates_V to_P the_D cache_N and_& the_D various_A headers_N available_A to_P control_V it_O ._. Firefox_^ 3_$ works_V differently_R from_P Firefox_^ 2_$ ,_, re-displaying_V potentially_R sensitive_A data_N when_R a_D user_N clicks_V the_D back_A button_N in_P spite_N of_P using_V caching_V directives_N to_P prevent_V it_O ._. The_D best_A solution_N is_V to_P use_V a_D session_N cookie_N that_D is_V not_R persisted_V and_& inform_V the_D user_N of_P the_D need_N to_P close_V the_D browser_N window_N after_P logging_V out_R ._. Especially_R if_P they_O are_V at_P a_D public_A terminal_N ._. Painful_A ,_, I_O know_V ,_, but_& current_A browser_N offerings_N and_& the_D HTTP_N specification_N do_V not_R provide_V any_D mechanisms_N for_P dealing_V with_P browser_N history_N ._. History_N may_V be_V treated_V differently_R than_P caching_N by_P a_D user_N agent_N according_V to_P the_D HTTP_^ specification_N ._. See_V 13.13_$ History_N Lists_N as_P defined_V in_P RFC_^ 2616_$ Hypertext_^ Transfer_N Protocol_^ --_: HTTP_N /_: 1.1_$ for_P the_D problem_N and_& rationale_N ._.
I_O think_V this_D is_V as_R much_A a_D user_N interface_N challenge_N as_P a_D coding_V problem_N ._. On_P top_N of_P whatever_D anti-caching_A techniques_N you_O employ_V ,_, you_O need_V to_P make_V it_O clear_A to_P the_D user_N that_P they_O must_V hit_V a_D big_A ,_, obvious_A "_`` Logout_N "_'' button_N (_N or_& equivalent_A )_N when_R they_O are_V done_V ._.
if_P this_D might_V help_V ._. This_D works_V for_P ASP_^ ,_, use_V an_D equivalent_A solution_N for_P other_A languages_N ._. %_N response.buffer_N =_A true%_G >_A %_N Response.CacheControl_N =_A "_`` no-cache_A "_'' %_N >_A %_N Response.AddHeader_N "_`` Pragma_^ "_'' ,_, "_`` no-cache_A "_'' %_N >_A %_N Response.Expires_N =_A -1_$ %_N >_A
Please_V see_V post_N below_P about_P equals_V sign_N ..._: (_G what's_G with_P the_D 300_$ char_N limit_N on_P comments_N ?_. )_G
I_O have_V found_V two_$ solutions_N to_P this_D ._. Here_R is_V the_D first_A one_$ ._. Add_V back_R in_P padding_N to_P Base64_N encoded_V strings_N ._. Inspiration_N for_P this_D came_V from_P http://fi.am/entry/urlsafe-base64-encodingdecoding-in-two-lines_N In_P this_D solution_N ,_, the_D JavaScript_^ stays_V the_D same_A (_N base64_N encode_V everything_N )_N and_& the_D server_N side_N looks_V like_P :_: On_P the_D JavaScript_^ side_N ,_, you_O just_R need_V to_P make_V sure_A you_O base64_N encode_V the_D values_N :_:
The_D second_A solution_N is_V just_R to_P URLEncode_V the_D Base64_N encoded_V string_N ._. I'm_N using_V commons_N codec_V to_P do_V the_D encoding_N here_R ._. Java_^ Code_^ :_: But_& now_R I_O have_V to_P decode_V it_O on_P the_D JavaScript_^ side_N as_R well_R ..._: Encode_^ :_: Decode_^ :_:
Is_V it_O possible_A to_P use_V JSTL_N to_P display_V a_D date_N in_P the_D client's_G timezone_G ?_.
In_P Javascript_^ ,_, I_O have_V this_D function_N to_P display_V the_D current_A date_N on_P our_D page_N header_N :_: I_O would_V like_V to_P do_V this_D via_P JSTL_N ,_, but_& I'm_N not_R sure_A if_P it's_N possible_A ._. So_P far_R ,_, I_O have_V this_D fragment_N of_P code_N :_: Because_P the_D date_N is_V now_R being_V created_V on_P the_D server_N ,_, it_O may_V not_R represent_V the_D client's_N date_V ._. I_O believe_V that_P I_O can_V set_V the_D timeZone_N attribute_N of_P the_D formatDate_N function_N ,_, but_& I'm_N unsure_A how_R to_P grab_V the_D client's_G timezone_G ._. Can_V somebody_N offer_V a_D suggestion_N ?_. Thanks_N !_.
All_X the_D information_N the_D server_N has_V is_V in_P the_D HTTP_N request_N which_D doesn't_N contain_V any_D info_N regarding_V time_N or_& timezone_N ._. So_P you_O have_V two_$ options_N :_: Using_V a_D cookie_N you_O can_V store_V the_D timezone_N and_& then_R retrieve_V it_O in_P the_D server-side_N ._. The_D problem_N here_R is_V that_P you_O have_V to_P wait_V for_P the_D second_A request_N to_P use_V the_D timezone_N value_N ._. Using_V AJAX_^ ,_, with_P javascript_N and_& a_D XMLHttpRequest_N object_N you_O can_V push_V '_G new_A Date()_N ._. getTimezoneOffset()_N '_'' value_N to_P the_D server_N ,_, store_V it_O in_P a_D session_N var_N Maybe_^ any_D of_P the_D options_N are_V too_R much_A if_P you_O just_R want_V to_P display_V time_N zone_N
That's_V certainly_R a_D creative_A idea_N ,_, but_& more_R complicated_A than_P the_D SCRIPT_N I_O currently_R have_V ..._:
Yes_R ,_, I_N poster_N this_D answer_N just_R if_P knowing_V the_D timezone_N is_V critical_A ._. All_X the_D information_N the_D server_N has_V is_V in_P the_D HTTP_N request_N which_D doesn't_N contain_V any_D info_N regarding_V time_N or_& timezone_N ,_, so_P I_O guess_V it_O is_V impossible_A to_P know_V it_O if_P not_R using_V AJAX_N or_& a_D cookie_N
The_D only_A way_N I_O can_V see_V of_P doing_V this_D without_P asking_V the_D user_N for_P some_D information_N is_V to_P format_N the_D date_N with_P javascript_N ._. Not_R exactly_R the_D prettiest_A solution_N ,_, I_O might_V add_V Alternately_R ,_, you_O might_V consider_V displaying_V the_D time_N zone_N in_P the_D formatted_V date_N ._. This_D way_N ,_, the_D user_N at_P least_A knows_V what_D time_N zone_N you're_N using_V ._.
How_R to_P load_V ._. js_V files_N into_P a_D Rhino_N context_N in_P Java_^
Are_V you_O aware_A that_P Rhino_N ships_N in_P Java_^ 6_$ ?_. If_P you_O want_V to_P use_V it_O with_P Java_^ 5_$ ,_, you'll_N have_V to_P download_V the_D API_^ separately_R ._. You_O can_V get_V engines_N for_P many_A popular_A scripting_V languages_N from_P scripting.dev.java.net_N ._.
"_`` You_O can_V get_V engines_N for_P many_A popular_A scripting_V languages_N from_P scripting.dev.java.net_N ._. "_'' No_! ,_, we_O can't_V anymore_R ._. I_O know_V this_D is_V extremely_R old_A ,_, but_& is_V there_R a_D newer_A link_N we_O should_V use_V ?_.
@hexafraction_N Try_V this_D question_N :_: http://stackoverflow.com/questions/11838369/where-can-i-find-a-list-of-available-jsr-223-scripting-languages_N
+1_$ Thanks_N ,_, that_P and_& the_D web_N archive_N have_V [_^ helped]_^ (_^ http://web.archive.org/web/20070610234337/https://scripting.dev.java.net/)_^ ,_, since_P the_D latter_A is_V just_R a_D bag_N of_P links_N ,_, really_R ._.
Trouble_N accessing_V Java_^ classes_N from_P Firefox_G extension's_G Javascript_N
you_O are_V incorrectly_R invoiking_V the_D method_N using_V ;_: which_D is_V passing_V an_D argument_N of_P type_N java.lang.Class_G []_G into_P the_D signature_N that_D is_V expecting_V a_D String_^ object_N ._. simply_R pass_V the_D parameters_N object_V in_R as_P it_O is_V ._.
public_A Method_^ getMethod_^ (_^ String_^ name_N ,_, Class_N ..._: parameterTypes_G )_G throws_V NoSuchMethodException_^ ,_, SecurityException_^ I_O guess_V he's_N right_A in_P that_D ._.
now_R I_O get_V this_D exception_N :_: InternalError_^ :_: Unable_A to_P convert_V JavaScript_^ value_N to_P Java_^ value_N of_P type_N java.lang.Class_N []_N
try_V changing_V the_D two_$ reflecting_V lines_N to_P ;_: var_N aStaticMethod_N =_A aClass.getMethod_G (_G "_`` main_A "_'' ,_, parameters.getClass()_^ );_^ //_^ gets_V the_D main_A (_^ String_^ []_G args_G )_N method_N ,_, here_R I_O get_V the_D exception_N *_N var_N myJava_N =_A aStaticMethod.invoke_G (_G null_N ,_, parameters_N );_V removing_V the_D []_N initializers_N since_P they_O already_R seem_V to_P have_V been_V created_V by_P the_D reflection_N call_N ._.
new_A error_N :_: There_X is_V no_D Java_^ method_N java.lang.Class.getMethod_N that_D matches_V JavaScript_^ argument_N types_N (_N string_N ,_, object_N )_N ._. Candidate_N methods_N with_P the_D same_A name_N are_V :_: java.lang.reflect.Method_N getMethod_G (_G java.lang.String_N ,_, java.lang.Class_G []_G )_G
assuming_V your_D complete_A class_N name_N is_V "_`` your.package.Firefox_N "_'' you_O could_V do_V :_:
how_R do_V I_O set_V the_D "_`` args_N "_'' value_N ?_.
ReferenceError_^ :_: importPackage_N is_V not_R defined_V
in_P "_`` plain_A "_'' rhino_N this_D is_V supposed_V to_P work_V sorry_A :(_N
Hi_N ,_, just_R following-up_A DFA's_N comment_N :_: Related_A info_N ::_N https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/LiveConnect_Overview/JavaScript_to_Java_Communication_N
I've_N already_R tried_V out_R all_D stuff_N from_P developer.mozilla.org_N ,_, with_P no_D success_N ..._:
unEscape_^ JavaScript_^ escaped_V value_N in_P JAVA_^
in_P our_D web_N service_N we_O set_V a_D cookie_N through_P JavaScript_^ wich_V we_O read_V again_R in_P Java_^ (_^ Servlet_^ )_^ however_R we_O need_V to_P escape_V the_D value_N of_P the_D cookie_N because_P it_O may_V contain_V illegal_A characters_N such_A as_P '_'' '_'' which_D messes_V up_R the_D cookie_N ._. is_V there_R a_D transparent_A way_N to_P escape_V (_^ JavaScript_^ )_N and_& unescape_N again_R (_G JAVA_G )_N for_P this_D ?_. thanks_N ,_, Pieter_^ Goddijn_^
Define_V "_`` transparent_A way_N "_'' ._.
In_P java_N you_O got_V StringEscapeUtils_^ from_P Commons_^ Lang_^ to_P escape_V /_: unescape_A ._. In_P Javascript_^ you_O escape_V through_P encodeURIComponent_N ,_, but_& I_O think_V the_D Commons_^ component_N I_O gave_V to_P you_O will_V satisfy_V your_D needs_N ._.
If_P you_O want_V to_P decode_V from_P encodeURIComponent_N see_V here_R http://stackoverflow.com/questions/607176/java-equivalent-to-javascripts-encodeuricomponent-that-produces-identical-outpu_N
Client_^ JavaScript_^ /_: ECMAScript_N :_: Server_N Java_^ :_: I'll_N add_V further_A discoveries_N to_P my_D blog_N entry_N ._.
The_D most_R accurate_A way_N would_V be_V to_P Excecute_^ javascript_N withing_V your_D java_N code_N ._. Hope_^ the_D code_N below_P helps_V ._.
JSF_G Richfaces_G frontend_N performance_N tuning_N
I've_N developed_V a_D web_N application_N using_V MyFaces_^ 1.2_$ ._. 6_$ and_& Richfaces_^ 3.3_$ ._. 1GA_G (_G just_R upgrated_A )_N ._. Despite_P the_D ease_N of_P use_N ,_, I_O found_V out_R that_P Richfaces_^ components_N are_V very_R slow_A ._. I_O also_R found_V out_R that_P they_O didn't_V really_R take_V advantage_N of_P the_D browser_N caching_N mechanism_N ,_, they_O keep_V sending_V some_D lousy_A JS_N file_V every_D request_N and_& other_A things_N ._. I_O really_R would_V like_V to_P apply_V some_D rules_N described_V in_P the_D "_`` High_A PErformance_N WEbsites_V "_`` book_N ,_, but_& I_O can't_V change_N de_P generated_V js_N and_& HTML_^ code_N ._. Does_^ anyone_N have_V some_D tips_N for_P frontend_N performance_N tuning_N using_V Richfaces_^ ?_. Thanks_N ._.
Have_V a_D read_N of_P this_D article_N ._. Are_V you_O using_V Firebug_N +_& YSlow_N to_P check_V what_O is_V being_V stored_V in_P the_D cache_N ?_. Using_V the_D web.xml_N org.richfaces.LoadScriptStrategy_N setting_N ,_, you_O can_V tell_V Richfaces_N to_P either_D :_: Load_N all_D script_N in_P one_$ file_N ._. Load_N no_D scripts_N (_V you_O do_V it_O yourself_O instead_R -_: eg_G ._. in_P the_D manner_N prescribed_V by_P your_D book_N )_N ._. Load_N scripts_N when_R needed_V (_$ the_D default_N )_N ._. But_& some_D basic_A principles_N :_: Never_R put_V logic_N into_P your_D getters_N ._. They_O are_V called_V multiple_A times_N and_& should_V only_R return_V something_N already_R populated_V by_P another_D method_N ._. For_P example_N if_P you_O are_V chaining_V drop-downs_N together_R use_V an_D a4j_N :_: support_N tag_N on_P the_D first_A one_$ with_P an_D action_N attribute_N that_P loads_N the_D data_N which_D is_V then_R retrieved_V when_R you_O reRender_V the_D second_A one_$ ._. Use_V the_D ajaxSingle=_N "_`` true_A "_'' unless_P you_O actually_R want_V to_P send_V the_D whole_A form_N back_R to_P the_D server_N ._. Don't_N use_V a_D rich_A component_N if_P you_O only_R need_V a_D normal_A one_$ ._. For_P example_N don't_N use_V rich_A :d_G ataTable_G unless_P you_O are_V making_V use_N of_P some_D of_P the_D features_N that_P it_O has_V over_P and_& above_P h_N :d_N ataTable_N ._.
+1_N ._. And_& this_D is_V a_D second_A article_N by_P Dan_^ Allen_^ (_^ he_O is_V the_D author_N of_P both_D articles_N ,_, and_& author_N of_P Seam_^ in_P Action_^ ):_$ http://www.jsfcentral.com/articles/speed_up_your_jsf_app_2_N
You_O can_V use_V :_: org.ajax4jsf.DEFAULT_EXPIRE_N 31536000_$ So_R that_P all_D js_N ,_, css_N files_N (_N generated_V by_P richfaces_G )_G are_V cached_V for_P 1_$ year_N on_P the_D browser_N ._. This_D really_R improved_V speed_N in_P our_D project_N ._. Also_R ,_, we_O do_V not_R need_V to_P worry_V about_P if_P we_O change_V richfaces_N version_N as_P when_R we_O change_V richfaces_N version_N it_O will_V generate_V different_A files_N ._.
To_P add_V on_R to_P Damo_^ ,_, you_O can_V also_R add_V a_D small_A filter_N to_P cache_N such_A js_N or_& images_N to_P improve_V the_D performance_N ._. But_& exert_V caution_N in_P doing_V this_D ,_, if_P files_N intended_V to_P cach_V involve_V frequent_A updates_N ._.
Sending_V MIDI_N messages_N in_P a_D Web_N page_N
Java_^ is_V still_R probably_R going_V to_P be_V your_D best_A bet_N ,_, even_R with_P the_D few_A users_N disabling_V it_O ._. I_O use_V NoScript_^ ,_, and_& I_O can_V whitelist_V a_D site_N ._. I_O would_V say_V that_P most_A users_N would_V probably_R do_V the_D same_A if_P you_O provide_V compelling_A content_N ._.
Found_V the_D following_A (_N translated_V from_P Italian_^ )_^ ._. I'd_N say_V Flash_^ is_V the_D way_N to_P go_V ._. If_P you_O want_V to_P be_V ghetto_V you_O can_V just_R get_V 88_$ or_& so_R piano_N samples_N and_& play_V them_O against_P a_D timeline_N ._. http://translate.google.com/translate?prev=hp_G hl=en_G js=n_G u=http%3A%2F%_G 2Fflash.html.it_G %2Fguide%2Flezione%2F2936%2Fmidi-player%2F_G sl=it_G tl=en_G history_state0=_N
Which_D to_P learn_V first_A Java_^ or_& javascript_N ?_.
With_P the_D intent_N on_P becoming_V fluent_A on_P both_D to_P do_V a_D mix_N of_P web_N and_& application_N coding_N ._. Would_V one_O facilitate_V learning_V the_D other_A ?_.
They_O are_V only_R loosely_R related_A one_$ doesn't_N really_R feed_V into_P the_D other_A as_R much_A as_P one_$ might_N think_N ._. Don't_N let_V the_D names_N fool_V you_O ._.
Java_^ and_& JavaScript_^ have_V just_R the_D similar_A name_N in_P common_A ._. Besides_P that_D ,_, they_O are_V absolutely_R different_A ._.
Good_A points_N ,_, @Copas_N and_& @Gumbo_N ,_, but_& if_P one_$ starts_V with_P 0_$ programming_N knowledge_N one_$ does_V need_V to_P start_V _some_where_G ;-)_G ._.
You_O might_V make_V this_D CW_N because_P it_O doesn't_N really_R have_V an_D answer_N ._.
like_P the_D joke_N goes_V :_: java_N :_: javascript_G ::_G car_N :_: carpet_N ._.
@Lucas_N ,_, I_O agree_V ,_, should_V be_V a_D CW_^ ._.
It_O depends_V on_P which_D one_$ (_$ websites_N or_& programs_N )_V that_P you_O want_V to_P make_V first_R ._. If_P you_O do_V want_V to_P make_V websites_N your_D not_R going_V to_P get_V to_P far_R with_P just_R JavaScript_^ and_& HTML_^ (_^ think_V about_P using_V JQuery_G )_G ._. You_O might_V also_R want_V to_P learn_V ASP.NET_^ ,_, it_O will_V allow_V you_O to_P use_V C#_G (_G very_R similar_A to_P Java_^ )_$ to_P make_V rich_A websites_N with_P code_N that_D can_V run_V on_P the_D server_N and_& HTML_^ /_: JavaScript_^ to_P be_V displayed_V to_P the_D user_N ._. If_P you_O want_V to_P make_V programs_N look_V into_P Java_^ or_& C#_^ ._. I_O learned_V HTML_^ ->_^ JavaScript_^ ->_^ BASIC_^ ->_^ C++_^ ->_^ C#_^ ->_^ ASP.NET_^ ._. I_O started_V with_P websites_N then_R learned_V programming_N and_& in_P turn_N went_V back_R to_P making_V websites_N using_V C#_N as_P my_D programming_N language_N ._.
He_O does_V say_V he_O means_V to_P learn_V both_D ,_, just_R wants_V tips_N on_P "_`` which_D one_$ _first__N "_'' ..._:
@Alex_N :_: I_O updated_V my_D answer_N to_P reflect_V his_D real_A question_N ._. Thanks_N ._.
@Lucas_N :_: good_A points_N ,_, though_P I_O disagree_V that_P "_`` you_O won't_V get_V far_R "_'' with_P Javascript_^ (_^ and_& HTML_^ and_& CSS_^ )_^ ,_, these_D days_N --_: guess_N I'll_N add_V a_D note_N to_P my_D answer_N to_P that_D effect_N ._.
@Alex_N :_: What_O I_O meant_V by_P that_D was_V he_O wouldn't_N be_V able_A to_P do_V anything_N that_D must_V run_V on_P the_D server_N using_V JavaScript_^ ._.
+1_$ Good_A answer_N ,_, plus_& great_A links_N ._.
Wow_! ,_, I_O didn't_V even_R know_V SSJS_^ existed_V :-O_N
Beyond_P some_D of_P the_D basic_A syntax_N ,_, they_O are_V not_R very_R similar_A at_P all_D ._. Go_V with_P whichever_D you_O find_V most_R interesting_A first_R ._.
Those_D two_$ are_V very_R different_A techonologies_N ._. They_O have_V similar_A C-like_A syntax_N ,_, but_& thats_V all_D that_P they_O have_V in_P common_A ._. Go_^ for_P JavaScript_^ if_P you_O want_V to_P make_V websites_N and_& Java_^ if_P you_O want_V desktop_N /_: enterprise_N appliactions_N ._.
What_O do_V you_O want_V to_P be_V able_A to_P do_V first_R ?_. There_X are_V any_D number_N of_P languages_N which_D could_V be_V a_D first_A language_N and_& it_O really_R depends_V on_P what_O you_O want_V to_P do_V ._.
Apart_R from_P some_D superficial_A syntax_N and_& the_D name_N ,_, the_D two_$ have_V very_R little_A in_P common_A as_P languages_N ._. That_P being_V said_V ,_, you_O can_V write_V useful_A (_N if_P not_R very_R "_`` modern_A ")_N webapps_N without_P JavaScript_^ ,_, but_& not_R without_P a_D server-side_A language_N like_P Java_^ ,_, so_P it_O might_V be_V better_A to_P start_V on_P that_D side_N ;_: it's_N also_R the_D overall_N more_R complex_A one_$ ,_, since_P it_O includes_V database_N access_N ._. Then_R again_R ,_, there_X is_V Server-side_A JavaScript_^ which_D would_V allow_V you_O to_P do_V everything_N in_P one_$ language_N ,_, but_& it's_V not_R a_D very_R common_A choice_N ._.
Java_^ first_R ,_, because_P you_O will_V be_V learning_V better_A programming_N habits_N that_D will_V be_V useful_A whatever_D second_A language_N you_O want_V to_P learn_V after_P ._. And_& it's_N less_R traumathic_A to_P make_V the_D transition_N from_P a_D static_A type_N system_N to_P a_D dynamic_A one_$ than_P the_D reverse_N ._.
I_O would_V recommend_V start_N with_P Java_^ ._. It_O would_V give_V you_O good_A basics_N in_P programming_N ._. With_P Java_^ knowledge_N you_O can_V learn_V JavaScript_^ ,_, C#_^ and_& other_A languages_N more_R easily_R ._. I_O don't_V think_N that_D would_V be_V the_D case_N if_P you_O would_V start_V with_P javascript_N ._.
Yeah_! ,_, I_O wondered_V about_P the_D name_N coincidence_N ._. I_O guess_V I_O ll_R let_V the_D project_N dictate_V which_D one_N gets_V the_D most_A focus_N ._. You_O are_V correct_A about_P the_D infrastructure_N needs_V (_N jvm_N vs_& web_N )_N that_P each_D needs_N ._. Thanks_N y_V all_D
Naming_V is_V not_R a_D coincidence_N ._. It_O was_V a_D marketing_N decision_N ._. And_& JavaScript_^ and_& Java_^ are_V more_R similar_A than_P they_O might_V have_V been_V ._. The_D C_N syntax_G wasn't_G something_N Brendan_^ Eich_^ started_V with_P ._. He_O did_V make_V the_D language_N more_R Java-like_A as_P a_D result_N of_P the_D desire_N to_P have_V a_D "_`` Java-like_A "_'' syntax_N ._. I_O think_V that_P what_O we_O got_V with_P JavaScript_^ (_^ a_D functional_A language_N with_P C_N syntax_N )_N is_V really_R cool_A ._.
IMO_^ ,_, learn_V JavaScript_^ first_R ._. You_O can_V be_V near_P guaranteed_V that_P you_O will_V come_V across_P a_D project_N /_: task_N where_R you_O need_V it_O ._. Definitely_R take_V a_D look_N at_P jquery_N ,_, a_D great_A library_N for_P javascript_N ._. In_P terms_N of_P the_D application_N layer_N ,_, if_P you_O are_V just_R learning_V now_R ,_, Java_^ is_V an_D OK_A decision_N to_P learn_V first_R ,_, so_R is_V C#_^ ._. Personally_R ,_, I_O prefer_V the_D open_A source_N stack_V ,_, Perl_^ ,_, Python_^ or_& PHP_^ as_P I_O believe_V there_X are_V a_D lot_N more_A resources_N out_R there_R to_P help_V you_O learn_V them_O ._. PHP_^ will_V have_V the_D most_A resources_N ,_, but_& Python_^ is_V a_D better_A choice_N ._.
I_O would_V recommend_V learning_V a_D few_A different_A languages_N before_P learning_V JavaScript_^ ._. Java_^ for_P class-based_A object_N orientation_N ;_: LISP_N or_& similar_A for_P functional_A programming_N ._. JavaScript_^ can_V accomodate_V several_A different_A paradigms_N and_& it's_N easier_A if_P you_O are_V already_R familiar_A with_P them_O ._. JavaScript_^ does_V functional_A programming_N better_R than_P Python_^ or_& Java_^ ,_, but_& not_R as_R easily_R as_P the_D "_`` real_A "_'' funcional_A programming_N languages_N ._. JavaScript_^ has_V its_D own_A variety_N of_P prototype-based_A object_N orientation_N and_& does_V it_O well_R ._. You_O can_V force_V it_O to_P do_V object_V oriented_A programming_N in_P a_D Java-like_A way_N ,_, but_& you're_R better_A off_P not_R calling_V functions_N "_`` classes_N "_'' and_& just_R calling_V them_O "_`` prototypes_N "_'' ._. It's_N difficult_A to_P model_V subclasses_N inheriting_V from_P base_N classes_N ;_: it's_N much_R easier_A to_P just_R accept_V the_D concept_N of_P objects_N inheriting_V from_P prototypes_N ._. JavaScript_^ is_V much_R easier_A to_P learn_V and_& use_V if_P you_O are_V already_R familiar_A with_P the_D basic_A concepts_N ._. For_P instance_N ,_, you_O should_V know_V about_P HashMaps_^ from_P Java_^ or_& the_D equivalent_A Dictionaries_^ in_P Python_^ or_& Property_^ Lists_^ in_P LISP_^ ._. In_P JavaScript_^ every_D object_N is_V a_D really_R super-efficient_A HashMap_^ ,_, so_R if_P your_D design_N can_V make_V use_N of_P that_D fact_N ,_, use_V it_O ._.
Javascript_N source_N files_N on_P JBoss_N have_V the_D wrong_A content-type_N /_: mime_N type_N ?_.
I_O am_V writing_V a_D JSP_^ application_N and_& am_R deploying_V it_O to_P JBoss_N 5.0_$ ._. When_R I_O attempt_V to_P retrieve_V my_D CSS_^ or_& Javascript_^ files_N ,_, JBoss_N returns_V the_D wrong_A Content-type_N for_P the_D file_N ,_, so_P Firefox_^ refuses_V to_P execute_V code_N supplied_V in_P them_O ._. Here_R is_V my_D web.xml_N file_N :_: Using_V lynx_N to_P test_V the_D file_N download_N ,_, I_O get_V the_D following_N :_: host_N >_A lynx_G http://devbox:8080/TestServlet/js/main.js_G -head_G -dump_G
I_O have_V found_V an_D answer_N by_P changing_V the_D following_N :_: to_P be_V this_D ,_, instead_R :_: As_P a_D beginner_N to_P JSP_^ ,_, I'm_^ not_R sure_A what_D tutorial_N I_O picked_V up_R the_D previous_A example_N from_P ,_, but_& it_O had_V led_V to_P no_D amount_N of_P frustration_N ._. The_D lynx_N command_N now_R results_V in_P :_: This_D applies_V to_P CSS_^ as_R well_R ._.
asynchronous_A file_N upload_N with_P java_N servlet_N
It_O is_V exactly_R the_D same_A ._. The_D client_N makes_V an_D HTTP_N request_N to_P the_D server_N (_N by_P submitting_V a_D form_N )_N ._. The_D server_N responds_V with_P some_D HTML_^ (_N which_D links_V to_P or_& embeds_V some_D JavaScript_^ )_^ ._. Switching_N from_P PHP_^ to_P Java_^ is_V just_R a_D drop_N in_P replacement_N ._. You_O don't_V need_V to_P change_V any_D of_P the_D JavaScript_^ ._. The_D user_N guide_N tells_V you_O how_R to_P set_V it_O up_R ._.
Could_V you_O tell_V me_O how_R to_P embed_V HTML_^ to_P a_D redirect_N without_P JSP_^ ?_.
Why_R would_V a_D redirect_N be_V involved_V ?_. The_D servelet_N just_R needs_V to_P output_N a_D text_N /_: html_N response_N ._.
A-Hah_N !_. That_D just_R shows_V I'm_N really_R new_A to_P this_D AJAX_^ thing_N ._. Was_V accustomed_V to_P redirecting_V to_P servlets_N and_& JSP_^ ._. :)_$ Thanks_N !_.
http://oreilly.com/pub/a/javascript/2002/02/08/iframe.html_N is_V the_D best_A idea_N to_P file-upload_A ._. i_G done_V file_N upload_N using_V hidden_A iframe_N ._. Please_! consult_V with_P attached_A link_N ._.
Ajax_N request_N parameters_N ,_, what_O am_V I_O doing_V wrong_A ?_.
just_R a_D quick_A thought_N :_: Tried_V setting_V the_D parameter_N name_N to_P something_N other_A than_P the_D variable_A name_N ?_. "_`` stepNumber_N :_: stepNumber_N "_'' looks_V like_P it_O could_V cause_V some_D issues_N ..._:
trying_V that_P now_R I'll_^ get_V back_R to_P you_O with_P an_D answer_N ._.
I've_N just_R noticed_V that_P the_D line_N "_`` alert_A (_N params.stepNumber_N );_N "_'' seems_V to_P show_V undefined_A ._. Am_V I_O not_R creating_V this_D array_N correctly_R ?_. I've_N also_R tried_V params[_N "_`` stepNumber_N "_'' ]_N and_& thats_N undefined_V too_R ._.
I've_N changed_V the_D array_N to_P be_V step_N :_: stepNumber_N and_& it's_N not_R working_V ._. but_& at_P least_A params[_A "_`` step_N "_'' ]_N is_V defined_V ..._:
Just_R as_P an_D aside_R ;_: for_P somewhat_R easier_A way_N to_P do_V Ajax_^ with_P Java_^ ,_, you_O might_V want_V to_P check_V out_R DWR_^ ,_, http://directwebremoting.org_N
Thanks_N I'll_N have_V a_D look_N at_P DWR_^ but_& at_P the_D moment_N I_$ don't_N have_V the_D time_N to_P rip_V out_R my_D current_A code_N an_D replace_V it_O with_P other_A code_N ._.
After_P briefly_R checking_V the_D prototype_N documentation_N ,_, your_D request_N looks_V valid_A ._. I_O recommend_V inspecting_V the_D content_N of_P the_D AJAX_^ request_N directly_R ._. Use_^ Firebug_^ or_& an_D external_A HTTP_N sniffer_N like_P Charles_^ Proxy_^ to_P verify_V that_P the_D POST_N request_N contains_V your_D data_N ._. EDIT_V I_O totally_R missed_V it_O -_: you're_N definitely_R defining_V the_D object_N wrong_A ._. You_O can't_V reuse_V an_D existing_V symbol_N as_P an_D object_N property_N without_P properly_R delimiting_V it_O ._. When_R you_O don't_V do_V this_D (_G let's_G assume_V stepNumber_N ==_N 4_$ )_N then_R your_D params_N object_V looks_N like_P this_D
I've_N looked_V at_P it_O incharlies_V proxy_N and_& I_N don't_N see_V an_D entry_N for_P the_D parameters_N ...._N
I've_N fixed_V this_D by_P changing_V the_D key_N to_P step_V ,_, still_R not_R getting_V any_D parameters_N ...._N
Use_N getParameterNames()_N not_R getAttributeNames()_^ ._. Read_^ :_: http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/ServletRequest.html_N and_& look_V at_P the_D interface_N function_N descriptions_N for_P the_D differences_N between_P them_O ._.
Thank_V you_O ._. Replaced_V the_D line_N in_P the_D java_N with_P :_: Integer_N pageNumber_N =_A (_G Integer.parseInt_G (_G request.getParameter_G (_G "_`` step_N ")))_N ;_: and_& it_O works_V like_P a_D charm_N ._.
Good_^ Ajax_^ framework_N for_P Java_^ EE_^
I'm_N relatively_R new_A to_P Java_^ EE_N and_& I'm_N in_P need_N of_P a_D framework_N that_D will_V simplify_V AJAX_^ for_P me_O ._. At_P the_D moment_N I_O have_V code_N that_D uses_V the_D dojo_N toolkit_N to_P draw_V a_D graph_N ,_, but_& I'd_N like_P to_P have_V the_D graph_N updatable_A via_P AJAX_^ ._. is_V there_R a_D good_A framework_N that_D allows_V me_O to_P do_V Ajax_^ call_V backs_N and_& insert_V and_& run_V javascript_N into_P a_D page_N ?_. If_P so_R is_V there_R a_D good_A tutorial_N on_P how_R to_P use_V this_D framework_N ?_. My_D only_A experience_N with_P Ajax_^ is_V using_V Telerik_^ under_P ASP.Net_^ ._.
Dojo_^ does_V AJAX_^ too_R ._. Normally_R I'd_R recommend_V jQuery_N for_P this_D kind_N of_P thing_N but_& you're_N already_R using_V Dojo_^ so_P you_O should_V probably_R use_V that_D ._. The_D two_$ can_V be_V used_V together_R however_R ,_, if_P desired_V ._.
There_X are_V some_D JSF_^ component_N libraries_N that_D got_V more_R or_& less_R ajax_A support_N ._. ICEfaces_N for_P example_N ,_, makes_V all_X the_D standard_A components_N ajax'ish_N and_& offers_V server_N push_N techniques_N ._. Check_V out_R the_D jsfmatrix_N to_P get_V an_D overview_N ._.
javascript_N :_: having_V trouble_N passing_V form_N values_N to_P javascript_N and_& processing_V it_O to_P httprequest_V
Here_R are_V some_D things_N to_P try_V :_: In_P your_D JavaScript_^ ,_, encode_V your_D URL_N paraemters_N with_P encodeURIComponent_N :_: Next_^ ,_, you_O may_V have_V to_P set_V the_D encoding_N on_P the_D request_N using_V setCharacterEncoding_N Last_A ,_, I_O think_V if_P you_O call_V request.getParameter_N ,_, it_O does_V the_D URLDecoding_N for_P you_O ._.
looks_N like_P you_O should_V be_V url_N encoding_V your_D request_N parameter_N values_N in_P your_D javascript_N tempUrl_N +=_N "_'' ?_. partnumber=_N "_`` +partnumber+_A "_'' "_`` +_& "_`` itemdescription=_N "_'' +escape_G (_G itemdescription_N )_N +_& "_'' "_`` +_& "_`` itemshortdescription=_N "_'' +escape_G (_G itemdescription.substring_G (_G 0_$ ,_, 37_$ ))_N
escape_N and_& unescape_N are_V deprecated_V -_: https://developer.mozilla.org/En/Core_JavaScript_1.5_Guide/Predefined_Functions/Escape_and_unescape_Functions_N
thanks_N for_P letting_V me_O know_V :)_N
Launching_V a_D desktop_N application_N from_P a_D web_N site_N
Is_V it_O feasible_A to_P launch_V an_D application_N via_P a_D browser_N /_: URL_N ?_. What_O are_V the_D options_N for_P doing_V this_D ?_. I_O know_V the_D way_N to_P do_V it_O with_P IE_N and_& Windows_^ (_^ which_D usually_R doesn't_V work_N )_N ._. Ideally_R ,_, I_O would_V like_V this_D to_P be_V browser_N independent_A ._. Our_D application_N is_V RCP_^ ,_, so_R in_P theory_N Java_^ Web_N Start_^ could_V work_V ,_, we_O would_V just_R have_V to_P do_V some_D significant_A changes_N to_P how_R we_O deliver_V our_D application_N to_P users_N ,_, which_D I_O would_V like_V to_P avoid_V ._. Our_D web_N server_N code_N is_V currently_R all_D Java_^ if_P that_D makes_V a_D difference_N ._. I_O pretty_R much_R gave_V up_R on_P this_D until_P I_O clicked_V a_D url_N on_P Apple's_N site_N ,_, which_D in_P turn_N launched_V iTunes_^ ._. How_R does_V Apple_^ do_V that_D ?_.
If_P this_D is_V OS_^ independent_A ,_, then_R you_O can't_V rely_V on_P any_D specific_A program_N being_V available_A ._. What_D kind_N of_P program_N would_V you_O want_V to_P launch_V anyway_R ?_.
Silverlight_N 3_$ and_& Adobe_^ Air_^ will_V let_V you_O launch_V applications_N outside_P the_D browser_N ._.
Is_V ext_G js_G compatible_A with_P ._. jsp_N ,_, java_N backend_N ?_.
Is_V ext_G js_G compatible_A with_P ._. jsp_N ,_, java_N backend_N ?_.
In_P short_A ,_, yes_! ,_, but_& see_V the_D following_V article_N ,_, in_P terms_N for_P ease_N of_P use_N integration_N (_$ tag_N library_N )_$ wise_A :_: http://raibledesigns.com/rd/entry/ext_js_tag_library_N and_& the_D referenced_V article_N :_: http://blog.james-carr.org/2008/01/22/making-extjs-more-accessible-to-java-developers_N /_:
so_R ,_, its_D yes_! ._. k_N ,_, thanks_N ._.
Ext_^ JS_^ is_V a_D javascript_N library_N ._. It_O exists_V at_P the_D client_N side_N of_P the_D browser_N ._. So_P it_O doesn't_N matter_N whether_P you_O use_V PHP_^ ,_, JSP_^ or_& ASP.Net_^ ,_, as_R long_R as_P a_D browser_N supports_V javascript_N ,_, ExtJS_N will_V work_V there_R ._.
Perhaps_R a_D better_A way_N of_P understanding_V your_D lack_N of_P knowledge_N is_V to_P ask_V why_R or_& what_O is_V so_R special_A about_P javascript_N they_O would_V mean_V a_D java_N backend_N would_V not_R work_V ..._: Google_^ "_`` json_N "_'' ..._:
I_O strongly_R recommend_V taking_V a_D look_N at_P Grails_^ ._. It_O lives_V in_P the_D java_N world_N ,_, and_& plays_V extremely_R nice_A together_R with_P ExtJS_N ._. For_P example_N ,_, you_O probably_R will_V have_V to_P generate_V and_& parse_V a_D lot_N of_P JSON_N between_P server_N and_& ExtJS_N client_N ,_, and_& Grails_^ does_V that_P as_P if_P it_O was_V a_D language_N built-in_N ._.
Which_D mechanism_N may_V be_V used_V to_P access_V Java_^ methods_N which_D conflict_V with_P JavaScript_N keywords_N ?_.
I've_V a_D Javascript_^ source_N that_D uses_V a_D Java_^ class_N that_D defines_V a_D "_`` delete_V "_'' method_N (_N using_V jdk6_N scripting_N )_N ._. Since_P delete_V is_V a_D keyword_N ,_, I_O cannot_V invoke_V that_D method_N ._. In_G JavaFX_G script_N any_D sequence_N of_P characters_N enclosed_V in_P >_A is_V treated_V as_P a_D lexical_A identifier_N ._. So_P you_O can_V use_V "_`` insert_N "_'' ,_, that_D is_V a_D keyword_N ,_, as_P an_D identifier_N :_: Javascript_^ provides_V a_D way_N to_P protect_V keywords_N ?_.
In_P javascript_N you_O would_V do_V :_:
How_R to_P check_V whether_P JavaScript_^ is_V enabled_V in_P client_N browser_N using_V Java_^ code_N
can_V anyone_N help_V me_O in_P trying_V to_P check_V whether_P JavaScript_^ is_V enabled_V in_P client_N browser_N using_V Java_^ code_N ._.
A_D simple_A thing_N would_V be_V to_P do_V a_D call_N back_R from_P the_D page_N ,_, such_A as_P an_D AJAX_^ call_N ._. I_O don't_G think_V there's_N any_D other_A way_N to_P determine_V this_D ,_, at_P least_A not_R universally_R ._.
Are_V you_O trying_V to_P do_V this_D server-side_N or_& on_P the_D client_N in_P an_D applet_N ?_. If_P a_D browser_N does_V not_R support_V javascript_N (_N or_& has_V it_O turned_V off_R )_^ ,_, it's_^ highly_R unlikely_A they_O will_V have_V support_N for_P Java_^ applets_N ._.
If_P a_D form_N submit_V is_V performed_V ,_, you_O can_V put_V a_D hidden_A input_N in_P the_D form_N and_& fill_V out_R its_D value_N with_P javascript_G (_G from_P OnSubmit_G )_G and_& check_V that_P on_P the_D server_N side_N ._.
Assuming_V you're_N writing_V a_D Java_^ web_N application_N ,_, one_$ technique_N that_P I've_N used_V successfully_R is_V to_P have_V the_D first_A page_N that's_N accessed_V typically_R a_D login_N form_N write_V a_D session_N cookie_N when_R the_D page_N loads_N ._. Then_R have_V the_D Java_^ code_N that_P the_D form_N submits_V to_P check_V for_P the_D existence_N of_P that_D cookie_N ._. On_P the_D client_N :_: On_P the_D server_N :_:
In_P yourform_N for_P you_O can_V put_V code_N like_P this_D :_: The_D parameter_N should_V only_R be_V submitted_V if_P the_D browser_N has_V scripts_N turned_V off_R ._. In_P your_D Java_^ applications_N you_O can_V check_V it_O like_P so_R :_:
I_O like_V this_D idea_N ..._: but_& is_V it_O a_D cross-browser_A solution_N ?_. It_O seems_V like_P something_N IE6_N would_V love_V to_P mess_N up_R ._.
Why_R do_V you_O say_V that_P ?_. Have_V you_O tried_V it_O ?_.
If_P you_O have_V PHP_^ support_N just_R copy_V and_& paste_V the_D code_N below_P ._. wish_V you_O a_D good_A luck_N and_& don't_N forget_V to_P make_V your_D code_N open_V
JSP_^ or_& JavaScript_^ equivalent_A to_P PHP's_G $_SERVER[_G "_`` HTTP_HOST_N "_'' ]_N ?_.
I've_N go_V an_D absolute_A URL_N in_P my_D JavaScript_^ that_P I_O have_V hard_R coded_V for_P window.location_N ._. I_O don't_V want_V to_P have_V to_P change_V this_D every_D time_N I_O am_V testing_V my_D app_N ._. In_P PHP_^ I_O would_V have_V handled_V this_D by_P testing_V the_D $_SERVER[_N "_`` HTTP_HOST_N "_'' ]_N variable_A to_P find_V out_R what_D server_N I_O am_V on_P ,_, and_& adjust_V accordingly_R ._. However_R ,_, I'm_N not_R as_R familiar_A with_P Java_^ and_& am_R wondering_V if_P it_O has_V a_D similar_A method_N ?_. Or_& if_P maybe_R even_R JavaScript_^ had_V a_D similar_A method_N ?_. The_D code_N is_V as_P follows_V :_: What_O I_O would_V like_V to_P do_V is_V :_: In_P PHP_N I_O would_V have_V just_R done_V this_D :_: Any_D ideas_N ?_. I_O suppose_V I'm_N operating_V under_P the_D assumption_N that_P you_O have_V to_P do_V an_D absolute_A URL_N to_P change_V the_D location_N of_P the_D current_A window_N in_P JavaScript_^ ._. If_P there_X is_V another_D way_N to_P change_V the_D window_N location_N in_P JavaScript_^ without_P an_D absolute_A URL_N ,_, please_V feel_N free_A to_P offer_V that_P as_R well_R ._. Thanks_N in_P advance_N ..._:
You_O really_R should_V have_V search_N for_P this_D but_& in_P JSP_^ it's_^ :_:
Javascript_^ :_:
The_D location_N object_N has_V several_A properties_N ,_, and_& the_D one_$ you'd_N want_V is_V hostname_A ._. Or_& ,_, you_O can_V optionally_R just_R use_V a_D root-relative_A URL_N and_& just_R set_V the_D pathname_N property_N and_& not_R mess_N with_P the_D host_N business_N at_P all_D !_.
What_O you_O need_V is_V :_: An_D example_N :_:
Maybe_R this_D could_V help_V ._. It_O will_V replace_V any_D words_N you_O want_V by_P anything_N or_& nothing_N ._. It_O will_V work_V for_P your_D request_N too_R ._.
Difference_N between_P class_N (_$ java_N )_N and_& closure_N (_G javascript_G )_N ?_.
I_O don't_V understand_V how_R closure_N is_V more_R powerful_A than_P class_N ._. It_O looks_V like_P I_O can_V achieve_V the_D same_A behavior_N of_P closure_N using_V class_N ._. Any_D help_N would_V be_V appreciated_V
Can_V you_O provide_V a_D link_N for_P the_D statement_N that_P one_$ or_& the_D other_A paradigm_N is_V more_R powerful_A ?_. Please_V also_R define_V what_O you_O mean_V by_P "_`` powerful_A "_'' ._.
A_D closure_N and_& a_D class_N are_V two_$ very_R different_A things_N ._. It_O is_V not_R correct_A to_P say_V '_'' A_D class_N is_V more_R powerful_A that_P a_D closure_N ._. '_'' or_& vise_V a_D versa_R ._. They_O do_V totally_R different_A things_N ._. A_D closure_N is_V in_P a_D basic_A sense_N ,_, a_D function_N call_N that_D retains_V the_D local_A variable_A information_N from_P the_D scope_N it_O was_V created_V ._. A_D class_N is_V a_D definition_N of_P an_D object_N ._. The_D class_N defines_V behavior_N and_& the_D contents_N of_P instances_N of_P the_D class_N ._.
Doesn't_V a_D closure_N retain_V the_D variables_N from_P the_D scope_N in_P which_D it's_N declared_V ?_. (_$ not_R called_V ,_, necessarily_R )_$
oops_N ._. thanks_N ._.
and_& it_O should_V be_V mentioned_V that_P javascript_N has_V a_D prototype_N system_N
I'm_N not_R sure_A what_O led_V you_O to_P this_D question_N ,_, but_& something_N you've_N been_V told_V or_& something_N you_O read_V has_V severely_R misled_V you_O ._. Ignoring_V language_N altogether_R ,_, a_D closure_N and_& a_D class_N are_V completely_R unrelated_A structures_N /_: conventions_N in_P programming_N ._.
syntactically_R may_V be_V ,_, but_& you_O can_V emulate_V one_$ with_P the_D other_A in_G java_G for_P example_N ,_, and_& they_O are_V not_R tooo_N different_A from_P each_D other_A when_R you_O start_V thinking_V about_P it_O ._.
thank_V you_O for_P the_D koan_N ._.
Will_V I_O become_V enlightened_V when_R I_O figure_V out_R how_R to_P pronounce_V Qc_N Na_N ?_.
It_O sounds_V like_P one_$ hand_N clapping_N ._.
@Sebasti_G nGrignoli_G -_: In_P particular_A ,_, one_$ that_D is_V applauding_V the_D felling_N of_P a_D tree_N in_P a_D vacant_A forest_N ._.
This_D is_V a_D good_A question_N but_& could_V be_V better_R worded_V :_: "_`` What_O are_V some_D similarities_N and_& differences_N between_P Java_^ objects_N and_& JavaScript_^ closures_N "_'' ?_. Similarities_N :_: they_O both_D have_V persistent_A state_N in_P their_D local_A variables_N ._. Their_D methods_N have_V access_N to_P those_D state_N variables_N ._. Differences_N :_: Javascript_^ is_V a_D functional_A language_N ,_, therefore_R functions_N within_P functions_N can_V be_V immediately_R invoked_V and_& returned_V ._. For_P example_N :_: So_P you_O can_V write_V code_N like_P this_D snippet_N copy_N /_: pasted_V from_P rhino_N shell_N :_:
Strut2_N validation_N ,_, Overriding_V css_xhtml_N theme_N
HI_N Folks_N ,_, I'm_N using_V the_D Struts_^ 2_$ validation_N ._. And_& for_P displaying_V the_D custom_N error_N messages_N I'm_N overriding_V the_D css_xhtml_N .._N and_& the_D validation.js_N for_P client_N side_N validation_N ._. Every_D thing_N is_V going_V well_R but_& the_D validation_N is_V on_P form_N submit_V .._N can_V i_G do_V it_O for_P all_X the_D form_N fields_N Onblur_^ event_N .._V Any_D suggestion_N highly_R appreciated_V Thanks_N in_P Adavance_^ Cheers_^ ,_, Vinayak_^ V_N B_N
you_O can_V use_V the_D jquery_N plugin_N to_P have_V onblur_G (_G client_N side_N )_$ validation_N on_P your_D forms_N ._. Furthermore_R ,_, you_O may_V use_V DWR_^ validation_N for_P struts2_N ._. You_O will_V have_V to_P go_V through_P some_D setup_N procedures_N that_D involve_V adding_V the_D DWR.xml_N in_P your_D configuration_N file_N but_& once_R all_D that_D is_V done_V ,_, you_O will_V be_V able_A to_P have_V AJAX_^ validation_N on_P your_D forms_N ._. Example_N
You_O could_V just_R call_V the_D forms_N onsubmit_N function_N through_P an_D onblur_A handler_N ._. Something_N like_P :_:
Trouble_N calling_V an_D applet_N method_N from_P page_N
I_O know_V it's_N not_R optimal_A ,_, but_& I_O have_V to_P work_V with_P it_O ,_, a_D page_N making_V calls_N to_P the_D applet_N ._. My_D problem_N is_V ,_, when_R I_O do_V so_R ,_, I_O recieve_V a_D rather_R cryptic_A error_N message_N :_: "_`` uncaught_A exception_N :_: Error_N calling_V method_N on_P NPObject_N !_. [_G plugin_G exception_N :_: java.lang.reflect.InvocationTargetException_N ]_N ._. "_'' Can_V anyone_N decode_V this_D ?_. Even_R multiple_A possibilities_N would_V be_V better_A than_P the_D junk_N I_O came_V up_R with_P ._. The_D basic_A call_N to_P the_D applet_N is_V from_P a_D javascript_N call_N :_: As_P you_O can_V see_V ,_, the_D passData_N method_N is_V the_D exposed_A method_N I_O am_V trying_V to_P use_V ._. The_D applet_N itself_O works_V fine_A on_P the_D page_N ,_, it's_N just_R when_R I_O try_V to_P call_V this_D ,_, it_O doesn't_R do_V anything_N except_P throw_V that_D error_N ._. If_P I_O ask_V the_D person_N working_V on_P the_D applet_N (_G it's_G not_R my_D portion_N )_N is_V it_O possible_A for_P them_O to_P add_V constructive_A error_N throwing_N or_& am_V I_O not_R even_R at_P the_D point_N of_P connecting_V to_P the_D applet_N yet_R ?_.
InvocationTargetException_^ indicates_V that_P the_D underlying_V method_N in_P your_D applet_N threw_V an_D exception_N ._. The_D Javascript_^ to_P Java_^ "_`` boundary_N "_'' uses_V reflection_N ,_, so_P exceptions_N thrown_V by_P the_D Java_^ code_N are_V wrapped_V like_P this_D ._. (_^ This_^ makes_V it_O possible_A to_P distinguish_V them_O from_P exceptions_N thrown_V before_P you_O got_V into_P your_D Java_^ code_N ._. For_P example_N ,_, if_P you_O tried_V to_P call_V a_D non-existant_A method_N ._. )_$ You_O can_V get_V the_D original_A exception_N by_P catching_V the_D InvocationTargetException_^ and_& then_R calling_V its_D getTargetException()_N or_& getCause()_N method_N (_N they_O both_D do_V exactly_R the_D same_A thing_N )_N ._.
Thanks_N ,_, that's_N definitely_R going_V to_P help_V out_R ._. I'll_N leave_V the_D question_N open_A in_P case_N I_O get_V any_D more_A hits_N ,_, but_& I'll_N check_N back_R tomorrow_N morning_N in_P case_N anyone_N has_V any_D more_A insight_N on_P it_O ._.
I'd_N suggest_V you_O look_V into_P what_D someOtherData_N is_V ._. If_P someOtherData_G isn't_G a_D correct_A type_N it_O could_V cause_V such_X an_D exception_N ._. It_O sounds_V like_P you're_N trying_V to_P pass_V a_D DOM_N object_N ?_. Take_V a_D look_N at_P this_D page_N in_P O'Reilly's_^ JavaScript_^ Guide_^ to_P see_V available_A types_N ._.
The_D string_N I_O was_V passing_V was_V not_R being_V received_V correctly_R by_P the_D exposed_A Java_^ applet_N method_N ._.
Could_V you_O elaborate_V ?_.
jQuery_N and_& Java_^ applets_N
I'm_N working_V on_P a_D project_N where_R we're_N using_V a_D Java_^ applet_N for_P part_N of_P the_D UI_G (_G a_D map_N ,_, specifically_R )_$ ,_, but_& building_V the_D rest_N of_P the_D UI_N around_P the_D applet_N in_P HTML_^ /_: JavaScript_^ ,_, communicating_V with_P the_D applet_N through_P LiveConnect_^ /_: NPAPI_^ ._. A_D little_A bizarre_A ,_, I_O know_V ,_, but_& let's_N presume_V that_P setup_N is_V not_R under_P discussion_N ._. I_O started_V out_R planning_N on_P using_V jQuery_N as_P my_D JavaScript_^ framework_N ,_, but_& I've_A run_N into_P two_$ issues_N ._. Issue_V the_D first_A :_: Selecting_V the_D applet_N doesn't_N provide_V access_N to_P the_D applet's_N methods_N ._. Java_^ :_: JavaScript_^ :_: Running_V the_D above_A JavaScript_^ results_V in_P $_$ (_$ "_`` #applet_G -id_G ")_G ._. foo_N is_V not_R a_D function_N This_^ is_V in_P contrast_N to_P Prototype_^ ,_, where_R the_D analogous_A code_N does_V work_N :_: So...where'd_N the_D applet_N methods_N go_V ?_. Issue_^ the_D second_A :_: There's_V a_D known_A problem_N with_P jQuery_N and_& applets_N in_P Firefox_^ 2_$ :_: http://www.pengoworks.com/workshop/jquery/bug_applet/jquery_applet_bug.htm_G It's_G a_D long_A shot_N ,_, but_& does_V anybody_N know_V of_P a_D workaround_N ?_. I_O suspect_V this_D problem_N isn't_G fixable_G ,_, which_D will_V mean_V switching_N to_P Prototype_^ ._. Thanks_N for_P the_D help_N !_.
For_P the_D first_A issue_N ,_, how_R about_P trying_V For_P the_D second_A issue_N here_R is_V a_D thread_N with_P a_D possible_A workaround_N ._. Quoting_V the_D workaround_N change_N that_D code_V to_P :_:
How_R does_V one_$ record_N audio_N from_P a_D Javascript_^ based_A webapp_N ?_.
I'm_N trying_V to_P write_V a_D web-app_N that_D records_V WAV_^ files_V (_G eg_G :_: from_P the_D user's_A microphone_N )_N ._. I_O know_V Javascript_^ alone_R can_V not_R do_V this_D ,_, but_& I'm_N interested_A in_P the_D least_A proprietary_A method_N to_P augment_V my_D Javascript_^ with_P ._. My_D targeted_A browsers_N are_V Firefox_^ for_P PC_^ and_& Mac_^ (_^ so_R no_R ActiveX_G )_G ._. Please_! share_V your_D experiences_N with_P this_D ._. I_O gather_V it_O can_V be_V done_V with_P Flash_G (_G but_& not_R as_P a_D WAV_N formated_A file_N )_N ._. I_O gather_V it_O can_V be_V done_V with_P Java_^ (_N but_& not_R without_P code-signing_A )_N ._. Are_V these_D the_D only_A options_N ?_. @dominic_A -mazzoni_A I'd_N like_P to_P record_V the_D file_N as_P a_D WAV_N because_P because_P the_D purpose_N of_P the_D webapp_N will_V be_V to_P assemble_V a_D library_N of_P good_A quality_N short_A soundbites_N ._. I_O estimate_V upload_N will_V be_V 50_$ MB_^ ,_, which_D is_V well_R worth_A it_O for_P the_D quality_N ._. The_D app_N will_V only_R be_V used_V on_P our_D intranet_N ._. UPDATE_^ :_: There's_V now_R an_D alternate_A solution_N thanks_N to_P JetPack's_N upcoming_V Audio_^ API_^ :_: See_V https://wiki.mozilla.org/Labs/Jetpack/JEP/18_N
Maybe_R you_O find_V this_D useful_A :_: https://github.com/milani/microphone.js_N
Flash_^ is_V going_V to_P be_V your_D best_A solution_N ._. Hopefully_R this_D will_V help_V :_: http://www.kirupa.com/forum/showthread.php?t=17331_N
Yes_R I_O believe_V Flash_^ or_& a_D Java-Applet_^ are_V the_D only_A ways_N to_P do_V that_D ._. Since_P you_O cannot_V interact_N with_P a_D microphone_N you_O must_V use_V some_D sort_N of_P browser-plugin_N ,_, its_D the_D only_A way_N to_P use_V the_D microphone_N ._. I'm_N not_R aware_A of_P any_D other_A plugin_N that_D would_V provide_V that_P features_N ._. A_D quick_A search_N on_P Google_^ did_V not_R reveal_V any_D further_A possibilities_N ._. I_O think_V the_D easiest_A would_V be_V going_V with_P Flash_^ ._.
Your_D only_A options_N are_V Flash_^ ,_, Java_^ ,_, ActiveX_^ ,_, or_& writing_V a_D custom_N Firefox_^ extension_N ._. Flash_^ is_V probably_R your_D best_A option_N -_: you_O could_V write_V or_& use_V an_D existing_V Flash_N app_N to_P do_V the_D recording_N and_& keep_V almost_R everything_N else_R in_P pure_A Javascript_^ ._. Why_R do_V you_O want_V a_D WAV_^ file_N ?_. If_P you're_N planning_V to_P process_V the_D actual_A bits_N of_P the_D waveform_N on_P the_D client_N ,_, then_R that's_V probably_R a_D bad_A idea_N ;_: the_D client_N might_V be_V really_R slow_A and_& you_O wouldn't_V be_V able_A to_P really_R manipulate_V the_D file_N ._. If_P you_O want_V to_P send_V the_D sound_N back_R to_P the_D server_N ,_, then_R it's_V much_R better_A to_P send_V a_D compressed_V file_N ,_, and_& then_R uncompress_V it_O on_P the_D server_N ._.
Flash_^ requires_V you_O to_P use_V a_D media_N server_N (_$ note_N :_: I'm_N still_R using_V Flash_^ MX_^ ,_, but_& a_D quick_A Google_^ search_N brings_V up_R documentation_N for_P Flash_A CS3_N that_D seems_V to_P concur_V -_: note_N that_D Flash_V CS4_N is_V out_R soon_R ,_, might_V change_V then_R )_^ ._. Macromedia_^ /_: Adobe_^ aim_N to_P flog_V you_O their_D media_N server_N ,_, but_& the_D Red5_N open-source_N project_N might_V be_V suitible_A for_P your_D project_N :_: http://osflash.org/red5_N I_O think_V Java_^ is_V going_V to_P be_V more_R suitible_A ._. I've_N seen_V an_D applet_N that_D might_V do_V what_O you_O want_V over_R on_P Moodle_G (_G an_D open-source_A virtual_A learning_N environment_N ):_G http://64.233.183.104/search?q=cache:k27rcY8QNWoJ:moodle.org/mod/forum/discuss.php%3Fd%3D51231+moodlespeex_G hl=en_G ct=clnk_G cd=1_G gl=uk_G (_G membership-required_A site_N ,_, but_& open_A to_P Google_^ ,_, hence_R the_D link_N goes_V to_P the_D Google_^ cache_N page_N )_N ._.
As_P of_P Flash_^ 10_$ you_O do_V not_R need_V a_D media_N server_N ._. You_O can_V capture_V the_D raw_A samples_N and_& send_V them_O to_P an_D arbitrary_A back-end_A with_P an_D HTTP_N post_N ._. https://code.google.com/p/wami-recorder_N /_:
You_O could_V download_V Real_^ Producer_^ Basic_^ ,_, which_D is_V free_A here_R (_^ http://forms.real.com/rnforms/products/tools/producerbasic_^ )_^ ,_, and_& imbed_V it_O as_P an_D activeX_N object_N since_P it's_N on_P your_D intranet_N ._. Flash_^ will_V embed_V the_D same_A way_N ,_, it's_N on_P all_X the_D office_N workstations_N ,_, but_& since_P this_D is_V your_D Intranet_^ ,_, you_O could_V install_V it_O on_P all_X the_D machines_N with_P AD_N ._. Real_A audio_N files_N are_V very_R small_A compared_V to_P wav_V and_& sound_V great_A ._. Here's_V a_D link_N to_P the_D Real_^ Sudio_^ ActiveX_^ how-to_A guide_N ._. http://service.real.com/help/library/guides/activex/producerx.html_N
This_D is_V a_D paid_V solution_N but_& it_O will_V do_V what_O you_O are_V looking_V for_P ._. http://www.javasonics.com_N /_:
Another_D solution_N if_P you_O don't_V mind_V your_D users_N installing_V a_D plugin_N is_V to_P use_V Runtime_^ Revolution_^ RevWeb_^ plugin_N which_D supports_V recording_N audio_N in_P browser_N (_N and_& is_V trivial_A to_P implement_V ,_, I_O made_V a_D test_N applet_N to_P confirm_V this_D in_P about_R 10_$ minutes_N )_^ ._. http://revweb.runrev.com_^ /_:
This_D is_V an_D old_A thread_N ,_, but_& the_D issue_N remains_V relevant_A ._. It_O should_V be_V noted_V that_P there_X is_V a_D way_N to_P record_V audio_N to_P the_D server_N in_P Flash_^ without_P a_D proprietary_N back-end_A ._. Here's_V an_D example_N project_N to_P get_V you_O started_V :_: https://code.google.com/p/wami-recorder_N /_:
I'd_N say_V this_D answer_N is_V better_A than_P the_D accepted_V one_$ from_P 2008_$ ,_, as_P it_O has_V the_D same_A effect_N but_& a_D dedicated_A server_N component_N is_V not_R required_V ._. It_O is_V still_R not_R a_D complete_A solution_N as_P it_O will_V not_R work_V on_P Apple_^ mobile_A devices_N ,_, which_D are_V widespread_A ._. Hopefully_R a_D reasonable_A cross_N platform_N standard_N which_D combines_V native_A recording_N ,_, an_D open_A file_N format_N and_& plain_A HTTP_^ post_N will_V emerge_V soon_R ._.
Write_V a_D Servlet_^ that_P Talks_N to_P JMS_^ (_^ ActiveMQ_^ )_^ and_& OnMessage_^ Update_^ the_D Site_N
I_O am_V building_V a_D site_N that_D uses_V a_D simple_A AJAX_^ Servlet_^ to_P talk_V JMS_^ (_^ ActiveMQ_^ )_^ and_& when_R a_D message_N arrives_V from_P the_D topic_N to_P update_V the_D site_N ._. I_O have_V Javascript_^ that_D creates_V an_D XMLHttpRequest_N for_P data_N ._. The_D Servlet_^ processes_V the_D Get_V Request_N and_& sends_V back_R JSON_^ ._. However_R I_O have_V no_D idea_N how_R to_P connect_V my_D Servlet_^ into_P my_D ActiveMQ_^ Message_^ Broker_^ ._. It_O just_R sends_V back_R dummy_A data_N right_R now_R ._. I_O am_V thinking_V the_D Servelt_^ should_V implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D JavaScript_^ page_N ._. But_& I'm_N not_R sure_A how_R to_P do_V this_D ._.
You_O probably_R need_V to_P get_V a_D JMS_^ connection_N from_P JNDI_^ ,_, like_P this_D :_:
Okay_! ..._: this_D is_V a_D good_A way_N to_P connect_V to_P my_D Topic_^ ,_, thanks_N ._. I_O already_R have_V code_N like_P this_D is_V another_D Java_^ Client_^ ._. But_& I_O want_V the_D Servelt_^ to_P implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D Javascript_^ page_N ._.
The_D problem_N with_P having_V a_D servlet_N implement_V MessageListener_^ is_V that_P servlets_N are_V synchronous_A and_& MessageListeners_N are_V asynchronous_A ._. Instead_R you_O should_V create_V some_D other_A object_N to_P act_V as_P the_D MessageListener_^ and_& update_V some_D state_N somewhere_R (_V possibly_R a_D database_N or_& a_D JMX_N MBean_N or_& a_D Stateful_A Session_N EJB_N )_N when_R messages_N come_V in_R ._. Then_R the_D servlet_N can_V query_V that_D state_N to_P see_V if_P there's_A data_N to_P report_V back_R to_P the_D client_N ,_, and_& your_D web_N page_N can_V periodically_R ping_V the_D servlet_N to_P ask_V for_P fresh_A data_N ._.
Thanks_N jodonnell_G .._G I_O have_V never_R wrote_V a_D JMX_N MBean_N or_& Stateful_A Session_N EJB_N but_& after_P a_D quick_A google_N search_N I_O think_V this_D is_V the_D right_A path_N to_P look_V down_R ._. Thanks_N for_P the_D help_N ._.
Have_V you_O tried_V reading_V the_D answers_N for_P this_D question_N which_D links_V to_P the_D ActiveMQ_^ Ajax_^ support_N ._. Basically_R ActiveMQ_^ has_V native_A support_N for_P Ajax_^ so_P you_O can_V use_V its_D JavaScript_^ library_N to_P directly_R subscribe_V from_P an_D ActiveMQ_N topic_N ._. Also_R see_V the_D ActiveMQ_N web_N samples_N which_D show_V how_R to_P do_V things_N like_P real_A time_N chat_N or_& real_A time_N stock_N portfolio_N screens_N using_V Ajax_N with_P ActiveMQ_N
As_P James_^ Strachan_^ says_V -_: http://activemq.apache.org/ajax.html_N is_V an_D ideal_A out-of-the-box_A solution_N for_P your_D problem_N ._. If_P you_O still_R want_V to_P create_V such_A solution_N manually_R you_O can_V just_R create_V JMS_^ connection_N in_P your_D Ajax_N servlet_G (_G connection_N per_P request_N )_N ._. Consider_V using_V Spring_^ JMS_^ template_N for_P that_D reason_N (_G http://static.springsource.org/spring/docs/2.5.x/reference/jms.html_G )_G ._. Then_R just_R receive_V the_D message_N in_P the_D Servlet_G doGet_G /_: doPost_N method_N ._. Consider_V low_A timeout_N value_N for_P receiving_V in_P that_D case_N ._. Such_A solution_N will_V work_V for_P the_D Queues_N and_& durable_A Topics_N ._. For_P non-durable_A Topics_N consider_V external_A message_N listener_N ._. Spring_^ MessageListenerContainer_^ is_V an_D excellent_A tool_N for_P that_D purpose_N :_: Bean_^ lastTenUpdatesCache_N will_V be_V a_D singleton_N bean_N implementing_V MesssageListener_^ ._. This_D bean_N would_V be_V responsible_A for_P caching_V last_A ten_$ messages_N (_$ just_R putting_V it_O into_P a_D java.util_N list_N )_N ._. It_O will_V be_V injected_V into_P your_D Ajax_^ servlet_N so_R in_P your_D doGet_N /_: doPost_N method_N you_O can_V ask_V it_O about_P last_A 10_$ messages_N sent_V to_P the_D topic_N ._.
Passing_V JS_N function_N to_P applet_V for_P as_P event_N listener_N
Is_V it_O possible_A to_P pass_V a_D function_N /_: callback_N from_P javascript_N to_P a_D java_N applet_N ?_. For_P example_N i_G have_V an_D applet_N with_P a_D button_N that_P when_R pressed_V it_O will_V call_V the_D passed_V js_G callback_G
You_O can_V use_V JSObject_N to_P call_V back_R into_P javascript_N from_P Java_^ ._. From_P that_D page_N :_:
is_V it_O also_R possible_A to_P pass_V js_N function_N which_D is_V an_D object_N as_P the_D first_A argument_N of_P win.call_N instead_R the_D name_N of_P the_D js_N function_N ?_.
No_R ,_, but_& instead_R of_P passing_V in_P the_D bare_A callback_N function_N you_O could_V create_V a_D new_A object_N containing_V it_O ,_, pass_V that_P in_P then_R use_V the_D object.call_G (_G name_N )_N form_N ._.
I_O tend_V to_P use_V something_N I_O derived_V from_P the_D reflection_N example_N at_P the_D bottom_N of_P this_D page_N ,_, as_P then_R you_O don't_V need_V to_P meddle_V with_P your_D classpath_N to_P get_V it_O to_P compile_V Then_R I_O just_R pass_V JSON_N strings_N around_P between_P the_D applet_N and_& javascript_N
thx_N for_P the_D link_N ,_, it_O just_R contains_V all_X the_D possible_A methods_N
ps_N ._. to_P use_V JSObject_N you_O may_V need_V to_P include_V "_`` MAYSCRIPT_^ "_'' tag_N to_P applet_V html_N tag_N ._.
JavaScript_^ or_& Java_^ String_^ Subtraction_^
If_P you_O are_V using_V Java_^ or_& JavaScript_^ ,_, is_V there_R a_D good_A way_N to_P do_V something_N like_P a_D String_^ subtraction_N so_P that_P given_V two_$ strings_N :_: you_O just_R get_V I_O know_V that_P I_O could_V just_R write_V code_N to_P walk_V the_D string_N comparing_V characters_N ,_, but_& I_O was_V hoping_V there_X was_V a_D way_N to_P do_V it_O in_P really_R compact_A way_N ._. EDIT_V TO_P A_D DD:_N As_P I_O was_V analyzing_V the_D data_N I_O get_V when_R I_O use_V this_D I_O realized_V that_P I_O missed_V the_D statement_N of_P the_D case_N a_D bit_N ._. It_O should_V be_V :_: So_R ,_, I_O actually_R only_R want_V to_P remove_V the_D sections_N that_D are_V identical_A ._. That_D said_V ,_, the_D answer_N that_P I_O accepted_V is_V closest_A to_P my_D goal_N ._.
I_O don't_V see_V how_R JavaScript_^ is_V relevant_A here_R ..._:
How_R isn't_A it_O ?_. You_O never_R need_V to_P remove_V a_D string_N from_P another_D string_N in_P javascript_N ?_. Granted_V ,_, all_D solutions_N have_V been_V posted_V in_P java_N ,_, but_& that_P doesn't_N invalidate_V the_D question_N ._.
LOL_^ -_: okay_A then_R ,_, let's_N tag_V this_D as_P Java_^ /_: JavaScript_^ /_: C#_N /_: VB.NET_N /_: Python_N /_: Ruby_^ /_: erlang_N /_: Smalltalk_N /_: Lisp_N /_: etc_N ..._: My_D point_N is_V ,_, JavaScript_^ and_& Java_^ have_V nothing_N in_P common_A other_A than_P syntax_N shared_V with_P C#_N ,_, C_N ,_, C++_^ ,_, etc_G ._. and_& this_D is_V not_R really_R a_D JavaScript_^ solution_N ._.
Should_V work_V ..._: EDIT_^ :_: Apache_G commons_G libraries_N are_V also_R great_A to_P use_V As_P noted_V below_P ,_, the_D StringUtils_^ class_N does_V in_P fact_N have_V a_D method_N for_P this_D :_: StringUtils.remove()_N
Can't_V you_O just_R replace_V the_D occurrences_N of_P the_D first_A string_N in_P the_D second_N with_P an_D empty_A string_N ?_.
Depends_N on_P precisely_R what_O you_O want_V ._. If_P you're_N looking_V for_P a_D way_N to_P compare_V strings_N in_P the_D general_A case_N --_: meaning_N finding_V common_A sub-strings_N between_P arbitrary_A inputs_N --_: then_R you're_N looking_V at_P something_N closer_R to_P the_D Levenshtein_^ distance_N and_& similar_A algorithms_N ._. However_R ,_, if_P all_D you_O need_V is_V prefix_N /_: suffix_N comparison_N ,_, this_D should_V work_V :_: ..._: or_& something_N roughly_R to_P that_D effect_N ._.
Thanks_N Chris_^ and_& Daniel_^ (_^ and_& all_X the_D rest_N of_P you_O )_V ._. That_D was_V amazingly_R fast_R ._.
This_D seems_V like_P way_N too_R much_A code_N for_P what's_N requested_V -_: Erickson's_N approach_V (_R replace_V string_N B_N in_P string_N A_N with_P empty_A string_N )_N is_V much_R simpler_A and_& readable_A ._.
@Herb_G Agreed_G ,_, I_O do_V like_P Erickson's_G (_G and_& Chris's_G )_G approach_N much_R better_A for_P readability_N ._. However_R ,_, his_D doesn't_N enforce_V strict_A prefix_N /_: suffix_N ._. The_D problem_N I_O have_V is_V the_D question_N is_V a_D bit_N ill-defined_A :_: what_O does_V String_^ difference_N really_R mean_V ?_.
If_P you're_N just_R trying_V to_P get_V whatever's_N after_P the_D last_A dot_N ,_, I_O find_V this_D method_N easy_A in_P Javascript_^ :_: subString_N will_V contain_V the_D value_N you're_N looking_V for_P ._.
At_P first_A glance_N ,_, I_O thought_V of_P RegExp_^ ,_, but_& adding_V to_P the_D question_N ,_, you_O removed_V that_P possibility_N by_P adding_V to_P the_D start-string_N ..._: So_P you'll_N have_V to_P make_V a_D procedure_N ,_, that_D takes_V every_D character_N that_D are_V equal_A out_P of_P the_D resulting_V string_N ,_, something_N like_P this_D :_: By_P the_D way_N it_O doesn't_R have_V a_D meaning_N to_P set_V Java_^ and_& javascript_N as_P equals_V in_P any_D context_N ,_, a_D popular_A way_N of_P putting_V it_O could_V be_V :_: Java_^ and_& javascript_N has_V four_$ things_N in_P common_A :_: j_N -_: a_D -_: v_G -_: a_D !_. -_: )_N
Though_P this_D relies_V on_R that_P the_D character_N with_P code_N 1_$ does_V not_R appear_V in_P any_D of_P those_D strings_N ._.
Java_^ :_: Scripting_V language_N (_G macro_G )_N to_P embed_V into_P a_D Java_^ desktop_N application_N
I_O am_V writing_V a_D graphics_N application_N in_P Java_^ ._. Eventually_R I_O would_V like_V to_P build_V in_P a_D scripting_V language_N so_P things_N are_V programmable_A ._. Which_D language_N library_N do_V you_O recommend_V ?_. Likely_A suspects_N are_V :_: Rhino_^ (_^ JavaScript_^ )_^ JRuby_^ (_^ Ruby_^ )_G Jython_G (_G Python_G )_G Less_R likely_A candidates_N are_V :_: Whip_N up_R my_D own_A language_N using_V JavaCC_G LuaJava_G (_G Lua_G )_G Groovy_G JavaFX_G Script-Fu_G The_D target_N audience_N are_V probably_R not_R hardcore_N programmers_N ,_, so_R less_R arcane_A language_N is_V preferred_V ._. My_D guess_N is_V that_P JavaScript_^ is_V more_R acceptable_A by_P them_O even_R with_P its_D quirks_N just_R because_P they've_N seen_V it_O more_A ._. Lua_N seems_V to_P be_V popular_A in_P C_N /_: C++_^ ,_, but_& at_P least_A LuaJava_^ requires_V additional_A ._. dll_N /_: ._. so_R ,_, which_D makes_V deployment_N complicated_A ._. EDIT_^ :_: PhiLho_^ wrote_V that_P there's_N a_D Java_^ implementation_N of_P Lua_^ called_V kahlua_N ._. Related_A questions_N :_: Which_D scripting_V language_N to_P support_V in_P an_D existing_V codebase_N ?_. (_N in_P C_N /_: C++_^ )_^ Adding_V Scripting_N functionality_N to_P ._. net_A Apps_N What_O is_V the_D best_A scripting_N language_N to_P embed_V in_P a_D C#_N desktop_N application_N ._.
if_P the_D target_N audience_N is_V "_`` no_D programming_N skills_N ...._V "_`` choose_V jython_G (_G python_G )_G it_O is_V easy_A to_P learn_V ._. (_$ my_D 7_$ year_N old_A daugther_N learned_V it_O very_R quick_A )_N Bruce_^ Eckel_^ made_V a_D chapter_N with_P jython_N in_P "_`` thinking_V in_P java_N "_'' ._. at_P the_D danger_N getting_V a_D "_`` down-vote_A "_'' python_N is_V easier_A as_P BASIC_G :-)_G
+1_N for_P -BASIC_N ;o_N )_N
Lua_N is_V appreciated_V ,_, among_P other_A things_N ,_, by_P the_D simplicity_N of_P the_D language_N ,_, making_V it_O easy_A to_P learn_V ._. LuaJava_^ uses_V the_D original_A Lua_N implementation_N ,_, making_V it_O complete_A ,_, but_& as_P you_O point_V it_O ,_, maybe_R delicate_A to_P install_V ._. I_O know_V at_P least_A a_D pure_A Java_^ implementation_N of_P Lua_^ :_: Kahlua_^ ._. It_O is_V not_R complete_A (_N lacking_V coroutine_N support_N among_P other_A things_N ,_, but_& one_O can_V do_V much_R without_P them_O )_$ but_& perhaps_R already_R usable_A for_P your_D goal_N ._. Unlike_P ,_, say_V ,_, Groovy_^ ,_, it_O shouldn't_N add_V much_A overhead_N to_P your_D application_N ..._:
There's_N also_R BeanShell_^ ,_, which_D has_V the_D advantage_N of_P being_V a_D fully-approved_A JSR_N ,_, and_& so_R perhaps_R more_R likely_A to_P stick_V around_R ._. http://www.beanshell.org_N /_:
Plus_N side_N :_: it's_N basically_R dynamic_A Java_^ ,_, so_P it's_N really_R easy_A to_P attach_V it_O to_P a_D Java_^ program_N ._. Minus_^ side_N :_: it's_N basically_R dynamic_A Java_^ ,_, so_P it_O might_V not_R be_V the_D easiest_A language_N to_P learn_V ._.
If_P I_O like_V Java_^ ,_, and_& I_O use_V Java_^ ,_, but_& I_O don't_V want_V my_D users_N to_P know_V that_P they_O are_V running_V Java_^ app_N ,_, is_V that_P sort_N of_P like_P being_V ashamed_A of_P ugly_A girl_N friend_N ?_. No_! ,_, right_R ?_.
You_O might_V consider_V Jacl_^ ._. It_O is_V based_V on_P Tcl_^ which_D was_V originally_R designed_V to_P be_V an_D embeddable_A scripting_N language_N ._. So_R ,_, one_O could_V argue_V it_O is_V much_R more_R suited_V for_P that_D purpose_N than_P other_A scripting_V languages_N that_D had_V the_D ability_N to_P be_V embedded_V tacked-on_A ._. Particularly_R if_P the_D target_N audience_N is_V "_`` not_R hardcore_N programmers_N "_'' ,_, Jacl_^ makes_V a_D fine_A choice_N ._. Intelligent_A people_N (_N and_& especially_R those_D without_P hard-wired_A programming_N prejudices_N )_N can_V easily_R pick_V up_R the_D Tcl_^ syntax_N in_P a_D morning_N ._.
If_P you_O wanted_V to_P go_V all_D out_P you_O could_V utilize_V scripting_N for_P the_D Java_^ Platform_^ as_P defined_V by_P JSR_N 223_$ ._. Taking_V that_D approach_N would_V allow_V the_D application_N to_P utilize_V any_D language_N that_D has_V a_D conforming_V script_N engine_N ._.
"_`` The_D Mozilla_^ Rhino_^ engine_N for_P the_D JavaScript_^ programming_N language_N ,_, however_R ,_, is_V currently_R included_V as_P a_D feature_N in_P the_D JDK_N 6_$ and_& JRE_N 6_$ libraries_N ._. "_'' Does_^ this_D put_A Rhino_N slightly_R ahead_R of_P everyone_N else_R ?_.
In_P theory_N it_O does_V ._. I'm_V not_R really_R sure_A that_D is_V what_O has_V happened_V in_P reality_N yet_R ._.
Java_^ 6_$ already_R has_V javascript_V available_A as_P a_D JSR_N 223_$ scripting_N language_N ,_, out_P of_P the_D box_N ._.
It_O ships_N with_P Rhino_N ,_, which_D I_O commented_V on_P laz's_N answer_N too_R ._. In_P theory_N ,_, this_D is_V the_D official_A endorsement_N ._.
You_O can_V use_V RelProxy_^ -_: Java_^ ,_, it_O provides_V real_A and_& pure_A Java_^ as_P a_D scripting_N language_N ,_, including_V shell_N scripts_N made_V with_P Java_^ ,_, thanks_N to_P its_D compilation_N on_P the_D fly_N ._. Because_P the_D Java_^ "_`` script_N "_'' is_V executed_V sharing_V the_D launcher_N ClassLoader_^ ,_, integration_N is_V straightforward_A ._.
Dynamicaly_R populating_V a_D combobox_N with_P values_N from_P a_D Map_N based_V on_P what's_N selected_V in_P another_D combobox_N
Thanks_N for_P your_D answer_N ,_, Phill_^ ._. Actually_R ,_, I'm_N using_V Spring_N ._. While_P your_D answer_N is_V a_D nice_A one_N ,_, I'd_N still_R like_P to_P hear_V some_D other_A opinions_N :-)_$
How_R about_P something_N like_P this_D ,_, using_V prototype_N ?_. First_A ,_, your_D select_A box_N of_P categories_N :_: Then_R ,_, you_O output_N N_N different_A select_A boxes_N ,_, one_$ for_P each_D of_P the_D sub-categories_N :_: Your_D changeCategory_N javascript_N function_N disables_V all_D selects_V with_P class_N categorySelect_N ,_, and_& then_R enables_V just_R the_D one_$ for_P your_D current_A categoryID_N ._. When_R you_O hide_V /_: disable_V like_P this_D in_P prototype_N ,_, it_O not_R only_R hides_V it_O on_P the_D page_N ,_, but_& it_O will_V keep_V that_P FORM_N variable_N from_P posting_V ._. So_R even_R though_P you_O have_V N_N selects_V with_P the_D same_A FORM_N variable_A name_N (_^ myFormVar_^ )_^ ,_, only_R the_D active_A one_$ posts_N ._.
If_P I_O understand_V this_D correctly_R ,_, every_D time_N a_D car_N manufacturer_N is_V added_V or_& removed_V from_P the_D Map_N ,_, I'd_N have_V to_P add_V or_& remove_V the_D appropriate_A select_A tag_N in_P the_D JSP_^ ._. Since_P I_O get_V this_D Map_N from_P a_D vendor's_N web_N service_N ,_, I_O have_V no_D way_N of_P knowing_V how_R many_A elements_N the_D Map_N might_V have_V ._.
And_& ,_, I_O still_R don't_V know_V of_P a_D way_N to_P retrieve_V the_D names_N of_P the_D cars_N ._. The_D name_N of_P the_D car_N being_V a_D String_^ in_P a_D Car_N object_N ,_, that's_N stored_V in_P a_D List_N that's_N stored_V as_P a_D value_N in_P a_D Map_N ._. Whew_N ..._: talk_N about_P complicated_A ..._:
Not_R that_P long_R ago_R I_O thought_V about_P something_N similar_A ._. Using_V jQuery_N and_& the_D TexoTela_^ add-on_A it_O wasn't_G all_X that_D difficult_A ._. First_A ,_, you_O have_V a_D data_N structure_N like_P the_D map_N mentioned_V above_P :_: Your_D HTML_^ should_V look_V comparable_A to_P :_: Then_R ,_, you_O fill_V the_D first_A combo_N with_P jQuery_N code_N like_P :_: where_R manufacturerSelected_A is_V the_D callback_N registered_V on_P the_D onChange_N event_N This_^ should_V do_V the_D trick_N ._. Please_V note_N that_P there_X may_V be_V syntax_A errors_N in_P there_X ;_: I_O have_V edited_V my_D code_N to_P reflect_V your_D use_N case_N and_& had_V to_P strip_V quite_R a_D lot_N out_P ._. If_P this_D helps_V I_O would_V appreciate_V a_D comment_N ._.
First_R of_P all_D ,_, thanks_N for_P your_D answer_N ,_, extraneon_N ._. I'll_N use_V it_O if_P I_O don't_V find_V any_D other_A way_N ._. However_R ,_, there_X are_V two_$ issues_N here_R ._. The_D first_A one_$ is_V that_D I'm_N not_R doing_V this_D for_P my_D own_A personal_A project_N ,_, but_& as_P a_D part_N of_P a_D larger_A enterprise_N app_N for_P the_D company_N I'm_N currently_R employed_V at_P ._. Because_P of_P that_D ,_,
I_O might_V not_R be_V allowed_V to_P use_V JQuery_N ._. They're_V a_D bit_N touchy_A when_R it_O comes_V to_P introducing_V new_A frameworks_N in_P the_D app_N ._. But_& ,_, if_P I_O can't_V get_V it_O to_P work_V any_D other_A way_N ,_, I'll_N just_R have_V to_P get_V my_D boss_N to_P convince_V the_D business_N guys_N that_D that's_V the_D only_A way_N to_P do_V it_O ._. However_R ,_, the_D larger_A issue_N is_V getting_V the_D map_N
to_P work_V in_P JavaScript_^ ._. I_O already_R mentioned_V that_P I'm_N getting_V it_O from_P a_D webservice_N ,_, and_& my_D controller_N passes_V it_O to_P JSP_^ ,_, so_P I_O can't_V just_R hardcode_V it_O in_P JavaScript_^ ,_, I_O have_V to_P be_V able_A to_P map_V my_D map_N to_P a_D JavaScript_^ object_N ,_, so_P that_P I_O can_V manipulate_V it_O there_R ._. I'm_N still_R working_V on_P my_D own_A solution_N ,_, though_R ,_, so_R
if_P I_O get_V anywhere_R ,_, I'll_N post_V the_D solution_N here_R ._. Once_R again_R ,_, everybody_N ,_, thanks_N for_P all_X the_D answers_N ,_, and_& excuse_V me_O for_P the_D long_A comment_N ._.
As_P an_D add-on_A on_P my_D previous_A post_N ;_: You_O can_V put_V a_D script_N tag_N in_P your_D JSP_^ where_R you_O iterate_V over_P your_D map_N ._. An_D example_N about_P iterating_V over_P maps_N can_V be_V found_V in_P Maps_^ in_P Struts_^ ._. What_O you_O would_V like_V to_P achieve_V (_N if_P you_O don't_V care_N about_P form_N submission_N )_N is_V I_O think_V something_N like_P :_: You_O still_R have_V some_D superfuous_A "_`` ,_, "_'' which_D you_O might_V wish_V to_P prevent_V ,_, but_& I_O think_V this_D should_V do_V the_D trick_N ._.
I_O just_R love_V a_D challenge_N ._. No_D jQuery_N ,_, just_R plain_A javascript_N ,_, tested_V on_P Safari_^ ._. I'd_N like_P to_P add_V the_D following_A remarks_N in_P advance_N :_: It's_N faily_R long_R due_A to_P the_D error_N checking_N ._. Two_$ parts_N are_V generated_V ;_: the_D first_A script_N node_N with_P the_D Map_N and_& the_D contents_N of_P the_D manufacterer_N SELECT_^ Works_^ on_P My_^ Machine_^ (_^ TM_^ )_^ (_^ Safari_^ /_: OS_N X_N )_N There_X is_V no_D (_G css_G )_G styling_N applied_V ._. I_O have_V bad_A taste_N so_P it's_N no_D use_N anyway_R ._. ._.
Very_R nice_A ,_, extraneon_N !_. However_R ,_, the_D map_N is_V still_R hardcoded_V ,_, so_P the_D challenge_N is_V still_R on_P ..._: :-)_$ To_P be_V honest_A ,_, i_G managed_V to_P solve_V the_D problem_N ,_, although_P the_D solution_N isn't_N pretty_R ._. The_D populating_V part_N is_V done_V pretty_R much_R the_D way_N you_O did_V it_O ._. I_O haven't_V posted_V it_O yet_R '_G cause_N i_G have_V a_D lot_N to_P do_V but_& I'll_V post_N
it_O as_R soon_R as_P I_O can_V ,_, probably_R the_D day_N after_P tomorrow_N ._. Although_P your_D solution_N isn't_N complete_A ,_, I'm_N giving_V you_O a_D vote_N up_R ,_, just_R for_P the_D effort_N you_O put_V into_P it_O :-)_^ Hint_^ :_: my_D solution_N involves_V using_V a_D scriptlet_N ._.
OK_! ._. I_O should_V have_V written_V a_D JSP_^ and_& dynamically_R generate_V modelsPerManufacturer_N and_& the_D manufacturer_N SELECT_N ._. using_V nothing_N but_& the_D input_N Map_N ._. I'll_N update_V the_D answer_N tonight_N (_$ it's_N now_R 7am_V here_R )_$ ._.
Here_R is_V a_D working_N ,_, cut-and-paste_A answer_N in_P jsp_N without_P any_D tag_N libraries_N or_& external_A dependencies_N whatsoever_R ._. The_D map_N with_P models_N is_V hardcoded_A but_& shouldn't_N pose_V any_D problems_N ._. I_O separated_V this_D answer_N from_P my_D previous_A answer_N as_P the_D added_V JSP_^ does_V not_R improve_V readability_N ._. And_& in_P '_G real_A life_N '_'' I_O would_V not_R burden_N my_D JSP_^ with_P all_X the_D embedded_A logic_N but_& put_V it_O in_P a_D class_N somewhere_R ._. Or_& use_N tags_N ._. All_D that_P "_`` first_A "_'' stuff_N is_V to_P prevent_V superfluos_N "_`` ,_, "_'' in_P the_D generated_V code_N ._. Using_V a_D foreach_G dosn't_G give_V you_O any_D knowledge_N about_P the_D amount_N of_P elements_N ,_, so_P you_O check_V for_P last_A ._. You_O can_V also_R skip_V the_D first-element_A handling_N and_& strip_V the_D last_A "_`` ,_, "_'' afterwards_R by_P decreasing_V the_D builder_N length_N by_P 1_$ ._.
Well_R anyway_R ,_, as_P i_G said_V ,_, i_G finally_R managed_V to_P do_V it_O by_P myself_O ,_, so_R here's_V my_D answer_N ..._: I_O receive_V the_D map_N from_P my_D controller_N like_P this_D (_G I'm_G using_V Spring_^ ,_, don't_^ know_V how_R this_D works_V with_P other_A frameworks_N ):_V These_D are_V my_D combos_N :_: I_O imported_V the_D following_A classes_N (_V some_D names_N have_V ,_, of_P course_N ,_, been_V changed_V ):_$ And_& here's_$ the_D code_N that_D does_V all_X the_D hard_A work_N :_:
How_R do_V you_O restrict_V the_D size_N of_P a_D file_N being_V uploaded_V with_P JavaScript_^ (_^ or_& Java_^ )_N without_P transferring_V the_D entire_A file_N ?_.
Is_V there_R a_D way_N to_P validate_V on_P the_D client_N side_N browser_N whether_P the_D size_N of_P a_D file_N being_V uploaded_V from_P a_D JSP_^ page_N is_V over_P a_D set_V size_N limit_N without_P forcing_V the_D user_N to_P upload_V the_D entire_A file_N only_R to_P find_V out_R it_O was_V too_R large_A ?_. I_O would_V like_V to_P stay_V away_R from_P any_D proprietary_A controls_N or_& techniques_N like_P Flash_N or_& ActiveX_N if_P possible_A ._. Thanks_N !_.
This_D isn't_N a_D perfect_A solution_N ,_, but_& if_P you_O check_V the_D Content-Length_A HTTP_N header_N with_P request.getHeader_G (_G "_`` Content-Length_A ")_N then_R you_O can_V choose_V to_P not_R transfer_V the_D entire_A file_N ._. By_P way_N of_P explanation_N ,_, an_D extremely_R large_A file_N will_V not_R be_V transferred_V all_D at_P once_R ._. You'd_N have_V to_P actually_R open_V a_D stream_N representing_V that_P chunk_N of_P POST_N data_N and_& read_V from_P it_O for_P the_D entire_A thing_N to_P be_V transfered_V ._. On_P the_D other_A hand_N ,_, if_P you're_N worried_V about_P denial-of-service_A attacks_N ,_, then_R you_O can't_V really_R trust_V the_D Content-Length_^ header_N ,_, because_P it_O can_V easily_R be_V forged_V ._. In_P this_D case_N ,_, you_O should_V set_V a_D limit_N and_& stream_N a_D transfer_N of_P this_D file_N ,_, stopping_V as_R soon_R as_P you've_N exceeded_V that_P limit_N ._.
Suggest_V you_O reconsider_V the_D Flash_^ decision_N and_& take_V a_D look_N at_P the_D YUI_^ Uploader_^ ,_, here_R :_: http://developer.yahoo.com/yui/uploader_N Among_P other_A things_N ,_, the_D fileSelect_N event_N will_V tell_V you_O the_D size_N of_P the_D selected_V file_N in_P bytes_N immediately_R after_P it_O is_V selected_V but_& before_P it's_G uploaded_G ,_, so_R you'll_R be_V able_A to_P restrict_V accordingly_R ._.
With_P JSP_^ or_& PHP_^ you_O won't_V be_V able_A to_P restrict_V the_D file_N size_N because_P your_D page_N won't_N get_V the_D request_N until_P the_D upload_N has_V already_R happened_V ._. At_P that_D point_N you_O can_V decide_V not_R to_P save_V the_D file_N but_& that_D might_V be_V too_R late_A ._. There_X are_V some_D Java_^ solutions_N out_P there_R ,_, e.g._G MyUploader_^ or_& Hermes_^ ._. Some_D even_R support_V multiple_A file_N uploads_N and_& resuming_V partial_A uploads_N ,_, and_& some_D also_R give_V you_O the_D source_N code_N ._. You_O can_V also_R write_V your_D own_A ,_, but_& it_O will_V need_V to_P be_V a_D signed_A applet_N in_P order_N to_P function_V because_P it_O needs_V to_P access_V the_D local_A filesystem_N ._. If_P you're_N using_V Apache_^ as_P your_D webserver_N you'll_N need_V enough_R RAM_^ in_P your_D machine_N to_P fit_V the_D whole_A file_N size_N in_P memory_N of_P all_D files_N being_V uploaded_V at_P a_D given_V time_N ._.
How_R do_V I_O call_V Java_^ code_N from_P JavaScript_^ code_N in_P Wicket_^ ?_.
If_P I_O can_V do_V this_D ,_, how_R do_V I_O call_V Java_^ code_N (_N methods_N for_P instance_N )_N from_P within_P JavaScript_^ code_N ,_, in_P Wicket_^ ._.
Assuming_V you_O mean_V JavaScript_^ running_V on_P the_D client_N -_: you_O cause_V an_D HTTP_N redirect_N to_P be_V made_V to_P the_D server_N ,_, and_& have_V your_D servlet_N react_V to_P the_D request_N for_P the_D given_V URL_N ._. This_D is_V known_V as_P Ajax_^ ,_, and_& there_X are_V a_D number_N of_P libraries_N that_D help_V you_O do_V it_O .._V
http://www.wicket-library.com/wicket-examples-6.0.x/index.html_N has_V plenty_N of_P examples_N to_P get_V you_O going_V ._. Or_& have_V a_D Have_^ a_D look_N at_P DWR_^ http://directwebremoting.org_^ DWR_^ allows_V Javascript_^ in_P a_D browser_N to_P interact_V with_P Java_^ on_P a_D server_N and_& helps_V you_O manipulate_V web_N pages_N with_P the_D results_N ._. As_P Dorward_^ mentioned_V this_D is_V done_V via_P AJAX_N
Broken_A link_N http://wicketstuff.org/wicket13/ajax_N /_:
erk_N ._. The_D correct_A answer_N would_V be_V ajax_A call_N backs_N ._. You_O can_V either_R manually_R code_V the_D js_N to_P hook_N into_P the_D wicket_G js_G ,_, or_& you_O can_V setup_N the_D callbacks_N from_P wicket_N components_N in_P java_N ._. For_P example_N ,_, from_P AjaxLazyLoadPanel_^ :_: This_D example_N shows_V how_R to_P add_V call_N back_R code_V to_P any_D Component_^ in_P Wicket_^ ._. After_P the_D OnDomReady_^ event_N fires_N in_P your_D browser_N ,_, when_R loading_V a_D page_N ,_, Wicket_^ will_V cause_V it's_G js_G enging_N ,_, to_P call_V back_R into_P your_D code_N ,_, using_V Ajax_^ ,_, to_P the_D '_G respond_N '_'' method_N shown_V above_P ,_, at_P which_D point_N you_O can_V execute_V Java_^ code_N on_P the_D server_N ,_, and_& potentially_R add_V components_N to_P the_D ajax_N target_N to_P be_V re-rendered_A ._. To_P do_V it_O manually_R ,_, from_P js_N ,_, you_O can_V hook_N into_P wicket's_N system_N by_P printing_V out_R getCallbackScript()_N ._. toString()_N to_P a_D attribute_N on_P a_D wicket_N component_N ,_, which_D you'll_V then_R be_V able_A to_P access_V from_P js_G ._. Calling_V this_D url_N from_P js_N manually_R with_P wicket's_G wicketAjaxGet_G from_P wicket-_G ajax.js_G ._. Check_V out_R the_D mailing_N list_N for_P lot's_N of_P conversation_N on_P this_D topic_N :_: http://www.nabble.com/Wicket-and-javascript-ts24336438.html#a24336438_N
the_D last_A link_N does_V not_R work_V
Excerpt_N from_P https://cwiki.apache.org/WICKET/calling-wicket-from-javascript.html_N If_P you_O add_V any_D class_N that_D extends_V AbstractDefaultAjaxBehavior_^ to_P your_D page_N ,_, wicket-_G ajax.js_G will_V be_V added_V to_P the_D header_N ofyour_N web_N page_N ._. wicket-_G ajax.js_G provides_V you_O with_P two_$ basic_A methods_N to_P call_V your_D component_N :_: and_& Here_R is_V an_D example_N :_: JavaScript_G $url$_G is_V obtained_V from_P the_D method_N abstractDefaultAjaxBehavior.getCallbackUrl()_N ._. If_P you_O paste_V the_D String_^ returned_V from_P that_D method_N into_P your_D browser_N ,_, you'll_N invoke_V the_D respond_N method_N ,_, the_D same_A applies_V for_P the_D javascript_N method_N ._. You_O can_V optionally_R add_V arguments_N by_P appending_V these_D to_P the_D URL_N string_N ._. They_O take_V the_D form_N foo_G =b_G ar_G ._. you_O get_V the_D optional_A arguments_N in_P the_D Java_^ response_N method_N like_P this_D :_: or_& this_D :_:
Worth_^ mentioning_V that_P the_D API_^ for_P extracting_V parameters_N has_V changed_V in_P Wicket_^ 1.5_$ ._. Having_V called_V `_`` RequestCycle.get()_N ._. getRequest()_N `_`` to_P obtain_V a_D `_`` Request_^ `_`` object_N ,_, you_O must_V now_R call_V `_`` getQueryParameters()_N `_`` (_N for_P GET_V params_G )_G ,_, `_`` getPostParameters()_N `_`` (_N for_P POST_N params_G )_G ,_, or_& `_`` getRequestParameters()_N `_`` (_N for_P all_D at_P once_R )_$ ._. Each_D returns_N an_D `_`` IRequestParameters_N `_`` instance_N that_P you_O can_V query_V for_P parameters_N ._. See_^ [_^ the_D API_N docs]_G (_G http://wicket.apache.org/apidocs/1.5/)_N ._.
Oh_! ,_, and_& a_D gotcha_N :_: the_D URL_N returned_V by_P `_`` getCallbackUrl()_N `_`` can_V change_V during_P the_D component_N construction_N cycle_N ._. It's_N often_R inaccurate_A if_P you_O try_V to_P use_V it_O in_P the_D constructor_N ,_, and_& callbacks_N will_V fail_V as_P a_D result_N ._. I've_N had_V success_N using_V it_O in_P an_D override_N of_P the_D component's_N `_`` onBeforeRender()_N `_`` instead_R ._.
Testing_V onbeforeunload_A events_N from_P Selenium_N
I'm_N trying_V to_P write_V a_D Selenium_^ test_N for_P a_D web_N page_N that_D uses_V an_D onbeforeunload_A event_N to_P prompt_V the_D user_N before_P leaving_V ._. Selenium_G doesn't_G seem_V to_P recognize_V the_D confirmation_N dialog_N that_D comes_V up_R ,_, or_& to_P provide_V a_D way_N to_P hit_V OK_A or_& Cancel_V ._. Is_V there_R any_D way_N to_P do_V this_D ?_. I'm_N using_V the_D Java_^ Selenium_^ driver_N ,_, if_P that's_R relevant_A ._.
Warning_N :_: this_D gives_V an_D alternate_A solution_N Watij_^ --_: http://watij.com_N --_: can_V help_V here_R ._. Or_& if_P you're_N comfortable_A with_P ruby_N ,_, watir_N can_V help_V --_: http://wtr.rubyforge.org/install.html_N
You_O could_V write_V a_D user_N extension_N (_N or_& just_R some_D JavaScript_^ in_P a_D storeEval_N etc_G )_G that_P tests_N that_P window.onbeforeunload_N is_V set_V ,_, and_& then_R replaces_V it_O with_P null_N before_P continuing_V on_R from_P the_D page_N ._. Ugly_R ,_, but_& ought_V to_P get_V you_O off_P the_D page_N ._.
I_O didn't_V end_V up_R doing_V this_D (_$ my_D requirements_N changed_V such_A that_P I_O was_V better_A off_R using_V a_D regular_A alert_N anyway_R )_$ ,_, but_& this_D looks_V like_P it_O would_V do_V the_D trick_N ,_, and_& is_V close_A to_P how_R Selenium_^ handles_V testing_N for_P other_A alerts_V ._.
it_O was_V just_R a_D matter_N of_P adding_V `_`` js_eval_A "_'' window.onbeforeunload_N =null_N "`_N before_P an_D open_A for_P me_O ._. (_N selenium-client_A in_P Ruby_^ ,_, but_& you_O should_V be_V able_A to_P easily_R translate_V to_P other_A languages_N )_N
When_R I_O was_V confronted_V with_P limited_A control_N which_D I_O had_V over_P browser_N using_V Selenium_^ ,_, I_O turned_V to_P MozLab_^ plugin_N which_D solved_V my_D problem_N if_P only_R for_P one_$ browser_N platform_N ._.
I've_N just_R had_V to_P do_V this_D for_P an_D application_N of_P mine_N where_R the_D onbeforeunload_A handler_N brings_V up_R a_D prompt_A if_P a_D user_N leaves_V a_D page_N while_P a_D document_N is_V in_P an_D unsaved_A state_N ._. Python_^ code_N :_: The_D Java_^ equivalent_N would_V be_V :_: If_P the_D alert_N does_V not_R exist_V ,_, the_D code_N above_R will_V fail_V with_P a_D NoAlertPresentException_^ so_P there_X is_V no_D need_N for_P a_D separate_A test_N to_P check_V the_D existence_N before_P accepting_V the_D prompt_A ._. I'm_N running_V Selenium_^ 2.43_$ ._. 0_$ but_& I_O think_V this_D has_V been_V doable_A for_P a_D while_N now_R ._. In_P cases_N where_R I_^ don't_^ want_V the_D prompt_A to_P come_V up_R at_P all_D because_P that's_N not_R what_O I'm_N testing_N ,_, I_O run_V custom_N JavaScript_^ in_P the_D browser_N to_P set_V window.onbeforeunload_N to_P null_N before_P leaving_V the_D page_N ._. I_O put_V this_D in_P the_D test_N teardown_N code_N ._.
Calling_V JS_N from_P Applet_^ :_: MalformedURLException_N :_: unknown_A protocol_N :_: javascript_N
I_O read_V that_P you_O could_V call_V JavaScript_^ code_N from_P a_D Java_^ Applet_^ by_P calling_V However_R ,_, when_R I_O do_V this_D i_G get_V the_D following_A error_N :_: How_R do_V I_O work_V around_P this_D ?_.
Works_^ !!_^ Maybe_^ the_D browser_N does_V not_R have_V javascript_N enabled_V .._R just_R a_D guess_N
I_O get_V the_D same_A exception_N as_P you_O do_V because_P of_P that_P the_D URL_N class_N does_V not_R accept_V javascript_N :_: as_P a_D valid_A protocol_N ._. There_X is_V a_D workaround_N though_P ;_: supply_N an_D URLStreamHandler_N to_P the_D URL_N constructor_N ._. Example_^ :_:
This_D opens_V a_D new_A tab_N in_P Firefox_^ ,_, but_& the_D page_N and_& location_N address_N are_V both_D empty_A ._. Nothing_N happens_V .._G :/_G
Nevermind_^ ,_, apparently_R my_D Firefox_^ 3.0_$ ._. 3_$ on_P Ubuntu_^ is_V bugged_V :)_P It_O works_V perfectly_R on_P other_A computers_N ._. Thanks_N !_.
Spreadsheet-like_A control_N for_P a_D web_N application_N ?_.
I've_N been_V in_P a_D team_N that_D has_V built_V this_D using_V a_D ._. NET_N +_& jQuery_N setup_N -_: it's_N not_R fun_N ,_, and_& makes_V your_D mind_N MELT_N ._. If_P you_O have_V the_D option_N of_P using_V a_D silverlight_N grid_N I'd_N take_V that_D option_N over_P javascript_N ._.
This_D question_N was_V already_R asked_V a_D couple_N of_P times_N ._. Check_V this_D out_N :_: http://stackoverflow.com/questions/58289/excel-like-server-side-control-for-aspnet#58295_N but_& there_X are_V more_A ._.
I'd_N say_V this_D comes_V down_R to_P data_N grids_N ._. For_P Javascript_^ frameworks_N :_: Jquery_^ has_V '_G plugins_N '_G like_P this_D ._. Serverside_^ :_: Telerik_^ has_V asp.net_N controls_N like_P this_D ._. It_O really_R comes_V down_R to_P what_O platform_N mix_N you_O want_V to_P use_V ._. Also_R ,_, why_R do_V you_O want_V to_P bind_V an_D asp.net_N page_N to_P IE_N instead_R of_P Firefox_^ ?_. For_P a_D web_N application_N ,_, my_D recommendation_N would_V be_V a_D mix_N of_P asp.net_N mvc_N and_& jquery_N ._. JQuery_N is_V in_P my_D view_N the_D best_A and_& most_R stable_A JavaScript_^ framework_N out_R there_R ._. The_D problem_N is_V that_P asp.net_G mvc_G is_V still_R in_P ctp_N phase_N and_& it's_N probably_R not_R '_'' supported_V '_'' and_& '_'' stable_A '_'' enough_R in_P some_D eyes_N ._. I_O already_R finished_V a_D mid-scale_A commercial_A web_N app_N based_V on_P the_D mixture_N and_& was_V pleased_V with_P it_O ._.
I_O would_V consider_V a_D solution_N based_V on_P google_N docs_N /_: apps_N or_& similar_A and_& background_N web_N services_N ._.
Check_V out_R SpreadsheetGear_^ ,_, as_P is_V a_D ._. Net_A component_N that_D will_V allow_V you_O to_P read_V /_: write_V Excel_^ files_N and_& execute_V macros_N ._. You_O can_V preserve_V the_D logic_N of_P the_D spreadsheets_N and_& use_V them_O to_P power_N you_N web_N site_N ._. For_P a_D front_A end_N you_O may_V want_V to_P check_V out_R Telerik_^ as_P people_N have_V created_V a_D spreadsheet_N like_P interface_N with_P the_D Telerik_^ grid_N control_N ._.
Check_V out_R ZK_^ Spreadsheet_^ its_D cool_N ._.
It_O sounds_V like_P EASA_^ might_V meet_V your_D needs_N ._. It's_G a_G codeless_G app_N development_N tool_N in_P use_N at_P companies_N like_P Zurich_^ ,_, GE_^ ,_, HP_^ ._. You_O may_V like_V to_P have_V a_D look_N at_P http://www.easasoftware.com/spreadsheets_N ._. Hope_^ this_D helps_V ._.
Here_R you_O can_V download_V GelSheet_^ an_D opensource_N web_N based_V spreadsheet_N ._. It_O is_V written_V on_P PHP_^ /_: MySql_N /_: Javascript_^ You_O can_V contact_V the_D developers_N at_P sourceforege_N project_N page_N for_P any_D customizations_N It's_V the_D best_A solution_N I_O found_V and_& I'm_N using_V it_O as_P a_D part_N of_P a_D personal_A project_N ._.
Scripting_V in_P Java_^
Me_O and_& some_D friends_N are_V writing_V a_D MORPG_^ in_P Java_^ ,_, and_& we_O would_V like_V to_P use_V a_D scripting_V language_N to_P ,_, eg_G ._. to_P create_V quests_N ._. We_O have_V non_A experience_N with_P scripting_N in_P Java_^ ._. We_O have_V used_V Python_^ ,_, but_& we_O are_V very_R inexperienced_A with_P it_O ._. One_$ of_P us_O also_R have_V used_V Javascript_^ ._. What_O scripting_V language_N should_V we_O use_V ?_. What_O scripting_V language_N should_V we_O not_R use_V ?_.
How_R about_P Jython_^ ?_. http://www.jython.org/Project_N /_:
I_O agree_V with_P Viktor's_G Jython_G suggestion_N ._. Other_A than_P that_D and_& JavaScript_^ (_^ which_D you've_N mentioned_V ,_, and_& is_V built_V into_P Java_^ 6+_$ via_P the_D javax.script_N package_N )_N ,_, Groovy_N and_& JRuby_N are_V also_R worth_A looking_V at_P too_R ._. By_P the_D way_N ,_, you_O should_V look_V at_P Wyvern_^ ,_, also_R an_D MMORPG_N written_V in_P Java_^ and_& using_V Jython_^ for_P scripting_V ._. Steve_^ Yegge_^ ,_, its_D author_N ,_, has_V much_A to_P say_V about_P it_O from_P time_N to_P time_N ._. :-)_N
Java_^ supports_V a_D variety_N of_P (_G scripting_G )_G languages_N ,_, some_D are_V listed_V in_P Wikipedia_^ here_R and_& here_R ._. You_O probably_R should_V choose_V language_N with_P powerful_A DSL_N and_& metaprogramming_N capabilities_N ,_, such_A as_P Clojure_^ ._. But_& if_P you_O need_V something_N simpler_A ,_, JavaScript_^ might_V be_V a_D viable_A alternative_N ._.
See_^ Java_^ :_: Scripting_V language_N (_G macro_G )_N to_P embed_V into_P a_D Java_^ desktop_N application_N
You_O have_V quite_R a_D few_A options_N :_: Groovy_A -_: http://groovy.codehaus.org_N Jython_N -_: http://www.jython.org/Project_N JRuby_N -_: http://jruby.codehaus.org_N Possibly_R even_R BeanShell_^ (_G http://www.beanshell.org_G )_G I'm_G a_D fan_N of_P Python_^ myself_O so_R I'd_R recommend_V Jython_^ ,_, but_& they're_R probably_R all_D reasonable_A options_N ._.
what_O about_P creating_V your_D own_A specialized_A scripting_N language_N ?_. If_P your_D app_N is_V written_V with_P java_N ,_, you_O can_V use_V ANTLR_^ (_^ http://www.antlr.org_^ )_^ to_P create_V your_D language_N parsing_V code_N ._. The_D reason_N I_O say_V this_D is_V because_P a_D general_A purpose_N scripting_V language_N may_V provide_V too_R much_A power_N (_N because_P the_D script_N it_O to_P be_V used_V for_P quests_N only_R i_G assume_V )_N ._. But_& if_P making_V your_D own_A language_N is_V too_R hard_R then_R any_D of_P the_D above_A suggestions_N works_V -_: you_O just_R have_V to_P figure_V out_R how_R to_P bind_V the_D game's_G runtime_G into_P the_D script_N ._. I_O also_R suggest_V Lua_^ (_^ http://www.lua.org_^ )_^ as_P another_D choice_N that_P lots_N of_P games_N use_V ._.
I_O am_V a_D big_A fan_N of_P Python_^ /_: Jython_N due_A to_P the_D clean_A syntax_N -_: which_D may_V suit_V you_O if_P you_O have_V some_D python_N experience_N ._. Otherwise_R Groovy_A which_D is_V based_V on_P Java_^ syntax_N and_& may_V be_V an_D easier_A learning_N curve_N if_P most_A of_P your_D developers_N are_V Java_^ guys_N ._. It_O also_R has_V the_D advantage_N of_P closer_A ties_N with_P the_D Java_^ language_N and_& libraries_N ._. Beanshell_^ is_V good_A if_P you_O have_V simple_A scripting_N in_P mind_N -_: it_O doesn't_A support_N classes_N ._. However_R I_$ don't_N think_V it_O has_V had_V any_D support_N over_P the_D last_A few_A years_N (_V the_D JSR_^ seemed_V to_P kill_V it_O off_R ..._: )_N so_R is_V perhaps_R a_D bad_A choice_N if_P support_N is_V important_A to_P you_O ._.
I_O would_V have_V to_P recommend_V Javascript_^ for_P this_D purpose_N ._. Mozilla_G Rhino_G http://www.mozilla.org/rhino_N is_V an_D excellent_A implementation_N that_D would_V fit_V your_D needs_N perfectly_R ._. I_O recommend_V Javascript_^ over_P Jython_^ or_& JRuby_^ because_P of_P familiarity_N ._. Trivial_A Javascript_^ follows_V a_D very_R familiar_A syntax_N that_P anybody_N can_V use_V ._. However_R if_P someone_N wants_V to_P do_V something_N more_R intense_A ,_, Javascript_^ is_V a_D very_R powerful_A functional_A programming_N language_N ._. I_O regularly_R use_V Groovy_^ and_& Ruby_^ professionally_R and_& believe_V that_P their_D purpose_N is_V best_A for_P writing_V parts_N of_P applications_N with_P particularly_R complex_A logic_N where_R Java_^ is_V cumbersome_A to_P write_V ._. Javascript_^ is_V a_D much_R better_A choice_N as_P an_D embedded_A ,_, general_A scripting_N language_N to_P use_V in_P a_D game_N ._. I_O haven't_V used_V Python_^ ,_, but_& it's_N syntactically_R similar_A to_P Ruby_^ and_& I_O would_V believe_V it's_A purpose_N would_V also_R be_V similar_A ._.
If_P you_O were_V to_P start_V from_P scratch_N in_P 2012_$ would_V you_O approach_V the_D "_`` glue_N components_N together_R "_`` differently_R ?_.
There_X is_V one_$ good_A reason_N for_P including_V a_D scripting_N language_N ,_, namely_R where_R you_O need_V to_P be_V able_A to_P add_V new_A functionality_N (_N which_D hence_R cannot_V be_V configured_V )_N without_P redeployment_N ._.
But_& Java_^ has_V support_N for_P (_G re-_G )_G loading_V classes_N ,_, and_& using_V some_D thought_N and_& reflection_N will_V take_V you_O a_D long_A way_N ._. If_P necessary_A ._.
You_O still_R need_V to_P compile_V the_D revised_A Java_^ classes_N ._.
Compiling_V should_V an_D be_V infinitesimal_A issue_N compared_V to_P incorporating_V a_D scripting_N language_N ,_, in_P all_X the_D ways_N I_O can_V think_V of_P ._.
LuaJ_N seems_V to_P be_V a_D nice_A way_N to_P embed_V Lua_^ into_P Java_^ :_: http://sourceforge.net/projects/luaj_N /_:
Wicket_N +_& Javascript_N
I'm_N wrapping_V up_R a_D Javascript_^ widget_N in_P a_D Wicket_^ component_N ._. I_O want_V to_P let_V the_D JS_^ side_N talk_N to_P the_D component_N ._. What_D I've_N got_V so_R far_R :_: Component_N in_P question_N goes_V like_P in_P constructor_N and_& then_R ,_, later_R on_P ,_, puts_V something_N like_P into_P the_D JS_^ ._. where_R GridAjaxBehavior_^ extends_V AbstractDefaultAjaxBehavior_^ ._. I_O want_V GridAjaxBehavior_^ to_P spit_V back_R some_D XML_N when_R the_D JS_^ calls_V it_O ._. Am_V I_O doing_V this_D the_D right_A way_N ?_. What_O should_V GridAjaxBehaviour_^ do_V to_P spit_V back_R the_D XML_N ?_. Thanks_N
FYI_^ ,_, there's_V an_D error_N in_P your_D javascript_N emit_N ._. You're_N missing_V the_D right_A hand_N paren_N and_& semicolon_N ,_, but_& you're_N also_R missing_V quotes_N around_P the_D supplied_V string_N ._. ..._: new_A talker_N (_N ""_N +_& this.talker.getCallbackURL()_N +_& "_`` ")_N ;_: "_'' ;_: or_& something_N like_P that_D ._.
PSA_N :_: Wicket_G ~=_G a_D Java_^ Framework_^ ._. http://wicket.apache.org/introduction.html_N
please_V show_V a_D link_N to_P GridAjaxBehavior_^ -_: i_G know_V wicket_N a_D bit_N ,_, but_& GridAjaxBehavior_^ is_V new_A to_P me_O ._. is_V this_D a_D custom_N developed_A behavior_N
I_O don't_V really_R know_V what_O Wicket_^ is_V or_& what_O it_O does_V ,_, but_& there_X is_V a_D minor_A bug_N in_P your_D code_N (_N as_P it_O appears_V )_^ ._. This_^ :_: "_`` var_N MyGridTalker_N =_A new_A talker_N (_N "_'' +_& this.talker.getCallbackUrl()_N ;_: You_O seem_V to_P be_V missing_V your_D end_N parens_N :_: "_`` var_N MyGridTalker_N =_A new_A talker_N (_N "_'' +_& this.talker.getCallbackUrl()_N +_& ")"_N ;_: Anyway_R ,_, not_R a_D big_A deal_N ,_, but_& didn't_N know_V if_P it_O was_V intentional_A ._.
Write_V a_D Servlet_^ that_P Talks_N to_P JMS_^ (_^ ActiveMQ_^ )_^ and_& OnMessage_^ Update_^ the_D Site_N
I_O am_V building_V a_D site_N that_D uses_V a_D simple_A AJAX_^ Servlet_^ to_P talk_V JMS_^ (_^ ActiveMQ_^ )_^ and_& when_R a_D message_N arrives_V from_P the_D topic_N to_P update_V the_D site_N ._. I_O have_V Javascript_^ that_D creates_V an_D XMLHttpRequest_N for_P data_N ._. The_D Servlet_^ processes_V the_D Get_V Request_N and_& sends_V back_R JSON_^ ._. However_R I_O have_V no_D idea_N how_R to_P connect_V my_D Servlet_^ into_P my_D ActiveMQ_^ Message_^ Broker_^ ._. It_O just_R sends_V back_R dummy_A data_N right_R now_R ._. I_O am_V thinking_V the_D Servelt_^ should_V implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D JavaScript_^ page_N ._. But_& I'm_N not_R sure_A how_R to_P do_V this_D ._.
You_O probably_R need_V to_P get_V a_D JMS_^ connection_N from_P JNDI_^ ,_, like_P this_D :_:
Okay_! ..._: this_D is_V a_D good_A way_N to_P connect_V to_P my_D Topic_^ ,_, thanks_N ._. I_O already_R have_V code_N like_P this_D is_V another_D Java_^ Client_^ ._. But_& I_O want_V the_D Servelt_^ to_P implement_V the_D messagelistener_N ._. Then_R onMessage_N send_V data_N to_P the_D Javascript_^ page_N ._.
The_D problem_N with_P having_V a_D servlet_N implement_V MessageListener_^ is_V that_P servlets_N are_V synchronous_A and_& MessageListeners_N are_V asynchronous_A ._. Instead_R you_O should_V create_V some_D other_A object_N to_P act_V as_P the_D MessageListener_^ and_& update_V some_D state_N somewhere_R (_V possibly_R a_D database_N or_& a_D JMX_N MBean_N or_& a_D Stateful_A Session_N EJB_N )_N when_R messages_N come_V in_R ._. Then_R the_D servlet_N can_V query_V that_D state_N to_P see_V if_P there's_A data_N to_P report_V back_R to_P the_D client_N ,_, and_& your_D web_N page_N can_V periodically_R ping_V the_D servlet_N to_P ask_V for_P fresh_A data_N ._.
Thanks_N jodonnell_G .._G I_O have_V never_R wrote_V a_D JMX_N MBean_N or_& Stateful_A Session_N EJB_N but_& after_P a_D quick_A google_N search_N I_O think_V this_D is_V the_D right_A path_N to_P look_V down_R ._. Thanks_N for_P the_D help_N ._.
Have_V you_O tried_V reading_V the_D answers_N for_P this_D question_N which_D links_V to_P the_D ActiveMQ_^ Ajax_^ support_N ._. Basically_R ActiveMQ_^ has_V native_A support_N for_P Ajax_^ so_P you_O can_V use_V its_D JavaScript_^ library_N to_P directly_R subscribe_V from_P an_D ActiveMQ_N topic_N ._. Also_R see_V the_D ActiveMQ_N web_N samples_N which_D show_V how_R to_P do_V things_N like_P real_A time_N chat_N or_& real_A time_N stock_N portfolio_N screens_N using_V Ajax_N with_P ActiveMQ_N
As_P James_^ Strachan_^ says_V -_: http://activemq.apache.org/ajax.html_N is_V an_D ideal_A out-of-the-box_A solution_N for_P your_D problem_N ._. If_P you_O still_R want_V to_P create_V such_A solution_N manually_R you_O can_V just_R create_V JMS_^ connection_N in_P your_D Ajax_N servlet_G (_G connection_N per_P request_N )_N ._. Consider_V using_V Spring_^ JMS_^ template_N for_P that_D reason_N (_G http://static.springsource.org/spring/docs/2.5.x/reference/jms.html_G )_G ._. Then_R just_R receive_V the_D message_N in_P the_D Servlet_G doGet_G /_: doPost_N method_N ._. Consider_V low_A timeout_N value_N for_P receiving_V in_P that_D case_N ._. Such_A solution_N will_V work_V for_P the_D Queues_N and_& durable_A Topics_N ._. For_P non-durable_A Topics_N consider_V external_A message_N listener_N ._. Spring_^ MessageListenerContainer_^ is_V an_D excellent_A tool_N for_P that_D purpose_N :_: Bean_^ lastTenUpdatesCache_N will_V be_V a_D singleton_N bean_N implementing_V MesssageListener_^ ._. This_D bean_N would_V be_V responsible_A for_P caching_V last_A ten_$ messages_N (_$ just_R putting_V it_O into_P a_D java.util_N list_N )_N ._. It_O will_V be_V injected_V into_P your_D Ajax_^ servlet_N so_R in_P your_D doGet_N /_: doPost_N method_N you_O can_V ask_V it_O about_P last_A 10_$ messages_N sent_V to_P the_D topic_N ._.
Integration_N of_P JavaScript_^ and_& JMS_^
Where_R can_V I_O find_V a_D guide_N for_P integrating_V JavaScript_^ and_& JMS_^ (_^ Java_^ Messaging_^ Service_^ )_^ ?_. I_O would_V like_V a_D best_A practice_N or_& established_A technology_N that_D allows_V me_O to_P directly_R or_& indirectly_R receive_V messages_N from_P a_D topic_N and_& update_V a_D site_N based_V on_P the_D message_N ._. I_O was_V thinking_V of_P creating_V two_$ components_N ,_, a_D servlet_N for_P the_D Web_N module_N ,_, and_& an_D MDB_^ (_^ Message-Driven_^ Bean_^ )_^ for_P the_D EJB_N module_N ._. The_D web_N client_N will_V comsume_V messages_N from_P the_D JMS_^ topic_N ,_, and_& the_D MDB_^ will_V handle_V the_D onMessage_N ._. Does_V this_D sound_N correct_V ?_. Have_V you_O seen_V any_D examples_N ?_. Edit_^ :_: I_O am_V using_V ActiveMQ_N for_P the_D JMS_^ ._.
I_O would_V try_V using_V DWR_^ to_P integrate_V JavaScript_^ with_P your_D Java_^ app_N ._. It_O makes_V Java_^ to_P JavaScript_^ communication_N transparent_A and_& only_R requires_V one_$ servlet_N +_& configuration_N of_P what_O to_P expose_V ._. I_N haven_N t_N done_V this_D with_P JMS_^ ,_, but_& it_O should_V work_V the_D same_A ._. There_X are_V three_$ technologies_N that_D together_R solve_V all_D my_D integration_N problems_N ,_, Spring_^ ,_, Mule_^ ,_, and_& DWR_^ ._.
I'll_A second_A DWR_N -_: excellent_A (_N and_& painless_A !_. )_$ to_P integrate_V any_D server-side_N based_V Java_^ and_& JavaScript_^ on_P the_D client_N front-end_N
You'll_N find_V some_D references_N to_P the_D Dojo_^ /_: Bayeux_^ approach_N here_R http://www.pathf.com/blogs/2006/08/bayeux_a_json_p_A If_P you're_N using_V WebSphere_^ 6.0_$ or_& higher_A then_R the_D Web_N 2.0_$ Feature_N Pack_V includes_V an_D implementation_N ._.
I_O think_V this_D is_V your_D answer_N ._. Looks_V like_P it_O is_V baked_A in_P to_P ActieMQ_^ ._. I_O tried_V the_D examples_N and_& they_O seem_V to_P work_V ._. http://activemq.apache.org/ajax.html_N
I_O was_V able_A to_P get_V the_D examples_N to_P work_V on_P Version_^ 5.0_$ of_P ActiveMQ_N ._. However_R they_O have_V trouble_N running_V in_P 5.1_$ ._. Which_D version_N of_P ActiveMQ_N are_V you_O running_V ?_.
We_O did_V have_V a_D lot_N of_P problems_N with_P this_D servlet_N ,_, and_& we_O did_V abandon_V it_O completely_R ..._:
The_D Seam_^ framework_N supports_V subscription_N to_P JMS_^ topics_N from_P a_D JavaScript_^ based_V client_N :_: http://docs.jboss.com/seam/2.0.2.GA/reference/en-US/html/remoting.html#d0e14169_N
How_R to_P conduct_V blackbox_A testing_N on_P an_D AJAX_N application_N ?_.
What's_V the_D best_A ,_, crossplatform_A way_N to_P perform_V blackbox_N tests_N on_P AJAX_^ web_N applications_N ?_. Ideally_R ,_, the_D solution_N should_V have_V the_D following_A attributes_N :_: Able_A to_P integrate_V into_P a_D continuous_A integration_N build_V loop_N Cross_N platform_N so_P I_O you_O can_V run_V it_O on_P Windows_^ laptops_N and_& Linux_^ continuous_A integration_N servers_N Easy_^ way_N to_P script_N the_D interactions_N Free-as-in-freedom_N so_P you_O can_V adapt_V it_O into_P your_D tool_N chain_N if_P necessary_A I've_N looked_V into_P HttpUnit_^ but_& I'm_^ not_R conviced_V it_O can_V handle_V AJAX-heavy_A websites_N ._.
Selenium_N might_V be_V what_D you're_N looking_V for_P :_: http://selenium.openqa.org_N It_O allows_V you_O to_P script_N actions_N and_& evaluate_V the_D results_N ._. It's_G open-source_G (_G Apache_G 2.0_$ )_N ,_, cross_N platform_N ,_, and_& has_V nice_A tools_N ._.
I_O have_V used_V Selenium_^ for_P exactly_R this_D task_N ,_, but_& found_V it_O to_P be_V brittle_A ._. Check_V out_R this_D talk_N by_P two_$ Googlers_^ :_: Does_V my_D button_N look_N big_A in_P this_D ?_. Building_^ testable_A AJAX_^ applications_N They_O isolate_V the_D testable_A javascript_N (_$ non_A DOM-interaction_A )_N and_& test_N that_P using_V the_D Rhino_N javascript_N engine_N ._.
What_O is_V the_D best_A way_N to_P use_V Ext_^ JS_^ as_P part_N of_P Java_^ /_: Spring_N /_: Hibernate_^ based_V web_N application_N ?_.
We_O want_V to_P try_V Ext_^ JS_^ on_P new_A project_N ._. Is_V there_X any_D well-known_A best_A practice_N for_P integrating_V Ext_N JS_N with_P server_N side_N Java_^ (_^ Spring_^ /_: Hibernate_^ /_: JS_G )_G application_N ?_. Is_V DWR_N a_D good_A choice_N for_P that_D ?_.
It's_N perfectly_R fine_V to_P build_V your_D application_N using_V Ext_N JS_N /_: DWR_N /_: Spring_N /_: Hibernate_^ ._.
Yes_^ it's_^ possible_A ._. I've_N done_V the_D same_A thing_N with_P ._. NET_N :_: UI_N in_P ext-JS_N which_D communicates_V with_P the_D server_N trough_N JSON_N ._. In_P ._. NET_N world_N you_O can_V use_V DataContractSerializer_G (_G class_N from_P WCF_G )_G or_& JavascriptSerializer_^ (_^ ASP.NET_^ )_^ I'm_^ sure_A that_D there's_V several_A good_A JSON_^ Serializer_^ in_P the_D Java_^ world_N too_R ._. I_O used_V Jabsorb_G (_G but_& not_R enough_R to_P give_V you_O a_D solid_A feedback_N )_N ._. It_O appears_V that_P other_A people_N have_V tried_V :_: [_$ link_N text][2_N ]_G [_G 2_$ ]:_$ http://extjs.com/forum/showthread.php?t=30759_N forum_N ext-js_N
In_P our_D application_N we_O subclass_V Ext.data.DataProxy_N like_P this_D :_: You_O use_V it_O with_P a_D store_N like_P so_R :_: Our_D actual_A proxy_N class_N has_V some_D additional_A debug_N and_& error_N handling_N code_N that_P I_O left_V out_R for_P simplicity_N ._. You_O may_V also_R need_V to_P manipulate_V your_D data_N slightly_R so_P that_P the_D Ext.data.JsonReader_N can_V handle_V it_O ,_, but_& that's_V the_D basic_A idea_N ._. SomeService_^ is_V the_D JavaScript_^ name_N you_O specified_V for_P whatever_D bean_N you_O exposed_V in_P dwr.xml_G (_G or_& your_D Spring_N config_G )_G ._.
My_D team_N has_V been_V using_V Ext_N with_P DWR_N for_P almost_R year_N a_D year_N ,_, and_& have_V had_V nothing_N but_& good_A things_N to_P say_V ._. If_P you_O take_V this_D approach_N ,_, you_O will_V end_V up_R using_V DWR's_N generated_V JavaScript_^ classes_N for_P making_V your_D requests_N to_P the_D server_N ._. This_D will_V often_R be_V done_V in_P place_N of_P using_V the_D Ext.Ajax_N and_& Ext.data.Connection_N classes_N ._. When_R you_O use_V a_D class_N that_D require_V an_D Ext.data.Store_N (_G e.g._G grip_N ,_, combo_N box_N ,_, etc_G ._. )_N and_& you_O want_V to_P fetch_V data_N from_P the_D server_N ,_, you_O will_V need_V to_P use_V a_D proxy_N that_D can_V link_V in_R with_P DWR_^ ._. The_D user-community_N provided_V Ext.ux.data.DWRProxy_N has_V worked_V flawlessly_R for_P us_O :_: http://extjs.com/forum/showthread.php?t=23884_N ._.
Just_R wanted_V to_P report_V that_P we_O are_V doing_V this_D now_R and_& it_O works_V quite_R good_A ._. We_O also_R are_V using_V DWRProxy_N just_R like_P suggested_V ._.
Take_V a_D look_N at_P Grails_^ ,_, it_O plays_V well_R together_R with_P ExtJS_N ._.
How_R can_V you_O run_V Javascript_^ using_V Rhino_^ for_P Java_^ in_P a_D sandbox_N ?_.
Part_N of_P our_D java_N application_N needs_V to_P run_V javascript_N that_D is_V written_V by_P non-developers_N ._. These_D non-developers_N are_V using_V javascript_N for_P data_N formatting_V ._. (_$ Simple_A logic_N and_& string_N concatenation_N mostly_R )_^ ._. My_D question_N is_V how_R can_V I_O setup_N the_D execution_N of_P these_D scripts_N to_P make_V sure_A scripting_N errors_N don't_N have_V a_D major_A negative_A impact_N on_P the_D rest_N of_P the_D application_N ._. Need_V to_P guard_V against_P infinite_A loops_N Guard_^ against_P spawning_V new_A threads_N ._. Limit_N access_N to_P services_N and_& environment_N File_N system_N (_^ Example_^ :_: If_P a_D disgruntled_A script_N writer_N decided_V to_P delete_V files_N )_G Database_G (_G Same_A thing_N delete_V database_N records_N )_V Basically_R I_O need_V to_P setup_N the_D javascript_N scope_N to_P only_R include_V exactly_R what_O they_O need_V and_& no_D more_A ._.
Do_V you_O mean_V to_P say_V (_^ Javascript_^ using_V Rhino_^ )_^ for_P (_^ Java_^ in_P a_D sandbox_N )_N ,_, or_& (_^ Javascript_^ using_V (_^ Rhino_^ for_P Java_^ ))_^ (_^ in_P a_D sandbox_N )_N ?_.
Javascript_^ is_V single-threaded_A and_& can't_A access_N the_D filesystem_N ,_, so_P I_O don't_V think_V you_O have_V to_P worry_V about_P those_D ._. I'm_N not_R sure_A if_P there's_$ a_D way_N to_P set_V a_D timeout_N to_P guard_V against_P infinite_A loops_N ,_, but_& you_O could_V always_R spawn_V a_D (_^ Java_^ )_^ thread_N that_D executes_V the_D script_N ,_, and_& then_R kill_V the_D thread_N after_P so_R much_A time_N ._.
Rhino_N has_V a_D threading_A library_N available_A to_P it_O (_G java.lang.Thread_G !_. )_$ ,_, and_& can_V access_V the_D file_N system_N ._.
To_P guard_V against_P infinite_A loops_N ,_, you'd_N need_V to_P put_V it_O in_P a_D separate_A process_N so_P that_P it_O could_V be_V killed_V ._. To_P guard_V against_P creating_V threads_N ,_, you'd_A need_N to_P extend_V SecurityManager_^ (_^ the_D default_N implementation_N allows_V untrusted_A code_N to_P access_V non-root_A thread_N groups_N )_V ._. Java_^ security_N does_V allow_V you_O to_P prevent_V access_N to_P the_D file_N system_N ._. For_P database_N restrictions_N ,_, you_O might_V be_V able_A to_P use_V the_D standard_A SQL_^ user_N security_N ,_, but_& that_D is_V quite_R weak_A ._. Otherwise_R ,_, you_O need_V to_P provide_V an_D API_N that_D enforces_V your_D restrictions_N ._. Edit_^ :_: I_O should_V point_V out_R that_P the_D version_N of_P Rhino_N provided_V with_P JDK6_N has_V had_V security_N work_N done_V on_P it_O ,_, but_& doesn't_N include_V the_D compiler_N ._.
To_P guard_V against_P infinite_A loops_N ,_, you_O can_V observe_V the_D instruction_N count_N as_P the_D script_N runs_N (_V this_D works_V only_R with_P interpreted_V scripts_N ,_, not_R with_P compiled_V ones_N )_V ._. There_X is_V this_D example_N in_P the_D Rhino_^ JavaDocs_^ to_P prevent_V a_D script_N from_P running_V for_P more_A than_P ten_$ seconds_N :_:
To_P block_V Java_^ class_N and_& method_N access_N have_V a_D look_N at_P ..._: http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java_N /_:
I_O just_R ran_V across_P this_D blog_N post_N that_D seems_V to_P be_V useful_A for_P sandboxing_V more_A or_& less_A anything_N (_$ not_R just_R Rhino_G ):_G http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html_N
How_R to_P Cross-Compile_^ Java_^ Source_^ Code_^ to_P JavaScript_^ ?_.
Given_V a_D set_N of_P Java_^ source_N code_N files_N ,_, how_R can_V I_O compile_V them_O into_P one_$ or_& more_A JavaScript_^ files_N that_D can_V be_V used_V with_P hand-crafted_A JavaScript_^ ?_. GWT_^ is_V one_$ option_N ,_, but_& every_D example_N I've_N seen_V so_R far_R is_V aimed_V at_P building_V fancy_A websites_N ._. The_D simple_A use_N case_N of_P just_R converting_V Java_^ source_N to_P Javascript_^ that_D can_V be_V used_V together_R with_P handcrafted_V JavaScript_N hasn't_N been_V well-documented_A ._. I_O started_V a_D thread_N on_P the_D GWT_^ mailing_N list_N on_P this_D subject_N ,_, but_& opinions_N seem_V to_P be_V mixed_V on_P whether_P this_D is_V even_R feasible_A ._. One_$ person_N gave_V a_D very_R useful_A tip_N ,_, which_D was_V to_P check_V out_R GWT-Exporter_N ._. The_D problem_N is_V that_P neither_& source_N code_N nor_& documentation_N is_V readily_R available_A ,_, although_P there's_N this_D and_& this_D ._. edit_V :_: GWT-Exporter_A source_N code_N is_V here_R I've_A also_R seen_V Java2Script_N ._. But_& again_R ,_, I_O wasn't_V able_A to_P find_V examples_N of_P how_R to_P solve_V my_D simple_A use_N case_N ._. What's_V the_D best_A approach_N to_P this_D problem_N ?_. Is_V there_X something_N better_A I'm_N missing_V ?_.
This_D question_N discusses_V a_D very_R similar_A topic_N :_: compiling_V Java_^ libraries_N to_P JavaScript_^ using_V GWT_^ ._. http://stackoverflow.com/questions/3125556/gwt-to-create-utility-javascript-library_N
Very_R thorough_A question_N ._. You_O did_V a_D great_A job_N expressing_N what_D you'd_N explored_V already_R ._. Nicely_R done_V ._.
You_O can_V try_V using_V Scala-js_A https://github.com/lampepfl/scala-js_N for_P your_D java_N project_N -_: java_N /_: scala_G interoperability_G http://www.scala-lang.org/old/faq/4_G )_G
When_R you_O use_V GWT_^ ,_, you're_^ basically_R converting_V the_D UI_N portion_N into_P Javascript_^ (_^ and_& it_O assumes_V that_P you_O use_V the_D UI_^ widgets_N provided_V when_R you_O write_V your_D Java_^ )_^ ._. Only_R some_D of_P the_D Java_^ libraries_N are_V accessible_A within_P Javascript_^ ._. Typically_R in_P a_D GWT_N application_N anything_N that_D makes_V heavy_A use_N of_P Java_^ libraries_N would_V run_V on_P the_D server_N side_N and_& connect_V to_P the_D Javascript_^ as_P AJAX_^ (_$ which_D GWT_^ handles_V for_P you_O )_V ._. So_P GWT_G isn't_G necessarily_R converting_V your_D full_A application_N into_P Javascript_^ (_^ though_P it_O can_V if_P you're_N willing_A to_P limit_V your_D use_N of_P Java_^ libraries_N and_& some_D functionality_N )_N ._. At_P any_D rate_N ,_, if_P this_D approach_N (_N calling_V out_R to_P Java_^ running_V on_P a_D server_N from_P within_P Javascript_^ )_^ appeals_N to_P you_O ,_, one_$ nice_A option_N is_V DWR_^ ,_, which_D basically_R allows_V your_D Javascript_N to_P directly_R call_V methods_N in_P Java_^ classes_N running_V on_P the_D server_N (_N without_P you_O having_V to_P build_V a_D web_N service_N or_& other_A frontend_N )_N ._. Not_R what_O you_O asked_V ,_, I_O know_V ._. More_R relevantly_R ,_, it_O looks_V like_P there's_N source_N code_N for_P a_D sample_N app_N demonstrating_V the_D use_N of_P gwt-exporter_N ._.
This_D would_V be_V for_P a_D fairly_R small_A ,_, non-gui_A java_N library_N ._. I_O hadn't_V seen_V DWR_^ ,_, which_D looks_V like_P it_O could_V be_V very_R useful_A for_P larger_A projects_N ._. I_O Didn't_V even_R see_V the_D source_N directory_N for_P the_D gwt-exporter_N project_N -_: thanks_N for_P pointing_V it_O out_R ._. That_D looks_V promising_A ._.
gwt-exporter_A link_N is_V dead_A
Here's_V a_D new_A link_N to_P the_D sample_N app_N :_: http://code.google.com/p/gwt-exporter/source/browse/trunk/samples/src/main/java/exporterdemo/public/ExporterDemo.html_N
The_D new_A link_N is_V also_R dead_A ._. :/_N
And_& here's_V a_D new_A link_N :_: https://code.google.com/p/gwt-exporter/source/browse/samples/exporterdemo/src/main/java/exporterdemo/public/ExporterDemo.html_N
Also_R ,_, here's_V a_D link_N to_P the_D project_N home_N of_P gwt-exporter_N --_: that's_G less_R likely_A to_P change_V (_$ the_D sample_N app_N changes_N location_N when_R they_O change_V their_D directory_N format_N ):_^ https://code.google.com/p/gwt-exporter_^ /_:
Also_R you_O can_V use_V QWT_^ It_O has_V Java2JavaScript_A compiler_N on_P the_D board_N ._.
java_N and_& javascript_N callbacks_N compared_V
It_O seems_V I_O don't_V understand_V javascript_N callbacks_N quite_R as_R well_R as_P I_O thought_V ._. In_P the_D following_A example_N ,_, I_O would_V think_V that_P each_D copy_N of_P function_N in_P setTimeout_N would_V refer_V to_P its_D own_A copy_N of_P the_D variable_A "_`` index_N "_'' ._. Therefore_R ,_, running_V the_D example_N should_V produce_V the_D following_N alerts_V :_: "_`` zero_N "_'' "_`` one_$ "_'' "_`` two_$ "_'' ._. However_R ,_, it_O seems_V that_P theres_V only_R one_$ copy_N of_P the_D index_N variable_N ,_, and_& all_D copies_N of_P the_D callback_N function_N point_N to_P the_D same_A variable_N ,_, giving_V me_O the_D following_N alerts_V :_: "_`` two_$ "_'' "_`` two_$ "_'' "_`` two_$ "_'' ._. The_D following_V analagous_A (_N I_O thought_V )_N example_N in_P java_N prints_N "_`` zero_N "_'' "_`` one_$ "_'' "_`` two_$ "_'' ,_, as_P expected_V ._. Can_V anyone_N explain_V to_P me_O why_R the_D js_N example_N doesn't_N work_N ,_, and_& perhaps_R compare_V what's_N going_V on_R in_P the_D two_$ examples_N ?_.
Have_V you_O seen_V :_: http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope_N
Prestaul_N ,_, thank_V ,_, that's_N pretty_R much_R my_D same_A question_N ._. I_O looked_V for_P similar_A questions_N before_P I_O posted_V but_& didn't_N find_V this_D one_$ ._.
I_O asked_V [_$ an_D almost_R identical][1_G ]_G question_N yesterday_N and_& got_V a_D couple_N of_P different_A variations_N in_P the_D answers_N and_& some_D discussion_N on_P the_D merits_N of_P each_D ._. Might_^ be_V worth_A a_D look_N [_N 1_$ ]:_N http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope_N
index_N changes_N with_P each_D iteration_N of_P the_D loop_N ._. What_O you_O want_V is_V to_P place_V index_N into_P a_D closure_N not_R affected_V by_P the_D loop_N :_:
Thanks_N ._. I_O guess_V I_O thought_V that_P each_D iteration_N of_P the_D for_P loop_N would_V create_V a_D closure_N ._.
Well_^ yes_! ,_, technically_R I_O left_V that_P part_N out_R ._. There_X *_G is_V *_G a_D closure_N around_P index_N ._. But_& it_O is_V declared_V in_P an_D outer_A scope_N to_P the_D function_N passed_V to_P setTimeout_N ._. "_`` closure_N "_'' !_. =_A "_`` unchanging_A variable_N "_'' ._.
Cool_A ._. One_$ more_A question_N :_: why_R does_V the_D function_N declaration_N need_V to_P be_V wrapped_V in_P parens_N ?_.
@morgancodes_N :_: that's_N just_R convention_N ;_: also_R ,_, there_X might_V be_V some_D cases_N where_R the_D parser_N might_V otherwise_R produce_V incorrect_A results_N
Firefox_^ tells_V me_O there's_V a_D syntax_N error_N if_P I_O leave_V them_O out_R ._.
closures_N in_P javascript_G (_G references_N to_P variables_N outside_P the_D function_N )_N retain_V their_D association_N ..._: if_P you_O refer_V to_P a_D loop_N variable_N in_P a_D function_N called_V after_P the_D loop_N ends_V ,_, in_P the_D function_N call_N you_O get_V the_D value_N of_P that_D variable_N after_P the_D loop_N ._.
the_D function_N call_N /_: parens_N /_: etc_N create_V a_D copy_N of_P the_D value_N "_`` i_G "_'' into_P the_D variable_A "_`` index_N "_'' ,_, at_P the_D time_N of_P each_D iteration_N of_P the_D loop_N ._.
In_P javascript_N the_D for_P loop_N does_V not_R have_V it's_A own_A scope_N -_: so_P a_D var_N you_O create_V inside_P a_D loop_N is_V not_R different_A from_P one_$ defined_V outside_P of_P it_O ._.
Private_^ Members_^ In_^ JavaScript_^ is_V my_D favorite_A reference_N on_P closures_N ._. It_O is_V written_V as_P a_D recipe_N for_P providing_V private_A variables_N in_P JS_N objects_N (_V maybe_R useful_A ,_, maybe_R not_R )_$ but_& in_P the_D process_N goes_V through_P an_D excellent_A introduction_N of_P how_R closures_N work_V in_P general_A ,_, and_& especially_R in_P JS_^ ._. The_D comp.lang.javascript_N FAQ_N has_V a_D worthwhile_A section_N on_P closures_N as_R well_R ._. Closures_N can_V be_V confusing_A so_P I_O put_V together_R a_D working_V example_N of_P the_D shortest_A useful_A closure_N I've_N come_V across_P ,_, which_D was_V in_P the_D Rhino_^ book_N ._. Oh_! and_& I_^ don't_^ have_V enough_A rep_N to_P comment_V yet_R :)_$ but_& I_O saw_V your_D question_N above_P about_P why_R you_O have_V to_P put_V parenthesis_N around_P functions_N sometimes_R ._. That's_V only_R necessary_A when_R you_O invoke_V an_D anonymous_A function_N inline_N ._. For_P example_N the_D parenthesis_N are_V required_V here_R :_: Because_P you_O are_V creating_V a_D function_N and_& then_R immediately_R invoking_V it_O ._. But_& the_D parens_N are_V not_R necessary_A in_P the_D usual_A case_N where_R you_O are_V just_R declaring_V a_D named_V function_N for_P later_A use_N ._.
Thanks_N Noah_V ._. that_P rhino_N book_N example_N is_V cool_A ._.
String_^ length_N differs_V from_P Javascript_^ to_P Java_^ code_N
I've_N got_V a_D JSP_^ page_N with_P a_D piece_N of_P Javascript_^ validation_N code_N which_D limits_V to_P a_D certain_A amount_N of_P characters_N on_P submit_V ._. I'm_N using_V a_D textarea_N so_P I_O can't_V simply_R use_V a_D length_N attribute_N like_P in_P a_D input_N type=_N "_`` text_N "_'' ._. I_O use_V document.getElementById_G (_G "_`` text_N ")_N ._. value.length_N to_P get_V the_D string_N length_N ._. I'm_N running_V Firefox_^ 3.0_$ on_P Windows_^ (_^ but_& I've_^ tested_V this_D behavior_N with_P IE_N 6_$ also_R )_^ ._. The_D form_N gets_V submitted_V to_P a_D J2EE_N servlet_N ._. In_P my_D Java_^ servlet_N the_D string_N length_N of_P the_D parameter_N is_V larger_A than_P 2000_$ !_. I've_N noticed_V that_P this_D can_V easily_R be_V reproduced_V by_P adding_V carriage_N returns_N in_P the_D textarea_N ._. I've_N used_V Firebug_^ to_P assert_V the_D length_N of_P the_D textare_N and_& it_O really_R is_V 2000_$ characters_N long_R ._. On_P the_D Java_^ side_N though_R ,_, the_D carriage_N returns_N get_V converted_V to_P UNIX_^ style_N (_G rn_G ,_, instead_R of_P n_N )_N ,_, thus_R the_D string_N length_N differs_V !_. Am_V I_O missing_V something_N obvious_A here_R or_& what_O ?_. If_P not_R ,_, how_R would_V you_O reliably_R (_G cross-platform_G /_: browser_N )_N make_V sure_A that_P the_D textarea_N is_V limited_A ._.
@Fran_G ois_G :_: Always_R enclose_V things_N in_P tag_N brackets_N in_P back-ticks_G (_G e.g._G format_N them_O as_P code_N )_N ,_, or_& they_O will_V be_V stripped_V out_R on_P display_N of_P your_D question_N ._.
just_R stumbled_V across_P such_A situation_N ._. your_D topic_N made_V my_D day_N ,_, sir_N !_. thanks_N a_D lot_N !_.
Do_V you_O particularly_R care_V which_D line-endings_N are_V used_V ?_. Why_R not_R just_R make_V the_D Java_^ convert_V "_`` rn_N "_'' to_P "_`` n_N "_'' ?_. (_A Note_N that_P "_`` rn_N "_'' is_V the_D Windows_^ style_N ;_: "_`` n_N "_'' is_V the_D Unix_^ style_N ._. )_N Alternatively_R ,_, do_V the_D reverse_N when_R checking_V the_D length_N within_P the_D JavaScript_^ ._.
OK_! ._. I_O get_V it_O ._. I_O guess_V that_D means_V that_P Javascript_^ always_R represents_V carriage_N returns_N the_D UNIX_^ way_N internally_R and_& through_P its_D APIs_N (_G i.e._G `_`` length()_G `)_G ._. Somehow_R I_O gets_V converted_V to_P `_`` rn_V `_`` because_P the_D Java_^ VM_^ is_V running_V on_P Windows_^ ._. I_O wish_V it_O was_V more_R uniform_A ..._:
+1_N ,_, normalizing_V sounds_N good_A here_R
I_O don't_V know_V what_O rules_V different_A browsers_N on_P servlet_N engines_N will_V apply_V ,_, but_& normalization_N should_V remove_V the_D differences_N either_& way_N ._. Btw_^ ,_, it's_^ worth_A trying_V on_P macs_N too_R ,_, where_R r_N is_V the_D normal_A linebreak_N ._.
+1_$ Just_R remove_V all_D "_`` r_N "_'' and_& everybody_N will_V be_V happy_A ,_, whatever_D platform_N you_O are_V using_V ._. Macs_^ included_V ._.
Are_V you_O limiting_V it_O to_P 2000_$ chars_N so_P it_O fits_V inside_P an_D nvarchar_A (_N 2000_$ )_N column_N in_P a_D database_N ?_. Otherwise_R maybe_R just_R allow_V a_D 2%_G overrun_G to_P be_V flexible_A on_P the_D Java_^ side_N ._. And_& Java_^ should_V be_V using_V Unicode_^ UTF16_^ to_P represent_V Strings_^ ._. That_D /_: r_N must_V have_V got_V in_P there_X somewhere_R else_R ,_, maybe_R a_D conversion_N in_P the_D web_N browser_N when_R submitting_V ?_. Have_^ you_O tried_V different_A browsers_N ?_. On_P different_A platforms_N ?_. You_O might_V just_R have_V to_P strip_V out_R the_D /_: r_N s_N ._.
This_D isn't_N really_R a_D JavaScript_^ (_^ or_& Java_^ )_N problem_N -_: both_D layers_N report_V an_D accurate_A length_N for_P the_D string_N they_O are_V dealing_V with_P ._. The_D problem_N in_P your_D case_N is_V that_P the_D string_N gets_V transformed_V during_P the_D HTTP_N transmission_N ._. If_P you_O absolutely_R must_V ensure_V that_P the_D string_N doesn't_N exceed_V a_D certain_A length_N ,_, you_O can_V mimic_V this_D transformation_N on_P the_D client_N by_P replacing_V every_D instance_N of_P "_`` n_N "_'' with_P "_`` nr_N "_'' -_: but_& only_R for_P length_N verification_N purposes_N :_:
Note_V :_: The_D code_N should_V be_V `_`` textarea.value.replace_G (/_G n_N /_: g_N ,_, "_'' nr_G ")_G ._. length_N `_`` to_P find_V all_D occurrences_N ._. The_D original_A code_N only_R looks_V for_P the_D first_A match_N ._.
Thanks_N ._. Fixed_V it_O ._.
It_O should_V be_V `"_^ rn_^ "`_^ ,_, not_R `"_$ nr_G "`_G ._.
To_P remember_V that_P the_D right_A order_N is_V `_`` rn_G `_`` ,_, remember_V `_`` r_N `_`` stands_V for_P Carriage_^ ?_. eturn_G (_G `_`` Cr_G `)_G and_& `_`` n_N `_`` stands_V for_P (_^ ?_. ew_G )_G Line_^ Feed_^ (_^ `_`` Lf_G `)_G in_P `_`` CrLf_N `_`` ._.
I_O think_V you_O need_V to_P do_V the_D line_N ending_V conversion_N /_: check_N on_P both_& client_N and_& server_N because_P you_O don't_V know_V what_O line_N endings_V the_D client_N browser_N is_V going_V to_P use_V (_^ Firefox_^ submits_V n_N even_R on_P Windows_^ )_^ and_& if_P you_O develop_V server_N side_N on_P Windows_^ and_& deploy_V on_P Linux_^ then_R the_D line_N endings_N will_V be_V handled_V differently_R ._.
Lobo_^ Cobra_^ HtmlPanel_^ does_V not_R update_V GUI_^ after_P JavaScript_^ action_N
HI_N ,_, I_O started_V implementing_V a_D HTML_^ Browser_^ in_P Swing_^ ._. I_O want_V to_P use_V the_D Lobo_^ Cobra_^ toolkit_N because_P this_D toolkit_N inclused_V a_D renderer_N and_& parser_N for_P CSS_^ and_& JavaScript_^ ._. The_D pages_N are_V looking_V very_R nice_A and_& it_O is_V easy_A to_P use_V (_$ one_$ class_N implementation_N to_P show_V a_D html_A page_N )_N ._. I_O want_V to_P show_V HTML_^ pages_N in_P swing_N which_D can_V show_V javascript_N generated_V and_& modified_V objects_N ,_, like_P a_D flashing_V circle_N ._. As_R far_R as_P i_G know_V ,_, the_D cobra_N toolkit_N can_V show_V static_A javascript_N commands_N like_P '_G document.write_N '_'' or_& closwWindow()_N implementations_N ,_, but_& not_R updating_V the_D GUI_^ from_P a_D JavaScript_^ ._. Did_V someone_N works_V with_P Lobo_^ Cobra_^ Toolkit_^ before_P and_& give_V me_O some_D sample_N code_N or_& tips_N for_P showing_V HTML_^ pages_N with_P animated_A JavaScript_^ objects_N inside_R ._.
I'm_N under_P the_D impression_N that_D ,_, as_R long_R as_P you_O set_V yourself_O up_R for_P notifications_N ,_, your_D code_N will_V be_V called_V for_P all_D changes_N to_P the_D DOM_^ whether_P done_V on_P page_N load_N or_& dynamically_R by_P Javascript_^ following_V the_D page_N load_N ._. I_O would_V initially_R set_V up_R an_D object_N (_N X_N )_N implementing_V the_D DocumentNotificationListener_^ interface_N and_& log_V a_D message_N for_P every_D method_N called_V ._. Then_R set_V that_D up_R as_P a_D listener_N with_P Y.addDocumentNotificationListener_G (_G X_N )_G [_G where_R Y_N is_V your_D HTMLDocumentImpl_N object_N ]_N and_& load_V up_R your_D page_N to_P see_V which_D methods_N are_V actually_R called_V ._. Worst_A case_N is_V that_P you'll_N have_V to_P re-render_V your_D HTML_^ page_N on_P every_D method_N call_N ,_, but_& you_O should_V be_V able_A to_P optimize_V most_A of_P them_O ._. For_P example_N ,_, changing_V colors_N of_P a_D node_N (_^ DOM_^ object_N )_N ,_, which_D results_V in_P the_D X.lookInvalidated_G (_G ..._: )_$ being_V called_V ,_, wouldn't_N require_V re-rendering_N of_P the_D whole_A page_N as_P the_D node_N size_N doesn't_N change_N ._.
Returning_V JSON_N in_P GWT_N
I'm_N still_R pretty_R new_A to_P JSON_N and_& GWT_N and_& I'm_N trying_V to_P figure_V out_R how_R to_P pass_V JSON_^ data_N back_R from_P a_D page_N into_P my_D GWT_N app_N ._. I_O pass_V the_D JSON_^ back_R to_P a_D class_N :_: It's_N pretty_R basic_A and_& not_R complete_A at_P this_D moment_N so_P I'm_N just_R trying_V (_^ for_P now_R )_$ to_P make_V sure_A I_O can_V get_V something_N back_R ._. The_D code_N to_P call_V this_D is_V :_: However_R I_O get_V an_D error_N :_: No_D source_N code_N is_V available_A for_P type_N XYZ.GetProductTree_N ;_: did_V you_O forget_V to_P inherit_V a_D required_A module_N ?_. I_O am_V importing_V the_D correct_A package_N for_P XYZ.GetProductTree_N on_P the_D call_N page_N ._. What_O am_V I_O missing_V ?_.
This_D error_N is_V from_P the_D compiler_N ,_, complaining_V that_P it_O can't_G find_V that_D type_N in_P it's_G classpath_G ._. For_P the_D GWT_^ compiler_N to_P find_V your_D classes_N they_O have_V to_P be_V and_& in_P your_D classpath_N ,_, and_& they_O have_V to_P be_V referenced_V in_P a_D ._. gwt.xml_N module_N file_N as_R well_R ._. Can_V you_O post_V your_D package_N names_N and_& the_D contents_N of_P your_D ._. gwt.xml_N files_N ?_. My_D guess_N is_V that_P wherever_R you_O have_V put_V this_D class_N it's_V not_R visible_A to_P the_D GWT_^ compiler_N ._.
I_O am_V so_R obtuse_A sometimes_R ._. I_O forgot_V about_P having_V to_P add_V the_D source_N path_N for_P my_D new_A package_N ._. I_O added_V this_D to_P a_D "_`` data_N "_'' package_N which_D I_O just_R created_V and_& didn't_N add_V the_D path_N to_P the_D XML_N ._. Thanks_N :)_N
Is_V it_O possible_A to_P obtain_V a_D web-browser's_^ Java_^ VM_^ without_P using_V an_D applet_N ?_.
We_O have_V an_D ages_N old_A Java_^ applet_N that_P we_O want_V to_P move_V forward_R to_P a_D newer_A version_N of_P Java_^ (_^ 5_$ or_& 6_$ )_N ,_, however_R until_P today_N we've_N always_R supported_V people_N using_V Java_^ VMs_N as_R far_R back_R as_P version_N 1.1_$ (_N specifically_R for_P those_D still_R using_V the_D Microsoft_^ VM_G )_G As_P part_N of_P the_D upgrade_N ,_, we'd_N like_P to_P be_V able_A to_P serve_V a_D web_N page_N to_P people_N using_V out-of-date_A VMs_N telling_V them_O which_D versions_N we_O now_R support_V and_& where_R they_O can_V download_V them_O from_P ._. Ideally_R we_O want_V to_P do_V this_D without_P having_V to_P serve_V a_D Java_^ 1.1_$ applet_N first_R just_R to_P determine_V the_D JVM_^ version_N ._. Answers_N to_P either_D of_P the_D following_V (_N with_P code_N samples_N if_P possible_A )_N would_V be_V appreciated_V :_: Question_N 1_$ :_: is_V it_O possible_A to_P determine_V the_D JVM_^ in_P a_D script_N on_P the_D server_N using_V information_N from_P the_D HTTP_N headers_N ?_. Question_N 2_$ :_: is_V it_O possible_A to_P determine_V the_D information_N on_P the_D client_N using_V just_R JavaScript_^ ?_.
Q1_N :_: no_D Q2_N :_: yes_R ,_, but_& I_O don't_V know_V how_R portable_N that_D is_V :_: That_D outputs_V a_D table_N of_P all_D plugins_N ,_, versions_N should_V be_V contained_V ._. I_O think_V you_O have_V to_P loop_N over_P all_X the_D plugins_N ,_, check_N if_P '_'' java_N '_'' is_V contained_V in_P the_D name_N and_& then_R parse_V the_D version_N from_P description_N ..._:
Up-voted_A for_P the_D short_A ,_, but_& sweet_A ,_, answer_N to_P Q1_N -_: that's_V what_O I_O thought_V ._. Unfortunately_R ,_, Q2_N doesn't_N appear_V to_P port_N as_R far_R as_P IE6_N -_: mine's_N getting_V navigator.plugins.length_N as_P 0_$ :-(_N
A_D german_A website_N says_V it_O is_V supported_V in_P JavaScript_^ 1.1_$ ,_, Netscape_^ 3.0_$ ,_, Opera_^ 5.12_$ ,_, Firefox_^ 1.0_$ ,_, Konqueror_^ 3.1_$ ,_, Safari_^ 1_$ and_& higher_A and_& (_$ exactly_R )_A IE_N for_P Mac_^ 5.0_$ :-(_$ ._. Perhaps_R any_D of_P all_X these_D JS_^ libs_N has_V something_N for_P that_D ..._:
There_X is_V a_D deployment_N toolkit_N for_P doing_V this_D sort_N of_P thing_N ._. Serving_V an_D applet_N shouldn't_N be_V too_R bad_A ._. It_O can_V either_R be_V a_D 1x1_N pixel_N bug_N ,_, or_& use_V your_D normal_A applet_N with_P a_D small_A 1.1_$ class_N that_P forwards_R the_D applet_N lifecycle_N methods_N if_P it_O can_V load_V your_D 1.5_$ code_N ._. Nobody_N should_V still_R be_V using_V 1.1_$ ._. It_O hasn't_N had_V security_N bugs_N fixed_V in_P it_O for_P years_N ._.
We_O actually_R already_R serve_V an_D applet_N to_P determine_V the_D VM_N as_P we_O have_V two_$ versions_N ,_, one_$ of_P which_D works_V around_P bugs_N in_P MS_N JVM_N (_N but_& doesn't_N work_N on_P Sun_^ )_$ and_& one_$ of_P which_D is_V the_D other_A way_N round_N ._. The_D powers_N that_D be_V think_V this_D approach_N is_V too_R clunky_A going_V forward_R ,_, so_P I'm_N tasked_V with_P looking_V for_P another_D way_N ._.
Oh_! ,_, and_& just_R because_P nobody_N *_N should_V *_G be_V using_V 1.1_$ ,_, this_D does_V not_R mean_V none_N of_P our_D customers_N *_G are_V *_G using_V 1.1_$ ,_, unfortunately_R :-(_$
This_D script_N seems_V to_P do_V the_D trick_N on_P all_D major_A browsers_N :_: http://www.pinlady.net/PluginDetect/JavaDetect.htm_N
Seems_V quite_R complex_A considering_V it_O might_V run_V an_D applet_N anyway_R for_P its_D "_`` NOTF_N "_'' approach_N ;_: we_O might_V as_R well_R just_R go_V straight_A to_P that_D option_N ._. Plus_^ I'm_^ not_R sure_A I_O want_V to_P run_V code_N written_V by_P someone_N who_O uses_V the_D idiom_N "_'' Java142Installed_N =_A Java142Status_N ==_N 1_$ ?_. true_A :_: false_A "_''
Well_R ,_, I_O have_V to_P admit_V I_O didn't_N go_V beyond_P testing_V it_O actually_R worked_V ._.
I_O think_V the_D deployment_N toolkit_N might_V do_V what_O you_O want_V ._. Use_V the_D runApplet()_N function_N in_P deployJava_N to_P ensure_V that_P a_D minimum_N Java_^ Runtime_^ Environment_^ is_V available_A on_P a_D client_N machine_N before_P launching_V the_D applet_N ._.
Looks_N like_P the_D deployment_N toolkit_N is_V the_D "_`` proper_A "_'' way_N forward_R ,_, so_P I've_N accepted_V this_D answer_N as_P it_O included_V a_D link_N to_P the_D appropriate_A page_N (_N sorry_R ,_, tackline_N -_: I_O know_V you_O suggested_V the_D toolkit_N first_R ,_, but_& them's_V the_D breaks_N )_N ._. Meanwhile_R ,_, we'll_N be_V using_V our_D tried-and-tested_A launch_N an_D applet_N approach_N !_.
Good_A choice_N for_P a_D lightweight_A checksum_N algorithm_N ?_.
So_P the_D whole_A TCP_N /_: IP_^ checksum_N thing_N isn't_N working_V ..._: I'm_N thinking_V that_P anything_N corrupted_V in_P transit_N is_V going_V to_P get_V rejected_V at_P a_D much_R lower_A layer_N than_P the_D application_N level_N ._.
Yeah_! ,_, this_D sounds_V like_P something_N usually_R left_V to_P the_D transport_N layer_N ._. Can_V you_O explain_V your_D scenario_N a_D little_A more_A ?_. Where_R is_V your_D data_N being_V sent_V and_& what_O specific_A causes_N of_P data_N corruption_N are_V you_O trying_V to_P guard_V against_P ?_.
@dtsazza_N -_: you_O mentioned_V in_P a_D comment_N below_P that_P this_D is_V for_P security_N (_$ malicious_A users_N )_V ._. Can_V you_O elaborate_V ?_. Especially_R since_P this_D will_V probably_R run_V in_P a_D browser_N ._.
Use_^ SHA-1_^ JS_^ implementation_N ._. It's_N not_R as_R slow_A as_P you_O think_V (_^ Firefox_^ 3.0_$ on_P Core_N 2_$ Duo_N 2.4_$ Ghz_N hashes_V over_P 100KB_N per_P second_A )_N ._.
[_G UPDATE_G 30_$ /_: 5_$ /_: 2013_$ :_: The_D link_N to_P the_D old_A JS_N CRC32_N implementation_N died_V ,_, so_R I've_A now_R linked_V to_P a_D different_A one_$ ._. ]_$ Google_^ CRC32_N :_: fast_R ,_, and_& much_R lighter_A weight_N than_P MD5_N et_G al_G ._. There_X is_V a_D Javascript_^ implementation_N here_R ._.
Link_V now_R broken_V unfortunately_R ._.
@JamesWestgate_N :_: Thanks_N James_^ ,_, I've_^ found_V a_D new_A one_$ and_& linked_V to_P that_D ._. Incidentally_R the_D first_A JS_N version_N I_O found_V (_N at_P http://noteslog.com/post/crc32-for-javascript/)_N actually_R reparses_V part_N of_P the_D string_N containing_V the_D table_N for_P each_D character_N processed_V ,_, which_D will_V make_V it_O *_G much_A *_N slower_A than_P necessary_A ._.
Awesome_A !_. Thanks_N :)_V Looking_V for_P something_N to_P checksum_N javascript_N functions_N for_P a_D browser_N based_A animation_N code_N generation_N tool_N ._.
CRC32_N is_V not_R too_R hard_A to_P implement_V in_P any_D language_N ,_, it_O is_V good_A enough_R to_P detect_V simple_A data_N corruption_N and_& when_R implemted_V in_P a_D good_A fashion_N ,_, it_O is_V very_R fast_R ._. However_R you_O can_V also_R try_V Adler32_N ,_, which_D is_V almost_R equally_R good_A as_P CRC32_N ,_, but_& it's_N even_R easier_A to_P implement_V (_N and_& about_P equally_R fast_A )_N ._. Adler32_N in_P the_D Wikipedia_^ CRC32_^ JavaScript_^ implementation_N sample_N Either_^ of_P these_D two_$ (_$ or_& maybe_R even_R both_D )_N are_V available_A in_P Java_^ right_R out_P of_P the_D box_N ._.
CRC32_N ,_, definitely_R was_V designed_V to_P be_V exactly_R what_O you_O describe_V ._.
A_D word_N of_P caution_N :_: the_D JavaScript_^ in_P the_D link_N implements_V the_D algorithm_N with_P a_D table[256_N ]_N of_P literal_A values_N ._. If_P you_O should_V modify_V even_R a_D single_A digit_N of_P that_D table_N ,_, you_O will_V have_V a_D nasty_A bug_N that_D is_V very_R ,_, very_R ,_, hard_A to_P find_V !_. I_O prefer_V implementations_N that_D generate_V the_D table_N on_P the_D 1st_A call_N ._.
I'll_N second_A @D_G .i.S's_G comment_N ._. Testability_N is_V a_D minus_N ._.
Javascript_A implementation_N of_P MD4_N ,_, MD5_N and_& SHA1_N ._. BSD_^ license_N ._.
Are_V aware_A that_P both_D TCP_^ and_& UDP_^ (_^ and_& IP_^ ,_, and_& Ethernet_^ ,_, and_& ..._: )_N already_R provide_V checksum_N protection_N to_P data_N in_P transit_N ?_. Unless_P you're_N doing_V something_N really_R weird_A ,_, if_P you're_N seeing_V corruption_N ,_, something_N is_V very_R wrong_A ._. I_O suggest_V starting_V with_P a_D memory_N tester_N ._. Also_R ,_, you_O receive_V strong_A data_N integrity_N protection_N if_P you_O use_V SSL_N /_: TLS_N ._.
Yes_! ,_, I_O am_V was_V aware_A of_P that_D ,_, though_P you_O were_V right_A to_P point_V it_O out_R ._. Unfortunately_R it's_A in_P input_N coming_V from_P the_D world_N at_P large_A ,_, so_P we_O need_V to_P be_V able_A to_P cope_V with_P this_D anyway_R (_$ malicious_A /_: mischevious_A users_N could_V mangle_V this_D for_P example_N )_N ._.
It_O might_V be_V worth_A pointing_V out_R that_P for_P any_D change-detection_A algorithm_N ,_, there_X is_V always_R a_D chance_N that_P it_O won't_G detect_V an_D error_N ._. They_O all_D can_V have_V collisions_N or_& false-negatives_N ,_, though_P usually_R the_D more_R expensive_A algorithms_N reduce_V this_D chance_N to_P near-astronomically_A small_A probabilities_N ._.
@dtsazza_N :_: I_O wonder_V about_P the_D malicious_A /_: mischievous_A users_N who_O can_V mangle_V packets_N going_V across_P the_D network_N ,_, but_& can't_N defeat_N Javascript_^ ._. Or_& Adler32_N ._.
Other_A people_N have_V mentioned_V CRC32_N already_R ,_, but_& here's_V a_D link_N to_P the_D W3C_N implementation_N of_P CRC-32_N for_P PNG_^ ,_, as_P one_$ of_P the_D few_A well-known_A ,_, reputable_A sites_N with_P a_D reference_N CRC_N implementation_N ._. (_N A_N few_A years_N back_R I_O tried_V to_P find_V a_D well-known_A site_N with_P a_D CRC_N algorithm_N or_& at_P least_A one_$ that_D cited_V the_D source_N for_P its_D algorithm_N ,_, was_V almost_R tearing_V my_D hair_N out_P until_P I_O found_V the_D PNG_^ page_N ._. )_N
Here's_V a_D relatively_R simple_A one_$ I've_N '_'' invented_V '_'' -_: there's_V no_D mathematical_A research_N behind_P it_O but_& it's_V extremely_R fast_A and_& works_V in_P practice_N ._. I've_N also_R included_V the_D Java_^ equivalent_N that_D tests_V the_D algorithm_N and_& shows_N that_D there's_V less_A than_P 1_$ in_P 10,000,000_$ chance_N of_P failure_N (_N it_O takes_V a_D minute_N or_& two_$ to_P run_V )_^ ._. JavaScript_^ Java_^
Why_R ?_. Would_V you_O like_V to_P share_V an_D example_N ?_.
This_D is_V a_D rather_R old_A thread_N but_& I_O suspect_V it_O is_V still_R viewed_V quite_R often_R so_R -_: if_P all_D you_O need_V is_V a_D short_A but_& reliable_A piece_N of_P code_N to_P generate_V a_D checksum_N the_D Adler32_N bit_N algorithm_N has_V to_P be_V your_D choice_N ._. Here_R is_V the_D JavaScript_^ code_N The_D corresponding_A fiddle_N demonsrating_V the_D algorithm_N in_P action_N is_V here_R ._.
Detect_V version_N of_P Java_^ using_V JavaScript_^
Is_V there_X a_D reliable_A way_N of_P detecting_V what_D version_N of_P Java_^ is_V installed_V on_P the_D client's_N machine_N using_V JavaScript_^ ?_.
Check_V out_R the_D solution_N [_^ here]_^ (_^ http://www.spiration.co.uk/post/1186/Java%20detect%20brower,%20JVM%20vendor,%20Java%20version%20etc)_^ ._. Works_^ like_P a_D charm_N (_N at_P least_A on_P the_D local_A machine_N ,_, yet_& I_N didn't_N test_V it_O on_P different_A environments_N )_N ._.
Check_V out_R the_D code_N in_P the_D Java_^ Deployment_^ Toolkit_^ ._.
In_P case_N someone_N comes_V across_P this_D again_R ,_, note_V the_D toolkit_N has_V a_D major_A flaw_N :_: it_O returns_V the_D highest_A version_N of_P Java_^ that_D is_V installed_V on_P the_D machine_N ,_, not_R the_D highest_A version_N that_D is_V actually_R runnable_A (_N in_P IE_N ,_, at_P any_D rate_N )_N ._. Specifically_R ,_, if_P you_O have_V both_D a_D Sun_^ JRE_^ and_& MSJVM_^ installed_V ,_, the_D toolkit_N will_V report_V the_D Sun_^ JRE_^ version_N even_R if_P it's_N disabled_V and_& the_D browser_N will_V actually_R run_V MSJVM_^ ._. Adam_^ Bellaire's_^ link_N below_R seems_V more_R reliable_A ,_, albeit_P less_A "_`` clean_A "_'' because_P it_O requires_V running_V an_D actual_A applet_N ._.
Update_^ :_: This_D link_N is_V now_R broken_V ._. It_O looks_V like_P Adam_^ Bellaire's_^ link_N is_V going_V to_P be_V the_D one_$ to_P use_V ._.
Moreover_R ,_, this_D method_N makes_V the_D MSIE_^ gold_N security_N warning_V bar_N to_P be_V popped_V up_R under_P MSIE7_N with_P Sun_^ JDK_^ before_P 1.6_$ ._. 0_2_G (_G with_P Middle-High_A security_N settings_N )_^ ._. See_^ http://www.pinlady.net/PluginDetect_^ for_P a_D version_N which_D does_V not_R raise_V security_N warnings_N (_N and_& is_V maintained_A )_N ._.
Googling_V for_P detect_V "_`` java_N version_N "_'' using_V javascript_N yields_V a_D couple_N of_P results_N ,_, this_D one_$ looks_V like_P it_O might_V be_V useful_A ._. In_P essence_N ,_, it_O tries_V to_P load_V a_D Java_^ applet_N and_& then_R JavaScript_^ asks_V the_D applet_N ._.
Ironically_R ,_, this_D page_N is_V now_R the_D first_A search_N result_N on_P Google_^ for_P `_`` detect_V "_`` java_N version_N "_'' using_V javascript_N `_``
You_O can_V use_V the_D PluginDetect_^ library_N from_P here_R :_: http://www.pinlady.net/PluginDetect_N /_:
If_P you_O use_V Google_^ Analytics_^ ,_, this_D post_N might_V be_V helpful_A (_N see_V the_D forum_N thread_N for_P more_A details_N )_$ ._.
According_V to_P the_D fact_N that_P we're_N finding_V this_D page_N with_P google_N ,_, just_R to_P help_V the_D next_A guys_N finding_V this_D ._. Is_V Java_^ installed_V ?_. http://www.w3schools.com/jsref/met_nav_javaenabled.asp_N Which_D version_N of_P Java_^ is_V installed_V ?_. http://java.sun.com/javase/6/docs/technotes/guides/jweb/deployment_advice.html#deplToolkit_G It's_G the_D best_A way_N I_O found_V to_P find_V the_D version_N of_P Java_^ with_P JavaScript_^ ,_, but_& use_V it_O carefully_R because_P its_D version_N detection_N is_V really_R os_P /_: browser_N dependent_A ,_, and_& on_P old_A browser_N version_N or_& on_P recent_A browser_N with_P old_A Java_^ installed_V ,_, it'll_^ not_R work_V as_P expected_V ._. Take_V the_D time_N to_P do_V real_A tests_N before_P to_P use_V it_O in_P production_N ._.
That_D does_V not_R give_V any_D information_N about_P the_D version_N (_N which_D the_D question_N is_V about_P )_N ._.
You're_N right_N ,_, I_O didn't_V answer_N where_R I_O thought_V I_O was_V ._. Fixed_V my_D answer_N ._.
This_D is_V just_R a_D duplicate_V of_P [_^ Rich_^ Apodaca's_V previous_A answer]_G (_G http://stackoverflow.com/a/440227/157247)_N ,_, and_& Dan's_N comment_N on_P it_O applies_V ._.
Yeah_! ..._: just_R make_V it_O more_A explicite_N for_P thoses_N who_O doesn't_V understand_V everything_N on_P the_D page_N he_O gave_V ,_, or_& if_P ever_R the_D link_N dies_V ..._: or_& just_R to_P save_V some_D time_N to_P the_D next_A guys_N who_O find_V this_D page_N via_P Google_^ ._. I_O didn't_V mean_A to_P steal_V one's_N good_R answer_V ._.
@T_^ ._. J.Crowder_^ Top_^ 0.02_$ %_N user_N gets_V schooled_V by_P a_D first_A time_N answerer_N in_P Stack_G Overflow's_G philosophy_N of_P making_V the_D internet_N better_R ._. That's_N something_N you_O don't_V see_V every_D day_N ._.
@PatrickMcElhaney_N :_: The_D correct_A way_N to_P improve_V someone_N else's_N answer_N is_V to_P improve_V someone_N else's_N answer_V ._. (_$ And_& the_D answer_N as_P it_O was_V at_P the_D time_N of_P that_D comment_N was_V not_R the_D answer_N it_O is_V now_R ._. )_N
@T_N ._. J.Crowder_G I'm_G not_R sure_A sarlak_N had_V any_D options_N at_P his_D disposal_N at_P the_D time_N other_A than_P posting_V a_D new_A answer_N ._. He_O couldn't_G post_V a_D comment_N and_& probably_R couldn't_N suggest_V an_D edit_N either_R ._.
@PatrickMcElhaney_N :_: Right_^ ._. And_& there's_V a_D reason_N for_P those_D restrictions_N on_P new_A users_N ._. But_& I'm_N not_R going_V to_P prolong_V the_D discussion_N ._. :-)_N Best_N ,_,
This_D doesn't_N work_N unless_P the_D j_N in_P deployJava_N is_V capitalized_A ,_, just_R FYI_^ ._.
The_D detection_N logic_N does_V not_R work_V in_P IE32_N on_P Windows7-64_N ._. It_O could_V not_R detect_V the_D java_N version_N it_O installed_V earlier_R ._. Well_^ ,_, after_P further_A reading_N ,_, the_D Java_^ Deployment_^ Toolkit_^ on_P Windows_^ uses_V ActiveX_N classid_N which_D may_V pose_V your_D app_N to_P hackers_N (_R see_V http://www.kb.cert.org/vuls/id/886582_G )_G ._. I_O am_V out_R ._.
Version_N of_P Java_^ :_: Is_^ Java_^ and_& is_V Java_^ enable_V :_: These_D functions_N works_V on_P Opera_^ ,_, Firefox_^ ,_, Chrome_^ ._. I_O havn't_V IE_N ._.
JavaVersion_N does_V not_R work_V under_P MSIE_^ since_P navigator.mimeTypes_^ is_V always_R empty_A on_P this_D browser_N (_N tested_V on_P MSIE7_N )_N
I_O find_V that_P the_D JavaScript_^ solution_N provided_V by_P the_D Java_^ Deployment_^ Toolkit_^ gives_V an_D error_N ..._: "_`` deployJava.do_initialize_N is_V not_R a_D function_N "_'' ._. One_$ solution_N that_P I_O have_V used_V extensively_R for_P many_A years_N that_D does_V work_V in_P all_D browsers_N is_V the_D Java_^ Version_^ Display_V Applet_^ ._. Unfortunately_R the_D original_A author's_N site_N seems_V to_P have_V disappeared_V ,_, but_& you_O can_V download_V a_D copy_N of_P the_D Java_^ Version_^ Display_V Applet_^ here_R ._.
To_P use_V the_D Gears_^ WorkerPool_^ in_P GWT_^ do_V I_O have_V to_P write_V the_D same_A code_N in_P Java_^ and_& Javascript_^ ?_.
I_O have_V never_R used_V Gears_^ for_P GWT_^ ,_, but_& after_P reading_V your_D evidence_N ,_, I_O believe_V you_O are_V correct_A in_P stating_V that_P the_D WorkerPool_^ class_N can_V run_V only_R JavaScript_^ files_N and_& not_R Java-compiled-to-JavaScript_^ ._. Here_R is_V a_D quote_N from_P the_D GWT-Gears_A v1.1.1_N WorkerPool_^ API_^ ._. WorkerPool_^ module_N allows_V web_N applications_N to_P run_V JavaScript_^ code_N in_P the_D background_N ,_, without_P blocking_V the_D main_A page's_N script_N execution_N ._. Currently_^ this_D class_N can_V only_R create_V worker_N threads_N out_P of_P raw_A JavaScript_^ code_N ._. That_D is_V ,_, user_N code_N cannot_N currently_R create_V worker_N bodies_N from_P Java_^ code_N ._. The_D WorkerPool_^ class_N manages_V the_D threads_N and_& communication_N ,_, which_D is_V no_D small_A task_N ._.
How_R to_P access_N objects_N /_: arrays_N defined_V in_P JavaScript_^ from_P Java_^ applets_N
Using_V LiveConnect_^ getMember_^ (_^ String_^ )_^ method_N of_P a_D window_N JSObject_N ,_, a_D Java_^ object_N of_P type_N "_`` Object_^ "_'' is_V returned_V but_& I_O don't_V find_V the_D expected_A members_N defined_V on_P it_O ._. Neither_R can_V I_O cast_V it_O to_P a_D JSObject_N to_P continue_V using_V the_D getMember()_N ._. Accessing_V DOM_^ nodes_N and_& elements_N (_G DOM_G Objects_G )_G works_V as_P expected_V ._.
It's_N rather_R unclear_A what_O exactly_R you're_V trying_V to_P do_V -_: how_R about_P showing_V us_O some_D sourcecode_N ?_.
When_R you_O say_V you_O can't_N cast_N ,_, do_V you_O get_V a_D specific_A exception_N or_& error_N ?_.
@andynormancx_^ Yes_^ ._. That_D processing_N cannot_N cast_N from_P Object_^ to_P JSObject_N ._.
@Michael_^ Borgwardt_^ This_^ is_V what_D I'm_N trying_V to_P do_V ._. Global_^ JavaScript_^ Object_^ ._. Processing_N code_N ._. This_D is_V perhaps_R not_R Processing_N specific_A ._. That's_N why_R I_O didn't_V originally_R post_V the_D code_N ._.
I'm_N confused_V by_P the_D line_N got2_N =_A win.getMember_N (_N "_'' obj_G ")_G ;_: ._. It_O seems_V like_P you're_N expecting_V that_D line_N to_P get_V the_D foo_N object_N ._. As_P I_O understand_V it_O ,_, win.getMember_N (_N "_'' obj_G ")_G will_V get_V you_O the_D obj_N property_N on_P the_D DOM_^ window_N node_N ,_, which_D doesn't_^ exist_V ._. For_P example_N ,_, from_P this_D page_N :_: If_P you_O want_V to_P get_V the_D foo_N object_N ,_, the_D best_A way_N I'm_N aware_A of_P is_V to_P make_V a_D JavaScript_^ method_N you_O can_V call_V from_P the_D Java_^ applet_N ._. JavaScript_^ :_: Applet_^ :_:
MDC_^ says_V that_P it's_N supposed_V to_P be_V a_D "_`` JavaScript_^ Object_^ "_`` ._. Whatever_D that_D means_V ._. https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/LiveConnect/JSObject_N
Yes_R ,_, but_& I_O don't_V get_V why_R you_O expect_V it_O to_P get_V the_D "_`` foo_N "_'' object_N ._. "_'' JavaScript_^ object_N "_'' just_R means_V it's_N a_D object_N from_P JavaScript_G that's_G been_V translated_V to_P a_D Java_^ object_N ,_, specifically_R JSObject_N ._.
Did_V that_D work_N for_P you_O ?_. Because_P it's_N giving_V me_O an_D exception_N ._.
It_O did_V ._. What's_V your_D exception_N ?_.
Exception_N in_P thread_N "_'' Animation_^ Thread_^ "_`` java.lang.NullPointerException_N at_P js_processing_api.draw_G (_G js_processing_api.java_N :_: 34_$ )_N at_P processing.core.PApplet.handleDraw_N (_$ PApplet.java_N :_: 1406_$ )_N at_P processing.core.PApplet.run_N (_$ PApplet.java_N :_: 1311_$ )_N at_P java.lang.Thread.run_N (_$ Thread.java_N :_: 619_$ )_N
Random_A guess_N :_: try_V clearing_V your_D classloader_N cache_N ?_. Bring_V up_R your_D Java_^ console_N (_^ Tools_^ -_: Java_^ console_N in_P FF_N ,_, or_& right_R click_V on_P the_D Java_^ icon_N in_P your_D systray_N and_& pick_V the_D console_G )_G ,_, and_& hit_V x_N to_P clear_V it_O ,_, then_R reload_V ._.
I_O did_V try_V that_D ._. It_O throws_V the_D error_N when_R I_O click_V on_P the_D applet_N ._.
I'm_N not_R sure_A I_O have_V any_D more_A suggestions_N for_P you_O ,_, except_P to_P be_V pedantic_A -_: are_V you_O using_V the_D exact_A code_N I_O wrote_V above_P ?_. I_O can_V get_V the_D exception_N if_P I_O have_V getFoo_N return_N null_N ,_, but_& my_D line_N number_N is_V 32_$ instead_R of_P 34_$ ,_, so_P I_O suspect_V you_O have_V something_N else_R there_X as_R well_R ._.
It_O works_V now_R ._. Thanks_N .._V I_O don't_G know_V what_O the_D error_N was_V but_& I_O copy_V pasted_V your_D code_N and_& viola_N it_O works_V ._. Thanks_N a_D ton_N ._.
There's_V another_D problem_N ,_, how_R may_V I_O assign_V it_O the_D values_N I_O get_V to_P a_D variable_N ._. The_D type_N appears_V to_P be_V an_D Object_^ and_& I_^ can't_^ cast_V it_O to_P float_V or_& string_V ._.
How_R to_P transfer_V java_N array_N to_P javaScript_N array_N using_V jsp_N ?_.
I_O have_V a_D list_N of_P strings_N on_P my_D server_N which_D I_O am_V trying_V to_P get_V to_P the_D client_N in_P the_D form_N of_P an_D array_N ._. The_D code_N I_O am_V attempting_V to_P use_V is_V the_D following_N :_: Within_P the_D jsp_N I_O have_V a_D List_N String_^ column_N I_O am_V attempting_V the_D following_A code_N :_: This_D code_N simply_R returns_V the_D first_A element_N in_P the_D columns_N list_N for_P every_D element_N in_P the_D colArray_N ._. I_O have_V also_R tried_V :_: which_D does_V not_R work_V either_R ._. I_O feel_V like_P I_O am_V making_V a_D little_A mistake_N somewhere_R and_& am_R just_R not_R seeing_V it_O ._. Is_V what_O I_O am_V trying_V to_P do_V possible_A in_P the_D way_N that_P I_O am_V attempting_V ?_. Thanks_N ._.
You're_N getting_V the_D JSP_^ code_N that_D is_V executed_V on_P the_D server_N mixed_V up_R with_P the_D JavaScript_^ code_N that's_N executed_V on_P the_D client_N ._. The_D snippet_G %=_G columns.get_G (_G j++_G )_$ %_N is_V executed_V once_R ,_, on_P the_D server_N ,_, and_& the_D JavaScript_^ loop_N around_P it_O is_V irrelevant_A at_P this_D point_N ._. When_R it_O arrives_V the_D the_D client_N ,_, the_D loop's_N body_N just_R says_V colArray[i_N ]_N =_A "_`` first_A entry_N "_'' ;_: which_D of_P course_N puts_V the_D same_A string_N into_P every_D element_N of_P the_D array_N ._. What_O you_O need_V to_P do_V instead_R is_V to_P have_V a_D loop_N execute_V on_P the_D server_N ,_, like_P this_D :_: My_^ JSP_^ skills_N are_V rusty_A ,_, and_& the_D syntax_N may_V be_V different_A ,_, but_& I_O hope_V you_O get_V the_D idea_N ._. Edit_^ :_: As_P was_V pointed_V out_R in_P the_D comments_N ,_, you_O need_V to_P be_V VERY_R careful_A about_P escaping_V anything_N in_P those_D Strings_^ that_D could_V cause_V them_O to_P be_V interpreted_V as_P JavaScript_N code_N (_$ most_R prominently_R quotation_N marks_N )_G -_: especially_R if_P they_O contain_V user-generated_A content_N ._. Otherwise_R you're_V leaving_V your_D app_N wide_R open_A to_P Cross-site_A scripting_N and_& Cross-site_A request_N forgery_N attacks_N ._.
This_D will_V not_R work_V if_P the_D strings_N contain_V characters_N such_A as_P double-quote_N ,_, backslash_N or_& newline_N ._. Such_A characters_N will_V need_V to_P be_V escaped_V ._.
I'd_N also_R add_V a_D semicolon_N to_P the_D end_N of_P the_D second_A line_N ._.
Once_R the_D JavaScript_^ reaches_V the_D client_N ,_, the_D server_N code_N has_V stopped_V executing_V ._. The_D server_N code_N does_V not_R execute_V "_'' in_P parallel_N "_'' with_P the_D client_N code_N ._. You_O have_V to_P build_V the_D entire_A JavaScript_^ initialization_N in_P Java_^ and_& send_V it_O ,_, complete_A and_& executable_A ,_, to_P the_D client_N :_: That_D is_V just_R one_$ way_N to_P do_V it_O ,_, you_O can_V also_R build_V the_D output_N "_'' on_P the_D fly_N "_'' by_P embedding_V the_D server_N code_N inside_P the_D [_N and_& ]_N ._. I_O used_V this_D example_N to_P try_V to_P demonstrate_V the_D separation_N between_P building_V the_D string_N that_D comprises_V the_D client-side_A JavaScript_^ and_& outputting_V that_P to_P the_D browser_N ._.
Try_V using_V JSON_^ (_^ Javascript_^ object_N notation_N )_G it'd_G be_V quite_R simple_A to_P encode_V the_D array_N and_& decode_V it_O on_P javascript_N check_N it_O out_R here_R http://www.json.org/java/index.html_N
Exp_^ Language_^ :_:
The_D solutions_N posted_V above_P didn't_N work_N in_P my_D case_N ,_, I_O needed_V an_D extra_A Javascript_^ variable_N to_P do_V the_D transference_N :_:
Java_^ based_V Swing_^ Browser_^ should_V support_V JavaScript_^
In_P my_D company_N ,_, I_O am_V implementing_V a_D java_N based_A html_N browser_N ._. I_O found_V a_D lot_N of_P tools_N to_P generate_V complete_A browsers_N only_R in_P Swing_N which_D are_V looking_V like_P Mozilla_^ ._. But_& I_O was_V not_R able_A to_P find_V a_D browser_N which_D supports_V JavaScript_^ ._. The_D browser_N I_O will_V implement_V should_V execute_V JavaScript_^ inside_P the_D HTML_^ sides_N ._. Do_V you_O know_V of_P a_D tool_N that_D supports_V this_D ?_. Or_& do_V you_O know_V of_P a_D parser_N which_D pairs_N the_D javascript_N to_P something_N I_O can_V use_V inside_P the_D html_N browser_N ?_. I_O know_V that_P the_D eclipse_N plugins_N can_V handle_V javascript_N ,_, but_& I_O can_V not_R use_V AWT_^ in_P my_D project_N ._. Thanks_N for_P your_D help_N ._.
You_O don't_V want_V to_P build_V this_D yourself_O ._. Fortunately_R ,_, there_X are_V a_D number_N of_P open_A source_N javascript_N engines_N you_O might_V be_V able_A to_P adapt_V ._.
add_V the_D moment_N the_D html_N sides_N are_V shown_V by_P using_V C++_^ and_& a_D firefox_N plugin_N ,_, but_& i_G should_V use_V the_D existing_V html_N sides_N which_D including_V javascript_N ._. I_O have_V no_D choice_N ,_, i_G have_V to_P show_V html_N with_P javascript_N ._.
I'm_N not_R saying_V don't_N do_V it_O :_: I'm_N saying_V find_V someone_N else_R that's_V already_R done_V it_O and_& use_V that_D ._.
In_P my_D company_N ,_, I_O am_V implementing_V a_D java_N based_A html_N browser_N ._. Good_^ God_^ ,_, why_R ?_. That_D said_V ,_, this_D page_N at_P java.net_N discusses_V some_D options_N ;_: you_O could_V search_V it_O more_R extensively_R ._.
I'd_N look_N at_P Lobo_^ ._. It_O sounds_V like_P just_R want_V you_O want_V ._. It_O has_V a_D HTML_^ Renderer_N and_& parser_N ,_, and_& some_D support_N for_P Javascript_^ ._. If_P it's_N missing_V a_D feature_N of_P Javascript_^ that_P you_O need_V ,_, it_O seems_V like_P it_O would_V easier_A to_P contribute_V to_P Lobo_^ ,_, instead_R of_P reinventing_V the_D wheel_N ._.
That_D sounds_V like_P a_D good_A solution_N ._. I_O will_V test_V this_D ._. Thanks_N
Will_V you_O please_V tell_V me_O that_P how_R to_P implement_V this_D ?_.
It_O will_V be_V available_A ._. I_O hope_V pretty_R soon_R ._. Its_D name_N is_V JWebPane_N and_& it_O is_V based_V on_P WebKit_G afaik_G ._. The_D interesting_A question_N is_V "_`` When_R "_'' Here's_V the_D link_N :_: http://weblogs.java.net/blog/ixmal/archive/2008/05/introducing_jwe.html_N
News_N today_N :_: http://weblogs.java.net/blog/alex2d/archive/2008/12/jwebpane_projec.html_N
How_R can_V I_O get_V stock_N quotes_N using_V Google_^ Finance_^ API_^ ?_.
I'm_N looking_V for_P access_N to_P financial_A data_N from_P Google_^ services_N ._. I_O found_V this_D URL_N that_D gets_V the_D stock_N data_N for_P Microsoft_^ ._. What_O are_V all_X the_D possible_A parameters_N that_P Google_^ allows_V for_P this_D kind_N of_P HTTP_N request_N ?_. I'd_N like_P to_P see_V all_X the_D different_A information_N that_P I_O could_V get_V ._.
How_R did_V you_O find_V that_D URL_N ?_.
You_O can_V easily_R get_V Google_^ Finance_^ data_N via_P YQL_N which_D is_V simple_A and_& REST_N based_V ._. An_D example_N can_V be_V found_V here_R :_: http://www.jarloo.com/google-finance-and-yql_N /_:
This_D is_V a_D great_A question_N ,_, are_V there_X more_A answers_N that_D are_V up_R to_P date_N ?_.
@Timmyc_N -_: The_D `_`` client=ig_N `_`` parametet_N leads_V me_O to_P believe_V this_D is_V /_: was_V used_V for_P an_D iGoogle_N widget_N ._. Just_R a_D guess_N though_R ._.
Note_V that_P if_P your_D application_N is_V [_N for_P public_A consumption_N ,_, using_V the_D Google_^ Finance_^ API_^ is_V against_P Google's_A terms_N of_P service]_G (_G https://groups.google.com/d/msg/google-finance-apis/O8fjsgnamHE/-ZKSjif4yDIJ)_N ._. @timmyc_N :_: the_D `_`` `_`` parameter_N isn't_N necessary_A ._. http://finance.google.com/finance/info?q=NASDAQ%3aMSFT_N works_V ._.
There's_V a_D whole_A API_N for_P managing_V portfolios_N ._. *_G Link_^ removed_V ._. Google_^ no_R longer_R provides_V an_D developer_N API_N for_P this_D ._. Getting_V stock_N quotes_N is_V a_D little_R harder_R ._. I_O found_V one_$ article_N where_R someone_N got_V stock_N quotes_N using_V Google_^ Spreadsheets_^ ._. Here_R is_V another_D example_N of_P that_D ._. You_O can_V also_R use_V the_D gadgets_N but_& I_O guess_V that's_N not_R what_D you're_N after_P ._. The_D API_^ you_O mention_V is_V interesting_A but_& doesn't_N seem_V to_P be_V documented_V (_R as_R far_R as_P I've_N been_V able_A to_P find_V anyway_R )_A ._. Here_R is_V some_D information_N on_P historical_A prices_N ,_, just_R for_P reference_N sake_N ._.
There_X is_V an_D undocumented_A API_N from_P google_N you_O can_V use_V to_P get_V stock_N info_N much_R easier_A as_P it's_^ REST_^ based_V and_& doesn't_N require_V authentication_N ._. Here_R is_V a_D C#_N example_N http://www.jarloo.com/google-stock-api_N /_:
Note_V :_: The_D Google_^ Finance_^ API_^ has_V been_V officially_R deprecated_V as_P of_P May_^ 26_$ ,_, 2011_$ and_& will_V be_V shut_V down_R on_P October_^ 20_$ ,_, 2012_$ ._.
This_D answer_N is_V mostly_R off-topic_A ._. The_D answer_N below_P it_O is_V the_D correct_A one_$ ._.
Perhaps_R of_P interest_N ,_, the_D Google_^ Finance_^ API_^ documentaton_N includes_V a_D section_N detailing_V how_R to_P access_V different_A parameters_N via_P JavaScript_^ ._. I_O suppose_V the_D JavaScript_^ API_^ might_V be_V a_D wrapper_N to_P the_D JSON_^ request_N you_O mention_V above_P ..._: perhaps_R you_O could_V check_V which_D HTTP_^ requests_N are_V being_V sent_V ._.
no_R longer_R available_A
I_O found_V this_D site_N helpful_A ._. http://benjisimon.blogspot.com/2009/01/truly-simple-stock-api.html_N It_O links_V to_P an_D API_N yahoo_N seems_V to_P offer_V that_D is_V very_R simple_A and_& useful_A ._. For_P instance_N :_: http://finance.yahoo.com/d/quotes.csv?s=GOOG+AAPL_G f=snl1_G Full_A details_N here_R :_: http://www.gummy-stuff.org/Yahoo-data.htm_N
Here_R is_V an_D example_N that_P you_O can_V use_V ._. Havent_^ got_V Google_^ Finance_^ yet_R ,_, but_& Here_R is_V the_D Yahoo_^ Example_^ ._. You_O will_V need_V the_D HTMLAgilityPack_N ,_, Which_D is_V awesome_A ._. Happy_A Symbol_^ Hunting_^ ._. Call_V the_D procedure_N by_P using_V YahooStockRequest_G (_G string_N Symbols_N );_V Where_R Symbols_N =_V a_D comma-delimited_A string_N of_P symbols_N ,_, or_& just_R one_$ symbol_N
The_D Google_^ Finance_^ Gadget_^ API_^ has_V been_V officially_R deprecated_V since_P October_^ 2012_$ ,_, but_& as_P of_P April_^ 2014_$ ,_, it's_N still_R active_A :_: http://www.google.com/finance/info?q=NASDAQ:GOOG_^ http://www.google.com/finance/info?q=CURRENCY:GBPUSD_^ http://finance.google.com/finance/info?client=ig_^ q=AAPL_^ ,_, YHOO_^ You_O can_V also_R get_V charts_N :_: https://www.google.com/finance/getchart?q=YELP_N Note_V that_P if_P your_D application_N is_V for_P public_A consumption_N ,_, using_V the_D Google_^ Finance_^ API_^ is_V against_P Google's_A terms_N of_P service_N ._. Check_V google-finance-get-stock-quote-realtime_N for_P the_D complete_A code_N in_P python_N
This_D led_V me_O exactly_R to_P what_O I_O was_V looking_V for_P !_. Thanks_N ._.
But_& I_O cannot_V get_V the_D volume_N traded_V through_P this_D URL_N ,_, Can_V you_O help_V me_O out_P ,_, if_P I_O need_V the_D volume_N details_N too_R
@DanDascalescu_N Thanks_N Dan_^ ._. Looks_V like_P it_O was_V just_R down_R when_R I_O was_V checking_V it_O ._. Comment_N deleted_V ._.
Building_N upon_P the_D shoulders_N of_P giants...here's_N a_D one-liner_N I_O wrote_V to_P zap_V all_D of_P Google's_A current_A stock_N data_N into_P local_A Bash_A shell_N variables_N :_: Then_R you_O will_V have_V variables_N like_P $GF_last_G $GF_open_G $GF_volume_G etc_G ._. readily_R available_A ._. Run_^ env_N or_& see_V inside_R /_: tmp_N /_: stockprice.tmp.log_N So_R for_P stock=_N "_`` FBM_^ "_'' /_: tmp_N /_: stockprice.tmp.log_G (_G and_& your_D environment_N )_N will_V contain_V :_:
Can_V I_O use_V the_D URL_N for_P a_D Real_^ Time_^ stock_N quote_N ?_.
Mostly_R yes_R ._. Compare_V `_`` GF_trade_time_utc_N `_`` to_P the_D current_A time_N /_: date_N and_& you_O be_V the_D judge_N ._.
Thanks_N for_P your_D answer_N ,_, but_& here_R the_D volume_N is_V not_R coming_V in_P the_D json_N ,_, is_V there_R any_D other_A way_N or_& URL_N to_P get_V the_D volume_N traded_V ?_.
The_D problem_N with_P Yahoo_^ and_& Google_^ data_N is_V that_P it_O violates_V terms_N of_P service_N if_P you're_N using_V it_O for_P commercial_A use_N ._. When_R your_D site_N /_: app_N is_V still_R small_A it's_N not_R biggie_N ,_, but_& as_R soon_R as_P you_O grow_V a_D little_A you_O start_V getting_V cease_V and_& desists_V from_P the_D exchanges_N ._. A_D licensed_A solution_N example_N is_V FinancialContent_^ :_: http://www.financialcontent.com/json.php_N or_& Xignite_N
This_D is_V no_R longer_R an_D active_A API_N for_P google_N ,_, you_O can_V try_V Xignite_^ ,_, although_P they_O charge_V :_: http://www.xignite.com_N
Do_V you_O have_V any_D experience_N using_V their_D services_N ?_. How_R much_R do_V they_O charge_V ?_.
The_D simplest_A way_N as_P you_O have_V explained_V is_V this_D link_N this_D is_V for_P '_'' Dow_^ Jones_^ Industrial_^ Average_^ '_G Link_N 2_$ is_V for_P '_G NASDAQ-100_N '_'' and_& for_P all_D related_V to_P NASDAQ_^ link_N 3_$ I_O think_V this_D should_V be_V it_O ,_, else_R you_O want_V same_A in_P JSON_N notations_N the_D same_A as_P Microsoft_^ Please_V refer_V this_D old_A post_N I_O think_V this_D will_V help_V ,_, Update_^ :_: To_P know_V the_D details_N of_P volume_N and_& other_A details_N ,_, I_O have_V created_V a_D vbscript_N that_D is_V using_V IE_A object_N to_P fetch_V details_N from_P the_D link_N ,_, and_& alerts_V the_D content_N in_P the_D particular_A id_G (_G Create_V a_D ._. vbs_N file_V and_& run_V it_O .._^ this_D will_V alert_V the_D values_N from_P page_N like_P this_D I_O am_V sure_R this_D will_V help_V .._N
Thanks_N a_D lot_N for_P your_D answer_N ._. But_& I_O need_V the_D realtime_N data_N in_P json_N along_P with_P the_D volume_N traded_V ,_, is_V there_R any_D rest_N services_N ?_.
Please_V refer_V this_D for_P details_N on_P realtime_N ,_, generally_R this_D links_N provide_V reatime_N data_N with_P some_D exception_N .._G https://www.google.com/googlefinance/disclaimer/#realtime_G
Thanks_N once_R again_R bro_N ,_, This_D one_N was_V really_R helpful_A ,_, but_& still_R how_R can_V I_O get_V the_D volume_N information_N ?_.
Its_D if_P you_O are_V aware_A of_P VBA_^ or_& VBS_^ on_P the_D page_N (_G https://www.google.com/finance?q=INDEXNASDAQ%3ANDX_G =NASDAQ_G =2_G =B3UoUsiIH5DIlgPEsQE_G )_G the_D element's_G id_G is_V '_G market-data-div_N '_'' that_P div_N contains_V 2_$ more_A divs_N and_& the_D second_A div_N has_V the_D table_N that_D contains_V volume_N `_`` 759.30_$ M_N `_`` like_P this_D ._. If_P want_V more_A help_N please_V post_V some_D code_N of_P your_D work_N or_& fiddle_N will_V do_V ._.
No_D Sir_^ ,_, Dont_^ have_V any_D idea_N of_P VBA_^ or_& VBS_^ ,_, but_& will_V check_V this_D definitely_R ,_, Can_V you_O provide_V me_O the_D URL_N ,_, which_D results_V in_P the_D realtime_A stock_N quote_N along_P with_P volume_N information_N ?_.
I_O will_V create_V a_D fiddle_N for_P a_D with_P a_D js_N file_N which_D will_V alert_V you_O give_V me_O some_D time_N
Sure_^ Sir_^ ,_, Thanks_N a_D lot_N and_& that_D will_V be_V of_P great_A help_N .._G :-)_G god_N bless_V you_O
@SashiKant_N I_O have_V updated_V my_D answer_N ,_, Please_! find_V the_D VBS_^ code_N that_D works_V well_R on_P windows_N PC_N enjoy_V :)_N
Thanks_N a_D lot_N brother_N .._G :-)_G
You_O are_V always_R welcome_A :)_^ StackOverflow_^ is_V there_R to_P help_V us_O all_D :)_N
Try_V with_P this_D :_: http://finance.google.com/finance/info?client=ig_G q=NASDAQ_G :_: GOOGL_N It_O will_V return_V you_O all_D available_A details_N about_P the_D mentioned_V stock_N ._. e.g._G out_R put_N would_V look_V like_P below_P :_: //_G [_G {_G "_`` id_N "_'' :_: "_'' 694653_$ "_`` ,_, "_`` t_N "_'' :_: "_`` GOOGL_N "_'' ,_, "_'' e_G "_'' :_: "_`` NASDAQ_^ "_'' ,_, "_`` l_N "_'' :_: "_'' 528.08_$ "_`` ,_, "_`` l_fix_N "_'' :_: "_'' 528.08_$ "_`` ,_, "_`` l_cur_N "_'' :_: "_'' 528.08_$ "_`` ,_, "_`` s_N "_'' :_: "_'' 0_$ "_'' ,_, "_`` ltt_N "_'' :_: "_'' 4:00_$ PM_N EST_N "_'' ,_, "_`` lt_N "_'' :_: "_'' Dec_^ 5_$ ,_, 4:00_$ PM_N EST_N "_'' ,_, "_'' lt_dts_N "_'' :_: "_'' 2014-12-05T_A 16:00_N :_: 14Z_N "_`` ,_, "_`` c_N "_'' :_: "_'' -_: 14.50_$ "_`` ,_, "_`` c_fix_N "_'' :_: "_'' -_: 14.50_$ "_`` ,_, "_`` cp_N "_'' :_: "_'' -_: 2.67_$ "_`` ,_, "_`` cp_fix_N "_'' :_: "_'' -_: 2.67_$ "_`` ,_, "_`` ccol_N "_'' :_: "_`` chr_N "_'' ,_, "_`` pcls_fix_N "_'' :_: "_'' 542.58_$ "_'' }_G ]_G You_O can_V have_V your_D company_N stock_N symbol_N at_P the_D end_N of_P this_D URL_N to_P get_V its_D details_N :_:
Agree_V with_P Pareshkumar's_N answer_N ._. Now_R there_X is_V a_D python_N wrapper_N googlefinance_N for_P the_D url_N call_N ._. Install_V googlefinance_N It_O is_V easy_A to_P get_V current_A stock_N price_N :_: Google_^ finance_N is_V a_D source_N that_D provides_V real-time_A stock_N data_N ._. There_X are_V also_R other_A APIs_N from_P yahoo_N ,_, such_A as_P yahoo-finance_N ,_, but_& they_O are_V delayed_V by_P 15min_N for_P NYSE_^ and_& NASDAQ_^ stocks_N ._.
How_R to_P resize_V a_D java_N applet_N when_R the_D browser_N is_V resized_V ?_.
I_O have_V a_D java_N applet_N that_D is_V embedded_V in_P html_N using_V the_D object-comment-embed_A method_N ._. I_O would_V like_V to_P resize_V the_D applet_N whenever_R the_D browser_N window_N is_V resized_V ._. I_O have_V found_V solutions_N around_P the_D internet_N ,_, but_& they_O all_D work_N based_V on_P the_D deprecated_V applet_N tag_N ._. Also_R ,_, when_R trying_V a_D setSize()_N call_N on_P my_D embed_A element_N in_P FireBug_^ ,_, it_O will_V resize_V the_D content_N of_P the_D applet_N ,_, but_& not_R the_D applet_N viewport_N ._. That_D is_V ,_, the_D area_N of_P the_D display_N that_D is_V given_V over_R to_P java_N does_V not_R change_V ._. Current_^ code_N looks_V something_N like_P this_D :_:
does_V your_D resize_V function_N get_V called_V ?_. (_G e.g._G where_R is_V the_D error_N so_R far_R ?_. )_G
Try_V replacing_V these_D lines_N :_: with_P :_:
My_D vote_N is_V for_P this_D method_N ._. I've_N basically_R done_V this_D same_A thing_N to_P resize_V ActiveX_N controls_N ._. It_O should_V work_V the_D same_A for_P an_D Applet_^ ._.
This_D worked_V !_. I_O was_V doing_V the_D same_A thing_N ,_, using_V setSize()_N ._. It_O was_V being_V called_V but_& the_D applet_N wasn't_N resizing_V ._. Thanks_N !_.
Why_R don't_N you_O use_V percentage_N width_N and_& height_N ._. I_O usually_R use_V the_D following_V code_N for_P my_D applets_N :_:
Netbeans_G intellisense_G for_P Yahoo_^ utils_N
In_P netbeans_N I_O created_V an_D html_A page_N in_P which_D I_O am_V using_V Yahoo_^ utils_N ._. If_P I_N type_N "_'' yahoo_N ._. "_'' then_R namespace_N ,_, render_V ,_, hide_V are_V not_R visible_A in_P the_D interactive_A documentation_N ._. Please_! tell_V me_O how_R to_P configure_V Netbeans_^ to_P handle_V this_D ._.
I_O don't_V use_N Netbeans_N ,_, but_& I_O do_V know_V that_P Javascript_^ is_V case-senstive_A ,_, and_& that_P the_D global_A Yahoo_^ object_N is_V YAHOO_^ ,_, not_R yahoo_N ._. So_R try_V it_O in_P all_D caps_N ._.
Sending_V a_D value_N from_P javascript_N to_P jsp_G (_G with_P jquery_G )_G
right_R now_R i_G have_V a_D jsp_N page_N that_D allows_V to_P sort_V some_D items_N ,_, when_R is_V ready_A and_& a_D link_N is_V clicked_V a_D javascript_N function_N converts_V all_X the_D info_N into_P xml_G (_G text_N in_P a_D variable_A )_N ,_, after_P this_D i_G need_V to_P send_V this_D xml_N to_P the_D jsp_N page_N again_R ,_, i_G tried_V putting_V the_D info_N in_P a_D hidden_A input_N and_& submiting_V the_D form_N ,_, sending_V with_P $_$ ._. post_N and_& a_D few_A more_A jquery_N functions_N but_& nothing_N worked_V ._. Any_D ideas_N ?_. in_P my_D JSP_^ im_N reading_V the_D post_N like_P this_D :_: This_D doesnt_A work_N :_: This_D either_& :_: replacing_V ._. text_N with_P ._. html_G doesnt_G work_V Any_D ideas_N are_V welcome_A ,_, thx_N
You_O could_V always_R use_V an_D XMLHttpRequest_N to_P send_V the_D data_N ._. This_D can_V be_V done_V with_P our_D without_P user_N interaction_N on_P an_D element_N such_A as_P a_D form_N submit_V button_N ._. jQuery_N has_V functionality_N built_V in_P for_P assisting_V with_P such_A requests_N ._. http://docs.jquery.com/Ajax_N
Suggesting_V another_D library_N is_V like_P creating_V a_D mess_N here_R ._. JQuery_N is_V as_R good_A as_P Prototype_^ in_P making_V AJAX_^ calls_N ,_, if_P not_R better_A ._.
Trying_V using_V the_D jQuery_N Ajax_N API_N -_: you_O can_V use_V it_O to_P send_V arbitrary_A data_N via_P GET_V or_& POST_N and_& you_O don't_V need_V to_P set_V up_R a_D hidden_A form_N or_& anything_N ._.
Yes_! ,_, we_O don't_V submit_V forms_N ,_, like_P we_O traditionally_R do_V ._. A_D sound_A suggestion_N ._.
You're_N probably_R going_V the_D wrong_A way_N here_R ._. You_O didn't_R provide_V the_D html_N code_N ,_, but_& I_O assume_V it_O is_V something_N like_P this_D :_: If_P that_D is_V correct_A ,_, then_R you_O should_V say_V $_$ (_$ "_`` #data_G ")_G ._. val_G (_G xml_G );_G instead_R of_P text()_N or_& html()_N as_P those_D change_N the_D matched_A thing_N with_P text_N or_& html_N you_O provide_V ._. This_D should_V work_V for_P your_D current_A solution_N ._. Also_R I'd_A propose_V to_P look_V at_P jQuery's_^ $_$ ._. post()_N and_& others_N as_P an_D alternative_N to_P packing_V everything_N as_P xml_N unless_P this_D is_V really_R what_O you_O want_V on_P the_D backend_N ._. It_O could_V be_V easier_A to_P just_R make_V up_R a_D javascript_N object_N with_P all_X the_D values_N keyed_V by_P some_D names_N and_& pass_V it_O on_P to_P one_$ of_P jQuery's_^ $_$ ._. post()_^ ,_, $_$ ._. get()_N ,_, etc_G ._. like_P this_D :_: Actually_R it_O only_R occured_V to_P me_O now_R that_P you_O can_V also_R send_V your_D xml_N this_D way_N (_N unless_P you_O prefer_V your_D way_N of_P doing_V things_N ):_V You_O might_V want_V to_P enlighten_V yourself_O more_R here_R :_: Ajax_^ @_G jQuery_G docs_G
The_D Google_^ Maps_^ Wikipedia_^ Layer_^
Is_V there_R a_D way_N to_P programmatically_R list_V all_D geo-tagged_A Wikipedia_^ entries_N within_P a_D radius_N of_P a_D long_A /_: lat_N point_N ?_. I'm_N thinking_V this_D is_V possible_A with_P the_D google_N maps_V API_^ but_& I_O am_V interested_A in_P any_D method_N ._. NOTE_V :_: I_O do_V not_R want_V to_P display_V a_D googlemap_N ._.
Yes_R ,_, it's_N possible_A ._. The_D hard_A part_N is_V either_& :_: (_N 1_$ )_G Screen-scraping_G Wikipedia_G (_G bad_A idea_N ,_, unless_P you_O already_R have_V a_D (_A small_A )_N list_N of_P target_N pages_N )_G (_G 2_$ )_N Downloading_V and_& parsing_V the_D massive_A Wikipedia_^ data_N sets_N (_V better_A idea_N )_N Once_P you_O have_V lat_N /_: long_R coordinates_V ,_, which_D I_O assume_V are_V in_P the_D wiki_G page's_G geotag_N format_N ,_, you_O can_V use_V the_D great_A circle_N formula_N to_P compute_V relative_A distances_N ,_, and_& bypass_N Google's_N API_N entirely_R ._. The_D moral_A of_P this_D story_N ?_. When_R you've_N dealing_V with_P datasets_N this_D massive_A ,_, you're_N going_V to_P want_V to_P do_V as_R much_A of_P it_O offline_A as_P possible_A ._.
I've_N solved_V a_D slightly_R similar_A problem_N by_P using_V the_D GeoNames_^ webservices_N ._. You_O can_V use_V the_D webservice_N to_P request_N cities_N and_& so_R on_P ._. There_X is_V a_D per-ip-limitation_N you_O may_V not_R exceed_V ._. I_O searched_V a_D little_R further_A and_& there's_A something_N interesting_A for_P you_O ._. The_D webservice_N is_V called_V findNearByWikipedia_N ._. It_O may_V be_V the_D thing_N you're_N searching_V for_P ..._:
Another_D option_N is_V using_V DbPedia_^ SPARQL_^ interface_N ._. For_P example_N ,_, the_D following_A SPARQL_N query_N gets_V wikipedia_N articles_N within_P bounding_V box_N limited_V by_P coordinates_V ._. SPARQL_N libraries_N widely_R available_A ,_, for_P example_N for_P SPARQL_^ Endpoint_^ interface_N to_P Python_^ To_P test_V it_O ,_, just_R paste_V the_D query_N below_P to_P this_D online_N query_N editor_N :_: http://dbpedia.org/sparql_N Gets_V the_D following_A result_N :_:
How_R to_P preview_N a_D file_N on_P the_D server_N in_P JBoss_N
I_O need_V some_D ideas_N on_P how_R I_O can_V best_R solve_V this_D problem_N ._. I_O have_V a_D JBoss_^ Seam_^ application_N running_V on_P JBoss_N 4.3_$ ._. 3_$ What_O a_D small_A portion_N of_P this_D application_N does_V is_V generate_V an_D html_N and_& a_D pdf_N document_N based_V on_P an_D Open_^ Office_^ template_N ._. The_D files_N that_D are_V generated_V I_O put_V inside_R /_: tmp_N on_P the_D filesystem_N ._. I_O have_V tried_V with_P System.getProperties_G (_G "_`` tmp.dir_N ")_N and_& some_D other_A options_N ,_, and_& they_O always_R return_V $JBOSS_HOME_N /_: bin_N I_O would_V like_V to_P choose_V the_D path_N $JBOSS_HOME_N /_: $DEPLOY_N /_: myEAR.ear_N /_: myWAR.war_N /_: WhateverLocationHere_^ However_R ,_, I_O don't_V know_V how_R I_O can_V programatically_R choose_V path_N without_P giving_V an_D absolute_A path_N ,_, or_& setting_V $JBOSS_HOME_N and_& $DEPLOY_N ._. Anybody_N know_V how_R I_O can_V do_V this_D ?_. The_D second_A question_N ;_: I_O want_V to_P easily_R preview_N these_D generated_V files_N ._. Either_^ through_P JavaScript_^ ,_, or_& whatever_D is_V the_D easiest_A way_N ._. However_R ,_, JavaScript_N cannot_N access_N the_D filesystem_N on_P the_D server_N ,_, so_P I_O cannot_V open_A the_D file_N through_P JavaScript_^ ._. Any_D easy_A solutions_N out_R there_R ?_.
Not_R sure_A I_O have_V a_D complete_A grasp_N of_P what_O you_O are_V trying_V to_P achieve_V ,_, but_& I'll_N give_V it_O a_D try_N anyway_R :_: My_D assumption_N is_V that_P your_D final_A goal_N is_V to_P make_V some_D files_N (_^ PDF_^ ,_, HTML_^ )_N available_A to_P end_V users_N via_P a_D web_N application_N ._. In_P that_D case_N ,_, why_R not_R have_V Apache_^ serve_V those_D file_N to_P the_D end_N users_N ,_, so_P you_O only_R need_V your_D JBOSS_^ application_N to_P know_V the_D path_N of_P a_D directory_N that_D is_V mapped_V to_P an_D Apache_^ virtual_A host_N ._. So_P basically_R ,_, create_V a_D file_N and_& save_V it_O as_P /_: var_N /_: www_N /_: html_N /_: myappfiles_N /_: tempfile.pdf_G (_G the_D folder_N your_D application_N knows_V )_N ,_, and_& then_R provide_V http://mydomain.com/myappfiles_G (_G an_D Apache_^ virtual_A host_N )_$ to_P your_D users_N ._. The_D rest_N will_V be_V done_V by_P the_D web_N server_N ._. You_O will_V have_V to_P set_V an_D environment_N variable_N or_& system_N property_N to_P let_V your_D application_N know_V where_R your_D folder_N resides_V (/_N var_N /_: www_N /_: html_N /_: myappfiles_N in_P this_D example_N )_N ._. Hopefully_R I_O was_V not_R way_N off_P :)_N
I'm_N not_R sure_A if_P this_D works_V in_G JBoss_G ,_, given_V that_P you_O want_V a_D path_N inside_P a_D WAR_N archive_N ,_, but_& you_O could_V try_V using_V ServletContext.getRealPath_N (_N String_^ )_^ ._. However_R ,_, I_O personally_R would_V not_R want_V generated_V files_N to_P be_V inside_P my_D deployed_V application_N ;_: instead_R I_O would_V configure_V an_D external_A data_N directory_N somewhere_R like_P $JBOSS_HOME_N /_: server_N /_: default_N /_: data_N /_: myapp_N
I_O agree_V with_P Peter_^ (_^ yo_G Pete_^ !_. )_^ ._. Put_V the_D directory_N outside_P of_P your_D WAR_N and_& setup_N an_D environment_N variable_N pointing_V to_P this_D ._. Have_V a_D read_N of_P this_D post_N by_P Jacob_^ Orshalick_^ about_P how_R to_P configure_V environment_N variables_N in_P Seam_^ :_: As_P for_P previewing_V PDFs_N ,_, have_V a_D look_N at_P how_R Google_^ Docs_^ handles_V previewing_V PDFs_N -_: it_O displays_V them_O as_P an_D image_N ._. To_P do_V this_D with_P Java_^ check_V out_R the_D Sun_^ PDF_^ Renderer_^ ._.
Not_R sure_A how_R you_O are_V generating_V your_D PDFs_N ,_, but_& if_P possible_A ,_, skip_V the_D disk_N IO_N all_R together_R ,_, stash_V the_D PDF_N content_N in_P a_D byte_G []_G and_& flush_V it_O out_R to_P the_D user_N in_P a_D servlet_N setting_V the_D mime_N type_N to_P application_N /_: pdf_N *_N that_D responds_V to_P a_D URL_N which_D is_V specified_V by_P a_D link_N in_P your_D client_N or_& dynamically_R set_V in_P a_D div_N by_P javascript_N ._. You're_N probably_R taking_V the_D memory_N hit_V anyways_R ,_, and_& in_P addition_N to_P skipping_V the_D IO_N ,_, you_O don't_V have_V to_P worry_V about_P deleting_V the_D tmp_N files_N when_R you're_N done_V with_P the_D preview_N ._. *_G I_O think_V this_D is_V right_A ._. Need_V to_P look_V it_O up_R ._.
I_O did_V something_N like_P this_D ,_, and_& it_O worked_V great_A ._. Thanks_N
First_R ,_, most_A platforms_N use_V java.io.tmpdir_N to_P set_V a_D temporary_A directory_N ._. Some_D servlet_A containers_N redefine_V this_D property_N to_P be_V something_N underneath_P their_D tree_N ._. Why_R do_V you_O care_V where_R the_D file_N gets_V written_V ?_. Second_^ ,_, I_O agree_V with_P Nicholas_^ :_: After_P generating_V the_D PDF_N on_P the_D server_N side_N ,_, you_O can_V generate_V a_D URL_N that_D ,_, when_R clicked_V ,_, sends_V the_D file_N to_P the_D browser_N ._. If_P you_O use_V MIME_^ type_N application_N /_: pdf_N ,_, the_D browser_N should_V do_V the_D right_A thing_N with_P it_O ._.
Is_V Google_^ Web_N Toolkit_N useful_A to_P develop_V complex_A javascripts_N ?_.
Iam_V a_D great_A fan_N of_P javascript_N frameworks_N especially_R jQuery_^ ._. I_O have_V always_R wanted_V to_P design_V sites_N like_P "_`` plurk.com_^ "_'' but_& i_G know_V that_P it_O needs_V very_R huge_A lines_N of_P javascript.so_N that_D shut_V me_O off.But_N since_P i_G came_V to_P know_V GWT_^ ,_, i_G really_R want_V to_P test_V it_O out_R and_& want_V to_P ask_V you_O if_P it_O makes_V our_D job_N easier_A to_P develop_V complex_A things_N than_P with_P the_D javascript_N or_& its_D frameworks_N ._. Which_D one_O would_V you_O prefer_V ?_.
With_P GWT_N ,_, you're_N not_R actually_R writing_V JavaScript_^ ;_: it's_G entire_A value_N proposition_N is_V that_P you_O can_V write_V Java_^ that_P it_O will_V compile_V down_R to_P JavaScript_^ for_P you_O ._.
ya_O i_G know_V ._. but_& i_G just_R want_V to_P know_V ,_, does_V that_P simplify_V the_D process_N of_P developing_V complex_A javascripts_N -_: very_R huge_A lines_N of_P javascript_N code_N ?_.
I_O guess_V if_P you_O trust_V that_D google_N will_V do_V it_O better_R than_P you_O would_V and_& you_O know_V your_D Java_^ it_O *_G could_V *_G do_V -_: personally_R I'm_N against_P it_O ,_, but_& it_O probably_R has_V niche_N value_N for_P someone_N
No_D ._. It_O doesn't_G ._. It_O doesn't_G remove_V the_D complexity_N ,_, it_O just_R makes_V it_O possible_A for_P you_O to_P deal_V with_P it_O from_P a_D Java_^ Perspective_^ ._. Since_P that_D gives_V you_O all_X the_D Tooling_N available_A from_P Java_^ ..._: that_P alone_R might_V make_V it_O worthwhile_A ._. JavaScript_^ IDEs_N are_V getting_V better_R and_& better_R though_R ,_, and_& typically_R if_P you're_N using_V a_D Framework_^ like_P jQuery_^ or_& Prototype_^ ,_, then_R you're_N probably_R going_V to_P find_V it_O easier_A than_P dealing_V with_P a_D heavy_A weight_N abstraction_N layer_N like_P GWT_^ ._. My_D personal_A preference_N is_V to_P take_V the_D pure_A JavaScript_^ approach_N ,_, but_& that's_N because_P I_O like_V being_V able_A to_P work_V more_R closely_R to_P metal_N ,_, and_& I'm_N disciplined_V enough_R to_P tame_A my_D JavaScript_^ cats_N ._.
Yes_R ,_, it_O does_V ,_, since_P you'll_N be_V using_V Java_^ and_& not_R Javascript_^ ._. Superb_G IDEs_G ,_, static_A code_N analysis_N ,_, searching_V and_& refactoring_V -_: all_X this_D will_V make_V your_D life_N much_R easier_A on_P large_A projects_N ._.
Few_A things_N scare_V me_O like_P "_`` generated_V Javascript_^ "_`` ._. The_D Law_N of_P Leaky_A Abstractions_N has_V got_V to_P be_V doubly_R true_A in_P these_D cases_N ._. Writing_V effective_A cross-browser_A javascript_N is_V a_D tricky_A process_N of_P continuous_A refinement_N ._. Trying_V to_P decipher_V where_R some_D generated_V ,_, obscured_V Javascript_^ is_V going_V wrong_A is_V a_D major_A headache_N ._. It's_N bad_A enough_R fixing_V bugs_N in_P the_D pure_A JS_N libraries_N ._. To_P me_O ,_, GWT_^ is_V a_D trick_N aimed_V at_P allowing_V backend_A developers_N to_P write_V front-end_A ,_, in-browser_A code_N ._. Unfortunately_R ,_, the_D realities_N of_P modern_A web_N apps_N mean_V you_O just_R have_V to_P know_V Javascript_^ and_& the_D DOM_^ ._. Something's_N going_V to_P break_V ,_, and_& you're_N going_V to_P need_V to_P know_V why_R ._. I_O think_V you're_R better_A off_P picking_V a_D good_A javascript_N library_N like_P jquery_N or_& prototype_N ,_, and_& learning_V that_R well_R ._. Those_D libraries_N abstract_A away_R the_D sort_N of_P stuff_N that_D SHOULD_V be_V abstracted_V away_R and_& is_V unlikely_A to_P break_V in_P edge_N cases_N ,_, like_P array_N operations_N and_& AJAX_N requests_N ._.
Do_V you_O think_V the_D same_A way_N about_P generated_V Assembler_^ ?_. Handling_V all_X those_D differences_N between_P different_A Processor_^ architecures_N ?_. I_O am_V not_R saying_V ,_, that_P GWT_^ is_V necessarily_R there_R yet_R ._. But_& Generating_^ one_$ language_N out_P of_P another_D is_V nothing_N scary_A at_P all_D ._.
the_D problem_N is_V that_P since_P JS_N is_V a_D high-level_A language_N ,_, there_X are_V several_A features_N you'd_V like_P to_P use_V ._. for_P example_N a_D hashtable_N ._. it's_N not_R exactly_R the_D same_A semantics_N as_P Java_^ maps_N ,_, so_P they_O write_V an_D emulation_N layer_N ._. therefore_R they're_N no_R longer_R usable_A as_P JS_N objects_N ._. same_A for_P other_A things_N ..._:
Another_D difference_N is_V that_P ,_, besides_P being_V a_D much_R more_R mature_A technology_N ,_, assembler_N is_V very_R highly_R tuned_V towards_P a_D single_A architecture_N ._. The_D same_A cannot_N be_V said_V of_P Javascript_^ ,_, which_D must_V support_V scores_N of_P different_A browsers_N and_& version_N ._.
not_R to_P mention_V that_P all_D modern_A cpu_N instruction_N sets_N are_V designed_V for_P the_D compiler_N ,_, not_R for_P a_D human_A programmer_N ;_: just_R like_P bytecodes_N are_V designed_V with_P a_D specific_A language_N in_P mind_N ._.
I_O suspect_V you've_N never_R used_V GWT_^ in_P a_D large_A scale_N project_N ._. It_O doesn't_R make_V cross_A browser_N stuff_N harder_R ,_, it_O makes_V it_O easier_A ._. People_N worry_V about_P going_V through_P generated_V javascript_N ,_, but_& the_D truth_N is_V you_O never_R have_V to_P ,_, just_R like_P you_O never_R have_V to_P look_V at_P java_G byte_G code_N ,_, because_P the_D compiler_N is_V top-notch_A ._.
disregarding_V whether_P compiled_V js_N is_V good_A or_& bad_A ,_, gwt_N offers_V hosted_V mode_N debugging_N ,_, and_& simple_A unit_N test_N integration_N ,_, which_D is_V a_D must_V in_P large_A projects_N ._. However_R ,_, there_X are_V some_D growing_V pains_N involved_V with_P gwt_N ,_, but_& nothing_N too_R bad_A ._. GWT_^ is_V more_R suitable_A for_P large_A scale_N ajax_N app_N vs_& medium_N scale_N ones_N ._.
Using_V GWT_N is_V really_R no_R different_A then_R using_V jQuery_N or_& Prototype_N ._. If_P there_X is_V a_D bug_N in_P the_D library_N you_O are_V using_V ,_, it_O will_V make_V your_D life_N difficult_A ._. The_D same_A problems_N exist_V for_P GWT_^ ._. The_D difference_N is_V that_P GWT_^ has_V Google's_N developers_N backing_V it_O up_R ,_, not_R just_R the_D few_A people_N behind_P the_D other_A libraries_N ._.
I'm_N working_V on_P a_D project_N that_D has_V used_V GWT_^ to_P pretty_R good_A effect_N ._. It's_V a_D good_A choice_N for_P us_O since_P we're_N all_R primarily_R Java_^ developers_N working_V on_P internal_A tools_N ._. I_O can't_V speak_V to_P how_R useful_A it_O is_V for_P large_A end-user_A sites_N ._. One_$ advantage_N I_O particularly_R appreciate_V is_V the_D seamless_A object_N serialization_N and_& deserialization_N ._. Not_R only_R are_V the_D details_N of_P XML-RPC_N abstracted_V away_R ,_, but_& since_P the_D same_A Java_^ code_N is_V compiled_V to_P byte_V code_N for_P the_D server_N and_& javascript_N for_P the_D browser_N ,_, you_O can_V code_V almost_R as_P if_P the_D server_N and_& client_N were_V running_V in_P separate_A class_N loaders_N in_P the_D same_A JVM_^ ._. For_P instance_N ,_, you_O can_V construct_V a_D Java_^ object_N on_P the_D server_N ,_, send_V it_O to_P the_D browser_N as_P the_D return_N value_N from_P an_D RPC_^ service_N call_N and_& the_D browser_N code_N can_V then_R use_V the_D identical_A Java_^ class_N to_P manipulate_V the_D object_N you_O just_R returned_V ._. Likewise_R ,_, parameters_N to_P RPC_^ calls_N can_V be_V constructed_V as_P Java_^ objects_N ,_, with_P the_D server_N receiving_V an_D identical_A Java_^ object_N on_P the_D other_A end_N ._. All_X this_D without_P mucking_V about_R in_P the_D details_N of_P (_G de_G )_G serialization_N ._.
GWT_N doesnt_N actually_R use_V XML-RPC_N ,_, but_& yea_N ,_, the_D rest_N of_P the_D post_N is_V my_D sentiments_N exactly_R ._.
thanks_N a_D lot_N :)_N that_D was_V great_A ._.
What_O happened_V to_P Rhino_^ ?_. Is_V it_O still_R under_P active_A development_N ?_.
The_D last_A release_N was_V in_P 2008-03-06_$ ._. What_O happened_V to_P it_O ?_. Is_V it_O still_R under_P active_A development_N ?_. Are_V there_X any_D replacements_N ?_.
This_D question_N might_V better_R be_V asked_V at_P the_D relevant_A newsgroup_N :_: mozilla.dev.tech.js_G -engine_G ._. Or_& by_P mail_N to_P one_$ of_P the_D responsible_A developers_N as_P mentioned_V at_P the_D Mozilla_^ site_N ._. However_R ,_, if_P you_O found_V out_R please_V post_P the_D answer_N here_R ._. I'm_N interested_V too_R ._.
Slightly_R modified_V version_N of_P Rhino_G (_G 1.6_$ r2_N )_N is_V part_N of_P Java_^ 6_$ and_& on_P top_N of_P that_D from_P what_D I've_N tested_V Rhino_^ is_V very_R much_A feature_N complete_A so_P there_X really_R isn't_N anything_N left_V to_P develop_V onwards_N ,_, apparently_R it's_N also_R quite_R bug-free_A also_R ._. I'd_N say_V Rhino_^ is_V one_$ of_P those_D rare_A libraries_N which_D are_V actually_R done_V ._.
According_V to_P a_D post_N last_A week_N at_P http://groups.google.com/group/mozilla.dev.tech.js-engine.rhino/topics_N
JavaScript_G (_G Rhino_N )_N use_N library_N or_& include_V other_A scripts_N
In_P JDK6_N ,_, is_V there_R a_D way_N to_P load_V multiple_A scripts_N ,_, each_D in_P a_D file_N ,_, and_& have_V the_D one_$ script_N reference_N a_D method_N of_P another_D script_N ?_. Sort_^ of_P like_P "_`` include_V "_'' ?_.
As_R long_R as_P you_O use_V the_D same_A scope_N to_P execute_V each_D file_N ,_, they_O will_V be_V able_A to_P reference_V functions_N and_& variables_N from_P previously_R executed_V files_N ._.
Big_A help_N ,_, thanks_N
I_O think_V you're_N after_P the_D load()_N method_N /_: property_N of_P Rhino's_A global_A object_N /_: scope_N This_^ will_V load_V a_D javascript_N source_N file_N ,_, similar_A to_P how_R include_V /_: require_V will_N in_P PHP_^ ._. Once_P you_O load_V a_D file_N ,_, you'll_N be_V able_A to_P call_V and_& function_V or_& use_V any_D object_N defined_V in_P the_D loaded_A file_N ._. This_D is_V how_R things_N work_V when_R you're_N using_V the_D Rhino_N shell_N ,_, which_D is_V the_D only_A context_N I_O know_V (_$ your_D question_N mentioned_V the_D Java_^ SDK_^ ,_, which_D is_V outside_P my_D area_N of_P experience_N )_N
Is_V this_D available_A outside_N of_P the_D Rhino_N shell_N ?_.
Not_R sure_A ,_, that's_N not_R my_D pay_N rate_N ._. (_N updated_V the_D question_N to_P reflect_V that_D )_N
if_P you_O happen_V to_P be_V trying_V to_P do_V this_D within_P ant_N ,_, you_O might_V see_V this_D error_N :_: but_& you_O can_V sidestep_V it_O :_:
The_D >>_N ''_'' +_& <_A <_A is_V of_P major_A importance_N here_R !_.
A_D real-life_A example_N this_D time_N ,_, i.e._G running_V the_D esprima_N parser_N with_P Rhino_N 1.7_$ R4_N ._. After_P running_V this_D code_N ,_, you_O should_V see_V the_D output_N as_P follows_V :_: So_P indeed_R ,_, the_D trick_N is_V in_P reusing_V the_D globalScope_N object_N ._.
How_R to_P Prevent_V an_D Applet_^ from_P Unloading_V across_P web_N pages_N ?_.
I_O have_V a_D large_A applet_N that_D takes_V some_D 40_$ seconds_N to_P initialize_V (_N cabs_N are_V cached_V so_R ignore_V download_N time_N for_P this_D question_N )_N ._. The_D issue_N is_V ,_, if_P the_D user_N goes_V to_P Page_^ A_^ which_D launches_V the_D applet_G (_G single_A window_N )_N and_& then_R navigates_V to_P page_N B_N ,_, the_D applet_N is_V unloaded_A ._. If_P the_D user_N goes_V back_R to_P Page_^ A_^ ,_, they_O incur_V the_D 40_$ seconds_N init_N time_N once_R again_R ._. I'd_N like_P to_P be_V able_A to_P launch_V the_D applet_N ,_, incurring_V the_D 40_$ seconds_N init_N time_N once_R and_& only_R once_R ._. The_D applet_N needs_V to_P reside_V inside_P a_D single_A browser_N window_N (_V the_D same_A window_N as_P my_D web_N application_N )_N ._. In_P other_A words_N ,_, I_O cannot_V launch_V the_D applet_N in_P a_D popup_N ._. Does_^ anyone_N have_V any_D creative_A ideas_N around_P how_R to_P prevent_V the_D applet_N unloading_V ?_.
Put_V the_D Applet_^ in_P a_D frame_N that_P doesn't_N unload_V ,_, or_& prevent_V the_D user_N from_P going_V to_P another_D page_N in_P the_D web_N page_N that_D contains_V the_D Applet_^ ._.
The_D only_A option_N would_V be_V to_P put_V you_O content_N in_P an_D iframe_N that_D encompasses_V your_D whole_A document_N and_& use_V absolute_A positionning_N for_P the_D applet_N ._. With_P a_D css_N like_P this_D one_N :_: There_X are_V MANY_^ drawbacks_N :_: The_D applet_N will_V always_R be_V positionned_V at_P the_D same_A place_N ,_, no_D matter_N the_D page_N You_O will_V suffer_V to_P get_V the_D iframe_A full_A width_N and_& full_A height_N ,_, especially_R in_P IE_A It's_N possible_A you_O will_V also_R suffer_V to_P have_V the_D applet_N showing_V properly_R (_$ an_D object_N on_P top_N of_P an_D iframe_N ,_, I_N can't_N imagine_V what_O troubles_N you'll_R run_V into_P )_$ The_D applet_N will_V stay_V if_P your_D user_N click_V to_P a_D link_N leading_V outside_N of_P your_D site_N unless_P you_O set_V a_D target_N for_P the_D link_N (_G ie_G ,_, target='top_N '_'' or_& target='__blank_G ')_G
If_P I_O did_V this_D ,_, the_D browser_N URL_N would_V never_R change_V from_P page_N to_P page_N ._. Not_R really_R what_D I'm_N looking_V for_P ._.
I_O thought_V maybe_R there'd_R be_V a_D way_N to_P popup_V a_D tiny_A browser_N window_N and_& have_V the_D applet_N load_N in_P that_D ,_, then_R using_V Javascript_^ somehow_R pull_V in_P the_D applet_N from_P the_D smaller_A window_N into_P the_D larger_A browser_N ._. I_O don't_G think_V I_O can_V manipulate_V the_D DOM_^ in_P this_D way_N though_P ._. Any_D other_A ideas_N ?_.
You_O could_V show_V a_D warning_N ,_, this_D way_N :_: This_D works_V in_G allmost_G every_D browser_N ,_, but_& you_O cannot_V change_V the_D text_N surrounding_V your_D text_N ._.
Browser_^ Java_^ Plugin_^ Detection_N
What_O is_V the_D preferred_A method_N to_P determine_V if_P the_D Sun_^ Java_^ Plugin_^ is_V installed_V in_P the_D browser_N ?_.
this_D doesn't_N works_V always_R ._. (_N 1_$ )_N If_P its_D disabled_A in_G firefox_G it_O says_V not_R installed_V ._. (_N 2_$ )_N on_P lion_N os_P x_N ,_, even_R when_R its_D disabled_A in_P all_D browsers_N ,_, it_O tells_V installed_V
This_D isn't_N an_D answer_N for_P your_D exact_A question_N but_& is_V offered_V as_P a_D solution_N for_P determining_V the_D browser_N itself_O ._. Don't_N be_V too_R harsh_A ,_, this_D is_V really_R old_A code_N that_P I_O wrote_V some_D time_N ago_R ._.
You_O may_V also_R consider_V PluginDetect_^ script_N ._.
Why_R is_V Java_^ giving_V me_O an_D IllegalArgumentException_^ ?_.
I'm_N using_V dwr_N and_& spring_N and_& I_O get_V this_D error_N :_: java.lang.IllegalArgumentException_N :_: Javascript_N name_N *_N is_V used_V by_P 2_$ classes_N I_O found_V nothing_N helpful_A on_P Google_^ ,_, do_V you_O know_V why_R I'm_N getting_V this_D error_N ?_.
That_D is_V neither_& valid_A nor_& well-formed_A XML_N ._.
Where_R is_V Java_^ getting_V involved_V in_P this_D ?_. This_D is_V Javascript_^ ._.
Found_V ._. Because_P the_D version_N of_P the_D DWR's_N jar_N did_V not_R match_V the_D version_N of_P DWR's_G schema_G
+1_N for_P answering_V your_D own_A question_N
Returning_V a_D host_N object_N in_P Rhino_N
What_O is_V the_D best_A way_N to_P return_V an_D host_N object_N to_P JavaScript_^ in_P Rhino_^ ?_. I_O have_V two_$ classes_N like_P this_D :_: It_O works_V ,_, in_P the_D sense_N that_P I_O can_V call_V the_D toString_N method_N ,_, but_& the_D member_N object_N doesn't_N behave_V as_P I_O would_V expect_V :_: If_P I_O call_V Object.prototype.toString_V though_R ,_, it_O does_V say_V it's_N a_D Member_^ object_N :_: I've_N tried_V calling_V m.setPrototype_N and_& Context.javaToJS_N ._.
Edit_^ :_: The_D method_N can_V also_R be_V written_V :_: which_D will_V call_V Member.jsConstructor_N ;_: there_X may_V be_V other_A differences_N as_R well_R ._.
Thanks_N ,_, that's_G perfect_A ._.
How_R can_V I_O handle_V Java_^ object_N serialization_N with_P JavaScript_^ ?_.
I_O have_V serialized_V the_D Java_^ object_N located_A on_P the_D server_N side_N and_& sent_V it_O to_P the_D client_N How_R can_V I_O deserialize_V that_P XML_N string_N into_P the_D Java_^ object_N using_V JavaScript_^ and_& execute_V the_D methods_N of_P person_N class_N in_P the_D client_N side_N using_V the_D JavaScript_^ ?_. Please_! help_V me_O with_P syntax_N or_& any_D guidelines_N ._.
Is_V this_D not_R a_D duplicate_V of_P your_D previous_A questions_N ?_. I'm_N getting_V a_D distinct_A sense_N of_P deja_N vu_N here_R
XML_N is_V presented_V as_P a_D DOM_^ tree_N to_P JavaScript_^
ok_R ,_, how_R does_V the_D javascript_N deserialize_N that_D recieved_V XML_N into_P Java_^ object.since_G i_G want_V to_P deserialize_V into_P java_N object_N so_P that_P it_O could_V be_V executed_V in_P client_N side_N JVM_N once_R instantiating_V that_P java_N object_N
What_D you're_N describing_V here_R sounds_V different_A than_P your_D question_N ._.
why_R do_V you_O need_V JavaScript_^ do_V deserialize_V the_D objects_N ?_. why_R don't_N you_O simply_R use_V a_D Java-to-Java_^ connection_N ?_.
You_O can't_V run_V Java_^ methods_N with_P Javascript_^ ._. The_D only_A thing_N you_O could_V do_V is_V to_P read_V the_D properties_N of_P the_D Java_^ object_N -_: this_D is_V the_D only_A information_N that_D is_V serialized_V in_P the_D XML_N file_N ._. It_O is_V very_R easy_A to_P read_V XML_N with_P javascript_N ._. To_P be_V able_A to_P serialize_V a_D Java_^ object_N ,_, send_V it_O to_P a_D client_N and_& execute_V Java_^ code_N there_X a_D totally_R different_A architecture_N would_V be_V needed_V ._. At_P first_A you_O need_V Java_^ running_V on_P the_D client_N too_R ._. Then_R you_O would_V need_V to_P employ_V a_D method_N like_P RMI_^ ._.
Yes_R ,_, but_& you_O still_R need_V a_D different_A serializing_V technique_N and_& dealing_V with_P security_N issues_N ._. The_D applet_N would_V probably_R need_V to_P be_V signed_V in_P order_N to_P be_V able_A to_P communicate_V with_P the_D RMI_^ server_N ._.
This_D seems_V overly_R complicated_V ._. What_O he_O really_R needs_V is_V to_P make_V his_D Java_^ server_N provide_V a_D web_N service_N and_& then_R he_O needs_V to_P call_V that_D web_N service_N using_V AJAX_^ ._.
You_O can_V call_V Java_^ methods_N on_P the_D client_N side_N using_V JavaScript_N by_P using_V SOAP_N ._. This_D article_N explains_V how_R to_P create_V a_D WSDL_N web_N service_N that_D can_V be_V accessed_V by_P any_D SOAP_N client_N that_D supports_V WSDL_^ ._. You_O can_V then_R call_V the_D Java_^ WSDL_^ service_N using_V AJAX_^ in_P JavaScript_^ (_^ if_P you_O can_V find_V a_D JS_N library_N that_D implements_V SOAP_N and_& WSDL_N )_N ._. Alternatively_R ,_, you_O can_V write_V a_D simplified_V front-end_N to_P the_D Java_^ WSDL_^ service_N in_P PHP_^ using_V PHP's_N built-in_A SoapClient_^ library_N ._. Make_V it_O take_V some_D simple_N GET_V arguments_N and_& return_N JSON_N or_& XML_N ._. You_O could_V then_R trivially_R access_V the_D PHP_^ web_N service_N using_V AJAX_^ via_P jQuery_G (_G or_& an_D equivalent_A AJAX-supporting_A library_N )_N ._.
+1_G XStream_G supports_V JSON_^ out_P of_P the_D box_N ._.
If_P you're_N going_V for_P an_D applet_N and_& want_V to_P make_V Javascript_^ calls_V from_P Java_^ ,_, checkout_N the_D LiveConnect_^ with_P the_D JSObject_N wrapper_N class_N ._. This_D way_N you_O can_V excute_V javascript_N functions_N inside_P the_D applet_N (_N and_& pass_N information_N in_P between_P );_A Look_N into_P the_D IRIS_^ applictation_N made_V for_P Flickr_^ ,_, it's_^ open_A source_N and_& uses_V this_D technique_N ._. The_D Belgian_A JUG_N Parleys_N have_V a_D speech_N from_P a_D convention_N covering_V some_D of_P this_D ,_, You_O can_V find_V it_O here_R ._.
Detecting_V EOF_N /_: TCP_N teardown_N using_V Java_^ sockets_N from_P Javascript_^
I'm_N creating_V a_D Java_^ socket_N in_P Javascript_^ ,_, sending_V an_D HTTP_N request_N and_& receiving_V a_D response_N correctly_R but_& I_O seem_V to_P be_V unable_A to_P detect_V an_D EOF_N or_& the_D server_N closing_V the_D socket_N at_P the_D end_N ._. What_O am_V I_O doing_V wrong_A ?_. The_D problem_N is_V we_O never_R exit_V the_D outermost_N while_P loop_N -_: the_D server_N stops_V transmitting_V and_& (_N presumably_R )_^ closes_V its_D end_N of_P the_D connection_N ,_, yet_& receiver.read()_N never_R returns_V -1_$ and_& all_X the_D socket_N methods_N return_V state_N consistent_A with_P the_D socket_N still_R being_V connected_V ._.
Wouldn't_V the_D this_D :_: while_P (_G receiver.available()_G &_& &_& !_. eof_G )_G be_V better_A ?_. in_P lieu_N of_P the_D first_A while_P (_^ receiver.available()_^ )_^ ?_.
Seems_V a_D bit_N redundant_A -_: available()_N is_V defined_V as_P returning_V the_D number_N of_P bytes_N of_P data_N available_A to_P read_V without_P blocking_V ,_, so_R would_V return_V 0_$ after_P EOF_^ ._. Tried_V it_O anyway_R just_R in_P case_N ;_: doesn't_N fix_V the_D problem_N ._.
Or_& do_V you_O mean_V in_P place_N of_P the_D outermost_N while_P ?_. Data_^ being_V available_A to_P read_V without_P blocking_N is_V independent_A of_P whether_P the_D server_N has_V closed_V the_D socket_N -_: there_X could_V be_V pauses_V in_P transmission_N ,_, and_& the_D OS_^ could_V have_V buffered_V input_N data_N ._. So_P we_O must_V test_V both_D separately_R ._.
No_R ,_, I_O meant_V the_D inner_A while_N ,_, but_& your_D first_A comment_N is_V right_A :_: I'm_N wrong_A ._.
Ok_N ._. What's_V the_D value_N of_P eof_N when_R the_D code_N reaches_V this_D comment_N ?_. //_$ at_P this_D point_N response_N does_V contain_V the_D expected_V HTTP_N response_N What's_V the_D symptom_N ?_. I_O assume_V it's_N an_D infinite_A loop_N ?_.
eof_N is_V still_R 0_$ at_P that_D point_N (_V otherwise_R we'd_A exit_N the_D outermost_A while()_N correctly_R and_& I'd_N not_R be_V posting_V this_D )_N ._. Question_N edited_V -_: hopefully_R the_D problem_N is_V clearer_A now_R ?_.
OK_A ,_, further_A research_N suggests_V there_X is_V no_D non-blocking_A way_N to_P discover_V whether_P the_D remote_A side_N has_V closed_V a_D socket_N ._. However_R ,_, it_O is_V possible_A to_P achieve_V this_D using_V NIO_N channels_N :_:
When_R the_D end_N of_P the_D stream_N is_V reached_V ,_, available()_N returns_N 0_$ ,_, so_R in_P your_D code_N ,_, you_O never_R read_V the_D -1_$
Right_^ ._. But_^ read()_^ will_V block_V until_P either_& EOF_N is_V reached_V or_& there_X is_V more_A data_N ,_, and_& Javascript_^ is_V single-threaded_A so_P we_O don't_V want_V to_P issue_V a_D read_N without_P knowing_V for_P certain_A we_O have_V data_N to_P read_V ._. And_& available()_N can_V return_V 0_$ during_P transmission_N ,_, so_P we_O can't_V use_V that_D to_P test_V for_P EOF_^ ._.
Process_V the_D file_N before_P uploading_V it_O
I_O got_V a_D form_N with_P SWFUpload_N ._. Files_N uploaded_V to_P the_D server_N are_V converted_V server-side_A (_N video_N being_V compressed_V ,_, images_N being_V resized_V etc_G )_G Question_N is_V -_: can_V i_G delegate_V some_D of_P the_D functionality_N to_P client-side_A (_N like_P image_N resizing_V )_N ,_, to_P save_V some_D bandwidth_N for_P user_N ._.
Video_^ compression_N via_P Javascript_^ would_V probably_R slow_V the_D browser_N so_R much_R that_P it_O wouldn't_N be_V bandwidth_N savings_N and_& if_P anything_N would_V probably_R annoy_V the_D end_N user_N ._.
Thanks_N ,_, very_R valid_A point_N ._. Though_P it_O doesn't_N have_V to_P be_V javascript_A compression_N ._. Maybe_R some_D process_N ,_, just_R initiated_V by_P javascript_N ?_.
Process_V the_D file_N before_P uploading_V it_O
I_O got_V a_D form_N with_P SWFUpload_N ._. Files_N uploaded_V to_P the_D server_N are_V converted_V server-side_A (_N video_N being_V compressed_V ,_, images_N being_V resized_V etc_G )_G Question_N is_V -_: can_V i_G delegate_V some_D of_P the_D functionality_N to_P client-side_A (_N like_P image_N resizing_V )_N ,_, to_P save_V some_D bandwidth_N for_P user_N ._.
Video_^ compression_N via_P Javascript_^ would_V probably_R slow_V the_D browser_N so_R much_R that_P it_O wouldn't_N be_V bandwidth_N savings_N and_& if_P anything_N would_V probably_R annoy_V the_D end_N user_N ._.
Thanks_N ,_, very_R valid_A point_N ._. Though_P it_O doesn't_N have_V to_P be_V javascript_A compression_N ._. Maybe_R some_D process_N ,_, just_R initiated_V by_P javascript_N ?_.
Playing_V a_D sound_N notification_N using_V Google_^ Web_N Toolkit_N
Is_V it_O possible_A to_P play_V a_D sound_A notification_N using_V Google_^ Web_N Toolkit_N which_D will_V be_V translated_V to_P Javascript_^ ?_. Thanks_N ._.
Yes_^ it's_^ possible_A ,_, scriptaculous_A (_N a_G js_G library_N )_N has_V a_D sound.js_N which_D is_V an_D example_N of_P how_R to_P do_V it_O ._. The_D source_N is_V under_P 50_$ lines_N of_P code_N ._.
Try_V using_V this_D library_N :_: http://code.google.com/p/gwt-voices_N /_:
Since_P GWT_N 2.2_$ you_O can_V play_V audio_A with_P :_: com.google.gwt.media.client.Audio_N class_N ._. API_^ :_: http://google-web-toolkit.googlecode.com/svn/javadoc/2.2/com/google/gwt/media/client/Audio.html_^ Sample_^ :_:
where_R is_V the_D `_`` style_N `_`` folder_N ?_. Is_V it_O in_P the_D same_A directory_N as_P the_D ._. java_N file_N ,_, or_& is_V it_O in_P the_D web_N directory_N ?_.
@MarioStoilov_V its_D the_D URL_N ,_, check_N http://www.gwtproject.org/javadoc/latest/com/google/gwt/media/client/MediaBase.html#setSrc(java.lang.String_N )_N
Tools_N for_P coding_V conventions_N and_& analyzing_V HTML_^ ,_, CSS_^ ,_, Javascript_^ client_N side_N code_N
I_O use_V various_A code_N checkers_N for_P Java_^ development_N but_& I_O haven't_V used_V one_$ for_P HTML_^ ,._^ CSS_^ ,_, Javascript_^ ._. Do_V any_D exist_V ._. That_D flag_N bad_A practices_N or_& similar_A tool_N ._.
Please_V accept_V an_D answer_N ._.
Firebug_N with_P the_D YSlow_N addon_N from_P Yahoo_^ is_V pretty_R effective_A at_P pointing_V out_R your_D inefficiencies_N ._. Also_R try_V the_D web_N developer_N addon_N and_& hitting_V ctrl+shift+a_N -_: it'll_N load_V your_D local_A code_N straight_R into_P the_D w3c_N validator_N ._. Read_V up_R on_P 508C_N compliance_N -_: you_O can't_V test_N for_P it_O but_& it's_V good_A to_P know_V ._.
W3C_N has_V a_D Markup_^ Validation_^ Service_^ for_P validating_V (_^ X_^ )_^ HTML_^ ._. Also_R ,_, W3C_N has_V tools_N :_: For_P CSS_^ For_P Atom_^ RSS_^ feeds_V And_& JSLint_N is_V a_D tool_N for_P checking_V your_D JavaScript_^ ._.
+1_N for_P JSLint_N ._. It_O is_V developed_V and_& maintained_V by_P Douglas_^ Crockford_^ ,_, a_D renowned_A Javascript_^ guru_N ._.
js2-mode_N for_P Emacs_^ will_V catch_V and_& highlight_V some_D common_A Javascript_^ errors_N while_P you're_N editing_N your_D code_N ._. It's_N not_R as_R thorough_A as_P the_D external_A lint_N tools_N ,_, but_& it's_V a_D lot_N more_R immediate_A in_P its_D feedback_N ._.
Firebug_N with_P CodeBurner_N gives_V you_O reference_V material_N for_P your_D HTML_^ and_& CSS_^ ._. You_O can_V lookup_V HTML_^ elements_N ,_, attributes_N ,_, and_& CSS_N properties_N quickly_R without_P leaving_V the_D page_N ._.
Tools_N for_P coding_V conventions_N and_& analyzing_V HTML_^ ,_, CSS_^ ,_, Javascript_^ client_N side_N code_N
I_O use_V various_A code_N checkers_N for_P Java_^ development_N but_& I_O haven't_V used_V one_$ for_P HTML_^ ,._^ CSS_^ ,_, Javascript_^ ._. Do_V any_D exist_V ._. That_D flag_N bad_A practices_N or_& similar_A tool_N ._.
Please_V accept_V an_D answer_N ._.
Firebug_N with_P the_D YSlow_N addon_N from_P Yahoo_^ is_V pretty_R effective_A at_P pointing_V out_R your_D inefficiencies_N ._. Also_R try_V the_D web_N developer_N addon_N and_& hitting_V ctrl+shift+a_N -_: it'll_N load_V your_D local_A code_N straight_R into_P the_D w3c_N validator_N ._. Read_V up_R on_P 508C_N compliance_N -_: you_O can't_V test_N for_P it_O but_& it's_V good_A to_P know_V ._.
W3C_N has_V a_D Markup_^ Validation_^ Service_^ for_P validating_V (_^ X_^ )_^ HTML_^ ._. Also_R ,_, W3C_N has_V tools_N :_: For_P CSS_^ For_P Atom_^ RSS_^ feeds_V And_& JSLint_N is_V a_D tool_N for_P checking_V your_D JavaScript_^ ._.
+1_N for_P JSLint_N ._. It_O is_V developed_V and_& maintained_V by_P Douglas_^ Crockford_^ ,_, a_D renowned_A Javascript_^ guru_N ._.
js2-mode_N for_P Emacs_^ will_V catch_V and_& highlight_V some_D common_A Javascript_^ errors_N while_P you're_N editing_N your_D code_N ._. It's_N not_R as_R thorough_A as_P the_D external_A lint_N tools_N ,_, but_& it's_V a_D lot_N more_R immediate_A in_P its_D feedback_N ._.
Firebug_N with_P CodeBurner_N gives_V you_O reference_V material_N for_P your_D HTML_^ and_& CSS_^ ._. You_O can_V lookup_V HTML_^ elements_N ,_, attributes_N ,_, and_& CSS_N properties_N quickly_R without_P leaving_V the_D page_N ._.
How_R would_V I_O write_V a_D Java_^ regex_N that_D gets_V the_D contents_N of_P a_D
I'm_N trying_V to_P integrate_V analytics_N into_P my_D GWT_^ application_N ._. To_P do_V this_D ,_, I'm_N calling_V a_D service_N that_D returns_V a_D String_^ of_P HTML_^ that_D needs_V to_P be_V parsed_V and_& eval'ed_V ._. I_O need_V a_D regex_N that_D looks_V for_P and_& grabs_N either_& 1_$ )_N the_D body_N of_P the_D tag_N or_& 2_$ )_$ the_D contents_N of_P the_D "_`` src_N "_'' attribute_N ._. I_O want_V to_P eval_V both_D of_P these_D with_P JavaScript_^ ._. I'm_N happy_A with_P assuming_V that_P if_P a_D "_`` src_N "_'' attribute_N exists_V ,_, the_D body_N can_V be_V ignored_V ._. Thanks_N ,_, Matt_^
This_D question_N is_V really_R confusing_A ,_, Java_^ !_. =_A JavaScript_N
I_O need_V to_P do_V the_D parsing_N of_P HTML_^ with_P Java_^ ._. After_P getting_V the_D JavaScript_^ ,_, I'll_G eval_G it_O ._. Oh_! ,_, and_& I'm_N using_V GWT_^ ,_, so_P Java_^ /_: is_V JavaScript_^ ._. ;-)_N
It_O seems_V like_P there's_N got_V to_P be_V a_D better_A way_N to_P do_V what_O you're_V trying_V to_P do_V ._. What_O you_O propose_V is_V a_D very_R unnatural_A pairing_G (_G regex_N to_P find_V js_P tag_N &_& then_R eval_A while_P using_V GWT_N )_N
Someone_N needs_V to_P tag_V this_D with_P '_G GWT_N '_'' or_& '_'' Google_^ Web_N Toolkit_N '_'' ._. Also_R ,_, please_V make_V it_O more_R clear_A in_P the_D question_N that_P you_O are_V using_V GWT_^ ._. Otherwise_R ,_, this_D question_N doesn't_N make_V much_A sense_N (_$ better_A ways_N to_P do_V the_D same_A thing_N in_P a_D js_N context_N )_N ._.
To_P match_V the_D body_N of_P the_D tag_N ,_, you_O can_V try_V something_N like_P which_D you_O want_V to_P match_V case-insensitively_R ._. Works_^ assuming_V there_X is_V no_D ""_N appearing_V in_P the_D actual_A script_N body_N and_& no_D "_`` >_A "_'' in_P the_D attributes_N for_P the_D tag_N ._. You_O can_V add_V whitespace_N globbers_N to_P the_D regexp_N to_P make_V it_O more_R robust_A ._. Note_V the_D use_N of_P ._. *_G ?_. to_P make_V sure_A the_D scanning_N stops_V at_P the_D first_A closing_N tag_N ._. To_P add_V the_D src_N attribute_N ,_, you_O can_V try_V and_& use_V the_D second_A submatch_N to_P get_V '_G src_N '_'' ,_, and_& third_A to_P get_V the_D body_N ._. Again_^ ,_, you_O might_V want_V to_P add_V whitespace_N globbers_N ._. But_& would_V be_V best_A off_R by_P running_V the_D thing_N through_P a_D proper_A HTML_^ /_: XML_N /_: SGML_N parser_N ,_, because_P regexps_N can_V blow_V up_R in_P special_A cases_N ._.
You_O could_V use_V something_N like_P this_D :_: The_D regex_N uses_V the_D lazy_A star_N quantifier_N and_& should_V work_V in_P most_A cases_N but_& it_O could_V certainly_R be_V improved_V upon_P ._. It_O will_V match_V in_G $1_G the_D attributes_N of_P the_D script_N tag_N ,_, and_& in_G $2_G the_D body_N ._. You_O can_V then_R check_V for_P the_D src_N attribute_N in_P $1_^ (_^ if_P it's_^ not_R empty_A )_N ._.
How_R about_R to_P start_V with_P ._. You_O may_V need_V to_P customize_V it_O a_D bit_N to_P accept_V the_D src_N attribute_N with_P single_A quotes_N or_& without_P quotes_N ._. ignore_V white_A between_P the_D '_G script_N '_'' and_& '_'' '_'' You_O also_R must_V use_V the_D DOTALL_^ mode_N to_P ensure_V the_D ._. captures_V newlines_N ._.
Your_D answer_N won't_N handle_V
Agreed_V ._. There_X are_V many_A cases_N it_O won't_G handle_V (_^ like_P the_D type_N attribute_N of_P the_D script_N tag_N )_N ._. I_O suggested_V this_D as_P a_D start_N to_P build_V from_P ._.
and_& it_O will_V match_V everything_N between_P first_A and_& last_A which_D wouldn't_N work_N nicely_R when_R there_X are_V multiple_A scripts_N on_P the_D page_N
Must_V it_O be_V a_D regex_N ?_. You_O can_V use_V the_D DOM_^ to_P obtain_V such_A information_N ,_, here_R is_V a_D trivial_A example_N of_P getting_V the_D contents_N of_P the_D BODY_N tag_N ,_, you_O could_V apply_V it_O to_P whatever_D you_O like_V :_:
+1_$ Yes_^ !_. Parsing_V non-regular_A strings_N with_P regular_A expressions_N is_V WRONG_^ !_.
+1_N ._. I_O love_V regex_N ,_, but_& use_V the_D right_A tool_N for_P the_D job_N ._. regex_N is_V the_D wrong_A tool_N for_P this_D job_N ._.
While_P I_O agree_V in_P principle_N ,_, he's_N trying_V to_P do_V this_D via_P the_D GWT_N which_D uses_V java_N to_P create_V javascript_N ._.
This_D seems_V to_P do_V what_O you_O want_V :_: That_P being_V said_V ,_, you_O would_V probably_R be_V better_A off_R using_V something_N like_P Tag_^ Soup_^ if_P it_O is_V at_P all_D possible_A ._.
I'm_N marking_V this_D as_P the_D correct_A answer_N since_P it_O does_V what_O I_O originally_R wanted_V ._. Also_R ,_, laz_N provided_V me_O with_P the_D secondary_A answer_N (_N below_P )_N that_P I_O needed_V for_P the_D final_A solution_N ._.
Is_V that_P correct_A ?_. I_O would_V think_V the_D last_A peren_N should_V be_V inside_P the_D tag_N like_P this_D :_: ]*_$ src_N =[_N '_'' "_`` ]_^ (_^ [^_^ '_G "_`` ]*_^ )_^ [_^ '_G "_`` ][^_N >_A ]*_$ >_A |[^_N >_A ]*_$ >_A (_G [^_G <_A ]*_G ))_G because_P I_O believe_V script_N tags_N not_R specified_V always_R with_P a_D closing_N node_N ,_, not_R shorthand_N ,_, so_R ,_, never_R /_: >_A
You_O are_V technically_R correct_A ,_, which_D is_V the_D best_A kind_N of_P correct_A of_P course_N ,_, except_P that_D HTML_^ in_P the_D wild_A can_V certainly_R be_V malformed_V and_& if_P a_D browser_N can_V render_V it_O (_$ or_& ever_R did_V )_^ ,_, be_V assured_V someone_N once_R wrote_V it_O that_D way_N !_. Since_P Matt_^ seems_V to_P have_V controlled_V the_D HTML_^ being_V parsed_V though_R ,_, he_O might_V not_R have_V needed_V to_P handle_V that_D scenario_N ._.
Thanks_N for_P all_X the_D great_A suggestions_N everyone_N ._. I_O quickly_R discovered_V it's_N not_R possible_A to_P use_V Java's_^ Regex_^ API_^ in_P GWT_^ and_& was_V able_A to_P do_V what_O I_O wanted_V with_P JSNI_N ._. Unfortunately_R ,_, I_O ran_V into_P additional_A issues_N as_P documented_V in_P the_D following_A thread_N :_: http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ac2589369ddec8a3_N
I_O guessing_V that_P the_D call_N to_P eval_G (_G scripts[i]_N ._. getAttribute_G (_G "_`` src_N "))_G doesn't_G not_R load_V the_D URL_N that_D src=_V ""_$ points_N to_P ._. It_O is_V simply_R trying_V to_P execute_V the_D actual_A URL_N string_N as_P JavaScript_^ ._. You_O need_V to_P figure_V out_R how_R to_P load_V the_D contents_N of_P that_D URL_N and_& eval_V it_O ._.
Ugh_R ,_, I_N =_A I'm_N and_& doesn't_N not_R =_A does_V not_R
Thanks_N for_P the_D suggestion_N ._. It_O allowed_V me_O to_P solve_V my_D problem_N ._. Here's_V the_D solution_N I_O came_V up_R with_P :_: http://groups.google.com/group/Google-Web-Toolkit/msg/0d076f647a4472bc_N
Are_V Java_^ Applets_^ unable_A to_P communicate_V with_P javascript_N within_P Firefox_^ on_P Mac_^ OS_^ ?_.
Would_V it_O work_V via_P accessing_V one_$ of_P the_D global_A objects_N on_P the_D screen_N ?_. Ergo_^ ,_, In_^ JavaScript_^ :_: In_P Applet_^ :_: That_D would_V be_V my_D experiment_N ._. But_& I've_N been_V calling_V "_`` window.close()_N "_'' on_P FF_N on_P Mac_N OS_N X_N ,_, and_& that_P still_R works_V ._.
Calling_V the_D function_N is_V not_R the_D problem_N ,_, getting_V the_D result_N back_R is_V ._. With_P debug_N statements_N I_O can_V see_V clearly_R that_P the_D function_N is_V executed_V ,_, but_& somehow_R the_D return_N value_N gets_V lost_V and_& I_O only_R get_V "_`` null_A "_'' ._.
I_O haven't_V used_V the_D applet_N api_N in_P a_D while_N but_& if_P i_G recall_N correctly_R in_P order_N to_P allow_V an_D Applet_^ to_P cann_V JS_N code_N you_O should_V enable_V the_D attribute_N mayscript_N in_P your_D applet_N tag_N or_& a_D param_N mayscript_N in_P the_D object_N tag_N notation_N ._. For_P communication_N in_P the_D other_A way_N JS_N to_P Applet_^ you_O should_V also_R use_V the_D scriptable_A attribute_N or_& parameter_N ,_, for_P example_N :_: This_D allows_V your_D applet_N to_P use_V script_N functions_N ._.
The_D mayscript_N and_& scriptable_A attributes_N are_V necessary_A indeed_R ._. But_& I_O already_R include_V them_O in_P my_D applet_N tag_N ,_, otherwise_R it_O wouldn't_N work_N at_P all_D with_P other_A browsers_N ._.
If_P you_O remove_V all_D calls_N to_P properties_N of_P the_D applet_G you're_G cool_N ._. This_D may_V happen_V in_P other_A situations_N as_R well_R ._. I_O found_V this_D page_N after_P Googling_V a_D similar_A problem_N ,_, so_P I_O thought_V I'd_N add_V a_D datapoint_N ._. The_D only_A difference_N is_V that_P I_O was_V using_V win.call()_N rather_R than_P win.eval()_N ._. I_O had_V an_D alert()_N call_N in_P the_D JavaScript_^ to_P make_V sure_A the_D call_N was_V getting_V through_P ,_, and_& saw_V what_O appears_V to_P be_V exactly_R the_D same_A lockup_N on_P Firefox_^ 3.0_$ ._. 9_$ ,_, OS_N X_N 10.5_$ ._. 6_$ ,_, Java_^ 1.5_$ ._. 0_16_$ ._. 100%_$ repeatable_A with_P Firefox_^ ,_, no_D problem_N on_P Safari_^ (_^ I_^ don't_^ have_V Windows_^ installed_V on_P this_D box_N )_N ._. When_R I_O got_V rid_A of_P the_D alert()_N and_& simply_R returned_V a_D value_N ,_, the_D problem_N went_V away_R ._. Sooooo_^ ..._: maybe_R calls_V into_P JavaScript_^ time_N out_R after_P a_D while_N and_& simply_R toss_V null_A ?_.
How_R to_P keep_V the_D bottom_N of_P an_D SWT_^ Browser_^ widget_N visible_A when_R appending_V to_P the_D HTML_^ content_N ?_.
Rewriting_V the_D whole_A HTML_^ content_N every_D time_N seems_V unnecessarily_R busy-work_A ,_, and_& there_X may_V not_R be_V a_D way_N to_P prevent_V some_D browsers_N from_P scrolling_V to_P the_D top_N each_D time_N you_O redraw_V the_D entire_A page_N ._. Especially_R if_P you_O allow_V the_D logs_N you_O show_V to_P get_V very_R long_R ,_, this_D will_V get_V slower_A and_& slower_A as_P the_D log_N gets_V longer_A ._. A_D better_A solution_N might_V be_V to_P use_V JavaScript_^ to_P append_V to_P the_D page_N ._. You're_N already_R using_V How_R about_P something_N like_P this_D (_N assuming_V "_`` itemID_N "_'' is_V the_D ID_N of_P the_D DIV_N containing_V the_D content_A ):_N You_O have_V to_P do_V the_D replaceAll()_N and_& you_O may_V need_V a_D couple_N more_A transformations_N ,_, depending_V on_P your_D log_N content_N ._. I've_N noticed_V that_P browser.execute()_G doesn't_G like_P it_O if_P the_D script_N contains_V newlines_N ,_, for_P example_N ,_, and_& single_A quotes_N in_P your_D string_N needed_V to_P be_V quoted_V as_P I_O show_V above_A ._.
Thank_V you_O ,_, this_D is_V much_R better_A ,_, even_R if_P I_O set_V the_D entire_A text_N each_D time_N ._.
Just_R wanted_V add_V that_P a_D downside_N of_P this_D is_V that_P it_O does_V not_R seem_V to_P work_V on_P the_D Mac_N with_P a_D default_N Browser_N widget_N ._. A_D workaround_N is_V to_P force_V Mozilla_^ usage_N in_P the_D Browser_^ widget_N with_P the_D SWT.MOZILLA_N option_N ,_, which_D requires_V an_D installed_A XulRunner_N (_N see_V http://www.eclipse.org/swt/faq.php#howusemozilla)_N ._.
@Fabian_G Steeg_G :_: You_O may_V want_V to_P log_V an_D SWT_^ bug_N report_N about_P this_D ._.
I_O would_V have_V just_R added_V this_D as_P a_D comment_N ,_, but_& it_O wouldn't_G let_V me_O (_V not_R enough_A reputation_N )_N ._. You_O can_V ship_V XUL_^ in_P a_D nonstandard_A location_N on_P the_D mac_N ,_, by_P setting_V a_D system_N property_N ._. System.setProperty_G (_G "_`` org.eclipse.swt.browser.XULRunnerPath_N "_'' ,_, "_'' /_: fubar_N /_: xul_N /_: Versions_N /_: 1.9_$ ._. 0.7_$ /_: ")_N ;_:
Thanks_N ,_, this_D is_V good_A to_P know_V for_P the_D future_N ._. In_P this_D particular_A case_N I_O ended_V up_R not_R using_V the_D browser_N widget_N but_& a_D tree_N viewer_N (_N for_P other_A reasons_N )_$ ._.
._. NET_^ ,_, Java_^ to_P JavaScript_^ compiler_N
I_O am_V interested_A to_P create_V a_D drag-and-drop_A layout_N designer_N using_V only_R JavaScript_^ ,_, HTML_^ and_& CSS_^ ._. The_D designer_N will_V allow_V the_D user_N to_P drag_V the_D page_N elements_N from_P one_$ place_N to_P another_D (_N something_N like_P Blogger_^ '_G s_N layout_N designer_N )_N to_P create_V a_D site_N layout_N ._. But_& I_O don't_V want_V to_P hand_V code_N everything_N in_P JavaScript_^ ,_, I_O would_V prefer_V to_P write_V my_D application_N in_P ._. NET_^ (_^ preferably_R )_$ or_& Java_^ and_& rely_V on_P a_D compiler_N to_P compile_V it_O to_P JavaScript_^ and_& HTML_^ ._. What_O are_V the_D ._. NET_^ or_& Java_^ to_P JavaScript_^ compilers_N that_P you_O have_V used_V and_& can_V recommend_V ?_. For_P Java_^ to_P JavaScript_^ I_O know_V GWT_^ is_V available_A ._. What_O about_P ._. NET_^ to_P JavaScript_^ ?_. Microsoft_^ did_V come_V out_R with_P Volta_^ ,_, but_& the_D project_N seems_V to_P be_V no_R longer_R available_A ._.
suggest_V it_O as_P a_D Google_^ Summer_^ of_P Code_^ project_N ?_.
Look_V no_D further_R ,_, you_O already_R mentioned_V GWT_^ pick_V that_P !_. It_O has_V a_D very_R good_A API_N and_& many_A good_A applications_N have_V use_V them_O ._. Even_R JavaScript_^ frameworks_N like_P http://extjs.com_N have_V GWT_^ support_N ._. I_O use_V it_O for_P an_D small_A JavaScript_^ calendar_N recently_R ._. To_P be_V honest_A ,_, I_O don't_V really_R like_P JavaScript_^ that_P much_A ._. Most_A of_P the_D times_N the_D errors_N are_V hard_A to_P track_V (_N specially_R for_P a_D non_A JavaScript_^ guy_N as_P me_G )_G and_& the_D workarounds_N included_V some_D plug-ins_N for_P the_D explorer_N just_R to_P get_V exactly_R what_O a_D compiler_N should_V do_V ._. Catch_V silly_A error_N early_R ._. In_P the_D other_A hand_N I'm_N very_R familiar_A with_P the_D Java_^ Programming_^ language_N ,_, and_& many_A of_P the_D libraries_N (_$ if_P not_R the_D most_R important_A )_N such_A as_P java.lang_N and_& java.util_N have_V been_V ported_V to_P GWT_^ ._. Plus_^ ,_, the_D guy_N who_O wrote_V relevant_A parts_N of_P java.util_N is_V the_D same_A behind_P GWT_G (_G google_N Joshua_^ Bloch_^ ._. )_N
GWT_N *_N could_V *_G be_V a_D pain_N in_P the_D ass_N ,_, depending_V on_P how_R the_D serverside_N is_V to_P be_V implemented_V ._. But_& it_O is_V getting_V heaps_N better_R now_R in_P its_D current_A iteration_N ._.
ExtGWT_N is_V a_D separate_A project_N to_P ExtJS_N and_& it's_A *_N awful*_N ._. For_P one_$ ,_, the_D guy_N has_V absolutely_R no_D clue_N when_R it_O comes_V to_P generics_N ._. Run_^ away_R ._.
Check_V out_R Nikhil_^ Khotari's_^ Script#_^ project_N ._. It_O allows_V you_O to_P write_V C#_N code_N and_& compiles_V it_O to_P JavaScript_^ ._.
Gee_R ,_, really_R ?_. Drive-by-downvoting_A ?_.
Also_R for_P Java_^ there_X is_V J2S_N ._. Java2Script_G (_G J2S_N )_N Pacemaker_N provides_V an_D Eclipse_^ Java_^ to_P JavaScript_^ compiler_N plugin_N and_& an_D implementation_N of_P JavaScript_^ version_N of_P Eclipse_^ Standard_^ Widget_^ Toolkit_^ (_^ SWT_^ )_^ with_P other_A common_A utilities_N ,_, such_A as_P java.lang_N ._. *_N and_& java.util_N ._. *_G ._. You_O can_V convert_V your_D SWT-base_N Rich_^ Client_^ Platform_^ (_^ RCP_^ )_^ into_P Rich_^ Internet_^ Application_N (_N RIA_N )_N by_P Java2Script_N Pacemaker_N ._. This_D means_V that_P if_P you_O use_V the_D SWT_N IDE_G (_G drag_N and_& drop_N )_N you_O can_V then_R convert_V the_D generated_V code_N to_P JS_^ +_& HTML_^ ._.
I_O wouldn't_V hand_N write_V any_D Javascript_^ for_P UI_^ ._. This_^ can_V lead_V to_P maintenance_N disaster_N ._. jQuery_N is_V what_O I_O am_V using_V but_& I_O still_R wouldn't_N use_V it_O to_P write_V full_A UI_^ Javascript_^ code_N ._. ExtJS_N is_V also_R another_D good_A option_N if_P you_O plan_V to_P write_V in_P Javascript_^ ._. In_P general_A what_O I_O am_V saying_V here_R is_V that_P it's_N so_R much_R easier_A to_P main_A in_P Java_^ /_: C#_N than_P Javascript_^ ._. Check_V out_R cappuccino_N framework_N and_& Atlas_^ ._. Never_^ used_V GWT_^ ._. Script#_N is_V similar_A to_P GWT_^ but_& for_P ASP.NET_N framework_N ._. Also_R depends_V on_P the_D requirement_N ,_, if_P your_D site_N is_V public_A facing_V then_R RIA_N isn't_N a_D good_A option_N ._. It's_N all_D about_P which_D extreme_A end_N you_N pursuit_N (_$ hand_N written_V and_& web_N standard_N ,_, or_& RAD_N or_& libraries_N like_P jQuery_N /_: ExtJS_N as_P the_D middle_A option_N )_N ._.
Script#_N has_V already_R been_V mentioned_V ._. It_O hasn't_V been_V updated_V since_P August_^ 2008_$ ._. Milescript_^ is_V another_D ,_, but_& also_R has_V seen_V very_R little_A for_P 6_$ months_N ._. Extsharp_^ for_P the_D Ext_N library_N ._. Adds_^ Ext_^ support_N for_P Script#_^ Javascript_^ compiler_N to_P Java_^ (_^ going_V the_D wrong_A way_N for_P you_O )_^ Java_^ to_P script_N Eclipse_^ plugin_V My_D issues_N with_P Script#_G (_G a_D known_A issue_N )_N is_V it_O doesn't_A support_N jQuery_N yet_R ._. However_R it_O comes_V with_P a_D very_R lightweight_A library_N to_P tie_V in_R with_P the_D ._. NET_N framework_N ,_, in_P Nikhil's_^ sscorlib.js_^ file_N and_& ssfx.core.js_N files_N ._. And_& also_R has_V support_N for_P lots_N of_P other_A Javascript_^ APIs_^ (_^ mostly_R Microsoft_^ ,_, seeing_V as_P he_O is_V in_P the_D ASP.NET_N team_N )_N ._. I'd_N love_N to_P see_V a_D Script#_N extension_N for_P jQuery_^ (_^ I'm_^ thinking_V about_P writing_V it_O if_P it's_A easy_A enough_A )_N ._. As_P it_O stands_V ,_, most_A don't_N provide_V full_A compilation_N yet_R but_& they're_R certainly_R getting_V there_R ._. Update_^ :_: I_O wrote_V a_D small_A extension_N to_P enable_V JQuery_N support_N Script#_N a_D few_A months_N ago_R ._. The_D project_N can_V be_V found_V here_R ._.
Last_A time_N I_O went_V to_P the_D Script#_N site_N ,_, I_O saw_V that_P jQuery_N is_V on_P the_D roadmap_N for_P the_D next_A release_N of_P Script#_G (_G due_A some_D time_N in_P 2009_$ )_N ._.
Check_V out_R Axial_^ ,_, a_D ._. NET_N to_P JavaScript_^ converter_N that_D works_V well_R in_P ASP.NET_^ ._. It_O supports_V WebForms_^ ,_, jQuery_N and_& canvas_N ._. It's_N not_R very_R mature_A ,_, but_& it's_N worth_P a_D look_N ._.
I'm_N going_V to_P second_A the_D use_N of_P GWT_^ ._. I've_N used_V it_O for_P several_A projects_N and_& ,_, when_R used_V in_P combination_N with_P a_D modern_A editor_N like_P Eclipse_^ or_& IDEA_^ ,_, it_O really_R makes_V the_D mess_N manageable_A ._. It's_N important_A to_P note_V that_P not_R only_R does_V it_O allow_V you_O to_P write_V in_P Java_^ and_& have_V that_P transformed_V into_P optimized_V and_& obfuscated_V Javascript_^ it_O also_R comes_V with_P a_D substantial_A subset_N of_P the_D core_N Java_^ API_^ ._. In_P addition_N to_P this_D they_O provide_V lots_N of_P additional_A classes_N for_P doing_V things_N like_P parsing_V and_& working_V with_P JSON_N and_& XML_N and_& communicating_V with_P a_D server_N via_P asynchronous_A HTTP_N ._. You_O can_V check_V out_R the_D docs_N to_P get_V an_D idea_N of_P what_O else_R they_O offer_V ._. Another_D feature_N that_D might_V be_V of_P special_A interest_N to_P you_O for_P implementing_V drag_N and_& drop_N functionality_N is_V it's_A integration_N with_P javascript_N libraries_N like_P Ext_N and_& scriptaculous_N ._. Either_^ through_P pre-built_A interfaces_N or_& via_P JSNI_N
http://jsc.sourceforge.net_N is_V a_D C#_N to_P JavaScript_^ ,_, Java_^ ,_, Flash_^ and_& PHP_^ compiler_N ._.
Check_V this_D open_A source_N Java_^ project_N http://st-js.org_N it_O produces_V clean_A javascript_N code_N that_D is_V clean_A ,_, easy_A to_P read_V and_& easy_A to_P debug_V ._.
JscriptSuite_^ offers_V another_D free_A ._. NET_^ to_P Javascript_^ compiler_N ._. There_X is_V a_D big_A difference_N to_P Saltarelle_G (_G jsc_N ,_, SharpKit#_G etc_G ._. )_^ ._. Developer_^ write_V down_R and_& debug_V only_A C#_N code_N (_$ or_& any_D other_A ._. NET_^ langauge_G )_G ,_, like_P in_P GWT_^ ._. Javascript_^ will_V be_V generated_V f_G r_N deployment_N only_R ._.
how_R to_P get_V rid_A of_P double-scrollbars_N on_P internal_A frame_N of_P GWT_N app_N
May_V be_V it_O makes_V sense_N to_P embed_V GWT_^ into_P old_A JSP_^ ?_. Place_^ div_G id=_G "_`` for.gwt_N "_'' /_: somewhere_R on_P the_D JSP_^ ,_, and_& import_N JS_N ._. It's_^ not_R clear_A how_R you_O embed_V JSP_^ into_P GWT_^ ,_, sorry_R ._. Would_V something_N like_P document.body.clientHeight_N within_P the_D frame_N help_V you_O ,_, I_O wonder_V ?_.
Inside_P my_D GWT_N app_N I_O create_V a_D Frame_N object_N ._. Then_R I_O do_V frame.setUrl_G (_G "_`` /_: path_N /_: to_P /_: legacy_content_G ")_G -_: so_P the_D browser_N essentially_R loads_N a_D new_A page_N into_P the_D frame_N ._. The_D legacy_N content_N happens_V to_P be_V generated_V by_P a_D JSP_^ ._.
its_D possible_A to_P eliminate_V the_D scrollbars_N ,_, but_& its_D not_R possible_A to_P make_V the_D page_N "_`` fit_N "_'' the_D frame_N ,_, which_D is_V how_R I_O understand_V what_O you_O actually_R want_V ._. If_P you_O really_R want_V to_P make_V the_D scrollbar_N disappear_V ,_, just_R set_V the_D frame's_N overflow_N to_P none_N ._.
Read_V this_D ,_, it_O will_V most_R likely_R be_V a_D solution_N to_P your_D problem_N It_O explains_V how_R you_O can_V get_V the_D size_N of_P the_D window_N and_& manage_V it's_N scrolling_V in_P JavaScript_^ ._.
The_D easiest_A way_N that_P I_O can_V think_V of_P to_P fully_R solve_V this_D problem_N is_V to_P not_R use_V a_D Frame_^ element_N ,_, but_& rather_R an_D HTMLPanel_N combined_V with_P an_D HTTPRequest_N ._. This_D approach_N adds_V complexity_N with_P the_D RPC_^ call_N ,_, but_& an_D HTMLPanel_N is_V a_D simple_A div_N that_D has_V content_N within_P it_O ._. As_P such_A ,_, it_O can_V expand_V and_& /_: or_& contact_N with_P your_D JSP_^ content_N ._. The_D end_N result_N would_V be_V a_D seamless_A integration_N of_P the_D two_$ pages_N ._. Google's_N own_V example_N on_P JSON_^ has_V good_A examples_N for_P making_V an_D HTTP_N request_N ._.
How_R do_V I_O limit_V my_D date_N range_N on_P an_D Ajax_^ Calendar_^ ?_.
I_O am_V using_V the_D ajax_N calendar_N tool_N ._. I_O like_V its_D function_N ,_, but_& I_O would_V like_V to_P restrict_V the_D user_N to_P an_D option_N of_P selecting_V a_D time_N frame_N starting_V with_P Today_N ,_, and_& ending_V with_P 6_$ months_N prior_R ._. How_R do_V I_O do_V this_D ?_.
Which_D ajax_N calendar_N tool_N are_V you_O using_V ._. There_X are_V about_P 7000_$ out_R there_R ._. I've_N seen_V the_D ones_N from_P Yahoo_^ (_^ YUI_^ )_^ and_& a_D few_A others_N that_D take_V configurations_N for_P start_N and_& end_N dates_N where_R the_D user_N has_V to_P select_V something_N in_P between_P ._. If_P you're_N using_V a_D calendar_N that_P doesn't_N have_V that_P ,_, you_O could_V add_V it_O by_P checking_V the_D date_N after_P the_D user_N selects_V and_& checking_N if_P that_D is_V outside_P your_D range_N ._. Then_R display_V a_D message_N and_& leave_V the_D calendar_N visable_A for_P them_O to_P pick_V again_R ._. (_$ Might_^ be_V easier_A to_P switch_V to_P a_D calendar_N that_D already_R supports_V this_D though_P )_N
You_O can_V use_V asp_N :_: comaparevalidator_N to_P check_V selected_A date_N ._.
If_P you're_N using_V the_D asp.net_N calendar_N control_N ,_, use_V the_D DayRender_^ event_N to_P check_V each_D day_N against_P the_D date_N limit_N you_O wish_V to_P impose_V ._.
Seems_V like_P something_N I_O should_V be_V looking_V at_P ._. How_R would_V I_O add_V this_D to_P my_D html_A page_N ?_.
Java_^ equivalent_A to_P JavaScript's_A encodeURIComponent_N that_D produces_V identical_A output_N ?_.
I've_N been_V experimenting_V with_P various_A bits_N of_P Java_^ code_N trying_V to_P come_V up_R with_P something_N that_D will_V encode_V a_D string_N containing_V quotes_N ,_, spaces_N and_& "_`` exotic_A "_'' Unicode_^ characters_N and_& produce_V output_N that's_N identical_A to_P JavaScript's_G encodeURIComponent_G function_N ._. My_D torture_V test_N string_N is_V :_: "_`` A_D "_`` B_N "_'' If_P I_O enter_V the_D following_A JavaScript_^ statement_N in_P Firebug_^ :_: Then_R I_O get_V :_: Here's_V my_D little_A test_N Java_^ program_N :_: This_D program_N outputs_V :_: URLEncoder.encode_N returns_V %22A%22+B+%C2%B1+%22_N getBytes_N returns_N "_`` A_D "_`` B_N "_'' Close_^ ,_, but_& no_D cigar_N !_. What_O is_V the_D best_A way_N of_P encoding_V a_D UTF-8_N string_N using_V Java_^ so_P that_P it_O produces_V the_D same_A output_N as_P JavaScript's_G encodeURIComponent_G ?_. EDIT_^ :_: I'm_N using_V Java_^ 1.4_$ moving_V to_P Java_^ 5_$ shortly_R ._.
Using_V the_D javascript_N engine_N that_D is_V shipped_V with_P Java_^ 6_$ :_: import_N javax.script.ScriptEngine_N ;_: import_N javax.script.ScriptEngineManager_N ;_: public_A class_N Wow_! {_$ public_A static_A void_N main_A (_^ String_^ []_G args_G )_G throws_V Exception_^ {_^ ScriptEngineManager_^ factory_N =_A new_A ScriptEngineManager()_N ;_: ScriptEngine_^ engine_N =_A factory.getEngineByName_G (_G "_`` JavaScript_N ")_N ;_: engine.eval_G (_G "_`` print_N (_^ encodeURIComponent_^ (_^ '_G "_`` A_N "_'' B_N "'))")_N ;_: }_G }_G Output_N :_: %22A%22%20B%20%c2%b1%20%22_N The_D case_N is_V different_A but_& it's_N closer_R to_P what_O you_O want_V ._.
Ah_N ,_, sorry_A ..._: I_O should_V have_V mentioned_V in_P the_D question_N that_P I'm_N on_P Java_^ 1.4_$ moving_V to_P Java_^ 5_$ shortly_R !_.
Iiips_^ ._. I_^ don't_^ have_V a_D solution_N for_P you_O then_R :-)_$ ._.
If_P javascript_N is_V the_D only_A solution_N you_O can_V try_V Rhino_^ ,_, but_& it's_N too_R much_R just_R for_P this_D small_A problem_N ._.
Even_R if_P he_O was_V using_V Java_^ 6_$ ,_, I_O think_V this_D solution_N is_V WAY_^ over_P the_D top_N ._. I_O don't_V think_V he's_N looking_V for_P a_D way_N to_P directly_R invoke_V the_D javascript_N method_N ,_, just_R a_D way_N to_P emulate_V it_O ._.
Maybe_R ._. I_O think_V the_D easiest_A solution_N would_V be_V to_P write_V your_D own_A escape_N function_N if_P you_O can't_V find_V anything_N that_D does_V the_D trick_N for_P you_O ._. Just_R copy_V some_D method_N from_P the_D StringEscapeUtils_^ class_N (_^ Jakarta_^ Commons_^ Lang_^ )_N and_& reimplement_N it_O with_P your_D needs_N ._.
@Ravi_^ Wallau_^ very_R nice_A !_.
This_D actually_R works_V ,_, and_& if_P you're_N not_R worried_V about_P performance_N ..._: I_O think_V it's_N good_A ._.
Looking_V at_P the_D implementation_N differences_N ,_, I_O see_V that_D :_: MDC_N on_P encodeURIComponent()_N :_: literal_A characters_N (_G regex_G representation_N ):_N [-a-zA-Z0-_N 9.__$ *~_N '_'' (_G )_G !_. ]_^ Java_^ 1.5_$ ._. 0_$ documentation_N on_P URLEncoder_N :_: literal_A characters_N (_G regex_G representation_N ):_G [-a-zA-Z0-_G 9.__G *]_G the_D space_N character_N "_'' "_'' is_V converted_V into_P a_D plus_A sign_N "_'' +_& "_'' ._. So_P basically_R ,_, to_P get_V the_D desired_V result_N ,_, use_V URLEncoder.encode_G (_G s_N ,_, "_`` UTF-8_N ")_N and_& then_R do_V some_D post-processing_A :_: replace_V all_D occurrences_N of_P "_`` +_& "_'' with_P "_`` %20_N "_'' replace_V all_D occurrences_N of_P "_`` %xx_N "_'' representing_V any_D of_P [~_N '_'' (_G )_G !_. ]_$ back_R to_P their_D literal_A counter-parts_N
I_O wish_V you_O had_V written_V "_`` Replace_V all_D occurrences_N of_P "_`` %xx_N "_'' representing_V any_D of_P [~_N '_'' (_G )_G !_. ]_$ back_R to_P their_D literal_A counter-parts_N "_'' in_P some_D simple_A language_N ._. :(_$ my_D tiny_A head_N is_V not_R able_A to_P understand_V it_O ......._R
@Shailendra_N `_`` [~_N '_'' (_G )_G !_. ]_$ `_`` means_V `"_^ ~_^ "`_^ or_& `"'"`_^ or_& `"_^ (_^ "`_^ or_& `")"`_^ or_& `"_^ !_. "`_^ ._. :)_N I_O recommend_V learning_V the_D regex_N basics_N ,_, too_R ,_, though_R ._. (_N I_O also_R didn't_V expand_V on_P that_D since_P at_P least_A two_$ other_A answers_N show_V the_D respective_A Java_^ code_N ._. )_N
This_D is_V the_D class_N I_O came_V up_R with_P in_P the_D end_N :_:
Thanks_N for_P sharing_V the_D code_N !_. :-)_G +1_G
Adding_V a_D tip_N ._. In_P Android_^ 4.4_$ I_O found_V that_P we_O also_R need_V to_P replace_V `_`` %0A_N `_`` which_D means_V a_D return_N key_N in_P Android_^ input_N ,_, or_& it_O will_V crash_V the_D js_^ ._.
I_O came_V up_R with_P another_D implementation_N documented_V at_P ,_, http://blog.sangupta.com/2010/05/encodeuricomponent-and.html_N ._. The_D implementation_N can_V also_R handle_V Unicode_^ bytes_N ._.
I_O came_V up_R with_P my_D own_A version_N of_P the_D encodeURIComponent_N ,_, because_P the_D posted_V solution_N has_V one_$ problem_N ,_, if_P there_X was_V a_D +_& present_A in_P the_D String_^ ,_, which_D should_V be_V encoded_V ,_, it_O will_V converted_V to_P a_D space_N ._. So_R here_R is_V my_D class_N :_:
Thanks_N for_P a_D good_A solution_N !_. The_D others_N look_V totally_R ..._: inefficient_A ,_, IMO_^ ._. Perhaps_R it'd_R be_V even_R better_R without_P the_D BitSet_N on_P today's_N hardware_N ._. Or_& two_$ hard-coded_A longs_N for_P 0_$ ..._: 127_$ ._.
`_`` URLEncoder.encode_G (_G "_`` +_& "_'' ,_, "_'' UTF-8_N ")_N ;_: `_`` yields_V `"_^ %2B_^ "`_^ ,_, which_D is_V the_D proper_A URL_N encoding_N ,_, so_R your_D solution_N is_V ,_, my_D apologies_N ,_, totally_R unnecessary_A ._. Why_R on_P earth_N `_`` URLEncoder.encode_N `_`` doesn't_N turn_N spaces_N into_P `_`` %20_$ `_`` is_V beyond_P me_O ._.
I_O have_V found_V PercentEscaper_^ class_N from_P google-http-java-client_A library_N ,_, that_D can_V be_V used_V to_P implement_V encodeURIComponent_N quite_R easily_R ._. PercentEscaper_N from_P google-http-java-client_A javadoc_N google-http-java-client_A home_N
How_R to_P create_V a_D photo_A gallery_N with_P slideshow_N effect_N of_P the_D images_N placed_V in_P server_N folder_N using_V jsp_N /_: servlet_N /_: javascript_N
I_O need_V to_P create_V slideshow_N of_P the_D images_N which_D are_V in_P server.These_N images_N would_V be_V changing_V as_P the_D user_N uploads_V ._. I_O need_V this_D using_V jsp_N /_: javascript_N /_: servlet_N /_: ajax_N
Please_V explain_V your_D problem_N a_D little_R more_R detailed_A ._. Is_V it_O with_P the_D slide_N show_N at_P all_D or_& don't_V you_O how_R to_P handle_V the_D uploads_N ?_. Should_V a_D open_A /_: running_V (_N inside_P a_D browser_N )_$ slide_N show_N change_N when_R user_N uploads_V take_V place_N ?_.
Generally_R when_R the_D page_N loads_N ,_, the_D slideshow_N code_N already_R has_V a_D list_N of_P the_D available_A files_N ._. It_O would_V need_V to_P use_V AJAX_^ to_P poll_V the_D server_N periodically_R to_P determine_V if_P this_D list_N has_V changed_V (_$ a_D user_N had_V uploaded_V a_D file_N )_N ._. Typically_R you'd_A just_R replace_V the_D array_N or_& string_N holding_V the_D list_N of_P files_N in_P the_D AJAX_^ call_N ._. The_D server-side_A code_N just_R needs_V to_P supply_V the_D list_N of_P files_N in_P a_D folder_N in_P a_D format_N the_D slideshow_N expects_V ._. Here's_V a_D collection_N of_P different_A slideshows_N you_O can_V grab_V and_& modify_V for_P this_D purpose_N ._.
Read_^ Browser_^ /_: Client_^ time_N from_P Http_^ Servlet_^ request_N header_N
Is_V it_O possible_A to_P read_V the_D Browser_^ (_^ Client_^ machine_N )_$ time_N when_R a_D request_N is_V made_V to_P the_D servlet_N ?_.
I_O don't_V believe_V so_R ._. Unfortunately_R the_D HTTP_N Date_N header_N is_V only_R sent_V for_P PUT_N or_& POST_N messages_N ,_, and_& even_R then_R it's_V optional_A :_: Clients_N SHOULD_V only_R send_V a_D Date_^ header_N field_N in_P messages_N that_D include_V an_D entity-body_A ,_, as_P in_P the_D case_N of_P the_D PUT_N and_& POST_N requests_N ,_, and_& even_R then_R it_O is_V optional_A ._. A_D client_N without_P a_D clock_N MUST_^ NOT_^ send_V a_D Date_^ header_N field_N in_P a_D request_N ._. If_P you_O have_V control_N of_P the_D client_N ,_, you_O could_V (_V perhaps_R )_$ encode_V it_O as_P a_D separate_A experimental_A HTTP_N header_N ._. Or_& add_V it_O as_P a_D GET_V parameter_N etc_N ._.
You_O can_V use_V javascript_N and_& append_V the_D time_N to_P every_D request_N ._. Provided_V that_D javascript_N is_V enabled_V ,_, you_O can_V add_V the_D following_N to_P your_D links_N :_: You_O can_V do_V something_N similar_A ,_, if_P you_O need_V timezone_N information_N ._. This_D question_N may_V help_V ._.
JAAS_G tomcat_G login_N module_N possible_A method_N to_P pass_V ip_N address_N
I've_N been_V looking_V into_P a_D way_N of_P passing_V the_D client_N ip_N as_R well_R as_P the_D userid_N and_& password_N from_P a_D JAAS_N login_N page_N to_P the_D JAAS_N login_N module_N implementation_N in_P my_D web_N code_N ._. JAAS_N only_R allows_V the_D user_N id_N and_& password_N to_P be_V passed_V to_P the_D login_N module_N ._. My_D idea_N is_V to_P have_V a_D java_N script_N code_N to_P append_V the_D ip_N address_N to_P the_D user_N id_N and_& then_R call_V the_D form_N submit_V ._. I_O just_R don't_N have_V the_D right_A java_N script_N code_N to_P do_V this_D ._. Can_V you_O help_V ?_. The_D web_N page_N has_V two_$ input_N fields_N ,_, j_userid_N and_& j_password_N ,_, which_D the_D JAAS_^ code_N knows_V to_P look_V it_O ._. So_P what_D javaScript_N code_N can_V I_O use_V to_P add_V the_D ip_N address_N to_P the_D j_userid_N field_N before_P the_D form_N submit_V ._. I_O was_V thinking_V of_P '_G ip-address_A #userid_N '_'' and_& then_R in_P my_D login_N module_N I'd_N take_V the_D ip_N address_N off_P the_D userid_N ._.
Sorry_^ ,_, I_^ don't_^ think_V there_X is_V a_D way_N to_P obtain_V the_D ip_N on_P the_D client_N side_N ,_, in_P plain_A Javascript_^ ._. Testing_V the_D remote_A ip_N on_P the_D server_N side_N is_V probably_R not_R a_D solution_N if_P you_O don't_V control_V the_D infrastructure_N between_P the_D client_N and_& the_D server_N (_N load-balancers_N ,_, proxies_N ..._: )_$ ._. If_P you're_N confident_A the_D remote_A ip_N is_V the_D ip_N of_P the_D client_N ,_, you_O should_V be_V able_A to_P hack_V a_D tomcat_N Valve_N or_& a_D servlet_N filter_N ._.
I_O can_V get_V the_D ip_N address_N onto_P the_D page_N in_P a_D hidden_A field_N using_V a_D JSF_N bean_N ._. The_D problem_N is_V passing_V it_O through_P to_P the_D JAAS_N login_N module_N ._.
I_O created_V these_D two_$ javaScript_N functions_N ._. addIpSubmit_N is_V called_V from_P a_D login_N button_N ._. You_O can_V see_V I_O have_V a_D bean_N to_P put_V the_D ip_N address_N into_P a_D hidden_A field_N ._. The_D j_username_G JAAS_G field_N is_V also_R hidden_V and_& is_V filled_V in_R by_P the_D addIpSubmit()_N function_N ._. It_O mungs_V the_D ip_N to_P the_D user_N name_N and_& calls_V the_D JAAS_^ submit_V functions_N ._. Then_R in_P the_D login_N module_N I_O get_V the_D ip_N address_N and_& user_N name_V out_R ._. Just_R remember_V that_P the_D FacesContext.getCurrentInstance()_N ._. getExternalContext()_N ._. getRemoteUser()_N now_R has_V the_D ip_G #userid_G in_P it_O ._.
How_R to_P get_V custom_N value_N from_P text_N field_N in_P JSP_^ ?_.
I'm_N working_V in_P a_D very_R simple_A and_& small_A web_N application_N ,_, it_O is_V a_D jsp_N that_D handles_V a_D shopping_N cart_N ._. What_O I_O do_V at_P this_D point_N is_V to_P iterate_V through_P all_X the_D products_N that_D are_V stored_V in_P the_D car_N and_& add_V them_O one_$ by_P one_$ to_P the_D jsp_N with_P each_D iteration_N ._. This_D is_V the_D code_N that_D adds_V a_D row_N to_P the_D jsp_N in_P each_D iteration_N :_: As_P you_O can_V see_V I_O add_V to_P the_D end_N of_P each_D row_N a_D submit_V type_N control_N with_P a_D custom_N method_N for_P handling_V Click_V events_N ,_, the_D use_N of_P this_D control_N is_V to_P remove_V from_P the_D car_N the_D respective_A product_N ._. The_D problem_N that_P I_O have_V is_V that_P when_R I_O click_V in_P the_D delete_V button_N of_P a_D product_N ,_, the_D id_N that_D is_V passed_V to_P the_D CustomSubmit_N (_N ..._: )_N method_N is_V not_R the_D id_N of_P the_D product_N that_P I'm_N trying_V to_P remove_V but_& the_D id_N of_P the_D last_A product_N added_V to_P the_D jsp_N ._. So_R ,_, my_D question_N is_V how_R can_V I_O get_V the_D correct_A id_N from_P the_D item_N that_P I'm_N trying_V to_P remove_V ?_.
How_R are_V you_O iterating_V over_P each_D item_N in_P the_D cart_N ?_.
I_O got_V them_O in_P an_D ArrayList()_N that_D is_V contained_V in_P a_D Java_^ Bean_^ that_D is_V located_A in_P the_D session_N scope_N ._.
The_D way_N i_G use_V to_P do_V it_O is_V as_P follows_V :_: Replace_V add_V the_D deleteIt_N javascript_N function_N ,_, in_P the_D function_N you_O fill_V a_D hidden_A input_N field_N with_P the_D id_N ._. Then_R submit_V the_D page_N and_& the_D correct_A id_N gets_V passed_V to_P your_D page_N Little_^ sidenote_V its_D always_R prudent_A to_P escape_V all_D your_D Strings_^ maybe_R like_P
Thanks_N for_P the_D sidenote_N ,_, I_O will_V do_V it_O ,_, now_R about_P what_O you_O suggest_V ,_, I_O understand_V the_D javascript_N function_N part_N ,_, but_& how_R do_V you_O do_V to_P get_V '_G yourid_N '_'' variable_A ,_, because_P I{m_N adding_V rows_N dynamically_R ,_, and_& I_O don_V t_N know_V which_D is_V the_D id_N from_P the_D product_N that_P the_D user_N wants_V to_P remove_V ,_, the_D id_N is_V contained_V in_P a_D column_N of_P the_D row_N ,_, but_& I_O don't_V know_V how_R to_P get_V it_O ..._:
I_O assume_V your_D cart_N is_V a_D list_N of_P objects_N ,_, each_D having_V the_D attributes_N id_N and_& quantity_N ._. So_P I_O would_V expect_V you_O code_V to_P look_V something_N like_P this_D (_N noting_V Peter's_A answer_N about_P using_V a_D '_G button_N ')_N :_: I'm_N not_R entirely_R sure_A what_O you_O are_V trying_V to_P do_V with_P the_D '_G request_N '_'' parameter_N in_P your_D original_A code_N but_& if_P this_D is_V the_D HTTP_^ request_N all_D you_O will_V get_V when_R you_O try_V to_P write_V it_O to_P the_D JSP_^ is_V the_D result_N of_P the_D request.toString_N method_N ._.
well_R ,_, actually_R you_O can_V just_R ignore_V the_D request_N parameter_N ,_, is_V not_R important_A at_P this_D moment_N ;_: and_& it_O is_V just_R as_P you_O say_V ,_, that_D is_V exactly_R how_R I'm_N working_V ,_, but_& the_D problem_N is_V that_P when_R the_D event_N is_V fired_V and_& this_D code_N "_'' CustomSubmit_^ (_^ '_G <_A %=_$ cartItem.id_N %_N >_A ')"_$ is_V executed_V ,_, I_O don't_V get_V the_D "_`` cartItem.id_N "_'' from_P the_D item_N that_P I_O want_V to_P remove_V ,_, I_O get_V the_D "_`` cartItem.id_N "_'' from_P the_D last_A item_N added_V to_P the_D jsp_N ._. One_$ solution_N could_V be_V try_V to_P get_V the_D "_`` cartItem_N "_'' from_P the_D list_N but_& in_P order_N to_P do_V so_R I_O will_V need_V to_P know_V the_D row_N number_N of_P the_D item_N that_P I_O want_V to_P delete_V and_& I_O don't_V know_V either_& how_R to_P get_V the_D row_N number_N
When_R you_O look_V at_P the_D page_N source_N in_P the_D browser_N does_V each_D row_N in_P the_D table_N have_V the_D same_A id_N ?_. If_P so_R the_D problem_N isn't_N with_P this_D code_N ,_, it's_N with_P either_& the_D iteration_N logic_N or_& the_D cart_N item_N object_N ._. If_P not_R then_R there's_V something_N up_R with_P your_D JavaScript_^ and_& it's_^ time_N to_P crack_V out_R Firebug_^ and_& take_V a_D look_N at_P what's_N going_V on_R ._.
javascript_N injection_N in_P wicket_N
I_O have_V J2EE_N project_N which_D uses_V wicket_N framework_N ._. I_O want_V to_P know_V how_R can_V I_O prevent_V from_P javascript_N injection_N in_P wicket_N ?_.
Although_P I_^ didn't_^ think_V the_D way_N in_P which_D you_O formulated_V your_D question_N deserved_V it_O (_V no_D details_N ,_, no_D background_N ,_, no_D example_N problem_N statement_N ,_, implied_A susceptability_N to_P injection_N ,_, etc_G )_G ,_, I_O dug_V up_R some_D details_N from_P the_D Excellent_^ Wicket_^ in_P Action_^ :_: Wicket_^ is_V secure_A by_P default_N You_O never_R need_V to_P worry_V about_P pimple-faced_A 14-year-olds_N trying_V to_P hack_V your_D web_N application_N ._. To_P do_V so_R ,_, they_O would_V have_V to_P hijack_V the_D session_N and_& then_R guess_V the_D right_A page_N identifiers_N and_& version_N numbers_N ,_, which_D would_V be_V relative_A to_P the_D session_N and_& the_D relevant_A component_N paths_N ._. You_O d_N have_V to_P be_V a_D persistent_A hacker_N to_P pull_V that_P off_P ._. You_O can_V make_V your_D Wicket_^ application_N even_R more_R secure_A from_P the_D default_N by_P encrypting_V requests_N with_P ,_, for_P instance_N ,_, CryptedUrlWebRequestCodingStrategy_^ ._.
All_D Wicket_^ components_N escape_V strings_N by_P default_N (_N by_P Labels_^ ,_, TextFields_^ ,_, etc_G ._. )_N ,_, which_D avoids_V most_R common_A issues_N related_V to_P javascript_N injection_N ._. You_O should_V take_V appropriate_A care_N ,_, though_R ,_, if_P you_O disable_V this_D behavior_N (_G component.setEscapeModelStrings_G (_G false_A )_G )_G for_P some_D reason_N ,_, or_& create_V custom-rendered_A components_N (_V if_P you_O write_V the_D markup_N directly_R to_P the_D output_N )_N ._.
render_V complex_A org_N chart_N similar_A javascript_N /_: flash_N /_: java_A graphic_A library_N
i_G am_R looking_V for_P javascript_N /_: flash_N /_: java_A graphic_A lib_N ._. that_P able_A to_P render_V nicely_R a_D very_R complex_A relationship_N where_R one_$ node_N is_V relate_V to_P another_D node_N etc_N ._. for_P example_N a_D -->_P b_N --->_$ c_N b_N -->_P d_N ,_, e_G ,_, f_G any_D recommandation_N library_N ?_.
So_R essentially_R you_O are_V looking_V for_P recommendations_N for_P a_D graph_N visualization_N library_N for_P Javascript_^ ,_, Flash_^ ,_, or_& Java_^ ?_.
yes.i_N am_V looking_V for_P graph_N visualization_N lib_N
what_O a_D cooincidence_N ,_, I_O was_V just_R looking_V into_P this_D myself_O ._. I_O found_V this_D :_: http://www.ryandesign.com/canviz_N http://code.google.com/p/canviz_N /_:
Prefuse_^ is_V very_R cool_A and_& Java_^ based_V ._. Demo_^ here_R ._.
This_D is_V the_D one_$ I_N use_N for_P Organizational_A chart_N http://code.google.com/apis/visualization/documentation/gallery/orgchart.html_N
The_D Graphviz_^ open_A source_N graph_N visualization_N software_N is_V widely_R used_V to_P render_V graphs_N ,_, and_& jGraphviz_N is_V a_D binding_N for_P java_N ._.
focusing_V the_D text_N field_N
How_R to_P focus_V the_D calender_N after_P selecting_V the_D date_N from_P calender_G .._G I_O am_V selecting_V the_D date_N and_& calender_N is_V also_R closing_V but_& after_P that_D focus_N is_V missing_V ._. Please_! help_V me_O on_P this_D issue_N .._N Regards_V Sk_N
which_D calender_N ?_.
java_N or_& javascript_N ?_.
It_O seriously_R depends_V on_P the_D calendar_N implementation_N you_O use_V ._. If_P the_D calendar_N is_V drown_V by_P Java_^ tag_N try_V to_P seek_V the_D onchange_A attribute_N and_& set_V it_O to_P :_:
This_D appears_V to_P be_V JavaScript_^ code_N ,_, not_R Java_^ ._.
Do_V Applet_G JSObject_G javascript_N calls_N serialize_V ?_.
Do_V applet_N javascript_N calls_N serialize_V in_P any_D proper_A way_N ?_. I'm_N considering_V implementing_V a_D model_N in_P which_D two_$ threads_N send_V off_R javascript_N commands_N ._. One_$ responds_V to_P requests_N from_P the_D browser_N (_G js_G )_N ,_, and_& the_D other_A hits_N the_D browser_N periodically_R ._. My_D question_N is_V this_D :_: what_O happens_V if_P these_D two_$ javascript_N requests_N collide_V ?_. I'm_N worried_V about_P concurrent_A javascript_N requests_N ,_, as_P intuition_N leads_V me_O to_P believe_V that_P one_$ of_P the_D calls_N will_V fail_V nondeterministically_R ._.
Javascript_^ is_V single-threaded_A ._. Only_R one_$ block_N of_P code_N can_V be_V executing_V at_P any_D given_V time_N ;_: any_D other_A event_N ,_, method_N ,_, etc_G ._. that_P fires_N will_V wait_V until_P the_D currently_R executing_V code_N terminates_V ._. Google_^ Chrome's_^ javascript_N engine_N may_V be_V an_D exception_N -_: I_O recall_V them_O mentioning_V some_D kind_N of_P multi-threaded_A javascript_N support_N in_P their_D features_N ,_, but_& I'm_N unsure_A how_R it_O works_V ._. In_P IE_N 6_$ ,_, the_D browser_N UI_^ will_V actually_R become_V unresponsive_A while_P JS_N code_N is_V running_V (_$ if_P you_O stop_V at_P a_D breakpoint_N with_P keyword_N '_'' debugger_N '_'' ,_, or_& have_V IE_N set_V to_P debug_V ,_, for_P example_N )_N ._.
Serialize_V ?_. Do_V you_O mean_V synchronize_V ?_. JSObject_N works_V by_P passing_V primitives_N to_P a_D single_A JSContext_N JNI_^ NPAPI_^ wrapper_N which_D acts_V on_P the_D DOM_^ in_P the_D underlying_A browser_N implementation_N ._. Are_V you_O referring_V to_P the_D passing_N of_P primitives_N through_P JNI_^ ?_. I_O don't_V know_V much_R about_P how_R chrome's_^ JS_^ engine_N works_V ,_, but_& I_O assume_V that_P since_P the_D liveconnect_A NPAPI_N in_P chrome_N is_V the_D same_A as_P the_D others_N ,_, the_D ability_N to_P write_V multithreaded_A javascript_N has_V nothing_N to_P do_V with_P multithreaded_A JSObject_N access_N ._. The_D affected_V code_N extends_V the_D same_A abstract_A JSObject_N class_N that_P firefox_N uses_V ._. There_X are_V several_A implementations_N of_P JSObject_N /_: liveconnect_N --_: a_D few_A for_P netscape_N /_: firefox_N and_& one_$ for_P ie_G (_G ocx_G )_G ._. All_D behave_V differently_R as_R far_R as_P multiple_A threads_N go_V ._. DOM_N access_N isn't_N threadsafe_N in_P general_A as_R far_R as_P liveconnect_N is_V concerned_V ._. So_R ,_, officially_R ,_, multiple_A threads_N accessing_V the_D DOM_^ is_V undefined_A ._. If_P you_O manage_V to_P actually_R access_V the_D DOM_N through_P something_N other_A than_P code_N scoped_V in_P DOMService.run()_N ,_, you'll_N get_V crazy_A deadlocks_N and_& race_N conditions_N ._. So_R ,_, basically_R ,_, you_O need_V all_D of_P your_D java_N threads_N to_P post_V all_D DOMActions_N to_P your_D DOM_^ access_N dispatch_V thread_N only_R ._.
Display_V a_D javascript_N /_: css_N tooltip_N within_P a_D @For_N loop_N with_P Tapestry_N 4.0_$ ._. 1_$
I'm_N not_R at_P all_D familiar_A with_P Tapestry_N 4.0_$ ._. 1_$ and_& need_V to_P update_V a_D legacy_N application_N to_P display_V a_D formatted_A tooltip_N for_P a_D few_A links_N within_P a_D @For_N loop_N ._. What_O is_V the_D easiest_A /_: best_A way_N to_P go_V about_P accomplishing_V this_D ?_. Should_V I_O be_V using_V the_D @Script_N component_N or_& is_V there_R a_D simpler_A way_N ?_. By_P the_D way_N ,_, upgrading_V to_P a_D newer_A version_N of_P Tapestry_^ is_V out_P of_P the_D question_N ._. Unfortunate_A ,_, yes_! ,_, but_& out_P of_P my_D control_N ._. Thanks_N in_P advance_N for_P your_D help_N ._. Carl_^
Maybe_R the_D better_A question_N would_V be_V :_: How_R do_V I_O pass_V a_D value_N to_P an_D inline_A function_N call_V ?_. I've_N written_V a_D small_A function_N to_P show_V the_D tip_N ,_, but_& I_O need_V to_P pass_V the_D message_N to_P it_O like_P so_R :_: AdUnit_^ Predicate_^ So_R ,_, how_R do_V I_O pass_V the_D message_N in_P ?_.
After_P posting_V my_D question_N ,_, I_O managed_V to_P come_V up_R with_P a_D rather_R hacky_A (_G crappy_G ?_. )_$ solution_N ._. Can't_N say_V it's_N my_D proudest_A moment_N as_P a_D engineer_N ,_, but_& it_O works_V ._. *_G *_G Some_D code_N omitted_V to_P protect_V the_D innocent_A ._.
IIRC_^ ,_, using_V the_D dom_N to_P update_V the_D structure_N is_V preferred_V to_P a_D straight_A document.write_N (_N ..._: )_^ CMA_^ :_: There_X was_V something_N along_P the_D lines_N of_P DOM_N /_: document.write_N posted_V here_R on_P SO_N a_D while_N ago_R
Use_V the_D @Any_N component_N ._. For_P your_D example_N ,_, substitute_A MYTOOLTIP_N with_P whatever_D object_N is_V holding_V the_D message_N :_:
How_R can_V I_O define_V static_A properties_N for_P Rhino's_^ ScriptableObject_^ ?_.
Rhino_N provides_V Scriptable_A interface_N and_& ScriptableObject_N helper_N class_N to_P implement_V a_D javascript_N object_N backed_V by_P a_D java_N object_N ._. When_R ScriptableObject_^ is_V constructed_V ,_, its_D methods_N with_P names_N starting_V with_P jsFunction____N ,_, jsStaticFunction____N ,_, jsGet____N ,_, jsSet____N ,_, jsConstructor_N are_V automatically_R defined_V for_P the_D javascript_N object_N ._. This_D way_N you_O can_V defined_V funations_N ,_, static_A frunctions_N ,_, instance_N properties_N (_$ by_P its_D accessors_N )_N ,_, and_& constructor_N ._. The_D question_N is_V how_R to_P define_V static_A properties_N ?_. By_P static_A properties_N I_O mean_V properties_N on_P the_D constructor_N ,_, like_P static_A methods_N are_V methods_N on_P the_D constructor_N ._. The_D only_A way_N I_O see_V for_P now_R is_V to_P use_V finishInit_N method_N ,_, and_& define_V static_A properties_N manually_R ._. But_& what_O is_V the_D right_A way_N ?_.
Currently_R I_O have_V something_N like_P this_D on_P my_D mind_N :_: Are_V there_R other_A ways_N ?_. And_& is_V this_D way_N correct_V ?_. IMPORTANT_^ :_: Note_V that_D constructor_N for_P MyObject_^ is_V not_R yet_R defined_V in_P scope_N ,_, when_R finishInit_N is_V called_V ._. In_P order_N to_P define_V static_A properties_N ,_, which_D are_V instances_N of_P MyObject_^ ,_, use_V the_D following_A syntax_N :_:
md5_N hash_V for_P password_N string_N in_P GWT_N /_: GWT-Ext_N ?_.
I_O am_V currently_R trying_V to_P modify_V an_D existing_V GWT-Ext_N application_N ,_, that_D is_V using_V plain_A text_N passwords_N in_P its_D MySql_^ database_N ._. My_D plan_N was_V to_P use_V md5_N hashes_N ,_, as_P the_D existing_V passwords_N can_V be_V easily_R altered_V with_P the_D MySql_N function_N and_& I_O was_V expecting_V to_P find_V an_D easy_A solution_N for_P the_D GWT-Ext_N side_N as_R well_R ._. But_& as_P I_O found_V out_R ,_, java.security_N is_V not_R supported_V by_P GWT_N and_& there_X doesn't_N seem_V to_P be_V any_D other_A implementation_N that_D can_V be_V used_V to_P change_V the_D password_N string_N to_P a_D md5_N hash_N on_P client_N side_N ._. Only_R "_`` solution_N "_'' I_O found_V so_R far_R ,_, is_V to_P re_R implement_V a_D md5_N method_N via_P JSNI_N as_P described_V here_R :_: http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ad09475a9944c9f8_N There_X is_V an_D existing_V user_N extension_N for_P Ext-JS_N ,_, but_& I_O couldn't_V find_V anything_N for_P GWT-Ext_N :_: http://extjs.com/forum/showthread.php?p=133516_^ Does_^ anybody_N know_V a_D more_R elegant_A /_: simple_A way_N to_P solve_V this_D problem_N ?_. Maybe_R I_O should_V use_V something_N else_R instead_R of_P md5_N to_P make_V sure_A the_D passwords_N are_V encrypted_V ?_. Cheers_^ Frank_^
Personally_R ,_, I_O would_V say_V you're_N doing_V it_O wrong_A ._. I_O wouldn't_V hash_V a_D password_N on_P the_D client_N side_N (_N which_D is_V what_O GWT_^ is_V )_^ ._. If_P you_O hash_V your_D password_N ,_, you_O will_V undoubtedly_R want_V to_P salt_N it_O ,_, otherwise_R you_O will_V be_V susceptible_A to_P rainbow_N attacks_N ._. If_P you_O hash_V +_& salt_N it_O on_P the_D client_N side_N ,_, your_D salt_N will_V be_V accessible_A to_P your_D users_N ._. If_P I_O were_V you_O ,_, I_O would_V hash_V +_& salt_N your_D password_N on_P the_D server_N side_N ._. This_D will_V allow_V you_O to_P use_V your_D standard_A Java_^ code_N to_P perform_V your_D MD5_N hash_N ._. My_D 2_$ cents_N ._. -JP_N
Its_D not_R a_D bad_A scheme_N if_P he_O does_V something_N like_P cram-md5_N on_P the_D client_N side_N ,_, where_R the_D client_N computes_V a_D hmac_G (_G md5_N hash_N plus_& a_D nonce_A salt_N )_N and_& sends_V it_O to_P the_D server_N ._. The_D down_A side_N is_V that_P the_D server_N needs_V clear_A text_N password_N to_P check_V the_D hmac_N ._.
good_A point_N about_P the_D rainbow_N attacks_N ,_, didn't_N knew_V about_P this_D before_P ._. I_O also_R solved_V it_O by_P doing_V the_D encryption_N on_P the_D server_N side_N ,_, but_& the_D idea_N was_V ,_, that_P I_O wanted_V to_P encrypt_V the_D password_N ,_, before_P sending_V it_O to_P the_D server_N ,_, as_P we_O currently_R only_R use_V http_N and_& no_D https_N ._.
GWT_N is_V client-side_A and_& server_N side_N ._. Other_A than_P that_D ,_, the_D post_N is_V good_A advice_N ._. Don't_N hash_V it_O on_P the_D client_N side_N ._. Have_V a_D look_N at_P http://www.owasp.org/index.php/Hashing_Java_N ._.
Another_D idea_N that_D may_V fit_V your_D need_N is_V something_N called_V zero_$ knowledge_N auth_N ._. (_G Ie_G ._. the_D server_N never_R needs_V to_P know_V the_D user's_A plain_A text_N password_N ._. )_N Basically_R ,_, when_R setting_V the_D initial_A password_N ,_, the_D client_N hashes_V the_D user's_A password_N N_N times_N (_V where_R N_N is_V a_D largish_A number_N like_P 1000_$ )_N ,_, and_& then_R sends_V that_P final_A hash_N to_P the_D server_N along_P with_P N_N ._. The_D server_N stores_V the_D hash_N and_& N_N ._. Later_R ,_, when_R the_D user_N wants_V to_P authenticate_V ,_, the_D server_N tells_V the_D client_N N-1_N ,_, and_& the_D client_N hashes_V the_D password_N the_D user_N types_N N-1_N times_N and_& sends_V that_P to_P the_D server_N ._. The_D server_N does_V 1_$ more_A hash_N on_P the_D received_A hash_N ,_, and_& (_N hopefully_R )_^ gets_V the_D stored_V hash_N ._. The_D server_N then_R stores_V the_D N-1_N hash_N and_& N-1_N number_N ._. Each_D time_N the_D user_N authenticates_V ,_, the_D server_N decrements_V the_D stored_V N_N and_& saves_V the_D previous_A hash_N ._. When_R N_N gets_V down_R to_P 0_$ ,_, the_D user_N must_V choose_V and_& set_V a_D new_A password_N ._. The_D server_N must_V ensure_V that_P it_O never_R asks_V for_P the_D same_A iteration_N ,_, otherwise_R it_O is_V vulnerable_A to_P a_D replay_N ._. You_O can't_V really_R enforce_V that_D condition_N from_P the_D client_N side_N because_P the_D client_N (_N especially_R a_D browser_N )_G can't_G reliably_R keep_V track_N of_P the_D last_A N_N ._.
Very_R interesting_A idea_N ,_, and_& never_R thought_V of_P that_D before_P ._. Doesn't_N really_R fit_V in_P the_D current_A solution_N ,_, but_& I_O will_V keep_V it_O in_P mind_N for_P future_A reference_N ,_, thanks_N :-)_N
Interesting_A idea_N so_P I_O spent_V some_D time_N thinking_V about_P it_O ,_, but_& it_O is_V vulnerable_A to_P a_D man-in-the-middle_A attack_N ._. On_P an_D authentication_N request_N ,_, the_D server_N sends_V some_D number_N M_N ._. The_D attacker_N sends_V (_$ M-1_N )_N to_P the_D client_N ,_, and_& receives_V hash_G (_G M-1_N )_N back_R ._. The_D attacker_N tries_V to_P authenticate_V again_R ,_, receives_V challenge_N (_N M-1_N )_N from_P the_D server_N and_& responds_V with_P hash_G (_G M-1_N )_N ._. The_D attacker_N is_V now_R authenticated_V ._.
yes_R ,_, that_D does_V sound_V like_P an_D issue_N ._. My_D first_A thought_N would_V be_V to_P require_V the_D server_N to_P not_R reuse_V M_N after_P issuing_V it_O during_P a_D challenge_N to_P the_D client_N ._. However_R ,_, the_D larger_A issue_N remains_V that_P Mallory_^ could_V tell_V the_D client_N M-100_N ,_, collect_V the_D hash_G (_G M-100_N )_N from_P the_D client_N ,_, and_& then_R login_V up_P to_P 100_$ times_N with_P the_D intercepted_V hash_N ._. I'll_N have_V to_P go_V see_V if_P the_D project_N that_P I_O first_R encountered_V this_D in_P found_V the_D same_A issues_N and_& dealt_V with_P it_O or_& abandoned_A zero_N knowledge_N auth_N ._.
I_O think_V you're_N always_R going_V to_P be_V vulnerable_A to_P a_D man_N in_P the_D middle_A attack_N ._. Keyloggers_^ too_R ._. Also_R drunken_A confessions_N of_P passwords_N ._. We_O can_V only_R raise_V the_D bar_N so_R far_R with_P reasonable_A coding_N efforts_N ._.
You_O can_V use_V gwt-crypto_A to_P generate_V SHA-1_N hashes_V on_P the_D client_N side_N using_V :_:
You_O should_V never_R use_V an_D md5_N or_& other_A hash_A functions_N for_P password_N encryption_N ._. See_^ http://codahale.com/how-to-safely-store-a-password_^ /_:
TextMate_N equivalent_A to_P gVim_G Ctrl+P_G
To_P auto_N complete_V a_D previously_R written_V string_N ._. Is_V it_O possible_A ?_. EDIT_G I'm_G editing_N javascript_N /_: java_N if_P that_D matters_N ._.
Yes_^ -_: the_D autocomplete_N key_N is_V '_G escape_N '_'' by_P default_N ._. See_V the_D TextMate_^ manual_N for_P further_A information_N ._.
Thank_V you_O !!!_V it_O was_V driving_V me_O crazy_A !!!_G :)_G About_P the_D manual_N ..._: mhhhh_N ..._: mmhh_A well_N .._N Beside_P having_V to_P write_V my_D own_A product_N user_N manual_G (_G which_D I_O hate_V and_& usually_R I_O avoid_V )_N do_V I_O have_V to_P read_V others_N them_O too_R ???_G :)_G :)_G :)_G ;)_G Thanks_N again_R
@Oscar_N -_: absolutely_R ._. RTFM_N ,_, man_N ._.
Also_R ,_, Google_^ "_`` Textmate_N tips_N "_'' -_: I_O seem_V to_P pick_V up_R something_N new_A in_P every_D blogpost_N I_O read_V about_P TM_N ._.
Thanks_N for_P the_D hint_N ._. I_O didn't_V know_V about_P http://textmatetips.com_^ ._.
Has_V anyone_N used_V GWT_^ and_& can_V say_V it_O really_R delivers_V what_O it_O promises_V ?_.
I_O am_V a_D long_A time_N Java_^ web_N developer_N and_& as_P most_A web_N developers_N I_O have_V used_V quite_R a_D lot_N of_P JavaScript_^ ._. Even_R though_P I_^ don't_^ hate_V JavaScript_^ as_P many_A other_A Java_^ developers_N ,_, I_O am_V still_R aware_A of_P its_D faults_N ._. GWT_^ is_V a_D way_N to_P write_V javascript_N using_V java_N ._. Since_P I_O know_V both_D languages_N for_P a_D long_A time_N I_O am_V pretty_R skeptical_A about_P this_D claim_N ._. I_O mean_V ,_, I_O having_V a_D hard_A time_N believing_V that_P you_O can_V really_R create_V full_A Java_^ dynamic_N web_N applications_N with_P a_D rich_A GUI_N using_V just_R GWT_^ ._. That_D is_V why_R I_O am_V asking_V here_R if_P anyone_N had_V the_D chance_N to_P work_V with_P GWT_N on_P a_D large_A scale_N project_N ._. If_P so_R ,_, I_O would_V really_R like_V to_P hear_V what_O they_O think_V of_P it_O ._.
Why_R the_D close_N ?_. This_D looks_V like_P an_D interesting_A question_N to_P me_O .._N
Some_D people_N have_V the_D bad_A habit_N of_P clicking_V '_G close_N '_'' if_P they_O just_R don't_V like_P the_D question_N ._. I_O don't_V think_V this_D is_V subjetive_A nor_& argumentative_A at_P all_D
Did_V you_O end_V up_R using_V GWT_^ ?_. Did_V it_O deliver_V ?_.
Hi_^ Dave_^ ,_, No_^ ,_, finally_R I_O decided_V not_R using_V it_O ._. My_D final_A conclusion_N was_V that_P GWT_^ seems_V like_P a_D really_R good_A product_N and_& the_D people_N who_O use_V it_O mostly_R love_V it_O ._. Nevertheless_R ,_, I_O feel_V like_P since_P GWT_^ has_V a_D totally_R different_A way_N of_P doing_V things_N ,_, it_O is_V a_D product_N that_D once_R you_O start_V using_V it_O ,_, you_O commit_V for_P life_N ._. And_& that_D is_V something_N I_O really_R stay_V away_R from_P ._. Thanks_N for_P asking_V ._.
I've_N looked_V at_P it_O briefly_R for_P an_D older_A application_N at_P one_$ of_P my_D jobs_N ,_, and_& I_O must_V admit_V that_P it_O was_V very_R impressive_A ._. All_X the_D code_N was_V written_V in_P Java_^ ,_, and_& the_D javascript_N was_V built_V beautifully_R ._. It_O had_V AJAX_^ ,_, dynamic_A pages_N ,_, the_D works_N ._. There_X are_V plugins_N for_P it_O as_R well_R ,_, such_A as_P the_D Ext_N GWT_N framework_N ._. It's_N definitely_R worth_A looking_V into_P and_& trying_V out_R ,_, but_& you_O may_V find_V that_P the_D development_N cycle_N doesn't_N "_`` feel_N "_'' right_N ,_, so_P you_O might_V opt_V to_P use_V regular_A JavaScript_^ ._.
good_A point_N about_P the_D dev_A environment_N "_'' feel_N ._. "_'' GWT_^ is_V definitely_R only_R for_P those_D that_D enjoy_V /_: tolerate_V the_D constraints_N of_P a_D language_N like_P Java_^ ._.
As_P with_P any_D tool_N ,_, it_O needs_V to_P be_V used_V properly_R ._. One_$ can_V wield_V a_D hammer_N skillfully_R and_& build_V something_N nice_A ,_, or_& just_R wave_V it_O around_R at_P stuff_N and_& do_V more_A harm_N than_P good_A ._. Google_^ Wave_^ ,_, I_O think_V ,_, has_V become_V the_D prototype_N of_P "_`` what's_G possible_A "_'' with_P GWT_N ._. It's_N still_R rather_R hard_A to_P find_V good_A GWT_N design_N patterns_N because_P the_D technology_N is_V too_R new_A ,_, so_P that_D can_V harm_V efforts_N to_P develop_V a_D very_R rich_A ,_, large-scale_A web_N app_N in_P GWT_^ ._. Before_P beginning_V such_X a_D project_N ,_, I_O would_V recommend_V looking_V at_P examples_N of_P the_D model-view-presenter_A (_N MVP_N )_N pattern_N and_& be_V sure_A to_P use_V it_O ,_, or_& something_N like_P it_O ,_, as_P a_D foundation_N for_P the_D control_N flow_N of_P your_D web_N app_N ._. One_$ nice_A thing_N about_P GWT_^ ,_, and_& writing_V your_D code_N in_P Java_^ ,_, is_V that_P the_D high_A degree_N of_P abstraction_N and_& decoupling_N necessary_A for_P a_D clean_A MVP_N implementation_N is_V pretty_R easy_A (_N thanks_N to_P the_D compiler_G )_G ._.
I've_N written_V fairly_R large_A sized_V app_N in_P GWT_^ ,_, and_& i_G have_V to_P say_V that_D i'm_N even_R more_R impressed_A by_P GWT_N than_P i_G was_V when_R the_D project_N started_V ._. My_D general_A '_'' feel_N '_'' of_P the_D platform_N is_V that_P things_N are_V really_R well_R thought_V out_R ,_, and_& they_O don't_V do_V things_N unless_P they_O can_V do_V it_O well_R ,_, and_& can_V do_V it_O well_R on_P all_D browsers_G (_G IE_N users_N are_V still_R your_D users_N !_. )_^ Now_^ ,_, keep_V in_P mind_N that_P what_O GWT_^ really_R excels_V at_P is_V the_D creation_N of_P large_A ,_, highly_R dynamic_A single-page_A style_N webapps_N ._. If_P your_D goal_N is_V to_P enhance_V an_D otherwise_R static_A page_N with_P some_D javascript_N effects_N ,_, than_P GWT_^ is_V massive_A overkill_N (_N gquery_N may_V change_V this_D ,_, but_& i_G don't_G have_V experience_N with_P gquery_G )_G Some_D features_N I_O enjoy_V include_V :_: The_D ability_N to_P share_V code_N between_P the_D server_N side_N and_& the_D client_N side_N ._. (_$ if_P your_D server_N side_N is_V written_V in_P java_N ,_, of_P course_N )_N ._. I_O didn't_V expect_V to_P use_V this_D a_D lot_N of_P this_D at_P first_A ,_, but_& in_P practice_N ,_, it_O can_V really_R save_V a_D lot_N of_P code_N duplication_N ._. However_R ,_, i_G find_V that_P in_P general_A ,_, this_D only_R works_V with_P code_N that_D has_V been_V written_V with_P GWT_N in_P mind_N -_: using_V code_N that_D was_V not_R written_V with_P GWT_N in_P mind_N often_R doesn't_A work_N well_R ._. This_D is_V because_P GWT_^ only_R has_V a_D subset_N of_P the_D classes_N in_P the_D JDK_N ,_, and_& in_P javascript_N ,_, you_O have_V to_P care_V about_P performance_N a_D lot_N more_A than_P you_O do_V on_P the_D server_N side_N ._. It_O aims_V to_P achieve_V the_D fastest_A javascript_N ,_, faster_R than_P you_O would_V ever_R write_V by_P hand_N (_N because_P if_P you_O did_V write_V it_O by_P hand_N ,_, the_D code_N would_V be_V unmaintainable_A )_N ._. The_D unfortunate_A reality_N is_V that_P the_D browsers_N that_P a_D lot_N of_P people_N use_V have_V incredibly_R slow_A javascript_N engines_N ,_, so_P the_D performance_N of_P your_D javascript_N code_N matters_V a_D lot_N ._. Gwt's_G compiler_G is_V a_D real_A optimizing_V compiler_N -_: it_O will_V inline_V methods_N ,_, intern_V all_D your_D strings_N ._. devirtualize_V your_D method_N calls_V when_R possible_A ,_, etc_G ._. Because_P you_O are_V compiling_V for_P each_D browser_N and_& locale_N ,_, the_D compiler_N can_V also_R inline_V browser-specific_A and_& locale-specific_A code_N ._. This_^ Google_^ I_^ /_: O_N presentation_N has_V some_D benchmarks_N a_D few_A slides_N in_P ._. It_O will_V also_R automatically_R sprite_V your_D images_N together_R to_P minimize_V the_D number_N of_P http_A requests_N needed_V ,_, again_R improving_V the_D speed_N of_P your_D site_N ._. GWT_N 2.0_$ will_V allow_V you_O to_P combine_V together_R arbitrary_A files_N ._. most_A of_P the_D files_N created_V by_P gwt_N have_V a_D strong_A hash_N as_P their_D filename_N ,_, which_D lets_V you_O set_V the_D files_N to_P be_V cached_V forever_R ,_, but_& not_R worry_V about_P people_N having_V old_A versions_N if_P the_D file_N changes_V The_D code_N splitting_N in_P GWT_N 2.0_$ is_V very_R impressive_A and_& would_V be_V very_R difficult_A to_P do_V by_P hand_N ._. As_P the_D size_N of_P your_D application_N grows_V ,_, dealing_V with_P the_D size_N of_P your_D javascript_N matters_V more_A and_& more_A ,_, and_& you_O need_V to_P be_V able_A to_P split_V it_O into_P chunks_N You_O are_V coding_V in_P a_D statically_R typed_V language_N ._. I_O know_V some_D people_N prefer_V dynamic_A typing_N ,_, but_& i_G like_P to_P compare_V this_D debate_N to_P the_D emacs_N vs_& vi_G debate_N -_: there_X are_V a_D lot_N of_P smart_A people_N on_P both_D camps_N ,_, and_& arguing_V on_P the_D internet_G isn't_G going_V to_P change_V anyone's_N preference_N You_O get_V to_P use_V a_D lot_N of_P the_D great_A tools_N that_D exist_V in_P the_D java_N ecosystem_N ,_, which_D are_V generally_R a_D lot_N more_R mature_A than_P the_D equivilant_A javascript_N tools_N ._. -_: junit_N ,_, java_N IDEs_N ,_, java_N debuggers_N ,_, refactoring_N ,_, etc_N ._.
Oh_! ,_, and_& i_G guess_V the_D biggest_A downsides_N is_V :_: -_: compile_V time_N -_: hosted_V mode_N is_V great_A ,_, but_& you_O can't_V currently_R use_V it_O for_P the_D system_N non-default_A browser_N -_: GWT_N 2.0_$ and_& out_P of_P process_N hosted_V mode_N should_V fix_V this_D though_P ._. -_: The_D java_N language_N can_V be_V verbose_A at_P times_N ,_, although_P that_D is_V far_R from_P a_D showstopper_N ._. (_G gwt_G for_P scala_N would_V be_V awfully_R nice_A :)_G )_G
If_P you_O have_V familiarity_N with_P both_D JavaScript_^ and_& Java_^ ,_, you_O really_R are_V perfectly_R suited_V to_P get_V the_D most_A out_P of_P GWT_^ ._. What_O many_A people_N do_V not_R realize_V is_V that_P GWT_N is_V pretty_R well_R layered_A and_& that_P you_O can_V really_R decide_V which_D of_P those_D levels_N you_O want_V to_P work_V at_P ._. For_P instance_N ,_, I_O sometimes_R write_V directly_R against_P the_D DOM_^ library_N for_P projects_N ._. Thats_V a_D lot_N like_P writing_V JavaScript_^ code_N except_P you're_N able_A to_P use_V an_D IDE_^ properly_R and_& get_V the_D power_N of_P a_D compiler_N ._. From_P the_D compiler_N I_O get_V static_A type_N checking_N ,_, lots_N of_P good_A compiler_N optimizations_N ,_, and_& (_N actually_R my_D favorite_N for_P maintaining_V code_N )_G debug_G mode_N assertions_N ._. Nobody_N ever_R really_R makes_V much_A of_P the_D ability_N to_P do_V assertions_N ,_, but_& it's_N so_R nice_A to_P be_V able_A to_P compile_V a_D debug_N mode_N that_D does_V expensive_A checks_N to_P tease_V out_R bugs_N and_& then_R turn_V off_R the_D debug_N mode_N and_& have_V the_D code_N just_R evaporate_V ._. (_N Not_R just_R the_D assert_V statements_N go_V away_R ,_, but_& all_X the_D code_N reachable_A from_P the_D asserts_V also_R gets_V compiled_V out_R )_N ._. Other_A times_N ,_, I_O write_V code_N against_P GWT's_^ UI_^ library_N ._. That_D code_N looks_V a_D bit_N like_P swing_N or_& SWT_N code_N so_P it_O is_V most_R comfortable_A to_P pure_A java_N developers_N ._. Working_V at_P this_D level_N ,_, you_O don't_V have_V to_P worry_V as_R much_A about_P the_D DOM_^ and_& it_O is_V usually_R possible_A to_P construct_V an_D application_N without_P writing_V any_D JavaScript_^ ._. You_O do_V occasionally_R run_V into_P a_D bug_N where_R something_N doesn't_N work_N consistently_R on_P a_D particular_A browser_N ._. The_D GWT_^ folks_N consider_V those_D bugs_N ._. You_O can_V kind_N of_P pick_N what_D level_N of_P abstraction_N you_O want_V to_P work_V at_P ._. There_X are_V tradeoffs_N at_P each_D level_N ,_, but_& GWT_^ should_V support_V them_O ._. Also_R ,_, full_A disclosure_N :_: I'm_N the_D dude_N in_P the_D video_N that_P Chi_^ linked_V above_P ,_, so_P you_O might_V say_V I'm_N pretty_R attached_V to_P GWT_^ ._.
I_O have_V created_V two_$ quite_R substantial_A GWT_^ applications_N in_P my_D three_$ years_N at_P Google_^ ._. It_O delivers_V what_O it_O promises_V -_: my_D apps_N were_V far_R more_R interactive_A and_& far_R more_A ajax-y_N than_P my_D knowledge_N of_P Javascript_^ and_& my_D Javascript_^ tooling_N would_V have_V let_V me_O produce_V using_V other_A tools_N ._. I_O also_R found_V the_D apps_N more_R interactive_A and_& more_A fun_N than_P the_D purely_R server-side_A alternatives_N I_O had_V used_V before_P moving_V to_P it_O ._. It_O is_V not_R free_A of_P warts_N ,_, but_& it_O is_V a_D very_R productive_A environment_N to_P do_V the_D kinds_N of_P apps_N I_O do_V ._. And_& do_V watch_V Kelly's_N presentation_N ._. It_O ,_, and_& some_D of_P the_D others_N from_P I_O /_: O_N ,_, give_V a_D really_R clear_A idea_N of_P what_O GWT_^ can_V do_V ._. You_O will_V pretty_R quickly_R get_V a_D good_A idea_N of_P whether_P it_O is_V the_D right_A tool_N for_P the_D task_N you_O are_V envisioning_V ._.
I_O have_V been_V developing_V a_D green_A field_N application_N on_P GWT_^ for_P a_D year_N and_& it_O has_V been_V surprisingly_R pleasant_A ._. The_D subset_N of_P Java_^ used_V in_P GWT_^ causes_V some_D headaches_N but_& nothing_N major_A after_P all_D ._. I_^ didn't_^ have_V too_R much_A JavaScript_^ knowledge_N when_R I_O joined_V the_D project_N but_& I_O think_V that_D was_V not_R a_D problem_N ._. The_D common_A GWT_N related_A problems_N I_O have_V encountered_V had_V usually_R something_N to_P do_V with_P Ext_N GWT_N /_: GXT_N framework_N or_& FCKEditor_N integration_N ._.
Simply_R GWT_^ rocks_N google_N is_V making_V "_`` google_N wave_N "_'' fully_R on_P GWT_^ ._.
I_O think_V GWT_^ does_V what_O it_O says_V on_P the_D tin_N ..._: Top_^ 5_$ Reasons_N for_P choosing_V GWT_^ :_: Tapestry_N can_V be_V overly_R complicated_V and_& the_D learning_N curve_N is_V pretty_R steep_A for_P new_A developers_N who_O are_V starting_V out_R joining_V the_D team_N ._. Esp_^ ._. on_P larger_A projects_N ._. I_O found_V that_P I_O could_V develop_V "_`` richer_A "_'' applications_N using_V GWT_N seeing_V that_P my_D strength_N is_V Java_^ not_R Javascript_^ ._. In_P order_N for_P me_O to_P implement_V similar_A functionality_N using_V Tapestry_N I_O would_V have_V to_P hand_V write_V Javascript_^ which_D would_V later_R become_V a_D maintenance_N nightmare_N ._. Browser_N compatibility_N ,_, I_O would_V spend_V large_A amounts_N of_P time_N trying_V to_P get_V my_D hand_N written_V Javascirpt_^ to_P work_V on_P all_X the_D different_A browsers_N (_V like_P I_O said_V Javascript_^ is_V not_R my_D strength_N :-)_$ The_D GWT_N Compiler_N hides_V me_O from_P this_D which_D results_V in_P me_O spending_V more_A time_N writing_V features_N ._. Back_^ button_N blues_N ,_, GWT's_A History_N listener_N is_V handles_V the_D browsers_N back_V button_N in_P comparison_N to_P Tapestry_^ ._. GWT_^ has_V a_D smaller_A footprint_N because_P only_R the_D data_N is_V being_V sent_V across_P the_D wire_N apposed_V to_P refreshing_V the_D entire_A page_N ._. The_D list_N goes_V on_P but_& all_D in_P all_D ,_, I_O am_V very_R happy_A to_P have_V made_V the_D change_N and_& have_V not_R looked_V back_R since_P ._.
I_O didn't_V know_V much_A Javascript_^ when_R I_O tried_V to_P create_V my_D website_N ._. In_P fact_N ,_, that_D is_V why_R I_O had_V been_V putting_V off_R creating_V the_D website_N ._. So_R for_P me_O ,_, GWT_^ made_V a_D huge_A difference_N as_P it_O enabled_V me_O to_P create_V a_D dynamic_A ,_, cross-browser_A website_N that_P I_O definitely_R would_V not_R have_V been_V able_A to_P create_V without_P putting_V in_P significant_A effort_N into_P learning_V Javascript_^ ._.
I've_N done_V a_D few_A projects_N over_P a_D few_A years_N and_& it_O is_V fantastic_A ._. Going_V back_R to_P JS_N /_: JSP_^ /_: request_N based_A framework_N is_V really_R horrible_A ._. Don't_N want_V to_P give_V up_R compile_V time_N checks_N ,_, unit_N tests_N in_P my_D IDE_N ,_, IDE_N refactoring_N etc_N ,_, sharing_V code_N between_P different_A tiers_N ,_, solid_A set_N of_P widgets_N ,_, incredibly_R well_R thought_V out_R framework_N ._. Can_V do_V so_R much_R more_R so_R much_R faster_R in_P a_D maintainable_A way_N ._.
There_X is_V a_D steep_A learning_N curve_N ,_, but_& for_P really_R dynamic_A ui_N applications_N ,_, there_X is_V just_R no_D way_N that_P you_O can_V build_V from_P hand_N in_P javascript_N as_R efficiently_R ._. What_O I_O mean_V in_P particular_A is_V for_P instance_N an_D application_N frontend_N for_P a_D service_N where_R all_X the_D searchable_A fields_N and_& result_N type_N s_N and_& length_N were_V completely_R unknown_A ._. For_P this_D type_N of_P thing_N ,_, a_D dynamic_A runtime_N defined_V ui_R ,_, there_X is_V nothing_N better_R than_P GWT_^ in_P my_D opinion_N ._. The_D drawbacks_N are_V the_D steep_A learning_N curve_N (_N especially_R for_P non-swing_A Java_^ programmers_N ,_, traditional_A request_N /_: response_N servlet_N api_N guys_N and_& gals_N )_N and_& getting_V cornered_V into_P GWT_^ once_P you_O make_V that_D decision_N ._.
String_^ data_N passed_V to_P Java_^ Applet_^ by_P javascript_N is_V null_A when_R in_P Java_^ applet_N
This_D question_N may_V look_V familliar_N but_& I've_N discovered_V some_D rather_R more_R pertinent_A information_N and_& tried_V some_D other_A things_N (_$ which_D are_V detailed_V below_P )_N so_R to_P avoid_V confusion_N I've_N created_V another_D question_N ._. Here's_V the_D JavaScript_^ (_^ on_P an_D aspx_A page_N ):_G pdfXML_G is_V got_V from_P pdfData_N which_D is_V a_D hidden_A field_N on_P the_D page_N containing_V the_D XML_N that_D contains_V base64_R encoded_V pdf_N data_N which_D is_V passed_V to_P the_D java_N applet_N ._. All_X the_D other_A values_N being_V passed_V to_P the_D applet's_^ WriteDocument_^ method_N have_V within_P range_N sensible_A values_N ._. The_D XML_N is_V like_P this_D (_N the_D content_N of_P the_D PDF_N element_N is_V a_D lot_N bigger_A than_P displayed_V above_P ,_, i've_^ truncated_V the_D data_N for_P space_N reasons_N ;_: the_D PDF_N data_N is_V about_P 4Mb_G )_G The_D signature_N of_P the_D Java_^ method_N is_V :_: What_O happens_V is_V that_P somehow_R the_D xml_N string_N data_N is_V lost_V and_& by_P the_D time_N one_$ gets_V into_P the_D Java_^ the_D value_N of_P the_D PDFData_N parameter_N is_V null_A ._. I've_N debugged_V into_P the_D JS_N and_& the_D pdfXML_N param_N of_P the_D js_N method_N CallApplet_^ definitely_R has_V content_N ._. I've_N also_R tried_V to_P add_V a_D param_N tag_N in_P to_P the_D applet_N tag_N and_& set_V its_D value_N before_P calling_V the_D applet_N and_& used_V GetParameter()_N from_P inside_P the_D applet_N ._. This_D results_V in_P a_D blank_A string_N rather_R than_P a_D null_N ._. This_D problem_N doesn't_N occur_V on_P every_D machine_N ._. Our_D QA_N department_N don't_N get_V this_D for_P example_N but_& since_P this_D is_V a_D client-side_A issue_N ,_, one_$ of_P our_D customers_N will_V probably_R see_V this_D ._. I'm_N utterly_R out_P of_P ideas_N here_R so_P any_D help_N would_V be_V appreciated_V (_N with_P the_D obvious_A proviso_N that_P sadly_R I_O need_V to_P get_V this_D working_N rather_R than_P re-engineer_V this_D and_& the_D legacy_N systems_N the_D applet_N communicates_V with_P to_P avoid_V using_V an_D applet_N ._. )_N
Sorted_V the_D problem_N ._. How_R ?_. I_O took_V JRE_N 1.6_$ update_V 12_$ off_A and_& stuck_A update_V 7_$ (_N which_D is_V the_D version_N we_O reccomend_V to_P those_D who_O use_V our_D website_N )_N on_P my_D machine_N ._. Why_R update_V 12_$ stopped_V working_V I_^ don't_^ know_V ._. Why_R update_V 7_$ is_V stable_A I_N don't_N know_V ._. [_$ sigh_N ]_G It's_G things_N like_P this_D that_D make_V me_O glad_A I_N work_N mostly_R with_P a_D '_G long_A time_N between_P releases_N '_G framework_N like_P ._. net_N ._.
Detecting_V a_D 64-bit_A jre_N in_P a_D 32-bit_A browser_N ?_.
Is_V there_R any_D way_N to_P detect_V a_D 64-bit_A java_N install_V in_P a_D 32-bit_A environment_N ?_. The_D Java_^ Deployment_^ Toolkit_^ detects_V nothing_N ,_, but_& I_O was_V wondering_V if_P there_X was_V some_D secret_A browser_N way_N of_P detecting_V the_D 64-bit_A install_V client-side_A ._.
Sun's_G HotSpot_G JVM_N FAQ_N :_: When_R writing_V Java_^ code_N ,_, how_R do_V I_O distinguish_V between_P 32_$ and_& 64-bit_A operation_N ?_. There's_V no_D public_A API_N that_D allows_V you_O to_P distinguish_V between_P 32_$ and_& 64-bit_A operation_N ._. Think_V of_P 64-bit_A as_P just_R another_D platform_N in_P the_D write_V once_R ,_, run_V anywhere_R tradition_N ._. However_R ,_, if_P you'd_N like_P to_P write_V code_N which_D is_V platform_N specific_A (_N shame_N on_P you_O )_V ,_, the_D system_N property_N sun.arch.data.model_N has_V the_D value_N "_`` 32_$ "_'' ,_, "_'' 64_$ "_'' ,_, or_& "_`` unknown_A "_'' ._. You_O can_V access_V this_D like_A System.getProperty_N (_N "_'' sun.arch.data.model_G ")_G ._. This_D property_N will_V obviously_R only_R actually_R be_V set_V on_P Sun_^ JVMs_^ /_: JREs_N ._. You_O might_V also_R try_V to_P parse_V the_D results_N of_P System.getProperty_N (_N "_'' java.vm.name_G ")_G ,_, but_& this_D will_V also_R be_V highly_R vendor_N specific_A ._.
I_O guess_V I_O could_V do_V this_D in_P an_D applet_N ,_, but_& I_O was_V hoping_V to_P get_V this_D information_N before_P java_N was_V necessarily_R loaded_A or_& available_A ._.
HtmlUnit_N property_N undefined_A script_N error_N
I_O m_N submitting_V a_D form_N using_V java_G HtmlUnit_G package_N ._. I_O am_V able_A to_P get_V pages_N and_& submit_V forms_N but_& on_P one_$ page_N I_$ m_N getting_V a_D ScriptException_N error_N ._. The_D message_N is_V Cannot_^ set_V property_N "_`` disabled_A "_'' of_P undefined_A to_P "_`` 0_$ "_'' I_O think_V it_O might_V be_V caused_V by_P a_D javascript_N method_N that_D tries_V to_P set_V a_D variable_N that_D has_V not_R been_V declared_V in_P the_D form_N but_& I_N m_N not_R sure_A ._.
Does_V viewing_V the_D same_A page_N in_P a_D browser_N produce_V a_D JS_N error_N ?_.
I_O just_R tested_V it_O again_R and_& just_R noticed_V the_D page_N that_P loads_N does_V have_V a_D JS_N error_N ._. Is_V there_X a_D way_N I_O can_V tell_V HtmlUnit_^ to_P keep_V processing_N like_P ie_N does_V ?_.
Can_V you_O provide_V a_D public_A website_N to_P test_V against_P ?_. As_P I_O am_V not_R able_A to_P load_V the_D JS_N in_P https://mmlab1msslnx.fmr.com/mcwebadm/cgi-bin/edit_local.pl?operation=edit_N return_address=%2Fmcwebadm%2Fcgi-bin%_N 2Fmenu.pl_N selected=22020c341b11de96c3000423d43f1d_N Also_R ,_, please_V use_N latest_A HtmlUnit_N 2.5_$ version_N ._.
I'm_N not_R able_A to_P provide_V a_D public_A test_N case_N ._. I'm_N working_V on_P creating_V one_$ ._. I_O have_V checked_V and_& I'm_N using_V version_N 2.5_$ ._. I_O was_V hoping_V someone_N had_V seen_V something_N similar_A to_P this_D ._.
This_D was_V caused_V my_D a_D javascript_N error_N on_P the_D page_N that_D was_V being_V loaded_V ._. I_O set_V the_D webClient.getOptions()_N ._. setThrowExceptionOnScriptError_G (_G false_A );_N but_& it_O still_R threw_V the_D exception_N ._. SOLUTION_N :_: If_P you_O catch_V the_D ScriptException_^ the_D page_N is_V STILL_^ fully_R loaded_V and_& you_O can_V just_R continue_V processing_V and_& ignoring_V the_D exception_N ._. Example_^ of_P HTML_^ that_D fails_V :_:
Should_V I_O use_V PHP_^ or_& JSP_^ for_P a_D chat_N website_N ?_.
I_O want_V to_P develop_V a_D website_N web_N chat_N application_N like_P yahoo_N ._. Only_A difference_N is_V that_P I_O want_V to_P make_V it_O web_N based_V not_R desktop_N ._. I_O will_V be_V implementing_V it_O in_P jsp_N /_: php_N with_P ajax_N ._. I_O want_V to_P know_V whether_P jsp_N or_& php_N will_V be_V better_A for_P this_D ._. What_O will_V be_V advantages_N or_& disadvantages_N of_P both_D ._. Which_D one_$ of_P the_D two_$ would_V you_O prefer_V and_& why_R ?_. Will_V jsp_V applicatioon_N will_V be_V slower_A then_R php_V ?_. I_O am_V thinking_V of_P using_V using_V struts_N with_P jsp_N and_& ajax_N ._. Will_^ using_V of_P struts_A decrease_N speed_N ?_. I_O know_V jsp_N ,_, java_N and_& struts_N but_& not_R php_N ._. Is_V php_N more_R difficult_A then_R jsp_V ?_.
How_R long_A is_V a_D piece_N of_P string_N ?_. Seriously_R ._. We_O don't_V know_V exactly_R what_O you_O want_V to_P do_V but_& I_O imagine_V most_A of_P the_D backend_A stuff_N will_V be_V very_R similar_A in_P difficulty_N between_P the_D two_$ platforms_N ._. Most_A of_P the_D work_N will_V be_V platform_N independent_A front-end_N stuff_N ._.
It_O won't_N be_V slower_A because_P you_O are_V using_V one_$ over_P the_D other_A ._. It_O will_V be_V slower_A only_R if_P your_D implementation_N is_V less_R efficient_A ._.
Whatever_D you_O choose_V keep_V in_P mind_N that_P web_N based_A chat_N app_N would_V probably_R need_V continuous_A updates_N from_P server_N to_P the_D clients_N (_N so_R called_V Comet_^ )_^ ._.
Use_N whichever_D one_$ that_D you're_V a_D better_A programmer_N in_P ._. The_D task_N can_V be_V accomplished_V in_P either_D language_N just_R the_D same_A ._. You_O can_V argue_V endlessly_R about_P language_N features_N ,_, the_D bottom_A line_N will_V be_V whatever_D works_V best_A for_P you_O ._.
JSP_^ based_V web_N applications_N are_V a_D bit_N more_R harder_R to_P deploy_V than_P PHP_^ based_V web_N applications_N ,_, but_& you_O gain_V the_D ability_N of_P creating_V Servlets_^ ._. PHP_^ requires_V less_A server_N administration_N skills_N to_P setup_N properly_R and_& get_V running_V ,_, is_V fast_A to_P learn_V ,_, and_& allows_V fast_A creation_N of_P simple_A applications_N ._. None_^ is_V better_A than_P the_D other_A ,_, they_O are_V different_A in_P nature_N ._. Check_V your_D requirements_N ,_, and_& take_V a_D decision_N based_V on_P that_D ._. If_P your_D requirements_N doesn't_N favor_N one_$ over_P the_D other_A ,_, choose_V whichever_D your_D team_N is_V more_R comfortable_A with_P ._.
+1_N for_P basing_V your_D decision_N on_P *_N your_D requirements*_N ._.
Exactly_R !_. Great_A answer_N ._. Just_R because_P you_O can_V program_V easier_A in_P PHP_^ doesn't_^ mean_V it_O will_V always_R be_V the_D best_A choice_N ._. The_D requirements_N should_V be_V used_V to_P point_V you_O in_P the_D right_A direction_N ._.
I've_N worked_V with_P both_D JSP_^ and_& PHP_^ ._. Even_R if_P I_O prefer_V PHP_^ ,_, I_O still_R work_V with_P JSP_^ from_P time_N to_P time_N depending_V on_P my_D requirements_N ._. There_X is_V not_R really_R a_D better_A choice_N ._. It_O always_R ,_, **_G always_R **_G depends_V on_P your_D requirements_N ._.
JSP_^ isn't_^ a_D language_N -_: it's_V just_R a_D view_N /_: presentation_N technology_N -_: so_P it's_N only_R to_P build_V a_D web_N Frontend_N -_: while_P the_D main_A programming_N happens_V somewhere_R else_R -_: in_P the_D Java_^ Language_^ ,_, as_P a_D so-called_A Java_^ Servlet_^ ._. I_O personally_R like_P Java_^ more_A ,_, but_& PHP_^ is_V okay_A ,_, and_& if_P you_O only_R know_V PHP_^ (_^ which_D I_O must_V assume_V from_P the_D questions_N :)_G )_G you're_G better_A off_R doing_V it_O in_P PHP_^ now_R -_: you_O can_V learn_V Java_^ later_R ..._: Apart_R from_P that_D ,_, the_D others_N asking_V for_P more_A background_N info_N are_V right_A -_: you_O need_V to_P see_V what_O technology_N meets_V your_D requirements_N best_R ..._:
People_N refer_V to_P JSP_^ the_D same_A way_N as_P ASP.NET_N is_V referred_V to_P ._. It_O is_V a_D framework_N ._.
Which_D is_V incorrect_A ,_, and_& therefore_R I_O point_V out_R how_R it_O really_R is_V :)_^ No_^ ,_, really_R ,_, maybe_R people_N not_R doing_V Java_^ development_N themselves_O do_V that_D ._. Java_^ folks_N neither_& say_V they_O build_V something_N in_P JSP_^ instead_R of_P PHP_^ ,_, because_P JSP_^ isn't_^ a_D language_N ,_, nor_& do_V they_O refer_V to_P JSP_^ as_P a_D framework_N (_N because_P it_O does_V not_R deliver_V a_D complete_A stack_V of_P functionalities_N )_G -_: frameworks_N are_V things_N like_P struts_N ,_, gwt_N ,_, webwork_N ,_, sitemesh_N -_: and_& even_R those_D only_R deliver_V the_D view_N part_N -_: a_D full_A stack_V web_N framework_N helps_V you_O with_P a_D lot_N more_A things_N than_P just_R the_D view_N ._.
If_P you_O know_V both_D well_R then_R choose_V any_D ._. But_& if_P facing_V difficulty_N then_R PHP_^ is_V better_A to_P stay_V with_P ._. Reasons_N :_: fundamentally_R easy_A large_A no_D ._. of_P developer_N libraries_N are_V available_A ._. Easy_^ to_P integrate_V with_P other_A scripting_V languages_N But_& structural_A syntax_N becomes_V a_D problem_N as_P they_O are_V so_R many_A in_P cumbersome_A manner_N ._. Use_^ PHP_^ tag_N library_N for_P that_D works_V just_R like_P JSTL_^ ._. "_'' Choosing_V language_N is_V not_R the_D problem_N but_& efficient_A implementation_N of_P code_N is_V the_D only_A hurdle_N ._. "_''
java_N equivalent_N of_P swfobject_N
looking_V for_P a_D javascript_N class_N like_P swfobject_N to_P embed_V java_N and_& have_V a_D simple_A fallback_N if_P the_D user_N doesn't_N have_V java_N or_& refuses_V the_D security_N prompt_A ._. thanks_N ,_, Josh_^
appletobject_N may_V work_V ,_, but_& I_O have_V not_R used_V it_O ._.
You_O could_V build_V one_$ pretty_R easily_R ._. Have_^ something_N like_P a_D div_N set_V up_R like_P this_D :_: Then_R add_V Java_^ Plugin_^ Detection_N (_N builder_N )_$ to_P your_D JavaScript_^ ._. Then_R if_P that_D returns_V true_A ,_, then_R do_V something_N like_P :_:
Just_R embed_V the_D applet_N like_P you_O normally_R do_V and_& insert_V the_D fallback_A inside_N or_& insert_V a_D javascript_N snippet_N to_P remove_V the_D object_N :_: Besides_P param_N ,_, you_O can_V add_V other_A elements_N ,_, e.g._G paragraphs_N with_P text_N or_& javascript_N calling_V some_D function_N to_P replace_V the_D object_N ._.
This_D helps_V !_. I_O got_V a_D very_R strange_A problem_N while_P using_V applet_N to_P do_V batch_N file_V downloading_V from_P the_D server_N side_N ._. The_D Ajax_^ request_N seems_V conflict_N with_P applet_N request_N ,_, the_D applet_N file_N downloading_V interrupted_A with_P some_D socket_N exception_N ._. The_D applet_N works_V fine_A under_P JRE5.0_N ,_, it_O might_V be_V caused_V by_P our_D recent_A upgrade_N to_P JRE6.0_N ._. div_G id=_G "_`` java-applet_A "_'' /_: div_A script_N var_N t_N ;_: function_N startApplet()_N {_N var_N attributes_V =_A {_G codebase_G :_: '_'' %=_G request.getContextPath()_G %_N '_'' ,_, code_N :_: '_G %=appletClass%_N '_'' ,_, archive:'applet_N /_: SignedApplet.jar_N '_'' ,_, width_N :_: 0_$ ,_, height_N :_: 0_$ }_N ;_: var_N parameters_N =_A {_G para1:'value1_G '_'' ,_, para2:'value2_N '_'' ,_, java_arguments_N :_: '_G -Xms64m_N -Xmx512m_N '_'' }_N ;_: var_N version_N =_A '_'' 1.6_$ '_'' ;_: var_N buildAppletTag_N =_A function()_G {_G var_N tag_N =_A '_'' applet_N '_'' ;_: for_P (_G var_G attribute_N in_P attributes_N )_G {_G tag_N +=_G (_G '_'' '_'' +_& attribute_N +_& '_G =_A "'_N +_& attributes[attribute_N ]_$ +_& '"')_$ ;_: }_$ tag_N +=_N "_'' "_`` ;_: for_P (_G var_G parameter_N in_P parameters_N )_G {_G tag_N +=_N '_'' param_G name=_G "'_N +_& parameter_N +_& '"_G value=_G "'_N +_& parameters[parameter_N ]_$ +_& '"_$ /_: '_'' ;_: }_$ tag_N +=_N '_'' /_: applet_N '_'' ;_: return_N tag_N ;_: }_N ;_: document.getElementById_G (_G "_`` java-applet_A ")_N ._. innerHTML_N =_A buildAppletTag_G (_G attributes_N ,_, parameters_N ,_, version_N );_N clearTimeout_N (_$ t_N );_G }_G t_N =_A setTimeout_G (_G "_`` startApplet()_N "_'' ,_, 1000_$ );_G //_G delayed_V /_: script_N
Any_D function_N /_: method_N in_P Java_^ to_P implement_V a_D "_`` freeze_N panes_N "_`` -like_A sheet_N ?_.
We_O are_V using_V Java_^ and_& Javascript_^ to_P try_V to_P display_V a_D huge_A sheet_N with_P freeze_N panes_N ,_, but_& it_O is_V being_V very_R difficult_A ._. Does_^ someone_N know_V about_P a_D library_N ,_, method_N ,_, script_N or_& something_N ,_, either_& free_A or_& commercial_A ,_, to_P do_V this_D ?_. Thanks_N ._.
Not_R totally_R sure_A I_O understand_V what_O a_D sheet_N with_P freeze_N panes_N means_V -_: could_V you_O expand_V on_P this_D ?_.
It_O means_V to_P be_V able_A to_P display_V a_D huge_A sheet_N ,_, keeping_V the_D first_A row_N and_& column_N freeze_N ._. The_D idea_N is_V to_P be_V able_A to_P scroll_V through_P the_D sheet_N without_P losing_V the_D view_N of_P the_D first_A columns_N or_& rows_N which_D usually_R contain_V the_D column_N or_& row_N titles_N ._.
After_P looking_V at_P http://blogs.zoho.com/general/freeze-panes-in-zoho-sheet_N ,_, I_O assume_V you_O are_V looking_V for_P similar_A functionality_N in_P tables_N ?_. One_$ way_N to_P do_V this_D would_V be_V to_P have_V two_$ tables_N ,_, one_$ that_D was_V "_`` frozen_A "_'' rows_N (_$ or_& columns_N )_N that_D grew_V or_& shrunk_V in_P size_N based_V on_P how_R many_A frozen_V you_O had_V ,_, and_& the_D other_A was_V the_D dynamic_A table_N that_D grew_V or_& fell_V in_P size_N based_V on_P how_R many_A unfrozen_A there_X were_V ._.
Closing_N popups_N on_P session_N expiry_N
Here_R is_V the_D thing_N :_: my_D webapp_N has_V loads_N of_P popups_N and_& my_D boss_N wants_V '_G em_N closed_V on_P session_N expiry_N ,_, coz_N when_R session_N expires_V and_& an_D user_N presses_N refresh_V on_P a_D popup_N ,_, he_O is_V being_V shown_V the_D logon_N page_N ->_$ user_N logs_N on_P ->_N user_N is_V directed_V to_P the_D dashboard_N ._. Now_R ,_, a_D dashboard_N screen_N in_P a_D popup_N is_V totally_R uncool_A ._. Here_R is_V where_R google_N got_V me_O :_: Have_V javascript_N to_P close_V popup_N onload_N ._. Generate_V this_D onload_A script_N into_P the_D response_N if_P session_N has_V expired_V (_$ checking_N session_N expiry_N from_P jsp_N and_& including_V onload_A script_N conditionally_R )_^ ._. Do_V you_O think_V this_D is_V a_D good_A way_N to_P it_O ?_. What_O is_V the_D best_A practice_N for_P this_D scenario_N ?_. P.S_^ :_: I_O am_V not_R allowed_V to_P use_V AJAX_^
The_D best_A practice_N is_V to_P not_R use_V "_`` loads_N of_P popups_N "_'' ._. That_P aside_R ,_, when_R you_O talk_V about_P closing_N popup_N in_P "_`` onload_A "_'' event_N what_O would_V really_R happen_V is_V user_N would_V refresh_V the_D popup_N and_& it_O would_V close_R (_V which_D would_V be_V REALLY_^ weird_A from_P user's_A standpoint_N )_N OR_N user_N would_V get_V a_D prompt_A from_P the_D browser_N (_$ close_N this_D window_N ?_. yes_R /_: no_D )_N which_D is_V equally_R weird_A ._.
@ChssPly76_N -_: yes_! ,_, from_P an_D user_N standpoint_N ,_, it's_N probably_R weird_A ._. But_& ,_, designing_V data-oriented_A applications_N without_P pop-ups_N is_V one_$ heck_N of_P a_D challenge_N ._.
I'm_G ok_G with_P popups_N as_R long_R as_P I_^ don't_^ need_V any_D of_P the_D information_N behind_P it_O ._. If_P I_O do_V ,_, I_O get_V pissed_V at_P them_O and_& curse_N the_D designers_N ._.
The_D _only__N possible_A excuse_N for_P using_V popup_N windows_N is_V a_D requirement_N for_P application_N to_P function_V without_P javascript_N because_P then_R you_O can_V at_P least_A do_V some_D stuff_N via_P `_``
The_D best_A way_N would_V be_V an_D XMLHTTP_N request_N to_P check_V login_N and_& close_V them_O if_P required_V -_: do_V this_D periodically_R ._. Astute_A readers_N (_$ meaning_N everyone_N )_N will_V notice_V that_P this_D is_V an_D AJAX_^ request_N ,_, but_& if_P you_O phrase_N it_O that_D way_N it_O might_V get_V accepted_V as_P whoever_O dictated_V that_P you_O '_G aren't_N allowed_V to_P use_V AJAX_^ '_'' is_V clearly_R an_D idiot_N ._.
@Luke_V the_D corporate_A IT_^ teams_N of_P non-IT_A core_N companies_N are_V loaded_V with_P idiots_N who_O would_V tell_V you_O not_R to_P use_V AJAX_^ :-)_^ :_: And_& my_D boss_N is_V one_$ of_P '_'' em_G !_.
Won't_V the_D periodic_A HTTP_N request_N keep_V the_D session_N alive_A ?_.
then_R they_O are_V screwed_V ._. and_& so_R are_V you_O if_P your_D boss_N reads_V that_P you_O just_R called_V him_O an_D idiot_N ..._:
@matt_N b_N :_: not_R if_P you_O keep_V record_N of_P the_D last_A user_N activity_N ._.
@matt_N b_N -_: George_^ said_V what_O I_O was_V going_V to_P say_V :)_N
In_P a_D past_A life_N ,_, I_O made_V a_D popup_N manager_N object_N that_D maintained_V what_O windows_N were_V open_A ._. You_O should_V probably_R make_V one_$ of_P these_D if_P not_R already_R done_V ._. Then_R ,_, you_O can_V use_V setTimeout_N to_P call_V a_D function_N after_P so_R many_A minutes_N (_$ or_& whatever_D time_N you_O want_V )_$ have_V gone_V by_P ._. This_D will_V check_V for_P recent_A activity_N (_N probably_R via_P AJAX_G )_G and_& close_V the_D popup_N if_P you_O determine_V that_P the_D session_N has_V expired_V ._. If_P not_R ,_, call_V setTimeout_N again_R with_P your_D new_A time_N ,_, properly_R adjusted_V for_P most_A recent_A activity_N ._. ^^before_V the_D AJAX_^ edit_N ._. Well_^ ,_, since_P you_O can't_V use_V AJAX_^ ,_, can_V you_O put_V something_N in_P the_D url_N that_D will_V tell_V you_O it's_V a_D popup_N ?_. Then_R you'll_R know_V not_R to_P show_V the_D login_N screen_N when_R the_D user_N hits_V reload_N ._.
If_P your_D boss_N is_V asking_V you_O to_P achieve_V this_D ,_, without_P using_V AJAX_^ ,_, then_R you're_N in_P trouble_N ._. He_O should_V understand_V that_P the_D only_A connection_N a_D browser_N has_V to_P the_D server_N (_N without_P refreshing_V the_D page_N )_N is_V javascript_G (_G what_O he_O understands_V to_P be_V ajax_G )_G ._. The_D best_A way_N to_P do_V this_D is_V to_P setup_N a_D script_N on_P the_D pages_N to_P ask_V the_D server_N if_P the_D user_N is_V still_R logged_V in_P every_D 30_$ seconds_N or_& so_R ._. This_D script_N assumes_V you're_N using_V the_D jQuery_N framework_N for_P rapid_A development_N of_P javascript_N solutions_N ._. This_^ also_R uses_V JSON_^ (_^ Javascript_^ Object-notation_^ )_^ to_P test_V a_D return-value_N from_P the_D loggedin.php_N file_N ._. Bottom_N line_N ,_, you_O need_V to_P use_V AJAX_^ ._. Tell_V your_D boss_N there_X is_V no_D other_A way_N ._. If_P he_O still_R doesn't_^ get_V it_O ,_, ask_V him_O to_P balance_V his_D checkbook_N without_P using_V math_N ._.
Or_& just_R tell_V your_D boss_N that_D you're_V brilliant_A and_& figured_V out_R a_D way_N to_P do_V it_O with_P Javascript_^ instead_R of_P AJAX_^
Well_R ,_, the_D J_N in_P AJAX_^ is_V javascript_N ._. If_P its_D not_R async_A (_N A_N )_N and_& not_R xml_G (_G X_N )_N based_V ,_, then_R he_O can_V build_V a_D case_N saying_V that_P he's_N not_R using_V AJAX_^ ,_, unfortunately_R ,_, the_D example_N uses_V JQuery_N and_& underneath_P the_D hood_N ,_, it_O is_V using_V the_D A_N ,_, J_N and_& X_N of_P AJAX_^ ._.
An_D alternative_A way_N to_P implement_V modal_A dialogs_N in_P a_D web_N application_N is_V to_P :_: Model_^ the_D dialog_N in_P a_D DIV_N ,_, default_N styled_V to_P display_V :_: none_N ;_: On_P desired_V action_N ,_, inject_V /_: append_V the_D Modal_^ dialog_N DIV_^ into_P the_D page_N source_N Reset_^ the_D CSS_^ display_N so_P the_D modal_A dialog_N DIV_N is_V visible_A ,_, overlaid_A on_P top_N of_P the_D page_N by_P setting_V the_D CSS_N z-index_N property_N Make_V the_D modal_A dialog_N disappear_V upon_P either_& successful_A execution_N or_& the_D user_N cancelling_V out_R Because_P the_D modal_A dialog_N is_V part_N of_P the_D page_N source_N ,_, the_D dialog_N will_V disappear_V when_R the_D session_N times_N out_R ._. This_D approach_N doesn't_N spawn_V supporting_V windows_N that_D can_V be_V orphaned_V as_P the_D poster_N is_V attempting_V to_P address_V ._. And_& it_O fits_V the_D requirement_N of_P not_R using_V AJAX_^ ._. You_O can_V code_V these_D by_P hand_N ,_, but_& I_O don't_V really_R recommend_V it_O because_P of_P having_V to_P support_V various_A browser_N ._. I_O suggest_V looking_V at_P the_D Yahoo_^ User_N Interface_^ ._. You_O can_V tailor_V it_O to_P suit_V your_D needs_N (_$ IE_N :_: only_R modal_A dialogs_G )_G ,_, and_& it_O would_V support_V AJAX_^ if_P requirements_N change_V down_P the_D road_N ._. Beware_V of_P spawning_V modal_A dialogs_N from_P modal_A dialogs_N ._.
In_P theory_N ,_, you_O could_V avoid_V AJAX_^ by_P using_V a_D hidden_A flash_N widget_N ..._: But_& more_R practically_R ,_, AJAX_^ is_V the_D '_'' right_A '_'' solution_N ,_, and_& I_O think_V you_O will_V have_V to_P talk_V to_P your_D boss_N ,_, determine_V where_R this_D '_'' no_D AJAX_N '_'' rule_N came_V from_P ,_, and_& convince_V him_O that_P AJAX_^ is_V the_D best_A way_N to_P solve_V this_D problem_N ._. Does_V he_O think_V AJAX_^ would_V be_V take_V too_R much_A time_N to_P implement_V ?_. If_P so_R ,_, you_O should_V prove_V him_O wrong_A ._. Does_V he_O think_V it_O will_V be_V hard_A to_P maintain_V ?_. If_P so_R ,_, show_V how_R simple_A the_D code_N to_P do_V this_D will_V be_V ,_, and_& how_R widely_R used_V the_D common_A AJAX_^ libraries_N are_V ._. If_P your_D boss_N is_V reasonable_A ,_, then_R his_D goal_N is_V to_P what_O is_V best_A for_P the_D product_N ,_, and_& you_O should_V be_V able_A to_P reason_V with_P him_O ._.
