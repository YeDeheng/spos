java	N
and	N
javascript	N
callbacks	N
compared	N

It	N
seems	N
I	N
don't	N
understand	N
javascript	N
callbacks	N
quite	N
as	N
well	N
as	N
I	N
thought	N
.	N
In	N
the	N
following	N
example	N
,	N
I	N
would	N
think	N
that	N
each	N
copy	N
of	N
function	N
in	N
setTimeout	N
would	N
refer	N
to	N
its	N
own	N
copy	N
of	N
the	N
variable	N
"	N
index	N
"	N
.	N
Therefore	N
,	N
running	N
the	N
example	N
should	N
produce	N
the	N
following	N
alerts	N
:	N
"	N
zero	N
"	N
"	N
one	N
"	N
"	N
two	N
"	N
.	N
However	N
,	N
it	N
seems	N
that	N
theres	N
only	N
one	N
copy	N
of	N
the	N
index	N
variable	N
,	N
and	N
all	N
copies	N
of	N
the	N
callback	N
function	N
point	N
to	N
the	N
same	N
variable	N
,	N
giving	N
me	N
the	N
following	N
alerts	N
:	N
"	N
two	N
"	N
"	N
two	N
"	N
"	N
two	N
"	N
.	N
The	N
following	N
analagous	N
(	N
I	N
thought	N
)	N
example	N
in	N
java	N
prints	N
"	N
zero	N
"	N
"	N
one	N
"	N
"	N
two	N
"	N
,	N
as	N
expected	N
.	N
Can	N
anyone	N
explain	N
to	N
me	N
why	N
the	N
js	N
example	N
doesn't	N
work	N
,	N
and	N
perhaps	N
compare	N
what's	N
going	N
on	N
in	N
the	N
two	N
examples	N
?	N

Have	N
you	N
seen	N
:	N
http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope	N

Prestaul	N
,	N
thank	N
,	N
that's	N
pretty	N
much	N
my	N
same	N
question	N
.	N
I	N
looked	N
for	N
similar	N
questions	N
before	N
I	N
posted	N
but	N
didn't	N
find	N
this	N
one	N
.	N

I	N
asked	N
[	N
an	N
almost	N
identical][1	N
]	N
question	N
yesterday	N
and	N
got	N
a	N
couple	N
of	N
different	N
variations	N
in	N
the	N
answers	N
and	N
some	N
discussion	N
on	N
the	N
merits	N
of	N
each	N
.	N
Might	N
be	N
worth	N
a	N
look	N
[	N
1	N
]:	N
http://stackoverflow.com/questions/442985/how-can-one-de-reference-javascript-variables-when-enclosing-an-outer-scope	N

index	N
changes	N
with	N
each	N
iteration	N
of	N
the	N
loop	N
.	N
What	N
you	N
want	N
is	N
to	N
place	N
index	N
into	N
a	N
closure	N
not	N
affected	N
by	N
the	N
loop	N
:	N

Thanks	N
.	N
I	N
guess	N
I	N
thought	N
that	N
each	N
iteration	N
of	N
the	N
for	N
loop	N
would	N
create	N
a	N
closure	N
.	N

Well	N
yes	N
,	N
technically	N
I	N
left	N
that	N
part	N
out	N
.	N
There	N
*	N
is	N
*	N
a	N
closure	N
around	N
index	N
.	N
But	N
it	N
is	N
declared	N
in	N
an	N
outer	N
scope	N
to	N
the	N
function	N
passed	N
to	N
setTimeout	N
.	N
"	N
closure	N
"	N
!	N
=	N
"	N
unchanging	N
variable	N
"	N
.	N

Cool	N
.	N
One	N
more	N
question	N
:	N
why	N
does	N
the	N
function	N
declaration	N
need	N
to	N
be	N
wrapped	N
in	N
parens	N
?	N

@morgancodes	N
:	N
that's	N
just	N
convention	N
;	N
also	N
,	N
there	N
might	N
be	N
some	N
cases	N
where	N
the	N
parser	N
might	N
otherwise	N
produce	N
incorrect	N
results	N

Firefox	N
tells	N
me	N
there's	N
a	N
syntax	N
error	N
if	N
I	N
leave	N
them	N
out	N
.	N

closures	N
in	N
javascript	N
(	N
references	N
to	N
variables	N
outside	N
the	N
function	N
)	N
retain	N
their	N
association	N
...	N
if	N
you	N
refer	N
to	N
a	N
loop	N
variable	N
in	N
a	N
function	N
called	N
after	N
the	N
loop	N
ends	N
,	N
in	N
the	N
function	N
call	N
you	N
get	N
the	N
value	N
of	N
that	N
variable	N
after	N
the	N
loop	N
.	N

the	N
function	N
call	N
/	N
parens	N
/	N
etc	N
create	N
a	N
copy	N
of	N
the	N
value	N
"	N
i	N
"	N
into	N
the	N
variable	N
"	N
index	N
"	N
,	N
at	N
the	N
time	N
of	N
each	N
iteration	N
of	N
the	N
loop	N
.	N

In	N
javascript	N
the	N
for	N
loop	N
does	N
not	N
have	N
it's	N
own	N
scope	N
-	N
so	N
a	N
var	N
you	N
create	N
inside	N
a	N
loop	N
is	N
not	N
different	N
from	N
one	N
defined	N
outside	N
of	N
it	N
.	N

Private	N
Members	N
In	N
JavaScript	N
is	N
my	N
favorite	N
reference	N
on	N
closures	N
.	N
It	N
is	N
written	N
as	N
a	N
recipe	N
for	N
providing	N
private	N
variables	N
in	N
JS	N
objects	N
(	N
maybe	N
useful	N
,	N
maybe	N
not	N
)	N
but	N
in	N
the	N
process	N
goes	N
through	N
an	N
excellent	N
introduction	N
of	N
how	N
closures	N
work	N
in	N
general	N
,	N
and	N
especially	N
in	N
JS	N
.	N
The	N
comp.lang.javascript	N
FAQ	N
has	N
a	N
worthwhile	N
section	N
on	N
closures	N
as	N
well	N
.	N
Closures	N
can	N
be	N
confusing	N
so	N
I	N
put	N
together	N
a	N
working	N
example	N
of	N
the	N
shortest	N
useful	N
closure	N
I've	N
come	N
across	N
,	N
which	N
was	N
in	N
the	N
Rhino	N
book	N
.	N
Oh	N
and	N
I	N
don't	N
have	N
enough	N
rep	N
to	N
comment	N
yet	N
:)	N
but	N
I	N
saw	N
your	N
question	N
above	N
about	N
why	N
you	N
have	N
to	N
put	N
parenthesis	N
around	N
functions	N
sometimes	N
.	N
That's	N
only	N
necessary	N
when	N
you	N
invoke	N
an	N
anonymous	N
function	N
inline	N
.	N
For	N
example	N
the	N
parenthesis	N
are	N
required	N
here	N
:	N
Because	N
you	N
are	N
creating	N
a	N
function	N
and	N
then	N
immediately	N
invoking	N
it	N
.	N
But	N
the	N
parens	N
are	N
not	N
necessary	N
in	N
the	N
usual	N
case	N
where	N
you	N
are	N
just	N
declaring	N
a	N
named	N
function	N
for	N
later	N
use	N
.	N

Thanks	N
Noah	N
.	N
that	N
rhino	N
book	N
example	N
is	N
cool	N
.	N

