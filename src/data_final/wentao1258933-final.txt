1258933	GWT conditional compile	^ A V
1258933	I'm using the same source code for a GWT 1.5 and GWT 1.7 application . I'm wondering is there a way to conditionally compile parts of the java code for one or the other version . I know there is a way to do it for widgets and browsers in the module XML file .	L V D A N N P D ^ $ & ^ $ N , L V V R D N P R A N P D N N P $ & D A N , O V R V D N P V O P N & N P D ^ ^ N ,
1258933	I don't think so . Why would you compile for two GWT sources ? We went from 1.5 to 1.7 without problems .	O V V R , R V O V P $ A N , O V P $ P $ P N ,
1258933	We did to . But in one case the old ( 1.5 ) and the new ( 1.7 ) compiled code does not behave the same . It's a combination of java and native inserted scripts . Moving the old ( 1.5 ) code to the new interfaces removing all deprecated calls is currently to much work .	O V P , & P $ N D A , $ , & D A , $ , V N V R V D A , L D N P ^ & A V N , V D A , $ , N P D A N V O V V V R P A N ,
1258933	If you really want to do that I guess the approach would be to use a Generator . With a generator you can have deferred binding ( a bit a poor man's introspection ) . To get access to the 1.5 or 1.7 code you then have to define the generic API in an interface and use GWT.create on it to get the concrete implementation .	P O R V P V P O V D N V V P V D N , P D N O V V A N , D N D A S N , , P V V P D $ & $ N O R V P V D A ^ P D N & V N P O P V D A N ,
1258933	The solution is very simple .	D N V R A ,
1258933	if ( version.startsWith ( " 1.5 ")) { // do something the 1.5 . * way } Is actually kind of a bad idea . Ideally you should use absolute string values here , because the GWT compiler will evaluate equality and trim unreachable code inside an if conditional from the compiled output . Using . startsWith means that all the code will end up in the final application . Unfortunately GWT version is not a compile time property . Perhaps the best way to do it would be to create an empty Generator implementation that just returns " ClassName15 " or " ClassName17 " from a call in your module for " ClassName " . You can then , at compile time , call About.version() from the generator and find out what the version is at compile time .	P E E E E E E E E V V D $ , , N , V R A P D A N , R O V V A N V R , P D ^ N V V N & V A N P D P A P D V N , V , N V P X D N V N T P D A N , R A N V R D A N N , R D A N P V O V V P V D A N N P R V , ^ , & , ^ , P D N P D N P , N , , O V R , O V N , V ^ P D N & V T O D N V P V N ,
1258933	Thanks for pointing that out , but this is the only solution I have found . And it is only for a small code snippet . So the solution works just fine for me .	N P V D T , & D V D A N O V V , & O V A P D A N N , P D N V R A P O ,
