GWT	N
conditional	N
compile	N

I'm	N
using	N
the	N
same	N
source	N
code	N
for	N
a	N
GWT	N
1.5	N
and	N
GWT	N
1.7	N
application	N
.	N
I'm	N
wondering	N
is	N
there	N
a	N
way	N
to	N
conditionally	N
compile	N
parts	N
of	N
the	N
java	N
code	N
for	N
one	N
or	N
the	N
other	N
version	N
.	N
I	N
know	N
there	N
is	N
a	N
way	N
to	N
do	N
it	N
for	N
widgets	N
and	N
browsers	N
in	N
the	N
module	N
XML	N
file	N
.	N

I	N
don't	N
think	N
so	N
.	N
Why	N
would	N
you	N
compile	N
for	N
two	N
GWT	N
sources	N
?	N
We	N
went	N
from	N
1.5	N
to	N
1.7	N
without	N
problems	N
.	N

We	N
did	N
to	N
.	N
But	N
in	N
one	N
case	N
the	N
old	N
(	N
1.5	N
)	N
and	N
the	N
new	N
(	N
1.7	N
)	N
compiled	N
code	N
does	N
not	N
behave	N
the	N
same	N
.	N
It's	N
a	N
combination	N
of	N
java	N
and	N
native	N
inserted	N
scripts	N
.	N
Moving	N
the	N
old	N
(	N
1.5	N
)	N
code	N
to	N
the	N
new	N
interfaces	N
removing	N
all	N
deprecated	N
calls	N
is	N
currently	N
to	N
much	N
work	N
.	N

If	N
you	N
really	N
want	N
to	N
do	N
that	N
I	N
guess	N
the	N
approach	N
would	N
be	N
to	N
use	N
a	N
Generator	N
.	N
With	N
a	N
generator	N
you	N
can	N
have	N
deferred	N
binding	N
(	N
a	N
bit	N
a	N
poor	N
man's	N
introspection	N
)	N
.	N
To	N
get	N
access	N
to	N
the	N
1.5	N
or	N
1.7	N
code	N
you	N
then	N
have	N
to	N
define	N
the	N
generic	N
API	N
in	N
an	N
interface	N
and	N
use	N
GWT.create	N
on	N
it	N
to	N
get	N
the	N
concrete	N
implementation	N
.	N

The	N
solution	N
is	N
very	N
simple	N
.	N

if	N
(	N
version.startsWith	N
(	N
"	N
1.5	N
"))	N
{	N
//	N
do	N
something	N
the	N
1.5	N
.	N
*	N
way	N
}	N
Is	N
actually	N
kind	N
of	N
a	N
bad	N
idea	N
.	N
Ideally	N
you	N
should	N
use	N
absolute	N
string	N
values	N
here	N
,	N
because	N
the	N
GWT	N
compiler	N
will	N
evaluate	N
equality	N
and	N
trim	N
unreachable	N
code	N
inside	N
an	N
if	N
conditional	N
from	N
the	N
compiled	N
output	N
.	N
Using	N
.	N
startsWith	N
means	N
that	N
all	N
the	N
code	N
will	N
end	N
up	N
in	N
the	N
final	N
application	N
.	N
Unfortunately	N
GWT	N
version	N
is	N
not	N
a	N
compile	N
time	N
property	N
.	N
Perhaps	N
the	N
best	N
way	N
to	N
do	N
it	N
would	N
be	N
to	N
create	N
an	N
empty	N
Generator	N
implementation	N
that	N
just	N
returns	N
"	N
ClassName15	N
"	N
or	N
"	N
ClassName17	N
"	N
from	N
a	N
call	N
in	N
your	N
module	N
for	N
"	N
ClassName	N
"	N
.	N
You	N
can	N
then	N
,	N
at	N
compile	N
time	N
,	N
call	N
About.version()	N
from	N
the	N
generator	N
and	N
find	N
out	N
what	N
the	N
version	N
is	N
at	N
compile	N
time	N
.	N

Thanks	N
for	N
pointing	N
that	N
out	N
,	N
but	N
this	N
is	N
the	N
only	N
solution	N
I	N
have	N
found	N
.	N
And	N
it	N
is	N
only	N
for	N
a	N
small	N
code	N
snippet	N
.	N
So	N
the	N
solution	N
works	N
just	N
fine	N
for	N
me	N
.	N

