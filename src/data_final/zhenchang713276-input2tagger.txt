Detecting	N
EOF	N
/	N
TCP	N
teardown	N
using	N
Java	N
sockets	N
from	N
Javascript	N

I'm	N
creating	N
a	N
Java	N
socket	N
in	N
Javascript	N
,	N
sending	N
an	N
HTTP	N
request	N
and	N
receiving	N
a	N
response	N
correctly	N
but	N
I	N
seem	N
to	N
be	N
unable	N
to	N
detect	N
an	N
EOF	N
or	N
the	N
server	N
closing	N
the	N
socket	N
at	N
the	N
end	N
.	N
What	N
am	N
I	N
doing	N
wrong	N
?	N
The	N
problem	N
is	N
we	N
never	N
exit	N
the	N
outermost	N
while	N
loop	N
-	N
the	N
server	N
stops	N
transmitting	N
and	N
(	N
presumably	N
)	N
closes	N
its	N
end	N
of	N
the	N
connection	N
,	N
yet	N
receiver.read()	N
never	N
returns	N
-1	N
and	N
all	N
the	N
socket	N
methods	N
return	N
state	N
consistent	N
with	N
the	N
socket	N
still	N
being	N
connected	N
.	N

Wouldn't	N
the	N
this	N
:	N
while	N
(	N
receiver.available()	N
&	N
&	N
!	N
eof	N
)	N
be	N
better	N
?	N
in	N
lieu	N
of	N
the	N
first	N
while	N
(	N
receiver.available()	N
)	N
?	N

Seems	N
a	N
bit	N
redundant	N
-	N
available()	N
is	N
defined	N
as	N
returning	N
the	N
number	N
of	N
bytes	N
of	N
data	N
available	N
to	N
read	N
without	N
blocking	N
,	N
so	N
would	N
return	N
0	N
after	N
EOF	N
.	N
Tried	N
it	N
anyway	N
just	N
in	N
case	N
;	N
doesn't	N
fix	N
the	N
problem	N
.	N

Or	N
do	N
you	N
mean	N
in	N
place	N
of	N
the	N
outermost	N
while	N
?	N
Data	N
being	N
available	N
to	N
read	N
without	N
blocking	N
is	N
independent	N
of	N
whether	N
the	N
server	N
has	N
closed	N
the	N
socket	N
-	N
there	N
could	N
be	N
pauses	N
in	N
transmission	N
,	N
and	N
the	N
OS	N
could	N
have	N
buffered	N
input	N
data	N
.	N
So	N
we	N
must	N
test	N
both	N
separately	N
.	N

No	N
,	N
I	N
meant	N
the	N
inner	N
while	N
,	N
but	N
your	N
first	N
comment	N
is	N
right	N
:	N
I'm	N
wrong	N
.	N

Ok	N
.	N
What's	N
the	N
value	N
of	N
eof	N
when	N
the	N
code	N
reaches	N
this	N
comment	N
?	N
//	N
at	N
this	N
point	N
response	N
does	N
contain	N
the	N
expected	N
HTTP	N
response	N
What's	N
the	N
symptom	N
?	N
I	N
assume	N
it's	N
an	N
infinite	N
loop	N
?	N

eof	N
is	N
still	N
0	N
at	N
that	N
point	N
(	N
otherwise	N
we'd	N
exit	N
the	N
outermost	N
while()	N
correctly	N
and	N
I'd	N
not	N
be	N
posting	N
this	N
)	N
.	N
Question	N
edited	N
-	N
hopefully	N
the	N
problem	N
is	N
clearer	N
now	N
?	N

OK	N
,	N
further	N
research	N
suggests	N
there	N
is	N
no	N
non-blocking	N
way	N
to	N
discover	N
whether	N
the	N
remote	N
side	N
has	N
closed	N
a	N
socket	N
.	N
However	N
,	N
it	N
is	N
possible	N
to	N
achieve	N
this	N
using	N
NIO	N
channels	N
:	N

When	N
the	N
end	N
of	N
the	N
stream	N
is	N
reached	N
,	N
available()	N
returns	N
0	N
,	N
so	N
in	N
your	N
code	N
,	N
you	N
never	N
read	N
the	N
-1	N

Right	N
.	N
But	N
read()	N
will	N
block	N
until	N
either	N
EOF	N
is	N
reached	N
or	N
there	N
is	N
more	N
data	N
,	N
and	N
Javascript	N
is	N
single-threaded	N
so	N
we	N
don't	N
want	N
to	N
issue	N
a	N
read	N
without	N
knowing	N
for	N
certain	N
we	N
have	N
data	N
to	N
read	N
.	N
And	N
available()	N
can	N
return	N
0	N
during	N
transmission	N
,	N
so	N
we	N
can't	N
use	N
that	N
to	N
test	N
for	N
EOF	N
.	N

