URL	^
decoding	V
in	P
Javascript	^

I	O
want	V
to	P
decode	N
a	D
string	N
that	O
has	V
been	V
encoded	V
using	V
the	D
java.net.URLEncoder.encode()	^
method	N
.	,
I	O
tried	V
using	V
the	D
unescape()	N
function	N
in	P
javascript	^
,	,
but	&
a	D
problem	N
occurs	V
for	P
blank	N
spaces	N
because	P
java.net.URLEncoder.encode()	O
converts	V
a	D
blank	N
space	N
to	P
'	,
+	&
'	,
but	&
unescape()	O
won't	V
convert	V
'	,
+	&
'	,
to	P
a	D
blank	N
space	N
.	,

Try	V
decodeURI	E
(	E
"")	E
or	E
decodeURIComponent	E
(	E
"")	E
!	E
-	E
)	E

Just	R
because	P
it	O
takes	V
a	D
string	N
as	P
argument	N
!	,
-	E
)	E

Using	V
JavaScript's	L
escape	V
/	,
unescape	A
function	N
is	V
almost	R
always	R
the	D
wrong	A
thing	N
,	,
it	O
is	V
incompatible	A
with	P
URL-encoding	^
or	&
any	D
other	A
standard	N
encoding	V
on	P
the	D
web	N
.	,
Non-ASCII	^
characters	N
are	V
treated	V
unexpectedly	R
as	R
well	R
as	P
spaces	N
,	,
and	&
older	A
browsers	N
don't	V
necessarily	R
have	V
the	D
same	A
behaviour	N
.	,
As	P
mentioned	V
by	P
roenving	V
,	,
the	D
method	N
you	O
want	V
is	V
decodeURIComponent()	^
.	,
This	D
is	V
a	D
newer	A
addition	N
which	P
you	O
won't	V
find	V
on	P
IE	^
5.0	$
,	,
so	R
if	P
you	O
need	V
to	P
support	V
that	D
browser	N
(	,
let's	L
hope	V
not	R
,	,
nowadays	R
!	,
)	,
you'd	L
need	V
to	P
implement	V
the	D
function	N
yourself	O
.	,
And	&
for	P
non-ASCII	^
characters	N
that	O
means	V
you	O
need	V
to	P
implement	V
a	D
UTF-8	^
encoder	^
.	,
Code	N
is	V
available	A
if	P
you	O
need	V
it	O
.	,

decodeURI[Component	N
]	,
doesn't	V
handle	V
+	V
as	P
space	N
either	&
(	,
at	O
least	R
on	P
FF3	^
,	,
where	R
I	O
tested	V
)	,
.	,
Simple	A
workaround	N
:	,
Indeed	!
,	,
unescape	O
chokes	V
on	P
this	D
URL	N
:	,
it	O
knows	V
only	A
UTF-16	^
chars	^
like	P
%u2318	$
which	D
are	V
not	R
standard	A
(	,
see	V
Percent-encoding	V
)	,
.	,

Try	V

