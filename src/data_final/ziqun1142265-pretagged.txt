Mozilla	^
Rhino	^
:	,
Default	^
JavaScript	^
Compliance	^
Level	^

to	P
execute	V
JavaScript	^
in	P
Rhino	^
one	$
has	V
to	P
create	V
an	D
execution	N
context	N
for	P
the	D
script	N
.	,
The	D
constructor	N
of	P
the	D
Context	N
class	N
uses	V
the	D
JavaScript	N
compliance	N
level	N
VERSION_DEFAULT	^
.	,
As	P
I	O
cannot	V
find	V
a	D
mapping	N
of	P
VERSION_DEFAULT	^
to	P
any	D
of	P
the	D
actual	A
VERSION_XXX	^
constants	N
in	P
the	D
API	^
,	,
I'm	L
wondering	V
which	D
JavaScript	N
compliance	N
level	N
VERSION_DEFAULT	V
is	V
.	,
The	D
release	N
note	V
of	P
Rhino	^
1.7	^
R1	^
(	E
*	E
ttps	E
:/	E
/	E
developer.mozilla.org/en/New_in_Rhino_1.7R1	E
)	E
states	V
that	D
one	O
has	V
to	P
specify	V
the	D
JavaScript	N
version	N
explicitly	R
,	,
but	&
it	O
does	V
not	R
mention	V
which	D
version	N
is	V
used	V
when	R
Context.setLanguageVersion()	^
is	V
omitted	V
.	,

it's	L
open	A
source	N
...	,

Maybe	R
you	O
should	V
ask	V
this	D
question	N
on	P
the	D
Mozilla	^
Rhino	^
mailing	V
list	N
.	,

Having	V
had	V
a	D
look	V
through	P
most	R
of	P
the	D
Rhino	N
code	N
,	,
it	O
looks	V
like	R
most	R
of	P
the	D
testing	N
against	P
language	N
version	N
is	V
negative	A
testing	N
,	,
e.g.	N
if	P
(	E
getLanguageVersion()	E
!	E
=	E
Context.VERSION_1_2	E
)	E
{	E
return	V
paramCount	N
;	G
}	,
VERSION_DEFAULT	O
is	V
defined	V
as	P
'	,
0	$
'	,
,	,
so	P
the	D
one	$
place	N
where	R
it	O
looks	V
like	P
it	O
would	V
need	V
to	P
be	V
set	V
as	P
1.7	^
is	V
to	P
support	V
the	D
"	,
let	V
"	,
and	&
"	,
yield	V
"	,
keywords	^
because	P
of	P
this	D
code	N
from	P
TokenStream	^
:	,
if	P
((	D
result	N
==	~
Token.LET	^
||	E
result	N
==	E
Token.YIELD	E
)	E
&	&
&	&
parser.compilerEnv.getLanguageVersion()	E
Context.VERSION_1_7	E
)	E
{	E
//	E
LET	^
and	&
YIELD	V
are	V
tokens	N
only	R
in	P
1.7	$
and	&
later	R
result	N
=	G
Token.NAME	^
;	,
}	,

