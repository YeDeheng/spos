JavaScript	^
or	^
Java	^
String	^
Subtraction	^

If	P
you	O
are	V
using	V
Java	^
or	&
JavaScript	^
,	,
is	V
there	R
a	D
good	A
way	N
to	P
do	V
something	N
like	P
a	D
String	N
subtraction	N
so	P
that	O
given	V
two	$
strings	N
:	,
you	O
just	R
get	V
I	O
know	V
that	P
I	O
could	V
just	R
write	V
code	N
to	P
walk	V
the	D
string	N
comparing	V
characters	N
,	,
but	&
I	O
was	V
hoping	V
there	R
was	V
a	D
way	N
to	P
do	V
it	O
in	P
really	R
compact	A
way	N
.	,
EDIT	V
TO	P
A	^
DD:	^
As	P
I	O
was	V
analyzing	V
the	D
data	N
I	O
get	V
when	R
I	O
use	V
this	D
I	O
realized	V
that	P
I	O
missed	V
the	D
statement	N
of	P
the	D
case	N
a	D
bit	N
.	,
It	O
should	V
be	V
:	,
So	P
,	,
I	O
actually	R
only	A
want	V
to	P
remove	V
the	D
sections	N
that	P
are	V
identical	A
.	,
That	O
said	V
,	,
the	D
answer	N
that	P
I	O
accepted	V
is	V
closest	A
to	P
my	D
goal	N
.	,

I	O
don't	V
see	V
how	R
JavaScript	O
is	V
relevant	A
here	R
...	,

How	R
isn't	V
it	O
?	,
You	O
never	R
need	V
to	P
remove	V
a	D
string	N
from	P
another	D
string	N
in	P
javascript	^
?	,
Granted	N
,	,
all	D
solutions	N
have	V
been	V
posted	V
in	P
java	N
,	,
but	&
that	O
doesn't	V
invalidate	V
the	D
question	N
.	,

LOL	!
-	,
okay	!
then	R
,	,
let's	L
tag	V
this	D
as	P
Java	^
/	^
JavaScript	^
/	,
C#	^
/	,
VB.NET	^
/	,
Python	^
/	^
Ruby	^
/	,
erlang	!
/	,
Smalltalk	^
/	,
Lisp	^
/	,
etc	G
...	~
My	D
point	N
is	V
,	,
JavaScript	^
and	&
Java	^
have	V
nothing	N
in	P
common	^
other	A
than	P
syntax	N
shared	V
with	P
C#	^
,	,
C	G
,	,
C++	^
,	,
etc	G
.	,
and	&
this	D
is	V
not	R
really	R
a	D
JavaScript	N
solution	N
.	,

Should	V
work	N
...	,
EDIT	V
:	,
Apache	^
commons	N
libraries	N
are	V
also	R
great	A
to	P
use	V
As	P
noted	V
below	P
,	,
the	D
StringUtils	^
class	N
does	V
in	P
fact	N
have	V
a	D
method	N
for	P
this	D
:	,
StringUtils.remove()	^

Can't	V
you	O
just	R
replace	V
the	D
occurrences	N
of	P
the	D
first	A
string	N
in	P
the	D
second	A
with	P
an	D
empty	A
string	N
?	,

Depends	V
on	P
precisely	R
what	O
you	O
want	V
.	,
If	P
you're	L
looking	V
for	P
a	D
way	N
to	P
compare	V
strings	N
in	P
the	D
general	A
case	N
--	,
meaning	V
finding	V
common	N
sub-strings	N
between	P
arbitrary	A
inputs	N
--	,
then	R
you're	L
looking	V
at	P
something	N
closer	R
to	P
the	D
Levenshtein	N
distance	N
and	&
similar	A
algorithms	N
.	,
However	R
,	,
if	P
all	X
you	O
need	V
is	V
prefix	N
/	,
suffix	N
comparison	N
,	,
this	O
should	V
work	N
:	,
...	~
or	&
something	N
roughly	R
to	P
that	D
effect	N
.	,

Thanks	^
Chris	^
and	&
Daniel	^
(	,
and	&
all	X
the	D
rest	N
of	P
you	O
)	,
.	,
That	O
was	V
amazingly	R
fast	R
.	,

This	D
seems	V
like	P
way	N
too	R
much	A
code	N
for	P
what's	L
requested	V
-	,
Erickson's	Z
approach	N
(	,
replace	V
string	N
B	G
in	P
string	V
A	^
with	P
empty	A
string	N
)	,
is	V
much	R
simpler	A
and	&
readable	A
.	,

@Herb	@
Agreed	!
,	,
I	O
do	V
like	P
Erickson's	Z
(	,
and	&
Chris's	Z
)	,
approach	V
much	R
better	R
for	P
readability	N
.	,
However	R
,	,
his	D
doesn't	V
enforce	V
strict	A
prefix	N
/	,
suffix	N
.	,
The	D
problem	N
I	O
have	V
is	V
the	D
question	N
is	V
a	D
bit	N
ill-defined	A
:	,
what	O
does	V
String	N
difference	N
really	R
mean	V
?	,

If	P
you're	L
just	R
trying	V
to	P
get	V
whatever's	Z
after	P
the	D
last	A
dot	N
,	,
I	O
find	V
this	D
method	N
easy	A
in	P
Javascript	^
:	,
subString	V
will	V
contain	V
the	D
value	N
you're	L
looking	V
for	P
.	,

At	P
first	A
glance	N
,	,
I	O
thought	V
of	P
RegExp	^
,	,
but	&
adding	V
to	P
the	D
question	N
,	,
you	O
removed	V
that	D
possibility	N
by	P
adding	V
to	P
the	D
start-string	G
...	~
So	P
you'll	L
have	V
to	P
make	V
a	D
procedure	N
,	,
that	O
takes	V
every	D
character	N
that	P
are	V
equal	A
out	N
of	P
the	D
resulting	A
string	N
,	,
something	N
like	P
this	D
:	,
By	P
the	D
way	N
it	O
doesn't	V
have	V
a	D
meaning	N
to	P
set	V
Java	^
and	&
javascript	V
as	P
equals	V
in	P
any	D
context	N
,	,
a	D
popular	A
way	N
of	P
putting	V
it	O
could	V
be	V
:	,
Java	^
and	&
javascript	N
has	V
four	$
things	N
in	P
common	N
:	,
j	N
-	,
a	D
-	G
v	G
-	,
a	D
!	,
-	E
)	E

Though	P
this	D
relies	V
on	P
that	O
the	D
character	N
with	P
code	N
1	$
does	V
not	R
appear	V
in	P
any	D
of	P
those	D
strings	N
.	,

