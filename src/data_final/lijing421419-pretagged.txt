Good	A
choice	N
for	P
a	D
lightweight	A
checksum	N
algorithm	N
?	,

So	P
the	D
whole	A
TCP	N
/	,
IP	^
checksum	^
thing	N
isn't	V
working	V
...	,
I'm	L
thinking	V
that	D
anything	N
corrupted	V
in	P
transit	N
is	V
going	V
to	P
get	V
rejected	V
at	P
a	D
much	R
lower	A
layer	N
than	P
the	D
application	N
level	N
.	,

Yeah	!
,	,
this	O
sounds	V
like	P
something	N
usually	R
left	V
to	P
the	D
transport	N
layer	N
.	,
Can	V
you	O
explain	V
your	D
scenario	N
a	D
little	A
more	A
?	,
Where	R
is	V
your	D
data	N
being	V
sent	V
and	&
what	D
specific	A
causes	N
of	P
data	N
corruption	N
are	V
you	O
trying	V
to	P
guard	V
against	P
?	,

@dtsazza	@
-	~
you	O
mentioned	V
in	P
a	D
comment	N
below	P
that	D
this	D
is	V
for	P
security	N
(	,
malicious	A
users	N
)	,
.	,
Can	V
you	O
elaborate	V
?	,
Especially	R
since	P
this	D
will	V
probably	R
run	V
in	P
a	D
browser	N
.	,

Use	V
SHA-1	^
JS	^
implementation	N
.	,
It's	L
not	R
as	R
slow	A
as	P
you	O
think	V
(	,
Firefox	^
3.0	$
on	P
Core	^
2	P
Duo	^
2.4	^
Ghz	^
hashes	V
over	P
100KB	$
per	P
second	A
)	,
.	,

[	,
UPDATE	^
30	$
/	,
5	$
/	,
2013	@
:	,
The	D
link	N
to	P
the	D
old	A
JS	^
CRC32	^
implementation	N
died	V
,	,
so	P
I've	L
now	R
linked	V
to	P
a	D
different	A
one	$
.	,
]	,
Google	^
CRC32	^
:	,
fast	R
,	,
and	&
much	R
lighter	A
weight	N
than	P
MD5	^
et	&
al	N
.	,
There	X
is	V
a	D
Javascript	N
implementation	N
here	R
.	,

Link	V
now	R
broken	V
unfortunately	R
.	,

@JamesWestgate	@
:	~
Thanks	^
James	^
,	,
I've	L
found	V
a	D
new	A
one	$
and	&
linked	V
to	P
that	D
.	,
Incidentally	^
the	D
first	A
JS	N
version	N
I	O
found	V
(	,
at	P
http://noteslog.com/post/crc32-for-javascript/)	U
actually	R
reparses	A
part	N
of	P
the	D
string	N
containing	V
the	D
table	N
for	P
each	D
character	N
processed	V
,	,
which	O
will	V
make	V
it	O
*	,
much	A
*	,
slower	A
than	P
necessary	A
.	,

Awesome	A
!	,
Thanks	!
:)	E
Looking	V
for	P
something	N
to	P
checksum	^
javascript	A
functions	N
for	P
a	D
browser	N
based	V
animation	N
code	N
generation	N
tool	N
.	,

CRC32	^
is	V
not	R
too	R
hard	R
to	P
implement	V
in	P
any	D
language	N
,	,
it	O
is	V
good	A
enough	A
to	P
detect	V
simple	A
data	N
corruption	N
and	&
when	R
implemted	V
in	P
a	D
good	A
fashion	N
,	,
it	O
is	V
very	R
fast	R
.	,
However	R
you	O
can	V
also	R
try	V
Adler32	^
,	,
which	O
is	V
almost	R
equally	R
good	A
as	P
CRC32	^
,	,
but	&
it's	L
even	R
easier	A
to	P
implement	V
(	,
and	&
about	P
equally	R
fast	R
)	,
.	,
Adler32	^
in	P
the	D
Wikipedia	^
CRC32	^
JavaScript	^
implementation	N
sample	N
Either	^
of	P
these	D
two	$
(	,
or	&
maybe	R
even	R
both	$
)	,
are	V
available	A
in	P
Java	^
right	R
out	R
of	P
the	D
box	N
.	,

CRC32	^
,	,
definitely	R
was	V
designed	V
to	P
be	V
exactly	R
what	O
you	O
describe	V
.	,

A	D
word	N
of	P
caution	N
:	,
the	D
JavaScript	N
in	P
the	D
link	N
implements	V
the	D
algorithm	N
with	P
a	D
table[256	$
]	,
of	P
literal	A
values	N
.	,
If	P
you	O
should	V
modify	V
even	R
a	D
single	A
digit	N
of	P
that	D
table	N
,	,
you	O
will	V
have	V
a	D
nasty	A
bug	N
that	P
is	V
very	R
,	,
very	R
,	,
hard	R
to	P
find	V
!	,
I	O
prefer	V
implementations	P
that	O
generate	V
the	D
table	N
on	P
the	D
1st	$
call	N
.	,

I'll	L
second	A
@D	@
.i.S's	L
comment	V
.	,
Testability	N
is	V
a	D
minus	P
.	,

Javascript	A
implementation	N
of	P
MD4	^
,	,
MD5	$
and	&
SHA1	^
.	,
BSD	^
license	N
.	,

Are	V
aware	A
that	P
both	D
TCP	^
and	&
UDP	N
(	,
and	&
IP	^
,	,
and	&
Ethernet	N
,	,
and	&
...	~
)	,
already	R
provide	V
checksum	A
protection	N
to	P
data	N
in	P
transit	N
?	,
Unless	P
you're	L
doing	V
something	N
really	R
weird	A
,	,
if	P
you're	L
seeing	V
corruption	N
,	,
something	N
is	V
very	R
wrong	A
.	,
I	O
suggest	V
starting	V
with	P
a	D
memory	N
tester	N
.	,
Also	R
,	,
you	O
receive	V
strong	A
data	N
integrity	N
protection	N
if	P
you	O
use	V
SSL	^
/	,
TLS	^
.	,

Yes	!
,	,
I	O
am	V
was	V
aware	A
of	P
that	O
,	,
though	P
you	O
were	V
right	R
to	P
point	N
it	O
out	T
.	,
Unfortunately	R
it's	L
in	P
input	N
coming	V
from	P
the	D
world	N
at	P
large	A
,	,
so	P
we	O
need	V
to	P
be	V
able	A
to	P
cope	V
with	P
this	D
anyway	R
(	,
malicious	A
/	,
mischevious	A
users	N
could	V
mangle	P
this	D
for	P
example	N
)	,
.	,

It	O
might	V
be	V
worth	V
pointing	V
out	T
that	O
for	P
any	D
change-detection	N
algorithm	N
,	,
there	X
is	V
always	R
a	D
chance	N
that	P
it	O
won't	V
detect	V
an	D
error	N
.	,
They	O
all	X
can	V
have	V
collisions	N
or	&
false-negatives	N
,	,
though	P
usually	R
the	D
more	R
expensive	A
algorithms	N
reduce	V
this	D
chance	N
to	P
near-astronomically	R
small	A
probabilities	N
.	,

@dtsazza	@
:	~
I	O
wonder	V
about	P
the	D
malicious	A
/	,
mischievous	A
users	N
who	O
can	V
mangle	A
packets	N
going	V
across	P
the	D
network	N
,	,
but	&
can't	V
defeat	^
Javascript	^
.	,
Or	^
Adler32	^
.	,

Other	A
people	N
have	V
mentioned	V
CRC32	^
already	R
,	,
but	&
here's	L
a	D
link	N
to	P
the	D
W3C	^
implementation	N
of	P
CRC-32	^
for	P
PNG	^
,	,
as	P
one	$
of	P
the	D
few	A
well-known	N
,	,
reputable	A
sites	N
with	P
a	D
reference	N
CRC	N
implementation	N
.	,
(	,
A	D
few	A
years	N
back	R
I	O
tried	V
to	P
find	V
a	D
well-known	A
site	N
with	P
a	D
CRC	^
algorithm	^
or	&
at	P
least	R
one	$
that	O
cited	V
the	D
source	N
for	P
its	D
algorithm	N
,	,
was	V
almost	R
tearing	V
my	D
hair	N
out	P
until	P
I	O
found	V
the	D
PNG	N
page	N
.	,
)	E

Here's	L
a	D
relatively	R
simple	A
one	$
I've	^
'	,
invented	V
'	,
-	,
there's	Y
no	D
mathematical	A
research	N
behind	P
it	O
but	&
it's	L
extremely	R
fast	R
and	&
works	V
in	P
practice	N
.	,
I've	L
also	R
included	V
the	D
Java	^
equivalent	N
that	O
tests	V
the	D
algorithm	N
and	&
shows	V
that	D
there's	Z
less	A
than	P
1	$
in	P
10,000,000	$
chance	N
of	P
failure	N
(	,
it	O
takes	V
a	D
minute	N
or	&
two	$
to	P
run	V
)	,
.	,
JavaScript	^
Java	^

Why	R
?	,
Would	V
you	O
like	V
to	P
share	V
an	D
example	N
?	,

This	D
is	V
a	D
rather	R
old	A
thread	N
but	&
I	O
suspect	V
it	O
is	V
still	R
viewed	V
quite	R
often	R
so	R
-	,
if	P
all	X
you	O
need	V
is	V
a	D
short	A
but	&
reliable	A
piece	N
of	P
code	N
to	P
generate	V
a	D
checksum	G
the	D
Adler32	^
bit	N
algorithm	N
has	V
to	P
be	V
your	D
choice	N
.	,
Here	R
is	V
the	D
JavaScript	N
code	N
The	^
corresponding	A
fiddle	N
demonsrating	V
the	D
algorithm	N
in	P
action	N
is	V
here	R
.	,

