Write	N
a	N
Servlet	N
that	N
Talks	N
to	N
JMS	N
(	N
ActiveMQ	N
)	N
and	N
OnMessage	N
Update	N
the	N
Site	N

I	N
am	N
building	N
a	N
site	N
that	N
uses	N
a	N
simple	N
AJAX	N
Servlet	N
to	N
talk	N
JMS	N
(	N
ActiveMQ	N
)	N
and	N
when	N
a	N
message	N
arrives	N
from	N
the	N
topic	N
to	N
update	N
the	N
site	N
.	N
I	N
have	N
Javascript	N
that	N
creates	N
an	N
XMLHttpRequest	N
for	N
data	N
.	N
The	N
Servlet	N
processes	N
the	N
Get	N
Request	N
and	N
sends	N
back	N
JSON	N
.	N
However	N
I	N
have	N
no	N
idea	N
how	N
to	N
connect	N
my	N
Servlet	N
into	N
my	N
ActiveMQ	N
Message	N
Broker	N
.	N
It	N
just	N
sends	N
back	N
dummy	N
data	N
right	N
now	N
.	N
I	N
am	N
thinking	N
the	N
Servelt	N
should	N
implement	N
the	N
messagelistener	N
.	N
Then	N
onMessage	N
send	N
data	N
to	N
the	N
JavaScript	N
page	N
.	N
But	N
I'm	N
not	N
sure	N
how	N
to	N
do	N
this	N
.	N

You	N
probably	N
need	N
to	N
get	N
a	N
JMS	N
connection	N
from	N
JNDI	N
,	N
like	N
this	N
:	N

Okay	N
...	N
this	N
is	N
a	N
good	N
way	N
to	N
connect	N
to	N
my	N
Topic	N
,	N
thanks	N
.	N
I	N
already	N
have	N
code	N
like	N
this	N
is	N
another	N
Java	N
Client	N
.	N
But	N
I	N
want	N
the	N
Servelt	N
to	N
implement	N
the	N
messagelistener	N
.	N
Then	N
onMessage	N
send	N
data	N
to	N
the	N
Javascript	N
page	N
.	N

The	N
problem	N
with	N
having	N
a	N
servlet	N
implement	N
MessageListener	N
is	N
that	N
servlets	N
are	N
synchronous	N
and	N
MessageListeners	N
are	N
asynchronous	N
.	N
Instead	N
you	N
should	N
create	N
some	N
other	N
object	N
to	N
act	N
as	N
the	N
MessageListener	N
and	N
update	N
some	N
state	N
somewhere	N
(	N
possibly	N
a	N
database	N
or	N
a	N
JMX	N
MBean	N
or	N
a	N
Stateful	N
Session	N
EJB	N
)	N
when	N
messages	N
come	N
in	N
.	N
Then	N
the	N
servlet	N
can	N
query	N
that	N
state	N
to	N
see	N
if	N
there's	N
data	N
to	N
report	N
back	N
to	N
the	N
client	N
,	N
and	N
your	N
web	N
page	N
can	N
periodically	N
ping	N
the	N
servlet	N
to	N
ask	N
for	N
fresh	N
data	N
.	N

Thanks	N
jodonnell	N
..	N
I	N
have	N
never	N
wrote	N
a	N
JMX	N
MBean	N
or	N
Stateful	N
Session	N
EJB	N
but	N
after	N
a	N
quick	N
google	N
search	N
I	N
think	N
this	N
is	N
the	N
right	N
path	N
to	N
look	N
down	N
.	N
Thanks	N
for	N
the	N
help	N
.	N

Have	N
you	N
tried	N
reading	N
the	N
answers	N
for	N
this	N
question	N
which	N
links	N
to	N
the	N
ActiveMQ	N
Ajax	N
support	N
.	N
Basically	N
ActiveMQ	N
has	N
native	N
support	N
for	N
Ajax	N
so	N
you	N
can	N
use	N
its	N
JavaScript	N
library	N
to	N
directly	N
subscribe	N
from	N
an	N
ActiveMQ	N
topic	N
.	N
Also	N
see	N
the	N
ActiveMQ	N
web	N
samples	N
which	N
show	N
how	N
to	N
do	N
things	N
like	N
real	N
time	N
chat	N
or	N
real	N
time	N
stock	N
portfolio	N
screens	N
using	N
Ajax	N
with	N
ActiveMQ	N

As	N
James	N
Strachan	N
says	N
-	N
http://activemq.apache.org/ajax.html	N
is	N
an	N
ideal	N
out-of-the-box	N
solution	N
for	N
your	N
problem	N
.	N
If	N
you	N
still	N
want	N
to	N
create	N
such	N
solution	N
manually	N
you	N
can	N
just	N
create	N
JMS	N
connection	N
in	N
your	N
Ajax	N
servlet	N
(	N
connection	N
per	N
request	N
)	N
.	N
Consider	N
using	N
Spring	N
JMS	N
template	N
for	N
that	N
reason	N
(	N
http://static.springsource.org/spring/docs/2.5.x/reference/jms.html	N
)	N
.	N
Then	N
just	N
receive	N
the	N
message	N
in	N
the	N
Servlet	N
doGet	N
/	N
doPost	N
method	N
.	N
Consider	N
low	N
timeout	N
value	N
for	N
receiving	N
in	N
that	N
case	N
.	N
Such	N
solution	N
will	N
work	N
for	N
the	N
Queues	N
and	N
durable	N
Topics	N
.	N
For	N
non-durable	N
Topics	N
consider	N
external	N
message	N
listener	N
.	N
Spring	N
MessageListenerContainer	N
is	N
an	N
excellent	N
tool	N
for	N
that	N
purpose	N
:	N
Bean	N
lastTenUpdatesCache	N
will	N
be	N
a	N
singleton	N
bean	N
implementing	N
MesssageListener	N
.	N
This	N
bean	N
would	N
be	N
responsible	N
for	N
caching	N
last	N
ten	N
messages	N
(	N
just	N
putting	N
it	N
into	N
a	N
java.util	N
list	N
)	N
.	N
It	N
will	N
be	N
injected	N
into	N
your	N
Ajax	N
servlet	N
so	N
in	N
your	N
doGet	N
/	N
doPost	N
method	N
you	N
can	N
ask	N
it	N
about	N
last	N
10	N
messages	N
sent	N
to	N
the	N
topic	N
.	N

