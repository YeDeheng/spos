416998	Is Google Web Toolkit useful to develop complex javascripts ?	V ^ ^ ^ A P V A N ,
416998	Iam a great fan of javascript frameworks especially jQuery . I have always wanted to design sites like " plurk.com " but i know that it needs very huge lines of javascript.so that shut me off.But since i came to know GWT , i really want to test it out and want to ask you if it makes our job easier to develop complex things than with the javascript or its frameworks . Which one would you prefer ?	V D A N P ^ ^ R A , O V R V P N N V , ! , & O V P O V R A N P N O V O V P O V P V ^ , O R V P N O T & V P V O P O V D N A P V A N P P D N & L ^ , ^ $ V O V ,
416998	With GWT , you're not actually writing JavaScript ; it's entire value proposition is that you can write Java that it will compile down to JavaScript for you .	P ^ , L R R V ^ , L A N N V P O V V ^ P O V V T P ^ P O ,
416998	ya i know . but i just want to know , does that simplify the process of developing complex javascripts - very huge lines of javascript code ?	! O V , & O R V P V , V O V D N P V A N , R A N P D N ,
416998	I guess if you trust that google will do it better than you would and you know your Java it * could * do - personally I'm against it , but it probably has niche value for someone	O V P O V D ^ V V O R P O V & O V D ^ ^ , V , V , R L P O , & O R V N N P O
416998	No . It doesn't . It doesn't remove the complexity , it just makes it possible for you to deal with it from a Java Perspective . Since that gives you all the Tooling available from Java ... that alone might make it worthwhile . JavaScript IDEs are getting better and better though , and typically if you're using a Framework like jQuery or Prototype , then you're probably going to find it easier than dealing with a heavy weight abstraction layer like GWT . My personal preference is to take the pure JavaScript approach , but that's because I like being able to work more closely to metal , and I'm disciplined enough to tame my JavaScript cats .	! , O V , O V V D N , O R V O R P O P N P O P D ^ ^ , P O V O X D N A P ^ , O R V V O A , ^ ^ V V R & R P , & R P L V D ^ P ^ & ^ , R L R V P V O A P V P D A N N N P ^ , D A N V P V D A N N , & L P O V V A P V R R P N , & L V A P V D N N ,
416998	Yes , it does , since you'll be using Java and not Javascript . Superb IDEs , static code analysis , searching and refactoring - all this will make your life much easier on large projects .	! , O V , P L V V ^ & R A , ^ ^ , A N N , V & V , X D V V D N R A P A N ,
416998	Few things scare me like " generated Javascript " . The Law of Leaky Abstractions has got to be doubly true in these cases . Writing effective cross-browser javascript is a tricky process of continuous refinement . Trying to decipher where some generated , obscured Javascript is going wrong is a major headache . It's bad enough fixing bugs in the pure JS libraries . To me , GWT is a trick aimed at allowing backend developers to write front-end , in-browser code . Unfortunately , the realities of modern web apps mean you just have to know Javascript and the DOM . Something's going to break , and you're going to need to know why . I think you're better off picking a good javascript library like jquery or prototype , and learning that well . Those libraries abstract away the sort of stuff that SHOULD be abstracted away and is unlikely to break in edge cases , like array operations and AJAX requests .	A N V O V , V ^ , , ^ ^ P ^ ^ V V P V R A P D N , V A N N V D A N P A N , V P ^ R D V , A N V V N V D A N , L A N V V P D A N N , P O , O V D N V P V D N P V ^ , A N , R , D N P A N N V O R V P V ^ & D N , L V P V , & L V P V P V R , O V L R O V D A N N P A & N , & V O R , D N V R D N P V O V V V R & V R P V P N N , V N N & ^ N ,
416998	Do you think the same way about generated Assembler ? Handling all those differences between different Processor architecures ? I am not saying , that GWT is necessarily there yet . But Generating one language out of another is nothing scary at all .	V O V D A N P V ^ , V X D N P A N N , O V R V , D V V R R R , & V $ N P P O V R A P X ,
416998	the problem is that since JS is a high-level language , there are several features you'd like to use . for example a hashtable . it's not exactly the same semantics as Java maps , so they write an emulation layer . therefore they're no longer usable as JS objects . same for other things ...	D N V O P ^ V D A N , X V A N L V P V , P N D N , L R R D A N P ^ N , P O V D N N , & L R A A P ^ N , A P A N ,
416998	Another difference is that , besides being a much more mature technology , assembler is very highly tuned towards a single architecture . The same cannot be said of Javascript , which must support scores of different browsers and version .	D N V O , P V D A R A N , ^ V R R A P D A N , D A N V V P ^ , O V N N P A N & N ,
416998	not to mention that all modern cpu instruction sets are designed for the compiler , not for a human programmer ; just like bytecodes are designed with a specific language in mind .	R P V P R A N N N V V P D N , R P D N N , R P O V V P D A N P N ,
416998	I suspect you've never used GWT in a large scale project . It doesn't make cross browser stuff harder , it makes it easier . People worry about going through generated javascript , but the truth is you never have to , just like you never have to look at java byte code , because the compiler is top-notch .	O V L R V V P D A N N , O V V V N N R , O V O A , N V P V P V N , & D N V O R V P , R P O R V P V P ^ N N , P D N V A ,
416998	disregarding whether compiled js is good or bad , gwt offers hosted mode debugging , and simple unit test integration , which is a must in large projects . However , there are some growing pains involved with gwt , but nothing too bad . GWT is more suitable for large scale ajax app vs medium scale ones .	V P V O V A & A , O V V N V , & A N N N , O V D V P A N , R , X V D V N V P ^ , & N R A , O V R A P A N N N P A N N ,
416998	Using GWT is really no different then using jQuery or Prototype . If there is a bug in the library you are using , it will make your life difficult . The same problems exist for GWT . The difference is that GWT has Google's developers backing it up , not just the few people behind the other libraries .	V O V R R A R V A & ^ , P X V D N P D N O V V , O V V D N A , D A N V P ^ , D N V D N V Z N V O T , R R D A N P D A N ,
416998	I'm working on a project that has used GWT to pretty good effect . It's a good choice for us since we're all primarily Java developers working on internal tools . I can't speak to how useful it is for large end-user sites . One advantage I particularly appreciate is the seamless object serialization and deserialization . Not only are the details of XML-RPC abstracted away , but since the same Java code is compiled to byte code for the server and javascript for the browser , you can code almost as if the server and client were running in separate class loaders in the same JVM . For instance , you can construct a Java object on the server , send it to the browser as the return value from an RPC service call and the browser code can then use the identical Java class to manipulate the object you just returned . Likewise , parameters to RPC calls can be constructed as Java objects , with the server receiving an identical Java object on the other end . All this without mucking about in the details of ( de ) serialization .	L V P D N P V V V P R A N , L D A N P O P L R R ^ N V P A N , O V V P R A O V P A N N , $ N O R V V D A N N & N , R A P D N P ^ V R , & P D A ^ N V V P A N P D N & V P D N , O V N R R P D N & N V V P A N N P D A N , P N , O V V D ^ N P D N , V O P D N P D N N P D ^ N V & D N N V R V D A ^ N P V D N O R V , R , N P ^ V V V V P ^ N , P D N V D A ^ N P D A N , X D P V P P D N P E E E N ,
416998	GWT doesnt actually use XML-RPC , but yea , the rest of the post is my sentiments exactly .	O V R V ^ , & ! , D N P D N V D N R ,
416998	thanks a lot :) that was great .	V D N E O V A ,
