md5_NNS hash_VBP for_IN password_NN string_NN in_IN GWT_NN /_: GWT-Ext_NN ?_.
I_PRP am_VBP currently_RB trying_VBG to_TO modify_VB an_DT existing_VBG GWT-Ext_NN application_NN ,_, that_WDT is_VBZ using_VBG plain_JJ text_NN passwords_NNS in_IN its_PRP$ MySql_NNP database_NN ._. My_PRP$ plan_NN was_VBD to_TO use_VB md5_NN hashes_NNS ,_, as_IN the_DT existing_VBG passwords_NNS can_MD be_VB easily_RB altered_VBN with_IN the_DT MySql_NN function_NN and_CC I_PRP was_VBD expecting_VBG to_TO find_VB an_DT easy_JJ solution_NN for_IN the_DT GWT-Ext_NN side_NN as_RB well_RB ._. But_CC as_IN I_PRP found_VBD out_RP ,_, java.security_NN is_VBZ not_RB supported_VBN by_IN GWT_NN and_CC there_EX doesn't_NN seem_VBP to_TO be_VB any_DT other_JJ implementation_NN that_WDT can_MD be_VB used_VBN to_TO change_VB the_DT password_NN string_NN to_TO a_DT md5_NN hash_NN on_IN client_NN side_NN ._. Only_RB "_`` solution_NN "_'' I_PRP found_VBD so_RB far_RB ,_, is_VBZ to_TO re_RB implement_VB a_DT md5_NN method_NN via_IN JSNI_NN as_IN described_VBN here_RB :_: http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ad09475a9944c9f8_NN There_EX is_VBZ an_DT existing_VBG user_NN extension_NN for_IN Ext-JS_NN ,_, but_CC I_PRP couldn't_VBP find_VB anything_NN for_IN GWT-Ext_NN :_: http://extjs.com/forum/showthread.php?p=133516_NNP Does_NNP anybody_NN know_VB a_DT more_RBR elegant_JJ /_: simple_JJ way_NN to_TO solve_VB this_DT problem_NN ?_. Maybe_RB I_PRP should_MD use_VB something_NN else_RB instead_RB of_IN md5_NN to_TO make_VB sure_JJ the_DT passwords_NNS are_VBP encrypted_VBN ?_. Cheers_NNP Frank_NNP
Personally_RB ,_, I_PRP would_MD say_VB you're_NN doing_VBG it_PRP wrong_JJ ._. I_PRP wouldn't_VBP hash_VB a_DT password_NN on_IN the_DT client_NN side_NN (_NN which_WDT is_VBZ what_WP GWT_NNP is_VBZ )_NNP ._. If_IN you_PRP hash_VBP your_PRP$ password_NN ,_, you_PRP will_MD undoubtedly_RB want_VB to_TO salt_NN it_PRP ,_, otherwise_RB you_PRP will_MD be_VB susceptible_JJ to_TO rainbow_NN attacks_NNS ._. If_IN you_PRP hash_VBP +_CC salt_NN it_PRP on_IN the_DT client_NN side_NN ,_, your_PRP$ salt_NN will_MD be_VB accessible_JJ to_TO your_PRP$ users_NNS ._. If_IN I_PRP were_VBD you_PRP ,_, I_PRP would_MD hash_VB +_CC salt_NN your_PRP$ password_NN on_IN the_DT server_NN side_NN ._. This_DT will_MD allow_VB you_PRP to_TO use_VB your_PRP$ standard_JJ Java_NNP code_NN to_TO perform_VB your_PRP$ MD5_NN hash_NN ._. My_PRP$ 2_CD cents_NNS ._. -JP_NN
Its_PRP$ not_RB a_DT bad_JJ scheme_NN if_IN he_PRP does_VBZ something_NN like_IN cram-md5_NN on_IN the_DT client_NN side_NN ,_, where_WRB the_DT client_NN computes_VBZ a_DT hmac_FW (_FW md5_NN hash_NN plus_CC a_DT nonce_JJ salt_NN )_NN and_CC sends_VBZ it_PRP to_TO the_DT server_NN ._. The_DT down_JJ side_NN is_VBZ that_IN the_DT server_NN needs_VBZ clear_JJ text_NN password_NN to_TO check_VB the_DT hmac_NN ._.
good_JJ point_NN about_IN the_DT rainbow_NN attacks_NNS ,_, didn't_NN knew_VBD about_IN this_DT before_IN ._. I_PRP also_RB solved_VBD it_PRP by_IN doing_VBG the_DT encryption_NN on_IN the_DT server_NN side_NN ,_, but_CC the_DT idea_NN was_VBD ,_, that_IN I_PRP wanted_VBD to_TO encrypt_VB the_DT password_NN ,_, before_IN sending_VBG it_PRP to_TO the_DT server_NN ,_, as_IN we_PRP currently_RB only_RB use_VB http_NN and_CC no_DT https_NNS ._.
GWT_NN is_VBZ client-side_JJ and_CC server_NN side_NN ._. Other_JJ than_IN that_DT ,_, the_DT post_NN is_VBZ good_JJ advice_NN ._. Don't_NN hash_VBP it_PRP on_IN the_DT client_NN side_NN ._. Have_VB a_DT look_NN at_IN http://www.owasp.org/index.php/Hashing_Java_NN ._.
Another_DT idea_NN that_WDT may_MD fit_VB your_PRP$ need_NN is_VBZ something_NN called_VBN zero_CD knowledge_NN auth_NN ._. (_FW Ie_FW ._. the_DT server_NN never_RB needs_VBZ to_TO know_VB the_DT user's_JJ plain_JJ text_NN password_NN ._. )_NN Basically_RB ,_, when_WRB setting_VBG the_DT initial_JJ password_NN ,_, the_DT client_NN hashes_VBZ the_DT user's_JJ password_NN N_NN times_NNS (_VBP where_WRB N_NN is_VBZ a_DT largish_JJ number_NN like_IN 1000_CD )_NN ,_, and_CC then_RB sends_VBZ that_IN final_JJ hash_NN to_TO the_DT server_NN along_IN with_IN N_NN ._. The_DT server_NN stores_VBZ the_DT hash_NN and_CC N_NN ._. Later_RB ,_, when_WRB the_DT user_NN wants_VBZ to_TO authenticate_VB ,_, the_DT server_NN tells_VBZ the_DT client_NN N-1_NN ,_, and_CC the_DT client_NN hashes_VBZ the_DT password_NN the_DT user_NN types_NNS N-1_NN times_NNS and_CC sends_VBZ that_IN to_TO the_DT server_NN ._. The_DT server_NN does_VBZ 1_CD more_JJR hash_NN on_IN the_DT received_JJ hash_NN ,_, and_CC (_NN hopefully_RB )_NNP gets_VBZ the_DT stored_VBN hash_NN ._. The_DT server_NN then_RB stores_VBZ the_DT N-1_NN hash_NN and_CC N-1_NN number_NN ._. Each_DT time_NN the_DT user_NN authenticates_VBZ ,_, the_DT server_NN decrements_VBZ the_DT stored_VBN N_NN and_CC saves_VBZ the_DT previous_JJ hash_NN ._. When_WRB N_NN gets_VBZ down_RB to_TO 0_CD ,_, the_DT user_NN must_MD choose_VB and_CC set_VB a_DT new_JJ password_NN ._. The_DT server_NN must_MD ensure_VB that_IN it_PRP never_RB asks_VBZ for_IN the_DT same_JJ iteration_NN ,_, otherwise_RB it_PRP is_VBZ vulnerable_JJ to_TO a_DT replay_NN ._. You_PRP can't_VBP really_RB enforce_VB that_DT condition_NN from_IN the_DT client_NN side_NN because_IN the_DT client_NN (_NN especially_RB a_DT browser_NN )_FW can't_FW reliably_RB keep_VB track_NN of_IN the_DT last_JJ N_NN ._.
Very_RB interesting_JJ idea_NN ,_, and_CC never_RB thought_VBD of_IN that_DT before_IN ._. Doesn't_NN really_RB fit_VBD in_IN the_DT current_JJ solution_NN ,_, but_CC I_PRP will_MD keep_VB it_PRP in_IN mind_NN for_IN future_JJ reference_NN ,_, thanks_NNS :-)_NN
Interesting_JJ idea_NN so_IN I_PRP spent_VBD some_DT time_NN thinking_VBG about_IN it_PRP ,_, but_CC it_PRP is_VBZ vulnerable_JJ to_TO a_DT man-in-the-middle_JJ attack_NN ._. On_IN an_DT authentication_NN request_NN ,_, the_DT server_NN sends_VBZ some_DT number_NN M_NN ._. The_DT attacker_NN sends_VBZ (_CD M-1_NN )_NN to_TO the_DT client_NN ,_, and_CC receives_VBZ hash_FW (_FW M-1_NN )_NN back_RB ._. The_DT attacker_NN tries_VBZ to_TO authenticate_VB again_RB ,_, receives_VBZ challenge_NN (_NN M-1_NN )_NN from_IN the_DT server_NN and_CC responds_VBZ with_IN hash_FW (_FW M-1_NN )_NN ._. The_DT attacker_NN is_VBZ now_RB authenticated_VBN ._.
yes_RB ,_, that_WDT does_VBZ sound_VB like_IN an_DT issue_NN ._. My_PRP$ first_JJ thought_NN would_MD be_VB to_TO require_VB the_DT server_NN to_TO not_RB reuse_VB M_NN after_IN issuing_VBG it_PRP during_IN a_DT challenge_NN to_TO the_DT client_NN ._. However_RB ,_, the_DT larger_JJR issue_NN remains_VBZ that_IN Mallory_NNP could_MD tell_VB the_DT client_NN M-100_NN ,_, collect_VBP the_DT hash_FW (_FW M-100_NN )_NN from_IN the_DT client_NN ,_, and_CC then_RB login_VB up_IN to_TO 100_CD times_NNS with_IN the_DT intercepted_VBN hash_NN ._. I'll_NN have_VBP to_TO go_VB see_VB if_IN the_DT project_NN that_IN I_PRP first_RB encountered_VBD this_DT in_IN found_VBN the_DT same_JJ issues_NNS and_CC dealt_VBD with_IN it_PRP or_CC abandoned_JJ zero_NN knowledge_NN auth_NN ._.
I_PRP think_VBP you're_NN always_RB going_VBG to_TO be_VB vulnerable_JJ to_TO a_DT man_NN in_IN the_DT middle_JJ attack_NN ._. Keyloggers_NNPS too_RB ._. Also_RB drunken_JJ confessions_NNS of_IN passwords_NNS ._. We_PRP can_MD only_RB raise_VB the_DT bar_NN so_RB far_RB with_IN reasonable_JJ coding_NN efforts_NNS ._.
You_PRP can_MD use_VB gwt-crypto_JJ to_TO generate_VB SHA-1_NN hashes_VBZ on_IN the_DT client_NN side_NN using_VBG :_:
You_PRP should_MD never_RB use_VB an_DT md5_NN or_CC other_JJ hash_JJ functions_NNS for_IN password_NN encryption_NN ._. See_NNP http://codahale.com/how-to-safely-store-a-password_NNP /_:
