Should	V
web	N
developers	N
still	R
learn	V
JavaScript	^
?	,

Now	R
that	O
frameworks	V
like	P
GWT	^
,	,
Morfik	^
etc	G
exist	V
which	D
compile	V
Java	^
client	N
side	N
code	N
into	P
major	A
JavaScript	N
dialects	N
,	,
is	V
it	O
still	R
worth	V
learning	V
JavaScript	^
?	,

In	P
my	D
book	N
,	,
yes	!
.	,
I'm	L
a	D
strong	A
believer	N
in	P
understanding	V
the	D
underlying	A
technology	N
beneath	P
whatever	D
toolkits	N
you're	L
using	V
.	,
Abstractions	^
are	V
leaky	A
-	,
you'll	L
run	V
into	P
trouble	N
down	P
the	D
line	N
if	P
you	O
try	V
to	P
get	V
away	R
with	P
only	A
understanding	N
a	D
high-level	A
toolkit	N
,	,
and	&
not	R
the	D
underlying	A
technology	N
.	,
Sooner	^
or	&
later	R
you'll	L
need	V
to	P
debug	X
your	D
project	N
at	P
the	D
JavaScript	N
(	,
or	&
whatever	!
)	,
level	N
.	,

Not	R
really	R
worth	A
it's	L
own	A
answer	N
,	,
so	P
put	V
here	R
.	,
If	P
you	O
use	V
one	$
of	P
the	D
Java	^
->	^
Javascript	^
converters	N
,	,
you	O
lose	V
a	D
lot	N
of	P
javascript	O
features	V
such	R
as	R
dynamic	A
typing	N
,	,
and	&
the	D
ability	N
to	P
use	V
functions	N
as	P
proper	A
objects	N
.	,
I	O
don't	V
really	R
see	V
why	R
people	N
look	V
at	P
javascript	V
as	P
a	D
low	A
level	N
language	N
.	,
Combined	V
with	P
frameworks	^
(	,
written	V
in	P
javascript	^
)	,
such	A
as	P
jQuery	^
,	,
it's	L
a	D
easy	A
to	P
use	V
and	&
powerful	A
language	N
.	,

@Macha	@
:	~
Well	!
said	V
.	,
JS	^
in	P
it's	L
own	A
right	N
is	V
extremely	R
powerful	A
(	,
and	&
very	R
different	A
from	P
Java	^
)	,
.	,
Why	R
cover	V
it	O
up	T
with	P
abstractions	N
?	,

Agreed	!
.	,
Using	V
stuff	N
like	P
Gwt	^
without	P
knowing	V
JS	^
is	V
like	P
using	V
some	D
database	N
tool	N
without	P
knowing	V
SQL	^
.	,
While	P
that	O
may	V
work	N
,	,
you're	L
going	V
to	P
get	V
better	A
results	N
if	P
you	O
actually	R
know	V
what's	L
going	V
on	P
.	,

Understanding	V
the	D
technology	N
behind	P
your	D
framework	N
reduces	V
the	D
time	N
spending	V
on	P
debugging	V
the	D
things	N
you	O
do	V
with	P
your	D
framework	N
.	,
so	R
in	P
my	D
opinion	N
it's	L
always	R
good	A
to	P
know	V
whats	L
going	V
on	P
behind	P
the	D
scene	N
.	,

Stretching	V
this	D
further	A
...	,
Should	V
you	O
learn	V
assembly	A
language	N
nowaday	N
with	P
so	R
many	A
higher	A
level	N
languages	N
?	,
Should	V
you	O
learn	V
how	R
to	P
do	V
basic	A
arithmetic	N
like	P
subtraction	N
and	&
addition	N
by	P
hand	N
when	R
now	R
we	O
have	V
calculator	N
and	&
computer	N
that	P
can	V
do	V
this	D
for	P
you	O
?	,
Well	!
,	,
I'd	L
say	V
maybe	R
you	O
won't	V
need	V
to	P
if	P
you	O
don't	V
have	V
any	D
reason	N
to	P
go	V
deep	R
down	R
,	,
but	&
someone	N
will	V
have	V
to	P
still	R
.	,
As	R
with	P
all	D
things	N
,	,
there	X
is	V
a	D
balance	N
.	,
Know	V
that	P
it	O
will	V
be	V
to	P
your	D
disadvantage	N
if	P
you	O
don't	V
know	V
the	D
lower	A
level	N
stuffs	N
,	,
but	&
sometimes	R
it	O
is	V
necessary	A
to	P
skip	V
it	O
so	P
you	O
can	V
be	V
deep	R
in	P
something	N
else	R
.	,
You	O
have	V
to	P
admit	V
there	R
are	V
so	R
much	A
technology	N
out	P
there	R
that	P
you	O
won't	V
be	V
able	A
to	P
be	V
an	D
expert	N
in	P
all	D
things	N
.	,
In	P
that	D
case	N
,	,
knowing	V
someone	O
else	R
who	O
does	V
is	V
a	D
good	A
thing	N
.	,
So	P
pick	V
your	D
choice	N
and	&
go	V
with	P
what	D
interest	N
you	O
.	,
If	P
you	O
think	V
you	O
are	V
interested	V
in	P
learning	V
JavaScript	^
go	V
for	P
it	O
.	,
If	P
not	R
,	,
you	O
can	V
stick	V
to	P
your	D
level	N
of	P
abstraction	N
and	&
get	V
a	D
JavaScript	N
buddy	N
that	P
can	V
help	V
you	O
when	R
you	O
are	V
stuck	V
.	,

Yes	!
,	,
...	~
and	&
I	O
speak	V
with	P
experience	N
:	,
I've	L
never	R
learned	V
javascript	N
and	&
only	R
used	A
parts	N
of	P
it	O
,	,
when	R
I	O
encountered	V
it	O
in	P
google	^
searches	V
for	P
questions	N
.	,
Now	R
that	P
I'm	L
building	V
a	D
Web	^
application	N
,	,
I	O
notice	V
that	O
not	R
all	D
abstractions	N
away	R
from	P
javascript	O
have	V
the	D
desired	A
functionality	N
,	,
and	&
I	O
need	V
to	P
go	V
into	P
javascript	V
to	P
solve	V
it	O
.	,
I	O
notice	V
that	P
I	O
miss	V
the	D
fundamental	A
knowledge	N
I	O
have	V
with	P
other	A
languages	N
,	,
just	R
like	P
I	O
miss	V
the	D
'	,
javascript	A
programming	V
language	N
'	,
book	N
(	,
I'm	L
not	R
sure	A
it	O
exists	V
but	&
I	O
have	V
similar	A
copies	N
for	P
C	G
,	,
C++	^
and	&
Java	^
)	,
.	,
So	P
today	N
I	O
ordered	V
Javascript	^
:	,
The	D
good	A
parts	N
and	&
I	O
will	V
learn	V
it	O
...	,

Crockford's	Z
The	^
Good	A
Parts	N
is	V
not	R
really	R
a	D
beginner's	S
book	N
.	,
I	O
suggest	V
you	O
first	R
start	V
with	P
Flanagan's	Z
Javascript	^
The	^
Definitive	^
guide	N
,	,
and	&
then	R
move	V
on	P
to	P
The	D
Good	A
Parts	N
.	,
http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996/ref=sr_1_1?ie=UTF8	U
&s	^
=b	^
ooks	^
&qid	^
=1246804047	^
&sr	^
=8-1	$

I	O
would	V
suggest	V
cross-referencing	V
the	D
two	$
;	,
for	P
the	D
language	N
features	V
that	D
Crockford	^
leaves	V
out	T
of	P
The	D
Good	A
Parts	N
,	,
I	O
wouldn't	V
spend	V
too	R
much	A
time	N
studying	V
them	O
while	P
reading	V
The	^
Definitive	^
Guide	^
.	,
You	O
may	V
eventually	R
need	V
to	P
understand	V
those	O
features	V
,	,
but	&
part	N
of	P
Crockford's	Z
point	N
is	V
that	P
a	D
bunch	N
of	P
things	N
in	P
the	D
Javascript	N
language	N
were	V
poorly	R
designed	A
and	&
really	R
shouldn't	V
be	V
there	R
.	,
I've	L
found	V
that	O
,	,
for	P
the	D
most	A
part	N
,	,
I've	L
agreed	V
with	P
him	O
.	,
(	,
I	O
also	R
learned	V
a	D
fair	A
amount	N
from	P
him	O
.	,
)	E

Dreas	^
:	,
Thanks	N
for	P
the	D
tip	N
,	,
I	O
will	V
get	V
the	D
book	N
soon	R
so	P
I	O
will	V
see	V
if	P
I	O
still	R
miss	V
some	D
fundamentals	N
.	,
Note	V
that	P
I've	L
learned	V
already	R
a	D
lot	N
of	P
different	A
languages	N
,	,
so	P
I	O
will	V
probably	R
understand	V
more	R
of	P
it	O
that	P
a	D
full	A
beginner	N
.	,

I	O
think	V
the	D
reality	N
of	P
browser	N
bugs	N
will	V
make	V
being	V
able	A
to	P
diagnose	V
and	&
understand	V
the	D
generated	V
JavaScript	R
necessary	A
for	P
a	D
long	A
time	N
.	,
I	O
worked	V
with	P
a	D
Spreadsheet	N
company	N
for	P
OS	^
/	,
2	$
,	,
and	&
they	O
had	V
to	P
read	V
the	D
generated	V
assembler	^
from	P
the	D
C++	^
code	N
because	P
the	D
IBM	N
compiler	N
would	V
generate	V
buggy	N
machine	N
code	N
at	P
times	^
.	,
So	P
while	P
they	O
may	V
not	R
have	V
known	V
enough	A
Assembler	^
to	P
write	V
a	D
whole	A
project	N
in	P
it	O
,	,
they	O
certainly	R
had	V
to	P
know	V
enough	A
to	P
track	N
down	T
problems	N
.	,
That	O
being	V
said	V
,	,
there	X
are	V
also	R
many	A
web	N
frameworks	V
that	O
require	V
you	O
to	P
code	N
your	D
own	A
javascript	N
,	,
and	&
a	D
given	V
toolkit	O
won't	V
necessarily	R
do	V
everything	N
that	P
you	O
need	V
to	P
do	V
without	P
directly	R
writing	V
some	D
javascript	N
.	,
You	O
can	V
choose	V
frameworks	V
that	O
avoid	V
it	O
if	P
you	O
prefer	V
,	,
but	&
it	O
isn't	V
at	P
all	D
obvious	A
that	O
,	,
unlike	P
say	V
Assembler	^
for	P
application	N
development	N
,	,
the	D
Web	^
development	N
community	N
has	V
decided	V
to	P
abstract	V
away	R
any	D
involvement	N
with	P
it	O
.	,
You	O
may	V
well	R
end	N
up	T
on	P
projects	N
that	O
need	V
it	O
.	,

ABSOLUTELY	R
.	,
In	P
my	D
opinion	N
,	,
abstraction	N
is	V
important	A
,	,
but	&
knowing	V
how	R
that	D
abstraction	N
works	V
is	V
equally	R
as	R
important	A
.	,
I've	L
seen	V
developers	N
who	R
live	A
and	&
die	V
by	P
their	D
frameworks	^
(	,
javascript	E
:	,
jquery	N
,	,
yui	N
,	,
etc	G
...	~
or	&
php	N
:	,
zend	N
,	,
cake	N
,	,
etc	G
...	~
)	,
,	,
but	&
have	V
no	D
clue	N
how	R
to	P
do	V
anything	V
productive	A
without	P
them	O
.	,
Who	O
would	V
you	O
rather	R
be	V
(	,
or	&
hire	V
)	,
?	,
The	D
guy	N
who	O
knows	V
how	R
everything	N
works	V
,	,
but	&
improves	V
his	D
productivity	N
by	P
using	V
frameworks	^
and	&
libraries	N
...	,
or	&
the	D
guy	N
who	O
uses	V
these	D
resources	N
with	P
no	D
idea	N
how	R
they	O
actually	R
work	V
?	,

Actually	R
,	,
drawing	V
a	D
parallel	A
to	P
assembly	N
language	N
is	V
a	D
bit	N
missing	V
the	D
point	N
.	,
Assembly	^
was	V
platform	N
specific	A
and	&
the	D
move	V
to	P
C	G
enabled	V
a	D
certain	A
level	N
of	P
platform	N
agnosticism	^
,	,
allowing	V
the	D
developer	N
to	P
be	V
more	R
productive	A
on	P
multiple	A
platforms	N
.	,
Hence	R
,	,
there	X
was	V
a	D
real	A
productivity	N
effect	N
.	,
Learning	V
all	X
your	D
rich	A
web	N
chops	N
on	P
something	N
like	P
GWT	O
is	V
more	R
limiting	V
.	,
It	O
is	V
,	,
after	P
all	X
,	,
based	V
on	P
Java	^
,	,
and	&
the	D
web	N
is	V
way	N
larger	R
in	P
scope	N
than	P
just	R
Java	^
.	,
You'd	L
be	V
seriously	R
limiting	V
yourself	O
if	P
all	X
you	O
know	V
is	V
GWT	^
but	&
not	R
the	D
inner	A
workings	N
of	P
the	D
generated	V
Javascript	^
(	,
Can't	V
comment	V
on	P
Morfik	^
as	P
I	O
don't	V
know	V
it	O
)	,
.	,
However	R
,	,
employing	V
something	N
like	P
JQuery	^
in	P
order	N
to	P
be	V
more	R
productive	A
when	R
coding	V
Javascript	N
is	V
much	R
better	R
.	,
JQuery	^
can	V
be	V
used	V
on	P
any	D
browser	N
running	V
on	P
any	D
OS	^
,	,
so	P
it	O
doesn't	V
limit	V
you	O
.	,

I'd	L
say	V
yes	!
.	,
I've	L
met	V
people	N
who	O
claimed	V
to	P
know	V
javascript	N
,	,
when	R
all	R
they	O
could	V
do	V
is	V
do	V
a	D
couple	N
of	P
jquery	A
function	N
calls	V
.	,
Javascript	^
(	,
ECMAscript	^
)	,
is	V
a	D
beatiful	^
little	A
(	,
ok	!
,	,
not	R
so	R
little	A
)	,
language	N
.	,
Abstracting	V
a	D
bit	N
from	P
javascript	^
-	,
define	V
"	,
worth	V
learning	V
"	,
.	,
This	D
kind	N
of	P
thinking	V
was	V
always	R
a	D
conundrum	N
to	P
me	O
.	,
Are	V
you	O
,	,
per	P
chance	N
,	,
afraid	A
of	P
learning	V
something	R
new	A
?	,
I	O
guess	V
,	,
this	D
kind	N
of	P
thinking	V
is	V
what	O
really	R
separates	V
a	D
coder	N
from	P
a	D
programmer	N
.	,

A	D
web	N
developer	N
who	O
does	V
not	R
know	V
Javascript	^
is	V
like	P
an	D
auto	A
mechanic	N
who	O
does	V
not	R
know	V
how	R
to	P
change	V
a	D
tire	N
.	,

JavaScript	^
is	V
the	D
core	N
of	P
interactive	A
client-side	N
development	N
.	,
It	O
is	V
absolutely	R
essential	A
.	,
After	P
you	O
know	V
JavaScript	V
you	O
might	V
decide	V
to	P
try	V
out	T
other	A
things	N
that	P
compile	V
to	P
JavaScript	^
if	P
you	O
find	V
them	O
easier	A
.	,
Also	R
if	P
you	O
want	V
to	P
work	N
professional	N
in	P
web	N
development	N
for	P
some	D
company	N
then	R
you	O
are	V
going	V
to	P
have	V
to	P
know	V
JavaScript	^
.	,
Besides	P
,	,
JavaScript	^
is	V
getting	V
more	A
and	&
more	R
popular	A
as	P
the	D
execution	N
of	P
the	D
language	N
in	P
the	D
browser	N
gets	V
faster	R
and	&
as	P
it	O
becomes	V
more	R
popular	A
in	P
Server-side	^
development	N
as	P
well	R
.	,

