93911	How can you run Javascript using Rhino for Java in a sandbox ?	R V O V ^ V ^ P ^ P D N ,
93911	Part of our java application needs to run javascript that is written by non-developers . These non-developers are using javascript for data formatting . ( Simple logic and string concatenation mostly ) . My question is how can I setup the execution of these scripts to make sure scripting errors don't have a major negative impact on the rest of the application . Need to guard against infinite loops Guard against spawning new threads . Limit access to services and environment File system ( Example : If a disgruntled script writer decided to delete files ) Database ( Same thing delete database records ) Basically I need to setup the javascript scope to only include exactly what they need and no more .	N P D N N V P V V O V V P ^ , O V V V V P N N , , A N & N N R , , D N V R V O V D N P D N P V A N N V V D A A N P D N P D N , V P V P A N N P V A N , N N P N & N N N , N , P D A N N V P V N , N , A N V N N , R O V P N D N N P A V R O O V & D A ,
93911	Do you mean to say ( Javascript using Rhino ) for ( Java in a sandbox ) , or ( Javascript using ( Rhino for Java )) ( in a sandbox ) ?	V O V P V , ^ V ^ , P , ^ P D ^ , , & , ^ V , ^ P ^ E E P D ^ , ,
93911	Javascript is single-threaded and can't access the filesystem , so I don't think you have to worry about those . I'm not sure if there's a way to set a timeout to guard against infinite loops , but you could always spawn a ( Java ) thread that executes the script , and then kill the thread after so much time .	^ V A & V V D ^ , P O V V O V P V P O , L R A P Y D N P V D N P V P A N , & O V R V D , ^ , N O V D N , & R V D N P R A N ,
93911	Rhino has a threading library available to it ( java.lang.Thread ! ) , and can access the file system .	^ V D V N R P O , N , E , & V V D N N ,
93911	To guard against infinite loops , you'd need to put it in a separate process so that it could be killed . To guard against creating threads , you'd need to extend SecurityManager ( the default implementation allows untrusted code to access non-root thread groups ) . Java security does allow you to prevent access to the file system . For database restrictions , you might be able to use the standard SQL user security , but that is quite weak . Otherwise , you need to provide an API that enforces your restrictions . Edit : I should point out that the version of Rhino provided with JDK6 has had security work done on it , but doesn't include the compiler .	P V P A N , L V P V O P D A N P D O V V V , P V P V N , L V P V ^ , D N N V A N P V A N N , , ^ N V V O P V V P D N N , P N N , O V V A P V D A N N N , & O V R A , R , O V P V D ^ O V D N , ! , O V N P P D N P ^ V P ^ V V N N V P O , & V V D N ,
93911	To guard against infinite loops , you can observe the instruction count as the script runs ( this works only with interpreted scripts , not with compiled ones ) . There is this example in the Rhino JavaDocs to prevent a script from running for more than ten seconds :	P V P A N , O V V D N V P D N N , O V A P V N , R P V N , , X V D N P D ^ ^ P V D N P V P A P $ N ,
93911	To block Java class and method access have a look at ... http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java /	P ^ ^ N & N N V D V P ~ U ,
93911	I just ran across this blog post that seems to be useful for sandboxing more or less anything ( not just Rhino ): http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html	O R V P D N N O V P V A P V A & A N , R R ^ , U
