How	N
can	N
I	N
get	N
a	N
signed	N
Java	N
Applet	N
to	N
perform	N
privileged	N
operations	N
when	N
called	N
from	N
unsigned	N
Javascript	N
?	N

Signed	N
Java	N
Applets	N
have	N
the	N
same	N
security	N
clearance	N
as	N
a	N
normal	N
Java	N
application	N
running	N
on	N
the	N
client	N
.	N
For	N
a	N
particular	N
project	N
,	N
I	N
need	N
these	N
permissions	N
,	N
and	N
I	N
need	N
to	N
perform	N
privileged	N
operations	N
as	N
a	N
result	N
of	N
a	N
JavaScript	N
call	N
.	N
Now	N
,	N
the	N
problem	N
is	N
that	N
,	N
at	N
least	N
for	N
Firefox	N
3	N
in	N
Ubuntu	N
(	N
target	N
browser	N
and	N
platform	N
)	N
,	N
when	N
an	N
applet	N
method	N
is	N
invoked	N
through	N
unsigned	N
JavaScript	N
it	N
loses	N
its	N
special	N
permissions	N
.	N
As	N
signing	N
the	N
JavaScript	N
is	N
not	N
an	N
option	N
,	N
I	N
need	N
a	N
way	N
to	N
work	N
around	N
this	N
restriction	N
.	N
One	N
way	N
to	N
achieve	N
this	N
is	N
to	N
create	N
a	N
thread	N
when	N
the	N
applet	N
starts	N
,	N
and	N
call	N
methods	N
on	N
that	N
thread	N
whenever	N
the	N
main	N
thread	N
receives	N
the	N
JavaScript	N
calls	N
.	N
I	N
have	N
implemented	N
a	N
working	N
prototype	N
of	N
that	N
idea	N
,	N
but	N
I	N
have	N
found	N
it	N
a	N
bit	N
clumsy	N
,	N
because	N
it	N
uses	N
too	N
much	N
reflection	N
and	N
isn't	N
as	N
easily	N
reusable	N
as	N
I	N
would	N
have	N
wanted	N
.	N
Is	N
there	N
a	N
common	N
,	N
standard	N
way	N
of	N
doing	N
what	N
I'm	N
trying	N
to	N
do	N
?	N
And	N
,	N
if	N
my	N
idea	N
is	N
the	N
right	N
way	N
to	N
go	N
,	N
how	N
would	N
you	N
go	N
about	N
implementing	N
it	N
in	N
a	N
reusable	N
way	N
?	N
What	N
I'm	N
trying	N
to	N
achieve	N
is	N
a	N
framework	N
that	N
allows	N
this	N
"	N
running-methods-in-a-privileg-thread	N
"	N
thing	N
to	N
be	N
used	N
for	N
a	N
variety	N
of	N
objects	N
.	N
The	N
ideal	N
,	N
utopic	N
solution	N
would	N
be	N
something	N
like	N
:	N

Use	N
the	N
java.security.AccessController	N
class	N
.	N
There	N
is	N
a	N
doPrivilegedAction	N
and	N
doPrivilegedExceptionAction	N
that	N
do	N
exactly	N
what	N
you	N
need	N
.	N
For	N
example	N
:	N
AccessController.doPrivileged	N
(	N
new	N
PrivilegedAction()	N
{	N
public	N
Object	N
run()	N
{	N
..	N
do	N
something	N
that	N
only	N
works	N
with	N
signed	N
applets	N
..	N
}	N
}	N
);	N

It's	N
worth	N
adding	N
:	N
make	N
your	N
privaction'd	N
run()	N
method	N
as	N
small	N
and	N
self-contained	N
as	N
possible	N
.	N
Obviously	N
you	N
could	N
just	N
have	N
your	N
signed	N
applet's	N
init()	N
method	N
call	N
a	N
privileged	N
run()	N
which	N
in	N
turn	N
does	N
the	N
actual	N
applet	N
,	N
but	N
that's	N
just	N
begging	N
to	N
be	N
abused	N
,	N
misused	N
accidentally	N
,	N
or	N
outright	N
exploited	N
.	N
Also	N
,	N
the	N
fact	N
that	N
signed	N
applets	N
lose	N
their	N
special	N
permissions	N
when	N
called	N
by	N
JavaScript	N
is	N
not	N
specific	N
to	N
a	N
particular	N
browser	N
or	N
platform	N
.	N
That's	N
just	N
how	N
it	N
is	N
,	N
everywhere	N
,	N
all	N
the	N
time	N
.	N

