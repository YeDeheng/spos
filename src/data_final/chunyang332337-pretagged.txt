Session	N
management	N
in	P
GWT	^
without	P
using	V
Java	^
on	P
the	D
server	N
?	,

I	O
am	V
using	V
GWT	V
for	P
my	D
client	N
side	N
application	N
.	,
I	O
am	V
not	R
using	V
GWT	^
/	^
Java	^
for	P
the	D
server	N
.	,
However	R
,	,
I	O
am	V
not	R
sure	R
how	R
I	O
can	V
handle	V
session	N
management	N
.	,
The	^
GWT	^
application	N
resides	V
on	P
one	$
page	N
,	,
all	D
server	N
calls	V
are	V
done	V
via	P
AJAX	^
.	,
If	P
a	D
session	N
expires	V
on	P
the	D
server	N
...	,
let's	L
assume	V
the	D
user	N
didn't	V
close	V
the	D
browser	N
,	,
but	&
left	V
the	D
application	N
open	V
,	,
how	R
could	V
my	D
server	N
notify	V
the	D
application	N
that	P
the	D
session	N
has	V
expired	A
and	&
that	P
the	D
client	N
side	N
portion	N
should	V
show	V
the	D
login	N
screen	N
again	R
?	,
What	O
is	V
meant	V
by	P
client	N
side	N
session	N
management	N
?	,
That	O
seems	V
inherently	R
insecure	A
.	,
I'm	L
not	R
looking	V
for	P
code	N
.	,
I'm	L
looking	V
for	P
ideas	N
,	,
techniques	N
,	,
potential	A
solutions	N
etc	G
.	,
I've	L
considered	A
Comet	N
http://en.wikipedia.org/wiki/Comet_(programming	U
)	,
,	,
but	&
that	O
doesn't	V
seem	V
like	P
that	O
will	V
work	V
very	R
well	R
without	P
using	V
Java	^
on	P
the	D
server	N
side	N
.	,
Maybe	R
,	,
I'm	L
wrong	A
?	,
I	O
don't	V
want	V
to	P
poll	N
the	D
server	N
either	&
.	,
Any	D
thoughts	N
or	&
insight	N
?	,

What	O
should	V
happen	V
if	P
the	D
session	N
expired	V
on	P
the	D
server-side	N
,	,
then	R
the	D
next	A
time	N
the	D
client	N
sends	V
a	D
request	N
to	P
the	D
server	N
,	,
it	O
will	V
either	D
create	V
a	D
new	A
session	N
,	,
or	&
,	,
more	R
likely	A
,	,
send	V
back	T
a	D
message	N
to	P
the	D
client	N
that	P
it	O
is	V
trying	V
to	P
access	V
a	D
page	N
without	P
a	D
session	N
,	,
and	&
send	V
them	O
to	P
the	D
login	N
screen	N
.	,
However	R
,	,
you	O
will	V
still	R
need	V
to	P
wait	V
until	P
the	D
client	N
sends	V
a	D
message	N
to	P
the	D
server	N
.	,

Without	P
knowing	V
how	R
you're	L
doing	V
your	D
RPC	^
is	V
working	V
,	,
its	L
hard	R
to	P
give	V
good	A
advice	N
.	,
If	P
your	D
AJAX	^
service	N
requires	V
a	D
user	N
to	P
be	V
authenticated	V
(	,
IE	^
have	V
a	D
valid	A
session	N
)	,
,	,
it	O
is	V
ok	!
to	P
just	R
send	V
a	D
401	$
error	N
saying	V
that	P
the	D
user	N
is	V
invalid	A
.	,
Client-side	^
can	V
interpret	V
the	D
401	$
error	N
as	P
a	D
message	N
that	P
it	O
should	V
set	V
the	D
user	N
up	P
for	P
re-authentication	N
.	,

I'm	L
not	R
using	V
RPC	^
,	,
the	D
GWT	N
request	N
object	N
is	V
just	R
a	D
wrapper	N
around	P
XMLHttpRequest	^
.	,
Great	A
idea	N
!	,
I've	L
never	R
thought	V
about	P
changing	V
the	D
http	U
status	N
code	N
.	,
I	O
may	V
end	N
up	T
using	V
this	D
.	,

We	O
handled	V
this	D
in	P
our	D
application	N
,	,
by	P
detecting	V
when	R
the	D
server	N
sent	V
back	T
a	D
redirect	N
to	P
the	D
login	N
screen	N
(	,
it	O
would	V
come	V
through	P
the	D
response	N
to	P
the	D
Ajax	^
call	V
)	,
,	,
and	&
popped	V
up	T
a	D
dialog	N
asking	V
the	D
user	N
for	P
their	D
password	^
again	R
,	,
but	&
pre-filled	V
their	D
username	N
.	,
We	O
then	R
posted	V
that	O
to	P
the	D
same	A
place	N
the	D
login	N
page	N
does	V
,	,
as	R
if	P
it	O
was	V
the	D
login	N
page	N
,	,
and	&
so	P
the	D
user	N
was	V
logged	V
into	P
this	D
new	A
session	N
automatically	R
.	,
Finally	R
we	O
just	R
re-submitted	V
the	D
ajax	N
call	V
again	R
,	,
so	P
it	O
was	V
a	D
seamless	A
process	N
to	P
the	D
user	N
(	,
eg	N
:	,
they	O
didn't	V
have	V
to	P
click	P
the	D
action	N
again	R
)	,
.	,
Since	P
we	O
stored	V
all	X
the	D
state	N
on	P
the	D
client	N
,	,
and	&
not	R
in	P
session	N
variables	N
we	O
didn't	V
have	V
any	D
problems	N
trying	V
to	P
persist	V
data	N
across	P
sessions	N
.	,

