Should_V I_O use_V PHP_^ or_& JSP_^ for_P a_D chat_N website_N ?_.
I_O want_V to_P develop_V a_D website_N web_N chat_N application_N like_P yahoo_N ._. Only_A difference_N is_V that_P I_O want_V to_P make_V it_O web_N based_V not_R desktop_N ._. I_O will_V be_V implementing_V it_O in_P jsp_N /_: php_N with_P ajax_N ._. I_O want_V to_P know_V whether_P jsp_N or_& php_N will_V be_V better_A for_P this_D ._. What_O will_V be_V advantages_N or_& disadvantages_N of_P both_D ._. Which_D one_$ of_P the_D two_$ would_V you_O prefer_V and_& why_R ?_. Will_V jsp_V applicatioon_N will_V be_V slower_A then_R php_V ?_. I_O am_V thinking_V of_P using_V using_V struts_N with_P jsp_N and_& ajax_N ._. Will_^ using_V of_P struts_A decrease_N speed_N ?_. I_O know_V jsp_N ,_, java_N and_& struts_N but_& not_R php_N ._. Is_V php_N more_R difficult_A then_R jsp_V ?_.
How_R long_A is_V a_D piece_N of_P string_N ?_. Seriously_R ._. We_O don't_V know_V exactly_R what_O you_O want_V to_P do_V but_& I_O imagine_V most_A of_P the_D backend_A stuff_N will_V be_V very_R similar_A in_P difficulty_N between_P the_D two_$ platforms_N ._. Most_A of_P the_D work_N will_V be_V platform_N independent_A front-end_N stuff_N ._.
It_O won't_N be_V slower_A because_P you_O are_V using_V one_$ over_P the_D other_A ._. It_O will_V be_V slower_A only_R if_P your_D implementation_N is_V less_R efficient_A ._.
Whatever_D you_O choose_V keep_V in_P mind_N that_P web_N based_A chat_N app_N would_V probably_R need_V continuous_A updates_N from_P server_N to_P the_D clients_N (_N so_R called_V Comet_^ )_^ ._.
Use_N whichever_D one_$ that_D you're_V a_D better_A programmer_N in_P ._. The_D task_N can_V be_V accomplished_V in_P either_D language_N just_R the_D same_A ._. You_O can_V argue_V endlessly_R about_P language_N features_N ,_, the_D bottom_A line_N will_V be_V whatever_D works_V best_A for_P you_O ._.
JSP_^ based_V web_N applications_N are_V a_D bit_N more_R harder_R to_P deploy_V than_P PHP_^ based_V web_N applications_N ,_, but_& you_O gain_V the_D ability_N of_P creating_V Servlets_^ ._. PHP_^ requires_V less_A server_N administration_N skills_N to_P setup_N properly_R and_& get_V running_V ,_, is_V fast_A to_P learn_V ,_, and_& allows_V fast_A creation_N of_P simple_A applications_N ._. None_^ is_V better_A than_P the_D other_A ,_, they_O are_V different_A in_P nature_N ._. Check_V your_D requirements_N ,_, and_& take_V a_D decision_N based_V on_P that_D ._. If_P your_D requirements_N doesn't_N favor_N one_$ over_P the_D other_A ,_, choose_V whichever_D your_D team_N is_V more_R comfortable_A with_P ._.
+1_N for_P basing_V your_D decision_N on_P *_N your_D requirements*_N ._.
Exactly_R !_. Great_A answer_N ._. Just_R because_P you_O can_V program_V easier_A in_P PHP_^ doesn't_^ mean_V it_O will_V always_R be_V the_D best_A choice_N ._. The_D requirements_N should_V be_V used_V to_P point_V you_O in_P the_D right_A direction_N ._.
I've_N worked_V with_P both_D JSP_^ and_& PHP_^ ._. Even_R if_P I_O prefer_V PHP_^ ,_, I_O still_R work_V with_P JSP_^ from_P time_N to_P time_N depending_V on_P my_D requirements_N ._. There_X is_V not_R really_R a_D better_A choice_N ._. It_O always_R ,_, **_G always_R **_G depends_V on_P your_D requirements_N ._.
JSP_^ isn't_^ a_D language_N -_: it's_V just_R a_D view_N /_: presentation_N technology_N -_: so_P it's_N only_R to_P build_V a_D web_N Frontend_N -_: while_P the_D main_A programming_N happens_V somewhere_R else_R -_: in_P the_D Java_^ Language_^ ,_, as_P a_D so-called_A Java_^ Servlet_^ ._. I_O personally_R like_P Java_^ more_A ,_, but_& PHP_^ is_V okay_A ,_, and_& if_P you_O only_R know_V PHP_^ (_^ which_D I_O must_V assume_V from_P the_D questions_N :)_G )_G you're_G better_A off_R doing_V it_O in_P PHP_^ now_R -_: you_O can_V learn_V Java_^ later_R ..._: Apart_R from_P that_D ,_, the_D others_N asking_V for_P more_A background_N info_N are_V right_A -_: you_O need_V to_P see_V what_O technology_N meets_V your_D requirements_N best_R ..._:
People_N refer_V to_P JSP_^ the_D same_A way_N as_P ASP.NET_N is_V referred_V to_P ._. It_O is_V a_D framework_N ._.
Which_D is_V incorrect_A ,_, and_& therefore_R I_O point_V out_R how_R it_O really_R is_V :)_^ No_^ ,_, really_R ,_, maybe_R people_N not_R doing_V Java_^ development_N themselves_O do_V that_D ._. Java_^ folks_N neither_& say_V they_O build_V something_N in_P JSP_^ instead_R of_P PHP_^ ,_, because_P JSP_^ isn't_^ a_D language_N ,_, nor_& do_V they_O refer_V to_P JSP_^ as_P a_D framework_N (_N because_P it_O does_V not_R deliver_V a_D complete_A stack_V of_P functionalities_N )_G -_: frameworks_N are_V things_N like_P struts_N ,_, gwt_N ,_, webwork_N ,_, sitemesh_N -_: and_& even_R those_D only_R deliver_V the_D view_N part_N -_: a_D full_A stack_V web_N framework_N helps_V you_O with_P a_D lot_N more_A things_N than_P just_R the_D view_N ._.
If_P you_O know_V both_D well_R then_R choose_V any_D ._. But_& if_P facing_V difficulty_N then_R PHP_^ is_V better_A to_P stay_V with_P ._. Reasons_N :_: fundamentally_R easy_A large_A no_D ._. of_P developer_N libraries_N are_V available_A ._. Easy_^ to_P integrate_V with_P other_A scripting_V languages_N But_& structural_A syntax_N becomes_V a_D problem_N as_P they_O are_V so_R many_A in_P cumbersome_A manner_N ._. Use_^ PHP_^ tag_N library_N for_P that_D works_V just_R like_P JSTL_^ ._. "_'' Choosing_V language_N is_V not_R the_D problem_N but_& efficient_A implementation_N of_P code_N is_V the_D only_A hurdle_N ._. "_''
