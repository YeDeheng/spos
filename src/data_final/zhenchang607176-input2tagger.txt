Java	N
equivalent	N
to	N
JavaScript's	N
encodeURIComponent	N
that	N
produces	N
identical	N
output	N
?	N

I've	N
been	N
experimenting	N
with	N
various	N
bits	N
of	N
Java	N
code	N
trying	N
to	N
come	N
up	N
with	N
something	N
that	N
will	N
encode	N
a	N
string	N
containing	N
quotes	N
,	N
spaces	N
and	N
"	N
exotic	N
"	N
Unicode	N
characters	N
and	N
produce	N
output	N
that's	N
identical	N
to	N
JavaScript's	N
encodeURIComponent	N
function	N
.	N
My	N
torture	N
test	N
string	N
is	N
:	N
"	N
A	N
"	N
B	N
"	N
If	N
I	N
enter	N
the	N
following	N
JavaScript	N
statement	N
in	N
Firebug	N
:	N
Then	N
I	N
get	N
:	N
Here's	N
my	N
little	N
test	N
Java	N
program	N
:	N
This	N
program	N
outputs	N
:	N
URLEncoder.encode	N
returns	N
%22A%22+B+%C2%B1+%22	N
getBytes	N
returns	N
"	N
A	N
"	N
B	N
"	N
Close	N
,	N
but	N
no	N
cigar	N
!	N
What	N
is	N
the	N
best	N
way	N
of	N
encoding	N
a	N
UTF-8	N
string	N
using	N
Java	N
so	N
that	N
it	N
produces	N
the	N
same	N
output	N
as	N
JavaScript's	N
encodeURIComponent	N
?	N
EDIT	N
:	N
I'm	N
using	N
Java	N
1.4	N
moving	N
to	N
Java	N
5	N
shortly	N
.	N

Using	N
the	N
javascript	N
engine	N
that	N
is	N
shipped	N
with	N
Java	N
6	N
:	N
import	N
javax.script.ScriptEngine	N
;	N
import	N
javax.script.ScriptEngineManager	N
;	N
public	N
class	N
Wow	N
{	N
public	N
static	N
void	N
main	N
(	N
String	N
[]	N
args	N
)	N
throws	N
Exception	N
{	N
ScriptEngineManager	N
factory	N
=	N
new	N
ScriptEngineManager()	N
;	N
ScriptEngine	N
engine	N
=	N
factory.getEngineByName	N
(	N
"	N
JavaScript	N
")	N
;	N
engine.eval	N
(	N
"	N
print	N
(	N
encodeURIComponent	N
(	N
'	N
\	N
"	N
A\	N
"	N
B	N
\	N
"'))")	N
;	N
}	N
}	N
Output	N
:	N
%22A%22%20B%20%c2%b1%20%22	N
The	N
case	N
is	N
different	N
but	N
it's	N
closer	N
to	N
what	N
you	N
want	N
.	N

Ah	N
,	N
sorry	N
...	N
I	N
should	N
have	N
mentioned	N
in	N
the	N
question	N
that	N
I'm	N
on	N
Java	N
1.4	N
moving	N
to	N
Java	N
5	N
shortly	N
!	N

Iiips	N
.	N
I	N
don't	N
have	N
a	N
solution	N
for	N
you	N
then	N
:-)	N
.	N

If	N
javascript	N
is	N
the	N
only	N
solution	N
you	N
can	N
try	N
Rhino	N
,	N
but	N
it's	N
too	N
much	N
just	N
for	N
this	N
small	N
problem	N
.	N

Even	N
if	N
he	N
was	N
using	N
Java	N
6	N
,	N
I	N
think	N
this	N
solution	N
is	N
WAY	N
over	N
the	N
top	N
.	N
I	N
don't	N
think	N
he's	N
looking	N
for	N
a	N
way	N
to	N
directly	N
invoke	N
the	N
javascript	N
method	N
,	N
just	N
a	N
way	N
to	N
emulate	N
it	N
.	N

Maybe	N
.	N
I	N
think	N
the	N
easiest	N
solution	N
would	N
be	N
to	N
write	N
your	N
own	N
escape	N
function	N
if	N
you	N
can't	N
find	N
anything	N
that	N
does	N
the	N
trick	N
for	N
you	N
.	N
Just	N
copy	N
some	N
method	N
from	N
the	N
StringEscapeUtils	N
class	N
(	N
Jakarta	N
Commons	N
Lang	N
)	N
and	N
reimplement	N
it	N
with	N
your	N
needs	N
.	N

@Ravi	N
Wallau	N
very	N
nice	N
!	N

This	N
actually	N
works	N
,	N
and	N
if	N
you're	N
not	N
worried	N
about	N
performance	N
...	N
I	N
think	N
it's	N
good	N
.	N

Looking	N
at	N
the	N
implementation	N
differences	N
,	N
I	N
see	N
that	N
:	N
MDC	N
on	N
encodeURIComponent()	N
:	N
literal	N
characters	N
(	N
regex	N
representation	N
):	N
[-a-zA-Z0-	N
9._	N
*~	N
'	N
(	N
)	N
!	N
]	N
Java	N
1.5	N
.	N
0	N
documentation	N
on	N
URLEncoder	N
:	N
literal	N
characters	N
(	N
regex	N
representation	N
):	N
[-a-zA-Z0-	N
9._	N
*]	N
the	N
space	N
character	N
"	N
"	N
is	N
converted	N
into	N
a	N
plus	N
sign	N
"	N
+	N
"	N
.	N
So	N
basically	N
,	N
to	N
get	N
the	N
desired	N
result	N
,	N
use	N
URLEncoder.encode	N
(	N
s	N
,	N
"	N
UTF-8	N
")	N
and	N
then	N
do	N
some	N
post-processing	N
:	N
replace	N
all	N
occurrences	N
of	N
"	N
+	N
"	N
with	N
"	N
%20	N
"	N
replace	N
all	N
occurrences	N
of	N
"	N
%xx	N
"	N
representing	N
any	N
of	N
[~	N
'	N
(	N
)	N
!	N
]	N
back	N
to	N
their	N
literal	N
counter-parts	N

I	N
wish	N
you	N
had	N
written	N
"	N
Replace	N
all	N
occurrences	N
of	N
"	N
%xx	N
"	N
representing	N
any	N
of	N
[~	N
'	N
(	N
)	N
!	N
]	N
back	N
to	N
their	N
literal	N
counter-parts	N
"	N
in	N
some	N
simple	N
language	N
.	N
:(	N
my	N
tiny	N
head	N
is	N
not	N
able	N
to	N
understand	N
it	N
.......	N

@Shailendra	N
`	N
[~	N
'	N
(	N
)	N
!	N
]	N
`	N
means	N
`"	N
~	N
"`	N
or	N
`"'"`	N
or	N
`"	N
(	N
"`	N
or	N
`")"`	N
or	N
`"	N
!	N
"`	N
.	N
:)	N
I	N
recommend	N
learning	N
the	N
regex	N
basics	N
,	N
too	N
,	N
though	N
.	N
(	N
I	N
also	N
didn't	N
expand	N
on	N
that	N
since	N
at	N
least	N
two	N
other	N
answers	N
show	N
the	N
respective	N
Java	N
code	N
.	N
)	N

This	N
is	N
the	N
class	N
I	N
came	N
up	N
with	N
in	N
the	N
end	N
:	N

Thanks	N
for	N
sharing	N
the	N
code	N
!	N
:-)	N
+1	N

Adding	N
a	N
tip	N
.	N
In	N
Android	N
4.4	N
I	N
found	N
that	N
we	N
also	N
need	N
to	N
replace	N
`	N
%0A	N
`	N
which	N
means	N
a	N
return	N
key	N
in	N
Android	N
input	N
,	N
or	N
it	N
will	N
crash	N
the	N
js	N
.	N

I	N
came	N
up	N
with	N
another	N
implementation	N
documented	N
at	N
,	N
http://blog.sangupta.com/2010/05/encodeuricomponent-and.html	N
.	N
The	N
implementation	N
can	N
also	N
handle	N
Unicode	N
bytes	N
.	N

I	N
came	N
up	N
with	N
my	N
own	N
version	N
of	N
the	N
encodeURIComponent	N
,	N
because	N
the	N
posted	N
solution	N
has	N
one	N
problem	N
,	N
if	N
there	N
was	N
a	N
+	N
present	N
in	N
the	N
String	N
,	N
which	N
should	N
be	N
encoded	N
,	N
it	N
will	N
converted	N
to	N
a	N
space	N
.	N
So	N
here	N
is	N
my	N
class	N
:	N

Thanks	N
for	N
a	N
good	N
solution	N
!	N
The	N
others	N
look	N
totally	N
...	N
inefficient	N
,	N
IMO	N
.	N
Perhaps	N
it'd	N
be	N
even	N
better	N
without	N
the	N
BitSet	N
on	N
today's	N
hardware	N
.	N
Or	N
two	N
hard-coded	N
longs	N
for	N
0	N
...	N
127	N
.	N

`	N
URLEncoder.encode	N
(	N
"	N
+	N
"	N
,	N
"	N
UTF-8	N
")	N
;	N
`	N
yields	N
`"	N
%2B	N
"`	N
,	N
which	N
is	N
the	N
proper	N
URL	N
encoding	N
,	N
so	N
your	N
solution	N
is	N
,	N
my	N
apologies	N
,	N
totally	N
unnecessary	N
.	N
Why	N
on	N
earth	N
`	N
URLEncoder.encode	N
`	N
doesn't	N
turn	N
spaces	N
into	N
`	N
%20	N
`	N
is	N
beyond	N
me	N
.	N

I	N
have	N
found	N
PercentEscaper	N
class	N
from	N
google-http-java-client	N
library	N
,	N
that	N
can	N
be	N
used	N
to	N
implement	N
encodeURIComponent	N
quite	N
easily	N
.	N
PercentEscaper	N
from	N
google-http-java-client	N
javadoc	N
google-http-java-client	N
home	N

