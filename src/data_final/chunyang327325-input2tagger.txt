Why	N
is	N
it	N
not	N
advisable	N
to	N
use	N
JavaScript	N
in	N
JSP	N
?	N

Why	N
is	N
it	N
not	N
advisable	N
to	N
use	N
JavaScript	N
in	N
JSP	N
?	N
One	N
rationale	N
that	N
I	N
can	N
think	N
of	N
is	N
turning	N
off	N
the	N
feature	N
in	N
browser	N
would	N
stop	N
the	N
code	N
from	N
executing	N
.	N
Is	N
there	N
any	N
other	N
reason	N
behind	N
this	N
?	N

Its	N
a	N
very	N
good	N
thinking.Hope	N
there	N
is	N
no	N
other	N
reason	N
other	N
than	N
this	N
.	N

downvoted	N
-	N
questions	N
like	N
this	N
should	N
give	N
references	N
to	N
any	N
such	N
assertion	N

Are	N
you	N
possibly	N
thinking	N
of	N
the	N
assertion	N
that	N
you	N
shouldn't	N
use	N
_Java_	N
in	N
JSP	N
?	N
It	N
is	N
considered	N
best	N
practice	N
to	N
keep	N
Java	N
business	N
logic	N
in	N
servlets	N
/	N
separate	N
classes	N
and	N
only	N
put	N
display	N
information	N
/	N
html	N
/	N
js	N
in	N
the	N
jsp	N
file	N
.	N

@Alnitak	N
-	N
could	N
you	N
be	N
more	N
specific	N

JSP	N
is	N
a	N
server	N
side	N
technology	N
.	N
That	N
is	N
-	N
Server	N
parses	N
/	N
compiles	N
all	N
the	N
information	N
and	N
then	N
sends	N
it	N
to	N
the	N
client	N
(	N
i.e.	N
your	N
browser	N
)	N
.	N
And	N
then	N
..	N
If	N
received	N
data	N
contains	N
ANY	N
javascript	N
then	N
browser	N
interprets	N
it	N
in	N
its	N
own	N
javascript	N
VM	N
and	N
server	N
is	N
long	N
forgotten	N
by	N
then	N
since	N
HTTP	N
is	N
stateless	N
protocol	N
.	N
Considering	N
"	N
not	N
recommending	N
JS	N
in	N
web	N
"	N
I	N
wouldn't	N
bother	N
about	N
it	N
.	N
Most	N
of	N
the	N
sites	N
use	N
JS	N
extensively	N
thus	N
turning	N
it	N
off	N
on	N
the	N
client	N
side	N
would	N
render	N
them	N
mostly	N
useless	N
.	N

Afaik	N
,	N
there	N
is	N
no	N
problem	N
in	N
using	N
javascript	N
in	N
jsp	N
,	N
and	N
many	N
sites	N
do	N
use	N
it	N
.	N
Especially	N
if	N
your	N
site	N
is	N
a	N
web	N
app	N
,	N
you	N
will	N
have	N
to	N
use	N
both	N
side	N
by	N
side	N
.	N
They	N
are	N
completely	N
independent	N
.	N
You	N
just	N
have	N
to	N
make	N
sure	N
that	N
what	N
you	N
are	N
using	N
each	N
for	N
is	N
appropriate	N
.	N
As	N
for	N
the	N
part	N
about	N
turning	N
off	N
javascript	N
in	N
a	N
browser	N
making	N
the	N
site	N
unusable	N
,	N
it	N
is	N
true	N
whenever	N
you	N
use	N
javascript	N
,	N
with	N
or	N
without	N
jsp	N
.	N

If	N
you	N
have	N
many	N
clients	N
,	N
then	N
it	N
may	N
be	N
a	N
good	N
idea	N
to	N
put	N
calculations	N
on	N
the	N
clients	N
with	N
JavaScript	N
.	N
If	N
you	N
do	N
everything	N
on	N
the	N
server	N
,	N
you	N
are	N
just	N
going	N
to	N
waste	N
the	N
many	N
processing	N
powers	N
provided	N
by	N
the	N
client's	N
browsers	N
,	N
and	N
the	N
speed	N
advantage	N
of	N
Java	N
would	N
be	N
for	N
naught	N
if	N
too	N
many	N
clients	N
make	N
the	N
server	N
busy	N
.	N
(	N
Thanks	N
to	N
@Subtenante	N
in	N
the	N
comments	N
for	N
pointing	N
this	N
out	N
!	N
)	N
.	N
But	N
on	N
the	N
other	N
side	N
,	N
Java	N
running	N
on	N
the	N
server	N
is	N
faster	N
than	N
JavaScript	N
on	N
the	N
client	N
,	N
and	N
it	N
won't	N
suffer	N
from	N
redundant	N
code	N
on	N
the	N
client	N
,	N
for	N
testing	N
which	N
browser	N
the	N
client	N
runs	N
.	N
JavaScript	N
has	N
its	N
uses	N
as	N
trex	N
pointed	N
out	N
,	N
though	N
.	N
Since	N
it	N
runs	N
on	N
the	N
client	N
,	N
it	N
can	N
for	N
example	N
validate	N
form	N
fields	N
before	N
sending	N
it	N
to	N
the	N
server	N
.	N

Java	N
is	N
faster	N
than	N
JS	N
,	N
ok	N
,	N
but	N
you	N
have	N
one	N
server	N
,	N
and	N
there	N
may	N
be	N
LOTS	N
of	N
clients	N
.	N
Heavy	N
functionalities	N
may	N
show	N
a	N
gain	N
of	N
performance	N
when	N
left	N
out	N
to	N
the	N
client	N
,	N
relieving	N
the	N
server	N
from	N
it	N
.	N

Thanks	N
for	N
the	N
comment	N
.	N
I	N
agree	N
with	N
you	N
,	N
and	N
amended	N
my	N
answer	N
.	N
I	N
feel	N
today	N
that	N
i	N
don't	N
in	N
particular	N
like	N
my	N
answer	N
very	N
much	N
.	N
If	N
i	N
could	N
,	N
i	N
would	N
delete	N
my	N
answer	N
and	N
tell	N
the	N
questioner	N
to	N
select	N
another	N
one	N
from	N
below	N
:)	N
But	N
i	N
hope	N
you	N
agree	N
with	N
my	N
answer	N
now	N
:)	N

I	N
know	N
this	N
is	N
a	N
very	N
old	N
question	N
but	N
I	N
thought	N
I	N
would	N
pipe	N
in	N
anyways	N
.	N
I	N
think	N
you	N
should	N
use	N
javascript	N
in	N
this	N
current	N
time	N
period	N
as	N
it	N
allows	N
for	N
a	N
very	N
rich	N
user	N
experience	N
and	N
with	N
js	N
libraries	N
like	N
jQuery	N
(	N
my	N
personal	N
favorite	N
)	N
,	N
prototype	N
and	N
mootools	N
it	N
has	N
become	N
very	N
easy	N
to	N
integrate	N
javascript	N
into	N
your	N
application	N
with	N
little	N
effort	N
.	N
If	N
you	N
design	N
your	N
application	N
right	N
,	N
you	N
can	N
add	N
javascript	N
that	N
enriches	N
the	N
user's	N
experience	N
(	N
and	N
can	N
make	N
it	N
easier	N
for	N
them	N
to	N
use	N
your	N
site	N
/	N
application	N
)	N
without	N
additional	N
server	N
overhead	N
and	N
very	N
little	N
effort	N
.	N
How	N
ever	N
-	N
your	N
site	N
should	N
not	N
rely	N
on	N
the	N
javascript	N
for	N
function	N
as	N
the	N
user's	N
browser	N
may	N
not	N
support	N
it	N
.	N
Javascript	N
should	N
be	N
unobtrusive	N
and	N
provide	N
a	N
richer	N
experience	N
to	N
those	N
user's	N
who	N
support	N
it	N
.	N
Here	N
is	N
a	N
good	N
article	N
about	N
UI	N
and	N
upgrading	N
gracefully	N
instead	N
of	N
designing	N
for	N
the	N
failure	N
of	N
the	N
user's	N
browser	N
.	N
http://realtech.burningbird.net/javascript/accessibility/gracefully-upgrading	N

He's	N
got	N
to	N
mean	N
"	N
don't	N
use	N
java	N
scriptlets	N
"	N
,	N
which	N
is	N
the	N
stuff	N
between	N
%	N
%	N
>	N
.	N
The	N
biggest	N
reason	N
has	N
got	N
to	N
be	N
maintainability	N
and	N
debugging	N
;	N
scriptlets	N
make	N
everything	N
make	N
both	N
very	N
difficult	N
.	N
On	N
the	N
other	N
hand	N
,	N
if	N
you	N
implement	N
taglibs	N
,	N
you	N
can	N
extract	N
any	N
logic	N
to	N
a	N
real	N
java	N
class	N
,	N
which	N
is	N
easily	N
debugged	N
,	N
and	N
you	N
will	N
still	N
be	N
able	N
to	N
open	N
things	N
up	N
in	N
a	N
visual	N
xml	N
/	N
html	N
editor	N
,	N
since	N
taglibs	N
are	N
a	N
valid	N
xml	N
structure	N
.	N
Now	N
,	N
it	N
is	N
a	N
bad	N
idea	N
to	N
do	N
validation	N
on	N
the	N
client	N
side	N
(	N
in	N
javascript	N
)	N
.	N
Users	N
can	N
disable	N
javascript	N
or	N
even	N
access	N
a	N
url	N
directly	N
to	N
get	N
around	N
validation	N
,	N
which	N
opens	N
you	N
up	N
to	N
exploits	N
.	N

"	N
Now	N
,	N
it	N
is	N
a	N
bad	N
idea	N
to	N
do	N
validation	N
on	N
the	N
client	N
side	N
(	N
in	N
javascript	N
)	N
.	N
"	N
It's	N
bad	N
to	N
*	N
only	N
*	N
validate	N
on	N
the	N
client	N
side	N
.	N
Doing	N
it	N
in	N
*	N
addition*	N
,	N
however	N
,	N
makes	N
for	N
better	N
responsiveness	N
(	N
no	N
need	N
to	N
wait	N
for	N
the	N
server	N
to	N
reject	N
it	N
and	N
reduction	N
of	N
load	N
of	N
the	N
server	N
)	N
.	N

I	N
would	N
not	N
disagree	N
with	N
this	N
.	N

