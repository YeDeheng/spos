Has_V anyone_N used_V GWT_^ and_& can_V say_V it_O really_R delivers_V what_O it_O promises_V ?_.
I_O am_V a_D long_A time_N Java_^ web_N developer_N and_& as_P most_A web_N developers_N I_O have_V used_V quite_R a_D lot_N of_P JavaScript_^ ._. Even_R though_P I_^ don't_^ hate_V JavaScript_^ as_P many_A other_A Java_^ developers_N ,_, I_O am_V still_R aware_A of_P its_D faults_N ._. GWT_^ is_V a_D way_N to_P write_V javascript_N using_V java_N ._. Since_P I_O know_V both_D languages_N for_P a_D long_A time_N I_O am_V pretty_R skeptical_A about_P this_D claim_N ._. I_O mean_V ,_, I_O having_V a_D hard_A time_N believing_V that_P you_O can_V really_R create_V full_A Java_^ dynamic_N web_N applications_N with_P a_D rich_A GUI_N using_V just_R GWT_^ ._. That_D is_V why_R I_O am_V asking_V here_R if_P anyone_N had_V the_D chance_N to_P work_V with_P GWT_N on_P a_D large_A scale_N project_N ._. If_P so_R ,_, I_O would_V really_R like_V to_P hear_V what_O they_O think_V of_P it_O ._.
Why_R the_D close_N ?_. This_D looks_V like_P an_D interesting_A question_N to_P me_O .._N
Some_D people_N have_V the_D bad_A habit_N of_P clicking_V '_G close_N '_'' if_P they_O just_R don't_V like_P the_D question_N ._. I_O don't_V think_V this_D is_V subjetive_A nor_& argumentative_A at_P all_D
Did_V you_O end_V up_R using_V GWT_^ ?_. Did_V it_O deliver_V ?_.
Hi_^ Dave_^ ,_, No_^ ,_, finally_R I_O decided_V not_R using_V it_O ._. My_D final_A conclusion_N was_V that_P GWT_^ seems_V like_P a_D really_R good_A product_N and_& the_D people_N who_O use_V it_O mostly_R love_V it_O ._. Nevertheless_R ,_, I_O feel_V like_P since_P GWT_^ has_V a_D totally_R different_A way_N of_P doing_V things_N ,_, it_O is_V a_D product_N that_D once_R you_O start_V using_V it_O ,_, you_O commit_V for_P life_N ._. And_& that_D is_V something_N I_O really_R stay_V away_R from_P ._. Thanks_N for_P asking_V ._.
I've_N looked_V at_P it_O briefly_R for_P an_D older_A application_N at_P one_$ of_P my_D jobs_N ,_, and_& I_O must_V admit_V that_P it_O was_V very_R impressive_A ._. All_X the_D code_N was_V written_V in_P Java_^ ,_, and_& the_D javascript_N was_V built_V beautifully_R ._. It_O had_V AJAX_^ ,_, dynamic_A pages_N ,_, the_D works_N ._. There_X are_V plugins_N for_P it_O as_R well_R ,_, such_A as_P the_D Ext_N GWT_N framework_N ._. It's_N definitely_R worth_A looking_V into_P and_& trying_V out_R ,_, but_& you_O may_V find_V that_P the_D development_N cycle_N doesn't_N "_`` feel_N "_'' right_N ,_, so_P you_O might_V opt_V to_P use_V regular_A JavaScript_^ ._.
good_A point_N about_P the_D dev_A environment_N "_'' feel_N ._. "_'' GWT_^ is_V definitely_R only_R for_P those_D that_D enjoy_V /_: tolerate_V the_D constraints_N of_P a_D language_N like_P Java_^ ._.
As_P with_P any_D tool_N ,_, it_O needs_V to_P be_V used_V properly_R ._. One_$ can_V wield_V a_D hammer_N skillfully_R and_& build_V something_N nice_A ,_, or_& just_R wave_V it_O around_R at_P stuff_N and_& do_V more_A harm_N than_P good_A ._. Google_^ Wave_^ ,_, I_O think_V ,_, has_V become_V the_D prototype_N of_P "_`` what's_G possible_A "_'' with_P GWT_N ._. It's_N still_R rather_R hard_A to_P find_V good_A GWT_N design_N patterns_N because_P the_D technology_N is_V too_R new_A ,_, so_P that_D can_V harm_V efforts_N to_P develop_V a_D very_R rich_A ,_, large-scale_A web_N app_N in_P GWT_^ ._. Before_P beginning_V such_X a_D project_N ,_, I_O would_V recommend_V looking_V at_P examples_N of_P the_D model-view-presenter_A (_N MVP_N )_N pattern_N and_& be_V sure_A to_P use_V it_O ,_, or_& something_N like_P it_O ,_, as_P a_D foundation_N for_P the_D control_N flow_N of_P your_D web_N app_N ._. One_$ nice_A thing_N about_P GWT_^ ,_, and_& writing_V your_D code_N in_P Java_^ ,_, is_V that_P the_D high_A degree_N of_P abstraction_N and_& decoupling_N necessary_A for_P a_D clean_A MVP_N implementation_N is_V pretty_R easy_A (_N thanks_N to_P the_D compiler_G )_G ._.
I've_N written_V fairly_R large_A sized_V app_N in_P GWT_^ ,_, and_& i_G have_V to_P say_V that_D i'm_N even_R more_R impressed_A by_P GWT_N than_P i_G was_V when_R the_D project_N started_V ._. My_D general_A '_'' feel_N '_'' of_P the_D platform_N is_V that_P things_N are_V really_R well_R thought_V out_R ,_, and_& they_O don't_V do_V things_N unless_P they_O can_V do_V it_O well_R ,_, and_& can_V do_V it_O well_R on_P all_D browsers_G (_G IE_N users_N are_V still_R your_D users_N !_. )_^ Now_^ ,_, keep_V in_P mind_N that_P what_O GWT_^ really_R excels_V at_P is_V the_D creation_N of_P large_A ,_, highly_R dynamic_A single-page_A style_N webapps_N ._. If_P your_D goal_N is_V to_P enhance_V an_D otherwise_R static_A page_N with_P some_D javascript_N effects_N ,_, than_P GWT_^ is_V massive_A overkill_N (_N gquery_N may_V change_V this_D ,_, but_& i_G don't_G have_V experience_N with_P gquery_G )_G Some_D features_N I_O enjoy_V include_V :_: The_D ability_N to_P share_V code_N between_P the_D server_N side_N and_& the_D client_N side_N ._. (_$ if_P your_D server_N side_N is_V written_V in_P java_N ,_, of_P course_N )_N ._. I_O didn't_V expect_V to_P use_V this_D a_D lot_N of_P this_D at_P first_A ,_, but_& in_P practice_N ,_, it_O can_V really_R save_V a_D lot_N of_P code_N duplication_N ._. However_R ,_, i_G find_V that_P in_P general_A ,_, this_D only_R works_V with_P code_N that_D has_V been_V written_V with_P GWT_N in_P mind_N -_: using_V code_N that_D was_V not_R written_V with_P GWT_N in_P mind_N often_R doesn't_A work_N well_R ._. This_D is_V because_P GWT_^ only_R has_V a_D subset_N of_P the_D classes_N in_P the_D JDK_N ,_, and_& in_P javascript_N ,_, you_O have_V to_P care_V about_P performance_N a_D lot_N more_A than_P you_O do_V on_P the_D server_N side_N ._. It_O aims_V to_P achieve_V the_D fastest_A javascript_N ,_, faster_R than_P you_O would_V ever_R write_V by_P hand_N (_N because_P if_P you_O did_V write_V it_O by_P hand_N ,_, the_D code_N would_V be_V unmaintainable_A )_N ._. The_D unfortunate_A reality_N is_V that_P the_D browsers_N that_P a_D lot_N of_P people_N use_V have_V incredibly_R slow_A javascript_N engines_N ,_, so_P the_D performance_N of_P your_D javascript_N code_N matters_V a_D lot_N ._. Gwt's_G compiler_G is_V a_D real_A optimizing_V compiler_N -_: it_O will_V inline_V methods_N ,_, intern_V all_D your_D strings_N ._. devirtualize_V your_D method_N calls_V when_R possible_A ,_, etc_G ._. Because_P you_O are_V compiling_V for_P each_D browser_N and_& locale_N ,_, the_D compiler_N can_V also_R inline_V browser-specific_A and_& locale-specific_A code_N ._. This_^ Google_^ I_^ /_: O_N presentation_N has_V some_D benchmarks_N a_D few_A slides_N in_P ._. It_O will_V also_R automatically_R sprite_V your_D images_N together_R to_P minimize_V the_D number_N of_P http_A requests_N needed_V ,_, again_R improving_V the_D speed_N of_P your_D site_N ._. GWT_N 2.0_$ will_V allow_V you_O to_P combine_V together_R arbitrary_A files_N ._. most_A of_P the_D files_N created_V by_P gwt_N have_V a_D strong_A hash_N as_P their_D filename_N ,_, which_D lets_V you_O set_V the_D files_N to_P be_V cached_V forever_R ,_, but_& not_R worry_V about_P people_N having_V old_A versions_N if_P the_D file_N changes_V The_D code_N splitting_N in_P GWT_N 2.0_$ is_V very_R impressive_A and_& would_V be_V very_R difficult_A to_P do_V by_P hand_N ._. As_P the_D size_N of_P your_D application_N grows_V ,_, dealing_V with_P the_D size_N of_P your_D javascript_N matters_V more_A and_& more_A ,_, and_& you_O need_V to_P be_V able_A to_P split_V it_O into_P chunks_N You_O are_V coding_V in_P a_D statically_R typed_V language_N ._. I_O know_V some_D people_N prefer_V dynamic_A typing_N ,_, but_& i_G like_P to_P compare_V this_D debate_N to_P the_D emacs_N vs_& vi_G debate_N -_: there_X are_V a_D lot_N of_P smart_A people_N on_P both_D camps_N ,_, and_& arguing_V on_P the_D internet_G isn't_G going_V to_P change_V anyone's_N preference_N You_O get_V to_P use_V a_D lot_N of_P the_D great_A tools_N that_D exist_V in_P the_D java_N ecosystem_N ,_, which_D are_V generally_R a_D lot_N more_R mature_A than_P the_D equivilant_A javascript_N tools_N ._. -_: junit_N ,_, java_N IDEs_N ,_, java_N debuggers_N ,_, refactoring_N ,_, etc_N ._.
Oh_! ,_, and_& i_G guess_V the_D biggest_A downsides_N is_V :_: -_: compile_V time_N -_: hosted_V mode_N is_V great_A ,_, but_& you_O can't_V currently_R use_V it_O for_P the_D system_N non-default_A browser_N -_: GWT_N 2.0_$ and_& out_P of_P process_N hosted_V mode_N should_V fix_V this_D though_P ._. -_: The_D java_N language_N can_V be_V verbose_A at_P times_N ,_, although_P that_D is_V far_R from_P a_D showstopper_N ._. (_G gwt_G for_P scala_N would_V be_V awfully_R nice_A :)_G )_G
If_P you_O have_V familiarity_N with_P both_D JavaScript_^ and_& Java_^ ,_, you_O really_R are_V perfectly_R suited_V to_P get_V the_D most_A out_P of_P GWT_^ ._. What_O many_A people_N do_V not_R realize_V is_V that_P GWT_N is_V pretty_R well_R layered_A and_& that_P you_O can_V really_R decide_V which_D of_P those_D levels_N you_O want_V to_P work_V at_P ._. For_P instance_N ,_, I_O sometimes_R write_V directly_R against_P the_D DOM_^ library_N for_P projects_N ._. Thats_V a_D lot_N like_P writing_V JavaScript_^ code_N except_P you're_N able_A to_P use_V an_D IDE_^ properly_R and_& get_V the_D power_N of_P a_D compiler_N ._. From_P the_D compiler_N I_O get_V static_A type_N checking_N ,_, lots_N of_P good_A compiler_N optimizations_N ,_, and_& (_N actually_R my_D favorite_N for_P maintaining_V code_N )_G debug_G mode_N assertions_N ._. Nobody_N ever_R really_R makes_V much_A of_P the_D ability_N to_P do_V assertions_N ,_, but_& it's_N so_R nice_A to_P be_V able_A to_P compile_V a_D debug_N mode_N that_D does_V expensive_A checks_N to_P tease_V out_R bugs_N and_& then_R turn_V off_R the_D debug_N mode_N and_& have_V the_D code_N just_R evaporate_V ._. (_N Not_R just_R the_D assert_V statements_N go_V away_R ,_, but_& all_X the_D code_N reachable_A from_P the_D asserts_V also_R gets_V compiled_V out_R )_N ._. Other_A times_N ,_, I_O write_V code_N against_P GWT's_^ UI_^ library_N ._. That_D code_N looks_V a_D bit_N like_P swing_N or_& SWT_N code_N so_P it_O is_V most_R comfortable_A to_P pure_A java_N developers_N ._. Working_V at_P this_D level_N ,_, you_O don't_V have_V to_P worry_V as_R much_A about_P the_D DOM_^ and_& it_O is_V usually_R possible_A to_P construct_V an_D application_N without_P writing_V any_D JavaScript_^ ._. You_O do_V occasionally_R run_V into_P a_D bug_N where_R something_N doesn't_N work_N consistently_R on_P a_D particular_A browser_N ._. The_D GWT_^ folks_N consider_V those_D bugs_N ._. You_O can_V kind_N of_P pick_N what_D level_N of_P abstraction_N you_O want_V to_P work_V at_P ._. There_X are_V tradeoffs_N at_P each_D level_N ,_, but_& GWT_^ should_V support_V them_O ._. Also_R ,_, full_A disclosure_N :_: I'm_N the_D dude_N in_P the_D video_N that_P Chi_^ linked_V above_P ,_, so_P you_O might_V say_V I'm_N pretty_R attached_V to_P GWT_^ ._.
I_O have_V created_V two_$ quite_R substantial_A GWT_^ applications_N in_P my_D three_$ years_N at_P Google_^ ._. It_O delivers_V what_O it_O promises_V -_: my_D apps_N were_V far_R more_R interactive_A and_& far_R more_A ajax-y_N than_P my_D knowledge_N of_P Javascript_^ and_& my_D Javascript_^ tooling_N would_V have_V let_V me_O produce_V using_V other_A tools_N ._. I_O also_R found_V the_D apps_N more_R interactive_A and_& more_A fun_N than_P the_D purely_R server-side_A alternatives_N I_O had_V used_V before_P moving_V to_P it_O ._. It_O is_V not_R free_A of_P warts_N ,_, but_& it_O is_V a_D very_R productive_A environment_N to_P do_V the_D kinds_N of_P apps_N I_O do_V ._. And_& do_V watch_V Kelly's_N presentation_N ._. It_O ,_, and_& some_D of_P the_D others_N from_P I_O /_: O_N ,_, give_V a_D really_R clear_A idea_N of_P what_O GWT_^ can_V do_V ._. You_O will_V pretty_R quickly_R get_V a_D good_A idea_N of_P whether_P it_O is_V the_D right_A tool_N for_P the_D task_N you_O are_V envisioning_V ._.
I_O have_V been_V developing_V a_D green_A field_N application_N on_P GWT_^ for_P a_D year_N and_& it_O has_V been_V surprisingly_R pleasant_A ._. The_D subset_N of_P Java_^ used_V in_P GWT_^ causes_V some_D headaches_N but_& nothing_N major_A after_P all_D ._. I_^ didn't_^ have_V too_R much_A JavaScript_^ knowledge_N when_R I_O joined_V the_D project_N but_& I_O think_V that_D was_V not_R a_D problem_N ._. The_D common_A GWT_N related_A problems_N I_O have_V encountered_V had_V usually_R something_N to_P do_V with_P Ext_N GWT_N /_: GXT_N framework_N or_& FCKEditor_N integration_N ._.
Simply_R GWT_^ rocks_N google_N is_V making_V "_`` google_N wave_N "_'' fully_R on_P GWT_^ ._.
I_O think_V GWT_^ does_V what_O it_O says_V on_P the_D tin_N ..._: Top_^ 5_$ Reasons_N for_P choosing_V GWT_^ :_: Tapestry_N can_V be_V overly_R complicated_V and_& the_D learning_N curve_N is_V pretty_R steep_A for_P new_A developers_N who_O are_V starting_V out_R joining_V the_D team_N ._. Esp_^ ._. on_P larger_A projects_N ._. I_O found_V that_P I_O could_V develop_V "_`` richer_A "_'' applications_N using_V GWT_N seeing_V that_P my_D strength_N is_V Java_^ not_R Javascript_^ ._. In_P order_N for_P me_O to_P implement_V similar_A functionality_N using_V Tapestry_N I_O would_V have_V to_P hand_V write_V Javascript_^ which_D would_V later_R become_V a_D maintenance_N nightmare_N ._. Browser_N compatibility_N ,_, I_O would_V spend_V large_A amounts_N of_P time_N trying_V to_P get_V my_D hand_N written_V Javascirpt_^ to_P work_V on_P all_X the_D different_A browsers_N (_V like_P I_O said_V Javascript_^ is_V not_R my_D strength_N :-)_$ The_D GWT_N Compiler_N hides_V me_O from_P this_D which_D results_V in_P me_O spending_V more_A time_N writing_V features_N ._. Back_^ button_N blues_N ,_, GWT's_A History_N listener_N is_V handles_V the_D browsers_N back_V button_N in_P comparison_N to_P Tapestry_^ ._. GWT_^ has_V a_D smaller_A footprint_N because_P only_R the_D data_N is_V being_V sent_V across_P the_D wire_N apposed_V to_P refreshing_V the_D entire_A page_N ._. The_D list_N goes_V on_P but_& all_D in_P all_D ,_, I_O am_V very_R happy_A to_P have_V made_V the_D change_N and_& have_V not_R looked_V back_R since_P ._.
I_O didn't_V know_V much_A Javascript_^ when_R I_O tried_V to_P create_V my_D website_N ._. In_P fact_N ,_, that_D is_V why_R I_O had_V been_V putting_V off_R creating_V the_D website_N ._. So_R for_P me_O ,_, GWT_^ made_V a_D huge_A difference_N as_P it_O enabled_V me_O to_P create_V a_D dynamic_A ,_, cross-browser_A website_N that_P I_O definitely_R would_V not_R have_V been_V able_A to_P create_V without_P putting_V in_P significant_A effort_N into_P learning_V Javascript_^ ._.
I've_N done_V a_D few_A projects_N over_P a_D few_A years_N and_& it_O is_V fantastic_A ._. Going_V back_R to_P JS_N /_: JSP_^ /_: request_N based_A framework_N is_V really_R horrible_A ._. Don't_N want_V to_P give_V up_R compile_V time_N checks_N ,_, unit_N tests_N in_P my_D IDE_N ,_, IDE_N refactoring_N etc_N ,_, sharing_V code_N between_P different_A tiers_N ,_, solid_A set_N of_P widgets_N ,_, incredibly_R well_R thought_V out_R framework_N ._. Can_V do_V so_R much_R more_R so_R much_R faster_R in_P a_D maintainable_A way_N ._.
There_X is_V a_D steep_A learning_N curve_N ,_, but_& for_P really_R dynamic_A ui_N applications_N ,_, there_X is_V just_R no_D way_N that_P you_O can_V build_V from_P hand_N in_P javascript_N as_R efficiently_R ._. What_O I_O mean_V in_P particular_A is_V for_P instance_N an_D application_N frontend_N for_P a_D service_N where_R all_X the_D searchable_A fields_N and_& result_N type_N s_N and_& length_N were_V completely_R unknown_A ._. For_P this_D type_N of_P thing_N ,_, a_D dynamic_A runtime_N defined_V ui_R ,_, there_X is_V nothing_N better_R than_P GWT_^ in_P my_D opinion_N ._. The_D drawbacks_N are_V the_D steep_A learning_N curve_N (_N especially_R for_P non-swing_A Java_^ programmers_N ,_, traditional_A request_N /_: response_N servlet_N api_N guys_N and_& gals_N )_N and_& getting_V cornered_V into_P GWT_^ once_P you_O make_V that_D decision_N ._.
