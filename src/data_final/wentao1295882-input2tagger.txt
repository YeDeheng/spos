Is	N
it	N
possible	N
to	N
create	N
arbitrary	N
Java	N
objects	N
from	N
JavaScript	N
in	N
ie	N
?	N

LiveConnect	N
is	N
a	N
Mozilla	N
technology	N
that	N
bridges	N
Java	N
and	N
JavaScript	N
.	N
Amazingly	N
,	N
they've	N
started	N
maintaining	N
it	N
again	N
for	N
recent	N
versions	N
of	N
Firefox	N
.	N
In	N
Firefox	N
I	N
can	N
write	N
e.g.	N
or	N
use	N
the	N
Packages	N
.	N
namespace	N
if	N
it's	N
not	N
a	N
java.something	N
or	N
I	N
could	N
go	N
crazy	N
and	N
call	N
a	N
factory	N
method	N
in	N
swing	N
easily	N
instantiating	N
any	N
Java	N
object	N
.	N
Is	N
there	N
an	N
equivalent	N
that	N
works	N
in	N
ie	N
?	N

Why	N
don't	N
you	N
try	N
it	N
?	N

"	N
Java	N
has	N
as	N
much	N
in	N
common	N
with	N
JavaScript	N
as	N
a	N
car	N
has	N
with	N
a	N
carpet	N
.	N
"	N
If	N
you	N
can	N
do	N
this	N
in	N
Firefox	N
,	N
it's	N
leaking	N
abstractions	N
badly	N
,	N
not	N
to	N
mention	N
allowing	N
external	N
webpage	N
to	N
run	N
locally	N
executed	N
code	N
on	N
visitor's	N
computer	N
.	N

Of	N
course	N
I	N
tried	N
it	N
,	N
and	N
of	N
course	N
it	N
doesn't	N
work	N
this	N
way	N
in	N
ie	N
.	N
It	N
should	N
be	N
obvious	N
that	N
the	N
question	N
means	N
'	N
what	N
is	N
the	N
syntax	N
for	N
doing	N
the	N
same	N
thing	N
in	N
ie	N
'	N
.	N

@Esko	N
:	N
If	N
it	N
is	N
a	N
leaky	N
abstraction	N
,	N
then	N
Firefox	N
is	N
leaking	N
all	N
over	N
computers	N
everywhere	N
.	N
The	N
security	N
model	N
protects	N
you	N
from	N
doing	N
silly	N
things	N
like	N
being	N
able	N
to	N
access	N
the	N
local	N
file	N
system	N
:	N
`	N
var	N
f	N
=	N
new	N
java.io.File	N
(	N
"	N
test.txt	N
")	N
;	N
document.write	N
(	N
f.exists()	N
);	N
`	N
results	N
in	N
:	N
`	N
Error	N
:	N
uncaught	N
exception	N
:	N
Error	N
calling	N
method	N
on	N
NPObject	N
!	N
[	N
plugin	N
exception	N
:	N
java.security.AccessControlException	N
:	N
access	N
denied	N
(	N
java.io.FilePermission	N
test.txt	N
read	N
)	N
]	N
.	N
`	N
However	N
,	N
`	N
var	N
s	N
=	N
new	N
java.lang.StringBuilder	N
(	N
"	N
Hello	N
")	N
;	N
s.append	N
(	N
"	N
,	N
World	N
!	N
")	N
;	N
document.write	N
(	N
s	N
);	N
`	N
works	N
just	N
fine	N
:	N
`	N
Hello	N
,	N
World	N
!	N
`	N

@joeforker	N
:	N
I	N
really	N
wished	N
this	N
worked	N
everywhere	N
.	N
Imagine	N
having	N
the	N
entire	N
Java	N
class	N
library	N
(	N
minus	N
anything	N
forbidden	N
by	N
access	N
control	N
)	N
at	N
your	N
disposal	N
in	N
client-side	N
JavaScript	N
!	N

@Grant	N
As	N
of	N
JDK	N
6	N
update	N
10	N
,	N
applets	N
*	N
have	N
*	N
that	N
.	N
Packages	N
object	N
exposing	N
the	N
entire	N
Java	N
class	N
library	N
,	N
even	N
in	N
ie	N
.	N
Who	N
knew	N
?	N

As	N
far	N
as	N
I	N
know	N
,	N
I	N
don't	N
think	N
this	N
is	N
possible	N
-	N
Java	N
and	N
Javascript	N
are	N
completely	N
different	N
.	N
It	N
just	N
so	N
happens	N
that	N
the	N
JS	N
API	N
contains	N
a	N
Date	N
object	N
,	N
as	N
does	N
the	N
Java	N
API	N
.	N
Edit	N
:	N
The	N
Java	N
Scripting	N
API	N
(	N
http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer%5Fguide/index.html#jsengine	N
)	N
seems	N
to	N
be	N
the	N
closest	N
you	N
can	N
get	N
to	N
what	N
you're	N
trying	N
to	N
do	N
.	N

@Tom	N
:	N
His	N
code	N
is	N
actually	N
creating	N
a	N
Java	N
`	N
Date	N
`	N
and	N
referencing	N
it	N
from	N
client-side	N
JavaScript	N
.	N
Consider	N
:	N
`	N
var	N
r	N
=	N
new	N
java.util.Random()	N
;	N
document.write	N
(	N
r.nextBoolean()	N
+	N
'	N
;	N
'	N
+	N
r.nextDouble()	N
+	N
'	N
;	N
'	N
+	N
r.nextFloat()	N
+	N
'	N
;	N
'	N
+	N
r.nextGaussian()	N
+	N
'	N
;	N
'	N
+	N
r.nextInt()	N
+	N
'	N
;	N
'	N
+	N
r.nextLong()	N
);	N
`	N
Client-side	N
JavaScript	N
doesn't	N
have	N
a	N
`	N
Random()	N
`	N
object	N
,	N
and	N
it	N
certainly	N
doesn't	N
have	N
any	N
`	N
next*	N
(	N
)`	N
methods	N
available	N
.	N

You	N
are	N
using	N
LiveConnect	N
which	N
is	N
a	N
Mozilla-specific	N
JavaScript	N
/	N
Java	N
bridge	N
.	N
It	N
is	N
not	N
supported	N
in	N
other	N
browsers	N
.	N

What	N
you	N
can	N
do	N
in	N
Internet	N
Explorer	N
is	N
load	N
an	N
applet	N
into	N
the	N
page	N
which	N
exposes	N
methods	N
that	N
do	N
the	N
things	N
you	N
want	N
to	N
do	N
.	N
You	N
get	N
a	N
reference	N
to	N
the	N
applet	N
,	N
then	N
invoke	N
methods	N
on	N
that	N
reference	N
.	N
In	N
your	N
applet	N
you'd	N
need	N
a	N
public	N
method	N
getDateFromApplet()	N
that	N
returns	N
a	N
java.util.Date	N
.	N
Note	N
that	N
what	N
I	N
present	N
should	N
work	N
,	N
but	N
it	N
has	N
been	N
years	N
since	N
I	N
did	N
this	N
(	N
it	N
worked	N
in	N
NS4	N
,	N
6	N
and	N
IE	N
4+	N
at	N
the	N
time	N
)	N
.	N
I	N
didn't	N
use	N
getElementById()	N
however	N
,	N
I	N
used	N
var	N
applet	N
=	N
document.myAppletName	N
;	N
.	N
The	N
other	N
complication	N
to	N
this	N
is	N
that	N
if	N
you	N
want	N
this	N
to	N
execute	N
on	N
page	N
load	N
,	N
the	N
applet	N
will	N
almost	N
certainly	N
not	N
be	N
ready	N
,	N
which	N
requires	N
code	N
something	N
like	N
:	N
Lastly	N
,	N
it	N
might	N
(	N
should	N
)	N
be	N
possible	N
to	N
do	N
this	N
with	N
the	N
object	N
tag	N
,	N
but	N
as	N
I	N
said	N
,	N
it	N
has	N
been	N
years	N
since	N
I	N
needed	N
to	N
interact	N
with	N
a	N
Java	N
applet	N
in	N
this	N
way	N
from	N
client-side	N
JavaScript	N
,	N
so	N
I	N
haven't	N
tested	N
it	N
.	N

The	N
applet	N
should	N
just	N
call	N
a	N
method	N
on	N
the	N
page	N
when	N
it	N
is	N
ready	N
?	N

How	N
about	N
if	N
"	N
the	N
thing	N
I	N
want	N
to	N
do	N
"	N
is	N
the	N
Rhino	N
eval()	N
statement	N
bundled	N
with	N
Java	N
6	N
:-)	N

@joeforker	N
:	N
1	N
)	N
I'm	N
not	N
sure	N
the	N
applet	N
can	N
call	N
a	N
method	N
on	N
the	N
page	N
.	N
You	N
have	N
to	N
wait	N
for	N
the	N
applet	N
to	N
be	N
ready	N
,	N
then	N
call	N
into	N
it	N
from	N
JavaScript	N
.	N
2	N
)	N
Yes	N
,	N
the	N
applet	N
could	N
potentially	N
have	N
a	N
single	N
public	N
`	N
do()	N
`	N
or	N
`	N
eval()	N
`	N
method	N
that	N
you	N
just	N
pass	N
Java	N
as	N
plain	N
text	N
to	N
and	N
have	N
it	N
execute	N
inside	N
the	N
applet	N
on	N
the	N
browser	N
.	N

If	N
JavaScript	N
tries	N
to	N
call	N
applet	N
methods	N
before	N
it's	N
ready	N
,	N
the	N
plugin	N
will	N
make	N
the	N
call	N
wait	N
until	N
it's	N
ready	N
.	N

Still	N
works	N
,	N
years	N
ago	N
MS	N
released	N
a	N
javascript	N
/	N
java	N
applet	N
rpc	N
proxy	N
,	N
called	N
MSRS	N
(	N
microsoft	N
remote	N
scripting	N
)	N
.	N
I	N
had	N
to	N
mantain	N
a	N
web	N
application	N
built	N
using	N
MSRS	N
,	N
and	N
works	N
well	N
in	N
IE7	N
.	N
The	N
javascript	N
library	N
calls	N
a	N
public	N
method	N
of	N
the	N
java	N
class	N
,	N
so	N
I	N
think	N
your	N
approach	N
to	N
this	N
question	N
will	N
do	N
the	N
job	N
too	N
.	N
http://www.ashleyit.com/rs	N
/	N

You	N
could	N
possibly	N
use	N
DWR	N
or	N
some	N
other	N
reverse	N
ajax	N
library	N
that	N
will	N
allow	N
you	N
to	N
create	N
Java	N
objects	N
on	N
the	N
server	N
side	N
via	N
Javascript	N
objects	N
.	N

Interesting	N
interpretation	N
of	N
the	N
question	N
.	N

As	N
of	N
Java	N
1.6	N
update	N
10	N
,	N
the	N
Inter-Language	N
LiveConnect	N
Bridge	N
attaches	N
a	N
Packages	N
object	N
to	N
applets	N
within	N
the	N
page	N
,	N
just	N
like	N
the	N
Packages	N
object	N
available	N
in	N
Firefox	N
.	N
So	N
in	N
a	N
page	N
with	N
at	N
least	N
one	N
applet	N
,	N
even	N
in	N
Internet	N
Explorer	N
,	N
returns	N
the	N
current	N
date	N
.	N
It's	N
also	N
possible	N
to	N
register	N
new	N
converters	N
for	N
convenient	N
access	N
to	N
non-Java	N
languages	N
running	N
in	N
the	N
Java	N
virtual	N
machine	N
.	N
Of	N
course	N
JavaFX	N
implements	N
such	N
a	N
bridge	N
.	N
It's	N
not	N
supposed	N
to	N
be	N
necessary	N
to	N
wait	N
for	N
the	N
applet	N
to	N
load	N
before	N
calling	N
it	N
from	N
JavaScript	N
but	N
it's	N
probably	N
a	N
good	N
idea	N
.	N
The	N
Java	N
plugin	N
will	N
make	N
JavaScript	N
wait	N
until	N
the	N
applet	N
finishes	N
loading	N
or	N
has	N
an	N
error	N
.	N
It	N
is	N
possible	N
for	N
the	N
applet	N
to	N
call	N
JavaScript	N
in	N
the	N
web	N
page	N
as	N
soon	N
as	N
Applet.init()	N
is	N
called	N
.	N

You	N
could	N
make	N
the	N
properties	N
of	N
your	N
objects	N
available	N
through	N
a	N
JSON	N
response	N
from	N
your	N
servlet	N
in	N
JAVA	N
?	N
Since	N
JS	N
can	N
readily	N
use	N
JSON	N
and	N
it	N
is	N
light	N
weight	N
it	N
makes	N
for	N
an	N
easy	N
way	N
to	N
crate	N
JS	N
Objects	N
from	N
your	N
Java	N
Objects	N
.	N
Also	N
look	N
at	N
the	N
Rhino	N
JavaScript	N
engine	N
and	N
making	N
Java	N
resources	N
available	N
from	N
JavaScript	N
.	N
https://developer.mozilla.org/en-US/docs/Rhino_documentation	N

