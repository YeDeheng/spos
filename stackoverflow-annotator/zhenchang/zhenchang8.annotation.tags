607176		Java equivalent to JavaScript's encodeURIComponent that produces identical output ?	^ N P Z ^ O V A N ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		I've been experimenting with various bits of Java code trying to come up with something that will encode a string containing quotes , spaces and " exotic " Unicode characters and produce output that's identical to JavaScript's encodeURIComponent function . My torture test string is : " A " B " If I enter the following JavaScript statement in Firebug : Then I get : Here's my little test Java program : This program outputs : URLEncoder.encode returns %22A%22+B+%C2%B1+%22 getBytes returns " A " B " Close , but no cigar ! What is the best way of encoding a UTF-8 string using Java so that it produces the same output as JavaScript's encodeURIComponent ? EDIT : I'm using Java 1.4 moving to Java 5 shortly .	L V V P A N P ^ N V P V T P N O V V D N V N , N & , A , ^ N & V N L A P Z ^ N , D N N N V , G G G G G P O V D V ^ N P ^ , R O V , L D A N ^ N , D N V , ^ V G ^ V G G G G G R , & D N , O V D A N P V D ^ N V ^ P D O V D A N P Z ^ , V , L V ^ $ V P ^ $ R ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Using the javascript engine that is shipped with Java 6 : import javax.script.ScriptEngine ; import javax.script.ScriptEngineManager ; public class Wow { public static void main ( String [] args ) throws Exception { ScriptEngineManager factory = new ScriptEngineManager() ; ScriptEngine engine = factory.getEngineByName ( " JavaScript ") ; engine.eval ( " print ( encodeURIComponent ( '  " A " B  "'))") ; } } Output : %22A%22%20B%20%c2%b1%20%22 The case is different but it's closer to what you want .	V D ^ N O V V P ^ $ , G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G G N , G D N V A & L R P O O V ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Ah , sorry ... I should have mentioned in the question that I'm on Java 1.4 moving to Java 5 shortly !	! , A , O V V V P D N P L P ^ $ V P ^ $ R ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Iiips . I don't have a solution for you then :-) .	! , O V V D N P O R E ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		If javascript is the only solution you can try Rhino , but it's too much just for this small problem .	P ^ V D A N O V V ^ , & L R R R P D A N ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Even if he was using Java 6 , I think this solution is WAY over the top . I don't think he's looking for a way to directly invoke the javascript method , just a way to emulate it .	R P O V V ^ $ , O V D N V R P D N , O V V L V P D N P R V D ^ N , R D N P V O ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Maybe . I think the easiest solution would be to write your own escape function if you can't find anything that does the trick for you . Just copy some method from the StringEscapeUtils class ( Jakarta Commons Lang ) and reimplement it with your needs .	R , O V D A N V V P V D N N N P O V V V O V D N P O , R N D N P D ^ N , G G G , & V O P D V ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		@Ravi Wallau very nice !	@ G R A ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		This actually works , and if you're not worried about performance ... I think it's good .	D R V , & P L R A P N , O V L A ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Looking at the implementation differences , I see that : MDC on encodeURIComponent() : literal characters ( regex representation ): [-a-zA-Z0- 9._ *~ ' ( ) ! ] Java 1.5 . 0 documentation on URLEncoder : literal characters ( regex representation ): [-a-zA-Z0- 9._ *] the space character " " is converted into a plus sign " + " . So basically , to get the desired result , use URLEncoder.encode ( s , " UTF-8 ") and then do some post-processing : replace all occurrences of " + " with " %20 " replace all occurrences of " %xx " representing any of [~ ' ( ) ! ] back to their literal counter-parts	V P D N N , O V O , ^ P ^ , A N , ^ N G G G G G G G G G ^ $ G $ N P ^ , A N , ^ N G G G G D N N , , V V P D N N G G G , P R , P V D A N , V ^ , G G G G G & R V D N , V D N P G G G P G G G V D N P G G G V D P G G G G G G N P D A N		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		I wish you had written " Replace all occurrences of " %xx " representing any of [~ ' ( ) ! ] back to their literal counter-parts " in some simple language . :( my tiny head is not able to understand it .......	O V O V V , V D N P G G G V D P G G G G G G N P D A N , P D A N , E D A N V R A P V O ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		@Shailendra ` [~ ' ( ) ! ] ` means `" ~ "` or `"'"` or `" ( "` or `")"` or `" ! "` . :) I recommend learning the regex basics , too , though . ( I also didn't expand on that since at least two other answers show the respective Java code . )	@ G G G G G G G G V G G G G G G G G G G G G G G G G E O V V D ^ N , R , P , , O R V V P D P O R $ A N V D A ^ N , ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		This is the class I came up with in the end :	D V D N O V T P P D N ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Thanks for sharing the code ! :-) +1	N P V D N , E G		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Adding a tip . In Android 4.4 I found that we also need to replace ` %0A ` which means a return key in Android input , or it will crash the js .	V D N , P ^ $ O V P O R V P V G G G O V D N N P ^ N , & O V V D ^ ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		I came up with another implementation documented at , http://blog.sangupta.com/2010/05/encodeuricomponent-and.html . The implementation can also handle Unicode bytes .	O V T P D N V P , U , D N V R V ^ N ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		I came up with my own version of the encodeURIComponent , because the posted solution has one problem , if there was a + present in the String , which should be encoded , it will converted to a space . So here is my class :	O V T P D A N P D ^ , P D V N V $ N , P X V D G A P D ^ , O V V V , O V V P D N , P R V D N ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		Thanks for a good solution ! The others look totally ... inefficient , IMO . Perhaps it'd be even better without the BitSet on today's hardware . Or two hard-coded longs for 0 ... 127 .	N P D A N , D N V R , A , G , R L V R R P D ^ P S N , & $ A N P $ ~ $ ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		` URLEncoder.encode ( " + " , " UTF-8 ") ; ` yields `" %2B "` , which is the proper URL encoding , so your solution is , my apologies , totally unnecessary . Why on earth ` URLEncoder.encode ` doesn't turn spaces into ` %20 ` is beyond me .	, G G G G G G G G G G G V G G G , O V D A ^ N , P D N V , D N , R A , R P ^ , ^ , V V N P G G G V P O ,		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
607176		I have found PercentEscaper class from google-http-java-client library , that can be used to implement encodeURIComponent quite easily . PercentEscaper from google-http-java-client javadoc google-http-java-client home	O V V ^ N P ^ N , O V V V P V ^ R R , ^ P ^ ^ ^ N		Fri Sep 04 2015 16:35:30 GMT+0800 (Malay Peninsula Standard Time)
