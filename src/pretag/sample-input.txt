a	N
=	N
b	N

that's	N
my	N
fault	N

that	N
is	N
faulty	N

it's	N
my	N
fault	N

I'm	N
android	N
What's	N
the	N
equivalent	N
of	N
Java's	N
thread.sleep()	N
in	N
javascript	N
?	N

What	N
is	N
the	N
equivalent	N
of	N
Java's	N
Thread.sleep()	N
in	N
Javascript	N
?	N

You	N
can	N
either	N
write	N
a	N
spin	N
loop	N
(	N
a	N
loop	N
that	N
just	N
loops	N
for	N
a	N
long	N
period	N
of	N
time	N
performing	N
some	N
sort	N
of	N
computation	N
to	N
delay	N
the	N
function	N
)	N
or	N
use	N
:	N
This	N
will	N
call	N
'	N
Func1()	N
'	N
after	N
3	N
seconds	N
.	N
Edit	N
:	N
Credit	N
goes	N
to	N
the	N
commenters	N
,	N
but	N
you	N
can	N
pass	N
anonymous	N
functions	N
to	N
setTimeout	N
.	N
This	N
is	N
much	N
more	N
efficient	N
and	N
does	N
not	N
invoke	N
javascript's	N
eval	N
function	N
.	N

I	N
want	N
the	N
current	N
thread	N
to	N
go	N
for	N
waiting	N
state	N
for	N
specified	N
number	N
of	N
seconds	N

Spinning	N
a	N
loop	N
cause	N
High	N
CPU	N
utilization	N
.	N

I'd	N
prefer	N
to	N
provide	N
the	N
function	N
directly	N
as	N
an	N
argument	N
instead	N
of	N
quoting	N
the	N
function	N
name	N
:	N
setTimeout	N
(	N
function()	N
{	N
...	N
}	N
,	N
3000	N
);	N

You	N
should	N
*	N
never	N
*	N
quote	N
the	N
first	N
parameter	N
for	N
setTimeout	N
pass	N
an	N
anonymous	N
function	N
or	N
a	N
function	N
reference	N
.	N
The	N
corrected	N
version	N
is	N
:	N
setTimeout	N
(	N
Func1	N
,	N
3000	N
);	N

(	N
Quoting	N
the	N
first	N
parameter	N
of	N
setTimeout	N
invokes	N
"	N
eval()	N
"	N
unnecessarily	N
.	N
)	N

@Steve	N
,	N
if	N
you	N
want	N
to	N
pass	N
any	N
parameters	N
to	N
the	N
method	N
,	N
you	N
really	N
don't	N
have	N
that	N
option	N
,	N
you	N
must	N
quote	N
.	N

What's	N
the	N
downside	N
of	N
quoting	N
the	N
first	N
parameter	N
?	N
It	N
essentially	N
executes	N
whatever's	N
in	N
that	N
block	N
...	N
is	N
it	N
a	N
matter	N
of	N
style	N
or	N
are	N
there	N
other	N
considerations	N
?	N

@Nick	N
:	N
No	N
,	N
if	N
you	N
want	N
to	N
pass	N
parameters	N
,	N
you	N
use	N
a	N
closure	N
.	N

Ah	N
,	N
nevermind	N
,	N
missed	N
your	N
later	N
comment	N
.	N
Thanks	N
Steve	N
.	N

@Nick	N
:	N
Daniel	N
is	N
correct	N
you	N
wrap	N
the	N
code	N
in	N
an	N
anonymous	N
function	N
.	N

There's	N
no	N
direct	N
equivalent	N
,	N
as	N
it'd	N
pause	N
a	N
webpage	N
.	N
However	N
there	N
is	N
a	N
setTimeout()	N
,	N
e.g.	N
:	N
Closure	N
example	N
(	N
thanks	N
Daniel	N
):	N
The	N
second	N
argument	N
is	N
milliseconds	N
before	N
firing	N
,	N
you	N
can	N
use	N
this	N
for	N
time	N
events	N
or	N
waiting	N
before	N
performing	N
an	N
operation	N
.	N
Edit	N
:	N
Updated	N
based	N
on	N
comments	N
for	N
a	N
cleaner	N
result	N
.	N

Again	N
,	N
*	N
never	N
*	N
quote	N
the	N
first	N
parameter	N
of	N
setTimeout	N
.	N
See	N
my	N
comments	N
on	N
Malaxeur's	N
answer	N
for	N
more	N
info	N
.	N

The	N
simple	N
answer	N
is	N
that	N
there	N
is	N
no	N
such	N
function	N
.	N
The	N
closest	N
thing	N
you	N
have	N
is	N
:	N
Note	N
that	N
you	N
especially	N
don't	N
want	N
to	N
busy-wait	N
(	N
e.g.	N
in	N
a	N
spin	N
loop	N
)	N
,	N
since	N
your	N
browser	N
is	N
almost	N
certainly	N
executing	N
your	N
JavaScript	N
in	N
a	N
single-threaded	N
environment	N
.	N
Here	N
are	N
a	N
couple	N
of	N
other	N
SO	N
questions	N
that	N
deal	N
with	N
threads	N
in	N
JavaScript	N
:	N
http://stackoverflow.com/questions/30036/javascript-and-threads	N
http://stackoverflow.com/questions/39879/why-doesnt-javascript-support-multithreading	N
And	N
this	N
question	N
may	N
also	N
be	N
helpful	N
:	N
http://stackoverflow.com/questions/797115/javascript-settimeout-without-putting-code-into-a-string	N

(	N
+1	N
)	N
look	N
at	N
setTimeout()	N
and	N
setInterval()	N
in	N
javascript	N

To	N
promote	N
good	N
coding	N
practices	N
,	N
it	N
might	N
be	N
best	N
to	N
insert	N
a	N
semi-colon	N
after	N
"	N
500	N
"	N
and	N
initialise	N
"	N
millisecondsToWait	N
"	N
in	N
the	N
code	N
sample	N
(	N
e.g.	N
by	N
preceding	N
it	N
with	N
"	N
var	N
")	N
(	N
this	N
way	N
,	N
if	N
someone	N
copies	N
and	N
pastes	N
the	N
sample	N
,	N
they	N
won't	N
end	N
up	N
with	N
an	N
implied	N
global	N
)	N
.	N

Good	N
catch	N
,	N
Steve	N
.	N
I've	N
edited	N
my	N
answer	N
to	N
reflect	N
your	N
comments	N
.	N

ES6	N
will	N
have	N
a	N
new	N
operator	N
`yield`	N
which	N
can	N
be	N
used	N
to	N
"	N
simulate	N
"	N
threads	N
.	N
See	N
http://taskjs.org	N
for	N
an	N
example	N
library	N
.	N

Or	N
maybe	N
you	N
can	N
use	N
the	N
setInterval	N
function	N
,	N
to	N
call	N
a	N
particular	N
function	N
,	N
after	N
the	N
specified	N
number	N
of	N
milliseconds	N
.	N
Just	N
do	N
a	N
google	N
for	N
the	N
setInterval	N
prototype.I	N
don't	N
quite	N
recollect	N
it	N
.	N

Try	N
with	N
this	N
code	N
.	N
I	N
hope	N
it's	N
useful	N
for	N
you	N
.	N

does	N
exactly	N
what	N
it	N
is	N
supposed	N
to	N

This	N
doesn't	N
put	N
the	N
thread	N
to	N
sleep	N
,	N
it	N
just	N
consumes	N
the	N
thread	N
with	N
wasteful	N
calculation	N
that	N
is	N
likely	N
to	N
block	N
the	N
UI	N
.	N
Not	N
recommended	N
.	N

That's	N
a	N
"	N
busy	N
wait	N
"	N
a.k.a	N
you	N
are	N
"	N
burning	N
the	N
thread	N
"	N

For	N
my	N
unit	N
testing	N
purposes	N
its	N
useful	N
.	N
Surely	N
,	N
not	N
for	N
production	N
.	N

This	N
eventually	N
helped	N
me	N
:	N

setTimeout	N
was	N
already	N
mentioned	N
a	N
looong	N
time	N
ago	N
.	N
and	N
the	N
rest	N
of	N
the	N
code	N
has	N
nothing	N
to	N
do	N
with	N
the	N
question	N
.	N

love	V
you	N
baby	N

@ciaranyree	N
it	N
was	N
on	N
football	N
wives	N
,	N
one	N
of	N
the	N
players	N
and	N
his	N
wife	N
own	N
smash	N
burger	N

RT	N
@TheRealQuailman	N
:	N
Currently	N
laughing	N
at	N
Laker	N
haters	N
.	N

RT	N
@HollywoodOompa	N
:	N
Sat	N
November	N
6	N
ill	N
be	N
at	N
Nashville	N
center	N
stage	N
for	N
the	N
ice	N
kream	N
party	N
for	N

