How	N
can	N
you	N
run	N
Javascript	N
using	N
Rhino	N
for	N
Java	N
in	N
a	N
sandbox	N
?	N

Part	N
of	N
our	N
java	N
application	N
needs	N
to	N
run	N
javascript	N
that	N
is	N
written	N
by	N
non-developers	N
.	N
These	N
non-developers	N
are	N
using	N
javascript	N
for	N
data	N
formatting	N
.	N
(	N
Simple	N
logic	N
and	N
string	N
concatenation	N
mostly	N
)	N
.	N
My	N
question	N
is	N
how	N
can	N
I	N
setup	N
the	N
execution	N
of	N
these	N
scripts	N
to	N
make	N
sure	N
scripting	N
errors	N
don't	N
have	N
a	N
major	N
negative	N
impact	N
on	N
the	N
rest	N
of	N
the	N
application	N
.	N
Need	N
to	N
guard	N
against	N
infinite	N
loops	N
Guard	N
against	N
spawning	N
new	N
threads	N
.	N
Limit	N
access	N
to	N
services	N
and	N
environment	N
File	N
system	N
(	N
Example	N
:	N
If	N
a	N
disgruntled	N
script	N
writer	N
decided	N
to	N
delete	N
files	N
)	N
Database	N
(	N
Same	N
thing	N
delete	N
database	N
records	N
)	N
Basically	N
I	N
need	N
to	N
setup	N
the	N
javascript	N
scope	N
to	N
only	N
include	N
exactly	N
what	N
they	N
need	N
and	N
no	N
more	N
.	N

Do	N
you	N
mean	N
to	N
say	N
(	N
Javascript	N
using	N
Rhino	N
)	N
for	N
(	N
Java	N
in	N
a	N
sandbox	N
)	N
,	N
or	N
(	N
Javascript	N
using	N
(	N
Rhino	N
for	N
Java	N
))	N
(	N
in	N
a	N
sandbox	N
)	N
?	N

Javascript	N
is	N
single-threaded	N
and	N
can't	N
access	N
the	N
filesystem	N
,	N
so	N
I	N
don't	N
think	N
you	N
have	N
to	N
worry	N
about	N
those	N
.	N
I'm	N
not	N
sure	N
if	N
there's	N
a	N
way	N
to	N
set	N
a	N
timeout	N
to	N
guard	N
against	N
infinite	N
loops	N
,	N
but	N
you	N
could	N
always	N
spawn	N
a	N
(	N
Java	N
)	N
thread	N
that	N
executes	N
the	N
script	N
,	N
and	N
then	N
kill	N
the	N
thread	N
after	N
so	N
much	N
time	N
.	N

Rhino	N
has	N
a	N
threading	N
library	N
available	N
to	N
it	N
(	N
java.lang.Thread	N
!	N
)	N
,	N
and	N
can	N
access	N
the	N
file	N
system	N
.	N

To	N
guard	N
against	N
infinite	N
loops	N
,	N
you'd	N
need	N
to	N
put	N
it	N
in	N
a	N
separate	N
process	N
so	N
that	N
it	N
could	N
be	N
killed	N
.	N
To	N
guard	N
against	N
creating	N
threads	N
,	N
you'd	N
need	N
to	N
extend	N
SecurityManager	N
(	N
the	N
default	N
implementation	N
allows	N
untrusted	N
code	N
to	N
access	N
non-root	N
thread	N
groups	N
)	N
.	N
Java	N
security	N
does	N
allow	N
you	N
to	N
prevent	N
access	N
to	N
the	N
file	N
system	N
.	N
For	N
database	N
restrictions	N
,	N
you	N
might	N
be	N
able	N
to	N
use	N
the	N
standard	N
SQL	N
user	N
security	N
,	N
but	N
that	N
is	N
quite	N
weak	N
.	N
Otherwise	N
,	N
you	N
need	N
to	N
provide	N
an	N
API	N
that	N
enforces	N
your	N
restrictions	N
.	N
Edit	N
:	N
I	N
should	N
point	N
out	N
that	N
the	N
version	N
of	N
Rhino	N
provided	N
with	N
JDK6	N
has	N
had	N
security	N
work	N
done	N
on	N
it	N
,	N
but	N
doesn't	N
include	N
the	N
compiler	N
.	N

To	N
guard	N
against	N
infinite	N
loops	N
,	N
you	N
can	N
observe	N
the	N
instruction	N
count	N
as	N
the	N
script	N
runs	N
(	N
this	N
works	N
only	N
with	N
interpreted	N
scripts	N
,	N
not	N
with	N
compiled	N
ones	N
)	N
.	N
There	N
is	N
this	N
example	N
in	N
the	N
Rhino	N
JavaDocs	N
to	N
prevent	N
a	N
script	N
from	N
running	N
for	N
more	N
than	N
ten	N
seconds	N
:	N

To	N
block	N
Java	N
class	N
and	N
method	N
access	N
have	N
a	N
look	N
at	N
...	N
http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java	N
/	N

I	N
just	N
ran	N
across	N
this	N
blog	N
post	N
that	N
seems	N
to	N
be	N
useful	N
for	N
sandboxing	N
more	N
or	N
less	N
anything	N
(	N
not	N
just	N
Rhino	N
):	N
http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html	N

