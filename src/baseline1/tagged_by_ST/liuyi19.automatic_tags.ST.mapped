md5_N hash_V for_P password_N string_N in_P GWT_N /_: GWT-Ext_N ?_.
I_O am_V currently_R trying_V to_P modify_V an_D existing_V GWT-Ext_N application_N ,_, that_D is_V using_V plain_A text_N passwords_N in_P its_D MySql_^ database_N ._. My_D plan_N was_V to_P use_V md5_N hashes_N ,_, as_P the_D existing_V passwords_N can_V be_V easily_R altered_V with_P the_D MySql_N function_N and_& I_O was_V expecting_V to_P find_V an_D easy_A solution_N for_P the_D GWT-Ext_N side_N as_R well_R ._. But_& as_P I_O found_V out_R ,_, java.security_N is_V not_R supported_V by_P GWT_N and_& there_X doesn't_N seem_V to_P be_V any_D other_A implementation_N that_D can_V be_V used_V to_P change_V the_D password_N string_N to_P a_D md5_N hash_N on_P client_N side_N ._. Only_R "_`` solution_N "_'' I_O found_V so_R far_R ,_, is_V to_P re_R implement_V a_D md5_N method_N via_P JSNI_N as_P described_V here_R :_: http://groups.google.com/group/Google-Web-Toolkit/browse_thread/thread/ad09475a9944c9f8_N There_X is_V an_D existing_V user_N extension_N for_P Ext-JS_N ,_, but_& I_O couldn't_V find_V anything_N for_P GWT-Ext_N :_: http://extjs.com/forum/showthread.php?p=133516_^ Does_^ anybody_N know_V a_D more_R elegant_A /_: simple_A way_N to_P solve_V this_D problem_N ?_. Maybe_R I_O should_V use_V something_N else_R instead_R of_P md5_N to_P make_V sure_A the_D passwords_N are_V encrypted_V ?_. Cheers_^ Frank_^
Personally_R ,_, I_O would_V say_V you're_N doing_V it_O wrong_A ._. I_O wouldn't_V hash_V a_D password_N on_P the_D client_N side_N (_N which_D is_V what_O GWT_^ is_V )_^ ._. If_P you_O hash_V your_D password_N ,_, you_O will_V undoubtedly_R want_V to_P salt_N it_O ,_, otherwise_R you_O will_V be_V susceptible_A to_P rainbow_N attacks_N ._. If_P you_O hash_V +_& salt_N it_O on_P the_D client_N side_N ,_, your_D salt_N will_V be_V accessible_A to_P your_D users_N ._. If_P I_O were_V you_O ,_, I_O would_V hash_V +_& salt_N your_D password_N on_P the_D server_N side_N ._. This_D will_V allow_V you_O to_P use_V your_D standard_A Java_^ code_N to_P perform_V your_D MD5_N hash_N ._. My_D 2_$ cents_N ._. -JP_N
Its_D not_R a_D bad_A scheme_N if_P he_O does_V something_N like_P cram-md5_N on_P the_D client_N side_N ,_, where_R the_D client_N computes_V a_D hmac_G (_G md5_N hash_N plus_& a_D nonce_A salt_N )_N and_& sends_V it_O to_P the_D server_N ._. The_D down_A side_N is_V that_P the_D server_N needs_V clear_A text_N password_N to_P check_V the_D hmac_N ._.
good_A point_N about_P the_D rainbow_N attacks_N ,_, didn't_N knew_V about_P this_D before_P ._. I_O also_R solved_V it_O by_P doing_V the_D encryption_N on_P the_D server_N side_N ,_, but_& the_D idea_N was_V ,_, that_P I_O wanted_V to_P encrypt_V the_D password_N ,_, before_P sending_V it_O to_P the_D server_N ,_, as_P we_O currently_R only_R use_V http_N and_& no_D https_N ._.
GWT_N is_V client-side_A and_& server_N side_N ._. Other_A than_P that_D ,_, the_D post_N is_V good_A advice_N ._. Don't_N hash_V it_O on_P the_D client_N side_N ._. Have_V a_D look_N at_P http://www.owasp.org/index.php/Hashing_Java_N ._.
Another_D idea_N that_D may_V fit_V your_D need_N is_V something_N called_V zero_$ knowledge_N auth_N ._. (_G Ie_G ._. the_D server_N never_R needs_V to_P know_V the_D user's_A plain_A text_N password_N ._. )_N Basically_R ,_, when_R setting_V the_D initial_A password_N ,_, the_D client_N hashes_V the_D user's_A password_N N_N times_N (_V where_R N_N is_V a_D largish_A number_N like_P 1000_$ )_N ,_, and_& then_R sends_V that_P final_A hash_N to_P the_D server_N along_P with_P N_N ._. The_D server_N stores_V the_D hash_N and_& N_N ._. Later_R ,_, when_R the_D user_N wants_V to_P authenticate_V ,_, the_D server_N tells_V the_D client_N N-1_N ,_, and_& the_D client_N hashes_V the_D password_N the_D user_N types_N N-1_N times_N and_& sends_V that_P to_P the_D server_N ._. The_D server_N does_V 1_$ more_A hash_N on_P the_D received_A hash_N ,_, and_& (_N hopefully_R )_^ gets_V the_D stored_V hash_N ._. The_D server_N then_R stores_V the_D N-1_N hash_N and_& N-1_N number_N ._. Each_D time_N the_D user_N authenticates_V ,_, the_D server_N decrements_V the_D stored_V N_N and_& saves_V the_D previous_A hash_N ._. When_R N_N gets_V down_R to_P 0_$ ,_, the_D user_N must_V choose_V and_& set_V a_D new_A password_N ._. The_D server_N must_V ensure_V that_P it_O never_R asks_V for_P the_D same_A iteration_N ,_, otherwise_R it_O is_V vulnerable_A to_P a_D replay_N ._. You_O can't_V really_R enforce_V that_D condition_N from_P the_D client_N side_N because_P the_D client_N (_N especially_R a_D browser_N )_G can't_G reliably_R keep_V track_N of_P the_D last_A N_N ._.
Very_R interesting_A idea_N ,_, and_& never_R thought_V of_P that_D before_P ._. Doesn't_N really_R fit_V in_P the_D current_A solution_N ,_, but_& I_O will_V keep_V it_O in_P mind_N for_P future_A reference_N ,_, thanks_N :-)_N
Interesting_A idea_N so_P I_O spent_V some_D time_N thinking_V about_P it_O ,_, but_& it_O is_V vulnerable_A to_P a_D man-in-the-middle_A attack_N ._. On_P an_D authentication_N request_N ,_, the_D server_N sends_V some_D number_N M_N ._. The_D attacker_N sends_V (_$ M-1_N )_N to_P the_D client_N ,_, and_& receives_V hash_G (_G M-1_N )_N back_R ._. The_D attacker_N tries_V to_P authenticate_V again_R ,_, receives_V challenge_N (_N M-1_N )_N from_P the_D server_N and_& responds_V with_P hash_G (_G M-1_N )_N ._. The_D attacker_N is_V now_R authenticated_V ._.
yes_R ,_, that_D does_V sound_V like_P an_D issue_N ._. My_D first_A thought_N would_V be_V to_P require_V the_D server_N to_P not_R reuse_V M_N after_P issuing_V it_O during_P a_D challenge_N to_P the_D client_N ._. However_R ,_, the_D larger_A issue_N remains_V that_P Mallory_^ could_V tell_V the_D client_N M-100_N ,_, collect_V the_D hash_G (_G M-100_N )_N from_P the_D client_N ,_, and_& then_R login_V up_P to_P 100_$ times_N with_P the_D intercepted_V hash_N ._. I'll_N have_V to_P go_V see_V if_P the_D project_N that_P I_O first_R encountered_V this_D in_P found_V the_D same_A issues_N and_& dealt_V with_P it_O or_& abandoned_A zero_N knowledge_N auth_N ._.
I_O think_V you're_N always_R going_V to_P be_V vulnerable_A to_P a_D man_N in_P the_D middle_A attack_N ._. Keyloggers_^ too_R ._. Also_R drunken_A confessions_N of_P passwords_N ._. We_O can_V only_R raise_V the_D bar_N so_R far_R with_P reasonable_A coding_N efforts_N ._.
You_O can_V use_V gwt-crypto_A to_P generate_V SHA-1_N hashes_V on_P the_D client_N side_N using_V :_:
You_O should_V never_R use_V an_D md5_N or_& other_A hash_A functions_N for_P password_N encryption_N ._. See_^ http://codahale.com/how-to-safely-store-a-password_^ /_:
